
can_a121_shoot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014440  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006270  080145e0  080145e0  000155e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a850  0801a850  0001c388  2**0
                  CONTENTS
  4 .ARM          00000008  0801a850  0801a850  0001b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a858  0801a858  0001c388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a858  0801a858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a85c  0801a85c  0001b85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000388  20000000  0801a860  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000388  0801abe8  0001c388  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0801abe8  0001c628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c388  2**0
                  CONTENTS, READONLY
 12 .debug_info   000524f4  00000000  00000000  0001c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b5e8  00000000  00000000  0006e8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  00079e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b08  00000000  00000000  0007bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e07  00000000  00000000  0007cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a6a7  00000000  00000000  000938b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e8b4  00000000  00000000  000bdf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000008f  00000000  00000000  0015c812  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f1c  00000000  00000000  0015c8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001657c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00026e48  00000000  00000000  0016582b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00005f58  00000000  00000000  0018c673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000388 	.word	0x20000388
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080145c8 	.word	0x080145c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000038c 	.word	0x2000038c
 80001dc:	080145c8 	.word	0x080145c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 baf0 	b.w	8001290 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f98c 	bl	8000fd4 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__mulsc3>:
 8000cc8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000ccc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000cd0:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000cd4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000cd8:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000cdc:	eef4 7a67 	vcmp.f32	s15, s15
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000ce8:	d604      	bvs.n	8000cf4 <__mulsc3+0x2c>
 8000cea:	eeb0 0a67 	vmov.f32	s0, s15
 8000cee:	eef0 0a47 	vmov.f32	s1, s14
 8000cf2:	4770      	bx	lr
 8000cf4:	eeb4 7a47 	vcmp.f32	s14, s14
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	d7f5      	bvc.n	8000cea <__mulsc3+0x22>
 8000cfe:	ed9f 4aa1 	vldr	s8, [pc, #644]	@ 8000f84 <__mulsc3+0x2bc>
 8000d02:	eef0 4ac0 	vabs.f32	s9, s0
 8000d06:	eef4 4a44 	vcmp.f32	s9, s8
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	eef0 3ae0 	vabs.f32	s7, s1
 8000d12:	f300 80a0 	bgt.w	8000e56 <__mulsc3+0x18e>
 8000d16:	eef4 3a44 	vcmp.f32	s7, s8
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	f300 809a 	bgt.w	8000e56 <__mulsc3+0x18e>
 8000d22:	2300      	movs	r3, #0
 8000d24:	eddf 4a97 	vldr	s9, [pc, #604]	@ 8000f84 <__mulsc3+0x2bc>
 8000d28:	eeb0 4ac1 	vabs.f32	s8, s2
 8000d2c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	eef0 3ae1 	vabs.f32	s7, s3
 8000d38:	dc48      	bgt.n	8000dcc <__mulsc3+0x104>
 8000d3a:	eef4 3a64 	vcmp.f32	s7, s9
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	dc43      	bgt.n	8000dcc <__mulsc3+0x104>
 8000d44:	bb9b      	cbnz	r3, 8000dae <__mulsc3+0xe6>
 8000d46:	eef0 6ae6 	vabs.f32	s13, s13
 8000d4a:	eef4 6a64 	vcmp.f32	s13, s9
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	dc14      	bgt.n	8000d7e <__mulsc3+0xb6>
 8000d54:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d58:	eeb4 6a64 	vcmp.f32	s12, s9
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	dc0d      	bgt.n	8000d7e <__mulsc3+0xb6>
 8000d62:	eeb0 5ac5 	vabs.f32	s10, s10
 8000d66:	eeb4 5a64 	vcmp.f32	s10, s9
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dc06      	bgt.n	8000d7e <__mulsc3+0xb6>
 8000d70:	eef0 5ae5 	vabs.f32	s11, s11
 8000d74:	eef4 5a64 	vcmp.f32	s11, s9
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	ddb5      	ble.n	8000cea <__mulsc3+0x22>
 8000d7e:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d86:	f180 80f0 	bvs.w	8000f6a <__mulsc3+0x2a2>
 8000d8a:	eef4 0a60 	vcmp.f32	s1, s1
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	f180 80dd 	bvs.w	8000f50 <__mulsc3+0x288>
 8000d96:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	f180 80ca 	bvs.w	8000f36 <__mulsc3+0x26e>
 8000da2:	eef4 1a61 	vcmp.f32	s3, s3
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	f180 80b7 	bvs.w	8000f1c <__mulsc3+0x254>
 8000dae:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000db2:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000db6:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000dba:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000dbe:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8000f88 <__mulsc3+0x2c0>
 8000dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc6:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000dca:	e78e      	b.n	8000cea <__mulsc3+0x22>
 8000dcc:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000f84 <__mulsc3+0x2bc>
 8000dd0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000f84 <__mulsc3+0x2bc>
 8000dd4:	eeb4 4a67 	vcmp.f32	s8, s15
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	bfcc      	ite	gt
 8000dde:	2301      	movgt	r3, #1
 8000de0:	2300      	movle	r3, #0
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	ee11 3a10 	vmov	r3, s2
 8000dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	eef0 7ae7 	vabs.f32	s15, s15
 8000df4:	eef4 3a47 	vcmp.f32	s7, s14
 8000df8:	bfb8      	it	lt
 8000dfa:	eef1 7a67 	vneglt.f32	s15, s15
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	bfcc      	ite	gt
 8000e04:	2301      	movgt	r3, #1
 8000e06:	2300      	movle	r3, #0
 8000e08:	eeb0 1a67 	vmov.f32	s2, s15
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	ee11 3a90 	vmov	r3, s3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	eef0 7ae7 	vabs.f32	s15, s15
 8000e1e:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e22:	bfb8      	it	lt
 8000e24:	eef1 7a67 	vneglt.f32	s15, s15
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	eef0 1a67 	vmov.f32	s3, s15
 8000e30:	d65a      	bvs.n	8000ee8 <__mulsc3+0x220>
 8000e32:	eef4 0a60 	vcmp.f32	s1, s1
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	d7b8      	bvc.n	8000dae <__mulsc3+0xe6>
 8000e3c:	ee10 3a90 	vmov	r3, s1
 8000e40:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000f8c <__mulsc3+0x2c4>
 8000e44:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8000f90 <__mulsc3+0x2c8>
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	bfb4      	ite	lt
 8000e4c:	eef0 0a67 	vmovlt.f32	s1, s15
 8000e50:	eef0 0a47 	vmovge.f32	s1, s14
 8000e54:	e7ab      	b.n	8000dae <__mulsc3+0xe6>
 8000e56:	ed9f 4a4b 	vldr	s8, [pc, #300]	@ 8000f84 <__mulsc3+0x2bc>
 8000e5a:	eef4 4a44 	vcmp.f32	s9, s8
 8000e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e62:	bfcc      	ite	gt
 8000e64:	2301      	movgt	r3, #1
 8000e66:	2300      	movle	r3, #0
 8000e68:	ee04 3a90 	vmov	s9, r3
 8000e6c:	ed9f 4a45 	vldr	s8, [pc, #276]	@ 8000f84 <__mulsc3+0x2bc>
 8000e70:	ee10 3a10 	vmov	r3, s0
 8000e74:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	eef0 4ae4 	vabs.f32	s9, s9
 8000e7e:	eef4 3a44 	vcmp.f32	s7, s8
 8000e82:	bfb8      	it	lt
 8000e84:	eef1 4a64 	vneglt.f32	s9, s9
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	bfcc      	ite	gt
 8000e8e:	2301      	movgt	r3, #1
 8000e90:	2300      	movle	r3, #0
 8000e92:	eeb0 0a64 	vmov.f32	s0, s9
 8000e96:	ee04 3a90 	vmov	s9, r3
 8000e9a:	ee10 3a90 	vmov	r3, s1
 8000e9e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	eef0 4ae4 	vabs.f32	s9, s9
 8000ea8:	eeb4 1a41 	vcmp.f32	s2, s2
 8000eac:	bfb8      	it	lt
 8000eae:	eef1 4a64 	vneglt.f32	s9, s9
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	eef0 0a64 	vmov.f32	s1, s9
 8000eba:	d622      	bvs.n	8000f02 <__mulsc3+0x23a>
 8000ebc:	eef4 1a61 	vcmp.f32	s3, s3
 8000ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec4:	bf78      	it	vc
 8000ec6:	2301      	movvc	r3, #1
 8000ec8:	f5ff af2c 	bvc.w	8000d24 <__mulsc3+0x5c>
 8000ecc:	ee11 3a90 	vmov	r3, s3
 8000ed0:	ed9f 4a2e 	vldr	s8, [pc, #184]	@ 8000f8c <__mulsc3+0x2c4>
 8000ed4:	eddf 4a2e 	vldr	s9, [pc, #184]	@ 8000f90 <__mulsc3+0x2c8>
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bfb4      	ite	lt
 8000edc:	eef0 1a64 	vmovlt.f32	s3, s9
 8000ee0:	eef0 1a44 	vmovge.f32	s3, s8
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e71d      	b.n	8000d24 <__mulsc3+0x5c>
 8000ee8:	ee10 3a10 	vmov	r3, s0
 8000eec:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000f8c <__mulsc3+0x2c4>
 8000ef0:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000f90 <__mulsc3+0x2c8>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bfb4      	ite	lt
 8000ef8:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000efc:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f00:	e797      	b.n	8000e32 <__mulsc3+0x16a>
 8000f02:	ee11 3a10 	vmov	r3, s2
 8000f06:	ed9f 4a21 	vldr	s8, [pc, #132]	@ 8000f8c <__mulsc3+0x2c4>
 8000f0a:	eddf 4a21 	vldr	s9, [pc, #132]	@ 8000f90 <__mulsc3+0x2c8>
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bfb4      	ite	lt
 8000f12:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000f16:	eeb0 1a44 	vmovge.f32	s2, s8
 8000f1a:	e7cf      	b.n	8000ebc <__mulsc3+0x1f4>
 8000f1c:	ee11 3a90 	vmov	r3, s3
 8000f20:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f8c <__mulsc3+0x2c4>
 8000f24:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000f90 <__mulsc3+0x2c8>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	bfb4      	ite	lt
 8000f2c:	eef0 1a67 	vmovlt.f32	s3, s15
 8000f30:	eef0 1a47 	vmovge.f32	s3, s14
 8000f34:	e73b      	b.n	8000dae <__mulsc3+0xe6>
 8000f36:	ee11 3a10 	vmov	r3, s2
 8000f3a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000f8c <__mulsc3+0x2c4>
 8000f3e:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8000f90 <__mulsc3+0x2c8>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bfb4      	ite	lt
 8000f46:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000f4a:	eeb0 1a47 	vmovge.f32	s2, s14
 8000f4e:	e728      	b.n	8000da2 <__mulsc3+0xda>
 8000f50:	ee10 3a90 	vmov	r3, s1
 8000f54:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000f8c <__mulsc3+0x2c4>
 8000f58:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000f90 <__mulsc3+0x2c8>
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bfb4      	ite	lt
 8000f60:	eef0 0a67 	vmovlt.f32	s1, s15
 8000f64:	eef0 0a47 	vmovge.f32	s1, s14
 8000f68:	e715      	b.n	8000d96 <__mulsc3+0xce>
 8000f6a:	ee10 3a10 	vmov	r3, s0
 8000f6e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f8c <__mulsc3+0x2c4>
 8000f72:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8000f90 <__mulsc3+0x2c8>
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bfb4      	ite	lt
 8000f7a:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f7e:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f82:	e702      	b.n	8000d8a <__mulsc3+0xc2>
 8000f84:	7f7fffff 	.word	0x7f7fffff
 8000f88:	7f800000 	.word	0x7f800000
 8000f8c:	00000000 	.word	0x00000000
 8000f90:	80000000 	.word	0x80000000

08000f94 <__aeabi_f2ulz>:
 8000f94:	b5d0      	push	{r4, r6, r7, lr}
 8000f96:	f7ff fadf 	bl	8000558 <__aeabi_f2d>
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <__aeabi_f2ulz+0x38>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	460f      	mov	r7, r1
 8000fa2:	f7ff fb31 	bl	8000608 <__aeabi_dmul>
 8000fa6:	f7ff fe07 	bl	8000bb8 <__aeabi_d2uiz>
 8000faa:	4604      	mov	r4, r0
 8000fac:	f7ff fab2 	bl	8000514 <__aeabi_ui2d>
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <__aeabi_f2ulz+0x3c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f7ff fb28 	bl	8000608 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	f7ff f96a 	bl	8000298 <__aeabi_dsub>
 8000fc4:	f7ff fdf8 	bl	8000bb8 <__aeabi_d2uiz>
 8000fc8:	4621      	mov	r1, r4
 8000fca:	bdd0      	pop	{r4, r6, r7, pc}
 8000fcc:	3df00000 	.word	0x3df00000
 8000fd0:	41f00000 	.word	0x41f00000

08000fd4 <__udivmoddi4>:
 8000fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	9d08      	ldr	r5, [sp, #32]
 8000fda:	460c      	mov	r4, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d14e      	bne.n	800107e <__udivmoddi4+0xaa>
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	458c      	cmp	ip, r1
 8000fe4:	4686      	mov	lr, r0
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	d962      	bls.n	80010b2 <__udivmoddi4+0xde>
 8000fec:	b14a      	cbz	r2, 8001002 <__udivmoddi4+0x2e>
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	4091      	lsls	r1, r2
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	fa00 fe02 	lsl.w	lr, r0, r2
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fa1f f68c 	uxth.w	r6, ip
 800100a:	fbb1 f4f7 	udiv	r4, r1, r7
 800100e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001012:	fb07 1114 	mls	r1, r7, r4, r1
 8001016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800101a:	fb04 f106 	mul.w	r1, r4, r6
 800101e:	4299      	cmp	r1, r3
 8001020:	d90a      	bls.n	8001038 <__udivmoddi4+0x64>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f104 30ff 	add.w	r0, r4, #4294967295
 800102a:	f080 8112 	bcs.w	8001252 <__udivmoddi4+0x27e>
 800102e:	4299      	cmp	r1, r3
 8001030:	f240 810f 	bls.w	8001252 <__udivmoddi4+0x27e>
 8001034:	3c02      	subs	r4, #2
 8001036:	4463      	add	r3, ip
 8001038:	1a59      	subs	r1, r3, r1
 800103a:	fa1f f38e 	uxth.w	r3, lr
 800103e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001042:	fb07 1110 	mls	r1, r7, r0, r1
 8001046:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104a:	fb00 f606 	mul.w	r6, r0, r6
 800104e:	429e      	cmp	r6, r3
 8001050:	d90a      	bls.n	8001068 <__udivmoddi4+0x94>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 31ff 	add.w	r1, r0, #4294967295
 800105a:	f080 80fc 	bcs.w	8001256 <__udivmoddi4+0x282>
 800105e:	429e      	cmp	r6, r3
 8001060:	f240 80f9 	bls.w	8001256 <__udivmoddi4+0x282>
 8001064:	4463      	add	r3, ip
 8001066:	3802      	subs	r0, #2
 8001068:	1b9b      	subs	r3, r3, r6
 800106a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800106e:	2100      	movs	r1, #0
 8001070:	b11d      	cbz	r5, 800107a <__udivmoddi4+0xa6>
 8001072:	40d3      	lsrs	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	e9c5 3200 	strd	r3, r2, [r5]
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d905      	bls.n	800108e <__udivmoddi4+0xba>
 8001082:	b10d      	cbz	r5, 8001088 <__udivmoddi4+0xb4>
 8001084:	e9c5 0100 	strd	r0, r1, [r5]
 8001088:	2100      	movs	r1, #0
 800108a:	4608      	mov	r0, r1
 800108c:	e7f5      	b.n	800107a <__udivmoddi4+0xa6>
 800108e:	fab3 f183 	clz	r1, r3
 8001092:	2900      	cmp	r1, #0
 8001094:	d146      	bne.n	8001124 <__udivmoddi4+0x150>
 8001096:	42a3      	cmp	r3, r4
 8001098:	d302      	bcc.n	80010a0 <__udivmoddi4+0xcc>
 800109a:	4290      	cmp	r0, r2
 800109c:	f0c0 80f0 	bcc.w	8001280 <__udivmoddi4+0x2ac>
 80010a0:	1a86      	subs	r6, r0, r2
 80010a2:	eb64 0303 	sbc.w	r3, r4, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d0e6      	beq.n	800107a <__udivmoddi4+0xa6>
 80010ac:	e9c5 6300 	strd	r6, r3, [r5]
 80010b0:	e7e3      	b.n	800107a <__udivmoddi4+0xa6>
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	f040 8090 	bne.w	80011d8 <__udivmoddi4+0x204>
 80010b8:	eba1 040c 	sub.w	r4, r1, ip
 80010bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010c0:	fa1f f78c 	uxth.w	r7, ip
 80010c4:	2101      	movs	r1, #1
 80010c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80010ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010ce:	fb08 4416 	mls	r4, r8, r6, r4
 80010d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010d6:	fb07 f006 	mul.w	r0, r7, r6
 80010da:	4298      	cmp	r0, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x11c>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80010e6:	d202      	bcs.n	80010ee <__udivmoddi4+0x11a>
 80010e8:	4298      	cmp	r0, r3
 80010ea:	f200 80cd 	bhi.w	8001288 <__udivmoddi4+0x2b4>
 80010ee:	4626      	mov	r6, r4
 80010f0:	1a1c      	subs	r4, r3, r0
 80010f2:	fa1f f38e 	uxth.w	r3, lr
 80010f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80010fa:	fb08 4410 	mls	r4, r8, r0, r4
 80010fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001102:	fb00 f707 	mul.w	r7, r0, r7
 8001106:	429f      	cmp	r7, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x148>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001112:	d202      	bcs.n	800111a <__udivmoddi4+0x146>
 8001114:	429f      	cmp	r7, r3
 8001116:	f200 80b0 	bhi.w	800127a <__udivmoddi4+0x2a6>
 800111a:	4620      	mov	r0, r4
 800111c:	1bdb      	subs	r3, r3, r7
 800111e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001122:	e7a5      	b.n	8001070 <__udivmoddi4+0x9c>
 8001124:	f1c1 0620 	rsb	r6, r1, #32
 8001128:	408b      	lsls	r3, r1
 800112a:	fa22 f706 	lsr.w	r7, r2, r6
 800112e:	431f      	orrs	r7, r3
 8001130:	fa20 fc06 	lsr.w	ip, r0, r6
 8001134:	fa04 f301 	lsl.w	r3, r4, r1
 8001138:	ea43 030c 	orr.w	r3, r3, ip
 800113c:	40f4      	lsrs	r4, r6
 800113e:	fa00 f801 	lsl.w	r8, r0, r1
 8001142:	0c38      	lsrs	r0, r7, #16
 8001144:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001148:	fbb4 fef0 	udiv	lr, r4, r0
 800114c:	fa1f fc87 	uxth.w	ip, r7
 8001150:	fb00 441e 	mls	r4, r0, lr, r4
 8001154:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001158:	fb0e f90c 	mul.w	r9, lr, ip
 800115c:	45a1      	cmp	r9, r4
 800115e:	fa02 f201 	lsl.w	r2, r2, r1
 8001162:	d90a      	bls.n	800117a <__udivmoddi4+0x1a6>
 8001164:	193c      	adds	r4, r7, r4
 8001166:	f10e 3aff 	add.w	sl, lr, #4294967295
 800116a:	f080 8084 	bcs.w	8001276 <__udivmoddi4+0x2a2>
 800116e:	45a1      	cmp	r9, r4
 8001170:	f240 8081 	bls.w	8001276 <__udivmoddi4+0x2a2>
 8001174:	f1ae 0e02 	sub.w	lr, lr, #2
 8001178:	443c      	add	r4, r7
 800117a:	eba4 0409 	sub.w	r4, r4, r9
 800117e:	fa1f f983 	uxth.w	r9, r3
 8001182:	fbb4 f3f0 	udiv	r3, r4, r0
 8001186:	fb00 4413 	mls	r4, r0, r3, r4
 800118a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800118e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001192:	45a4      	cmp	ip, r4
 8001194:	d907      	bls.n	80011a6 <__udivmoddi4+0x1d2>
 8001196:	193c      	adds	r4, r7, r4
 8001198:	f103 30ff 	add.w	r0, r3, #4294967295
 800119c:	d267      	bcs.n	800126e <__udivmoddi4+0x29a>
 800119e:	45a4      	cmp	ip, r4
 80011a0:	d965      	bls.n	800126e <__udivmoddi4+0x29a>
 80011a2:	3b02      	subs	r3, #2
 80011a4:	443c      	add	r4, r7
 80011a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011aa:	fba0 9302 	umull	r9, r3, r0, r2
 80011ae:	eba4 040c 	sub.w	r4, r4, ip
 80011b2:	429c      	cmp	r4, r3
 80011b4:	46ce      	mov	lr, r9
 80011b6:	469c      	mov	ip, r3
 80011b8:	d351      	bcc.n	800125e <__udivmoddi4+0x28a>
 80011ba:	d04e      	beq.n	800125a <__udivmoddi4+0x286>
 80011bc:	b155      	cbz	r5, 80011d4 <__udivmoddi4+0x200>
 80011be:	ebb8 030e 	subs.w	r3, r8, lr
 80011c2:	eb64 040c 	sbc.w	r4, r4, ip
 80011c6:	fa04 f606 	lsl.w	r6, r4, r6
 80011ca:	40cb      	lsrs	r3, r1
 80011cc:	431e      	orrs	r6, r3
 80011ce:	40cc      	lsrs	r4, r1
 80011d0:	e9c5 6400 	strd	r6, r4, [r5]
 80011d4:	2100      	movs	r1, #0
 80011d6:	e750      	b.n	800107a <__udivmoddi4+0xa6>
 80011d8:	f1c2 0320 	rsb	r3, r2, #32
 80011dc:	fa20 f103 	lsr.w	r1, r0, r3
 80011e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e4:	fa24 f303 	lsr.w	r3, r4, r3
 80011e8:	4094      	lsls	r4, r2
 80011ea:	430c      	orrs	r4, r1
 80011ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80011f4:	fa1f f78c 	uxth.w	r7, ip
 80011f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011fc:	fb08 3110 	mls	r1, r8, r0, r3
 8001200:	0c23      	lsrs	r3, r4, #16
 8001202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001206:	fb00 f107 	mul.w	r1, r0, r7
 800120a:	4299      	cmp	r1, r3
 800120c:	d908      	bls.n	8001220 <__udivmoddi4+0x24c>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f100 36ff 	add.w	r6, r0, #4294967295
 8001216:	d22c      	bcs.n	8001272 <__udivmoddi4+0x29e>
 8001218:	4299      	cmp	r1, r3
 800121a:	d92a      	bls.n	8001272 <__udivmoddi4+0x29e>
 800121c:	3802      	subs	r0, #2
 800121e:	4463      	add	r3, ip
 8001220:	1a5b      	subs	r3, r3, r1
 8001222:	b2a4      	uxth	r4, r4
 8001224:	fbb3 f1f8 	udiv	r1, r3, r8
 8001228:	fb08 3311 	mls	r3, r8, r1, r3
 800122c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001230:	fb01 f307 	mul.w	r3, r1, r7
 8001234:	42a3      	cmp	r3, r4
 8001236:	d908      	bls.n	800124a <__udivmoddi4+0x276>
 8001238:	eb1c 0404 	adds.w	r4, ip, r4
 800123c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001240:	d213      	bcs.n	800126a <__udivmoddi4+0x296>
 8001242:	42a3      	cmp	r3, r4
 8001244:	d911      	bls.n	800126a <__udivmoddi4+0x296>
 8001246:	3902      	subs	r1, #2
 8001248:	4464      	add	r4, ip
 800124a:	1ae4      	subs	r4, r4, r3
 800124c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001250:	e739      	b.n	80010c6 <__udivmoddi4+0xf2>
 8001252:	4604      	mov	r4, r0
 8001254:	e6f0      	b.n	8001038 <__udivmoddi4+0x64>
 8001256:	4608      	mov	r0, r1
 8001258:	e706      	b.n	8001068 <__udivmoddi4+0x94>
 800125a:	45c8      	cmp	r8, r9
 800125c:	d2ae      	bcs.n	80011bc <__udivmoddi4+0x1e8>
 800125e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001262:	eb63 0c07 	sbc.w	ip, r3, r7
 8001266:	3801      	subs	r0, #1
 8001268:	e7a8      	b.n	80011bc <__udivmoddi4+0x1e8>
 800126a:	4631      	mov	r1, r6
 800126c:	e7ed      	b.n	800124a <__udivmoddi4+0x276>
 800126e:	4603      	mov	r3, r0
 8001270:	e799      	b.n	80011a6 <__udivmoddi4+0x1d2>
 8001272:	4630      	mov	r0, r6
 8001274:	e7d4      	b.n	8001220 <__udivmoddi4+0x24c>
 8001276:	46d6      	mov	lr, sl
 8001278:	e77f      	b.n	800117a <__udivmoddi4+0x1a6>
 800127a:	4463      	add	r3, ip
 800127c:	3802      	subs	r0, #2
 800127e:	e74d      	b.n	800111c <__udivmoddi4+0x148>
 8001280:	4606      	mov	r6, r0
 8001282:	4623      	mov	r3, r4
 8001284:	4608      	mov	r0, r1
 8001286:	e70f      	b.n	80010a8 <__udivmoddi4+0xd4>
 8001288:	3e02      	subs	r6, #2
 800128a:	4463      	add	r3, ip
 800128c:	e730      	b.n	80010f0 <__udivmoddi4+0x11c>
 800128e:	bf00      	nop

08001290 <__aeabi_idiv0>:
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop

08001294 <disable_interrupts>:
#define SENSOR_COUNT                (1)        /**< @brief The number of sensors available on the board */
#define STM32_SPI_MAX_TRANSFER_SIZE (65535)    /**< @brief The maximum SPI transfer size for the STM32 */


static inline void disable_interrupts(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
	__disable_irq();
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80012aa:	b662      	cpsie	i
}
 80012ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ae:	f3bf 8f6f 	isb	sy
}
 80012b2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <acc_hal_integration_sensor_transfer+0x18>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d901      	bls.n	80012dc <acc_hal_integration_sensor_transfer+0x1c>
	{
		Error_Handler();
 80012d8:	f001 faa8 	bl	800282c <Error_Handler>
	}

	HAL_GPIO_WritePin(SPI_SEL0_GPIO_Port, SPI_SEL0_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2108      	movs	r1, #8
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <acc_hal_integration_sensor_transfer+0x70>)
 80012e2:	f002 f96f 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL1_GPIO_Port, SPI_SEL1_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2110      	movs	r1, #16
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <acc_hal_integration_sensor_transfer+0x70>)
 80012ec:	f002 f96a 	bl	80035c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_SEL2_GPIO_Port, SPI_SEL2_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2120      	movs	r1, #32
 80012f4:	480e      	ldr	r0, [pc, #56]	@ (8001330 <acc_hal_integration_sensor_transfer+0x70>)
 80012f6:	f002 f965 	bl	80035c4 <HAL_GPIO_WritePin>

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 80012fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012fe:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	480a      	ldr	r0, [pc, #40]	@ (8001330 <acc_hal_integration_sensor_transfer+0x70>)
 8001306:	f002 f95d 	bl	80035c4 <HAL_GPIO_WritePin>
		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	b29a      	uxth	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	4806      	ldr	r0, [pc, #24]	@ (8001334 <acc_hal_integration_sensor_transfer+0x74>)
 800131a:	f003 f899 	bl	8004450 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A121_SPI_SS_GPIO_Port, A121_SPI_SS_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2102      	movs	r1, #2
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <acc_hal_integration_sensor_transfer+0x70>)
 8001324:	f002 f94e 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40020400 	.word	0x40020400
 8001334:	200003b4 	.word	0x200003b4

08001338 <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <acc_hal_integration_sensor_supply_on+0x14>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d901      	bls.n	8001350 <acc_hal_integration_sensor_supply_on+0x18>
	{
		Error_Handler();
 800134c:	f001 fa6e 	bl	800282c <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <acc_hal_integration_sensor_supply_off+0x14>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d901      	bls.n	8001370 <acc_hal_integration_sensor_supply_off+0x18>
	{
		Error_Handler();
 800136c:	f001 fa5e 	bl	800282c <Error_Handler>
	}

	// There is no power supply control on the XE121
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <acc_hal_integration_sensor_enable+0x14>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d901      	bls.n	8001390 <acc_hal_integration_sensor_enable+0x18>
	{
		Error_Handler();
 800138c:	f001 fa4e 	bl	800282c <Error_Handler>
	}

	HAL_GPIO_WritePin(SEN_EN1_GPIO_Port, SEN_EN1_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	4805      	ldr	r0, [pc, #20]	@ (80013ac <acc_hal_integration_sensor_enable+0x34>)
 8001396:	f002 f915 	bl	80035c4 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal has time to stabilize
	acc_integration_sleep_us(2000);
 800139a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800139e:	f000 f913 	bl	80015c8 <acc_integration_sleep_us>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020400 	.word	0x40020400

080013b0 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <acc_hal_integration_sensor_disable+0x14>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d901      	bls.n	80013c8 <acc_hal_integration_sensor_disable+0x18>
	{
		Error_Handler();
 80013c4:	f001 fa32 	bl	800282c <Error_Handler>
	}

	HAL_GPIO_WritePin(SEN_EN1_GPIO_Port, SEN_EN1_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2101      	movs	r1, #1
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <acc_hal_integration_sensor_disable+0x34>)
 80013ce:	f002 f8f9 	bl	80035c4 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_us(2000);
 80013d2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013d6:	f000 f8f7 	bl	80015c8 <acc_integration_sleep_us>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020400 	.word	0x40020400

080013e8 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	bool status = false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]

	if ((sensor_id == 0) || (sensor_id > SENSOR_COUNT))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d901      	bls.n	8001406 <acc_hal_integration_wait_for_sensor_interrupt+0x1e>
	{
		Error_Handler();
 8001402:	f001 fa13 	bl	800282c <Error_Handler>
	}

	GPIO_TypeDef   *int_port     = SEN_INT1_GPIO_Port;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <acc_hal_integration_wait_for_sensor_interrupt+0x90>)
 8001408:	613b      	str	r3, [r7, #16]
	uint32_t       int_pin_mask  = SEN_INT1_Pin;
 800140a:	2310      	movs	r3, #16
 800140c:	60fb      	str	r3, [r7, #12]
	const uint32_t wait_begin_ms = HAL_GetTick();
 800140e:	f001 fdfb 	bl	8003008 <HAL_GetTick>
 8001412:	60b8      	str	r0, [r7, #8]

	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8001414:	e00d      	b.n	8001432 <acc_hal_integration_wait_for_sensor_interrupt+0x4a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8001416:	f7ff ff3d 	bl	8001294 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	6938      	ldr	r0, [r7, #16]
 8001422:	f002 f8b7 	bl	8003594 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d000      	beq.n	800142e <acc_hal_integration_wait_for_sensor_interrupt+0x46>
		{
			__WFI();
 800142c:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800142e:	f7ff ff3a 	bl	80012a6 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	6938      	ldr	r0, [r7, #16]
 800143a:	f002 f8ab 	bl	8003594 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	2b01      	cmp	r3, #1
 8001442:	d007      	beq.n	8001454 <acc_hal_integration_wait_for_sensor_interrupt+0x6c>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8001444:	f001 fde0 	bl	8003008 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(int_port, int_pin_mask) != GPIO_PIN_SET) &&
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8e0      	bhi.n	8001416 <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	}

	status = HAL_GPIO_ReadPin(int_port, int_pin_mask) == GPIO_PIN_SET;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	6938      	ldr	r0, [r7, #16]
 800145c:	f002 f89a 	bl	8003594 <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	75fb      	strb	r3, [r7, #23]

	return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40020000 	.word	0x40020000

0800147c <acc_hal_rss_integration_get_implementation>:
	return SENSOR_COUNT;
}


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = NULL,
	};

	return &val;
 8001480:	4b02      	ldr	r3, [pc, #8]	@ (800148c <acc_hal_rss_integration_get_implementation+0x10>)
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	0801499c 	.word	0x0801499c

08001490 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8001490:	b40c      	push	{r2, r3}
 8001492:	b580      	push	{r7, lr}
 8001494:	b0b4      	sub	sp, #208	@ 0xd0
 8001496:	af04      	add	r7, sp, #16
 8001498:	4603      	mov	r3, r0
 800149a:	6039      	str	r1, [r7, #0]
 800149c:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800149e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014a2:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80014a4:	f107 000c 	add.w	r0, r7, #12
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80014ae:	2196      	movs	r1, #150	@ 0x96
 80014b0:	f00f fa28 	bl	8010904 <vsniprintf>
 80014b4:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80014b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80014bc:	2b95      	cmp	r3, #149	@ 0x95
 80014be:	dd0b      	ble.n	80014d8 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80014c0:	232e      	movs	r3, #46	@ 0x2e
 80014c2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80014c6:	232e      	movs	r3, #46	@ 0x2e
 80014c8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 80014cc:	232e      	movs	r3, #46	@ 0x2e
 80014ce:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 80014d8:	f000 f88a 	bl	80015f0 <acc_integration_get_time>
 80014dc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 80014e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80014e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80014e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014ec:	4a2f      	ldr	r2, [pc, #188]	@ (80015ac <acc_integration_log+0x11c>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80014f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80014fc:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <acc_integration_log+0x120>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0b9a      	lsrs	r2, r3, #14
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <acc_integration_log+0x124>)
 8001506:	fba3 1302 	umull	r1, r3, r3, r2
 800150a:	0959      	lsrs	r1, r3, #5
 800150c:	460b      	mov	r3, r1
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	1a5b      	subs	r3, r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800151a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800151e:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <acc_integration_log+0x128>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	099a      	lsrs	r2, r3, #6
 8001526:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <acc_integration_log+0x124>)
 8001528:	fba3 1302 	umull	r1, r3, r3, r2
 800152c:	0959      	lsrs	r1, r3, #5
 800152e:	460b      	mov	r3, r1
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 800153c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <acc_integration_log+0x128>)
 8001542:	fba2 1203 	umull	r1, r2, r2, r3
 8001546:	0992      	lsrs	r2, r2, #6
 8001548:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800154c:	fb01 f202 	mul.w	r2, r1, r2
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d803      	bhi.n	8001564 <acc_integration_log+0xd4>
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <acc_integration_log+0x12c>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	e000      	b.n	8001566 <acc_integration_log+0xd6>
 8001564:	233f      	movs	r3, #63	@ 0x3f
 8001566:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 800156a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	9203      	str	r2, [sp, #12]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	9202      	str	r2, [sp, #8]
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001588:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <acc_integration_log+0x130>)
 800158e:	f00f f8db 	bl	8010748 <iprintf>

	fflush(stdout);
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <acc_integration_log+0x134>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4618      	mov	r0, r3
 800159a:	f00e ffff 	bl	801059c <fflush>

	va_end(ap);
}
 800159e:	bf00      	nop
 80015a0:	37c0      	adds	r7, #192	@ 0xc0
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015a8:	b002      	add	sp, #8
 80015aa:	4770      	bx	lr
 80015ac:	95217cb1 	.word	0x95217cb1
 80015b0:	45e7b273 	.word	0x45e7b273
 80015b4:	88888889 	.word	0x88888889
 80015b8:	10624dd3 	.word	0x10624dd3
 80015bc:	08014604 	.word	0x08014604
 80015c0:	080145e0 	.word	0x080145e0
 80015c4:	200001b8 	.word	0x200001b8

080015c8 <acc_integration_sleep_us>:
	HAL_Delay(time_msec);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	uint32_t time_msec = (time_usec / 1000);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <acc_integration_sleep_us+0x24>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	60fb      	str	r3, [r7, #12]

	HAL_Delay(time_msec);
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f001 fd1f 	bl	8003020 <HAL_Delay>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <acc_integration_get_time>:


uint32_t acc_integration_get_time(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80015f4:	f001 fd08 	bl	8003008 <HAL_GetTick>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}

080015fe <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f00e fa06 	bl	800fa18 <malloc>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	free(ptr);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f00e fa02 	bl	800fa28 <free>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8001646:	2300      	movs	r3, #0
 8001648:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800164a:	2300      	movs	r3, #0
 800164c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 8001652:	2300      	movs	r3, #0
 8001654:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8001656:	2300      	movs	r3, #0
 8001658:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800165a:	2300      	movs	r3, #0
 800165c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8001662:	2300      	movs	r3, #0
 8001664:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8001666:	2308      	movs	r3, #8
 8001668:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800166a:	2300      	movs	r3, #0
 800166c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800166e:	2300      	movs	r3, #0
 8001670:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8001676:	2300      	movs	r3, #0
 8001678:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8001686:	2300      	movs	r3, #0
 8001688:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 8001692:	2300      	movs	r3, #0
 8001694:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80016a6:	2308      	movs	r3, #8
 80016a8:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	72fb      	strb	r3, [r7, #11]

  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80016b2:	f001 f8c1 	bl	8002838 <MCP2515_Initialize>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f083 0301 	eor.w	r3, r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <CANSPI_Initialize+0x9a>
  {
    return false;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e05e      	b.n	8001784 <CANSPI_Initialize+0x158>
  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80016c6:	f001 f8d9 	bl	800287c <MCP2515_SetConfigMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <CANSPI_Initialize+0xae>
  {
    return false;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e054      	b.n	8001784 <CANSPI_Initialize+0x158>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	461a      	mov	r2, r3
 80016de:	2123      	movs	r1, #35	@ 0x23
 80016e0:	2020      	movs	r0, #32
 80016e2:	f001 f951 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80016e6:	463b      	mov	r3, r7
 80016e8:	461a      	mov	r2, r3
 80016ea:	2127      	movs	r1, #39	@ 0x27
 80016ec:	2024      	movs	r0, #36	@ 0x24
 80016ee:	f001 f94b 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	461a      	mov	r2, r3
 80016f8:	2103      	movs	r1, #3
 80016fa:	2000      	movs	r0, #0
 80016fc:	f001 f944 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8001700:	f107 0318 	add.w	r3, r7, #24
 8001704:	461a      	mov	r2, r3
 8001706:	2107      	movs	r1, #7
 8001708:	2004      	movs	r0, #4
 800170a:	f001 f93d 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	461a      	mov	r2, r3
 8001714:	210b      	movs	r1, #11
 8001716:	2008      	movs	r0, #8
 8001718:	f001 f936 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	461a      	mov	r2, r3
 8001722:	2113      	movs	r1, #19
 8001724:	2010      	movs	r0, #16
 8001726:	f001 f92f 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	461a      	mov	r2, r3
 8001730:	2117      	movs	r1, #23
 8001732:	2014      	movs	r0, #20
 8001734:	f001 f928 	bl	8002988 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	461a      	mov	r2, r3
 800173e:	211b      	movs	r1, #27
 8001740:	2018      	movs	r0, #24
 8001742:	f001 f921 	bl	8002988 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8001746:	2104      	movs	r1, #4
 8001748:	2060      	movs	r0, #96	@ 0x60
 800174a:	f001 f8f7 	bl	800293c <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800174e:	2101      	movs	r1, #1
 8001750:	2070      	movs	r0, #112	@ 0x70
 8001752:	f001 f8f3 	bl	800293c <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8001756:	2100      	movs	r1, #0
 8001758:	202a      	movs	r0, #42	@ 0x2a
 800175a:	f001 f8ef 	bl	800293c <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800175e:	21e5      	movs	r1, #229	@ 0xe5
 8001760:	2029      	movs	r0, #41	@ 0x29
 8001762:	f001 f8eb 	bl	800293c <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8001766:	2183      	movs	r1, #131	@ 0x83
 8001768:	2028      	movs	r0, #40	@ 0x28
 800176a:	f001 f8e7 	bl	800293c <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode()) {
 800176e:	f001 f8a3 	bl	80028b8 <MCP2515_SetNormalMode>
 8001772:	4603      	mov	r3, r0
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <CANSPI_Initialize+0x156>
	  return false;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <CANSPI_Initialize+0x158>
  }


  return true;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8001798:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <CANSPI_Transmit+0xe8>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <CANSPI_Transmit+0xe8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80017a4:	4b33      	ldr	r3, [pc, #204]	@ (8001874 <CANSPI_Transmit+0xe8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80017aa:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <CANSPI_Transmit+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80017b0:	f001 f95e 	bl	8002a70 <MCP2515_ReadStatus>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <CANSPI_Transmit+0xec>)
 80017ba:	701a      	strb	r2, [r3, #0]

  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <CANSPI_Transmit+0xec>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6858      	ldr	r0, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <CANSPI_Transmit+0xe8>)
 80017d4:	4619      	mov	r1, r3
 80017d6:	f000 f851 	bl	800187c <convertCANid2Reg>

    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7a1a      	ldrb	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3309      	adds	r3, #9
 80017e2:	4924      	ldr	r1, [pc, #144]	@ (8001874 <CANSPI_Transmit+0xe8>)
 80017e4:	2040      	movs	r0, #64	@ 0x40
 80017e6:	f001 f8fb 	bl	80029e0 <MCP2515_LoadTxSequence>

    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80017ea:	2081      	movs	r0, #129	@ 0x81
 80017ec:	f001 f924 	bl	8002a38 <MCP2515_RequestToSend>

    returnValue = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e038      	b.n	8001868 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <CANSPI_Transmit+0xec>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d115      	bne.n	8001830 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6858      	ldr	r0, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <CANSPI_Transmit+0xe8>)
 800180e:	4619      	mov	r1, r3
 8001810:	f000 f834 	bl	800187c <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7a1a      	ldrb	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3309      	adds	r3, #9
 800181c:	4915      	ldr	r1, [pc, #84]	@ (8001874 <CANSPI_Transmit+0xe8>)
 800181e:	2042      	movs	r0, #66	@ 0x42
 8001820:	f001 f8de 	bl	80029e0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001824:	2082      	movs	r0, #130	@ 0x82
 8001826:	f001 f907 	bl	8002a38 <MCP2515_RequestToSend>

    returnValue = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e01b      	b.n	8001868 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <CANSPI_Transmit+0xec>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d114      	bne.n	8001868 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6858      	ldr	r0, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <CANSPI_Transmit+0xe8>)
 8001848:	4619      	mov	r1, r3
 800184a:	f000 f817 	bl	800187c <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7a1a      	ldrb	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3309      	adds	r3, #9
 8001856:	4907      	ldr	r1, [pc, #28]	@ (8001874 <CANSPI_Transmit+0xe8>)
 8001858:	2044      	movs	r0, #68	@ 0x44
 800185a:	f001 f8c1 	bl	80029e0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800185e:	2084      	movs	r0, #132	@ 0x84
 8001860:	f001 f8ea 	bl	8002a38 <MCP2515_RequestToSend>

    returnValue = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200003a8 	.word	0x200003a8
 8001878:	200003a4 	.word	0x200003a4

0800187c <convertCANid2Reg>:
  return (returnValue);
}

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	460b      	mov	r3, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d12e      	bne.n	80018f2 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f023 031f 	bic.w	r3, r3, #31
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	4413      	add	r3, r2
 80018ce:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	3308      	adds	r3, #8
 80018d4:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	f023 0314 	bic.w	r3, r3, #20
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80018f0:	e013      	b.n	800191a <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	015b      	lsls	r3, r3, #5
 8001902:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	701a      	strb	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <acc_example_detector_distance_with_iq_data_print>:
		acc_processing_result_t *processing_result,
		acc_processing_metadata_t *processing_metadata);

int acc_example_detector_distance_with_iq_data_print(int argc, char *argv[]);

int acc_example_detector_distance_with_iq_data_print(int argc, char *argv[]) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b0d4      	sub	sp, #336	@ 0x150
 800192c:	af00      	add	r7, sp, #0
 800192e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001932:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001936:	6018      	str	r0, [r3, #0]
 8001938:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800193c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001940:	6019      	str	r1, [r3, #0]
	(void) argc;
	(void) argv;
	distance_detector_resources_t resources = { 0 };
 8001942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]

	printf("Acconeer software version %s\n", acc_version_get());
 8001956:	f00c ff55 	bl	800e804 <acc_version_get>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4883      	ldr	r0, [pc, #524]	@ (8001b6c <acc_example_detector_distance_with_iq_data_print+0x244>)
 8001960:	f00e fef2 	bl	8010748 <iprintf>

	const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 8001964:	f7ff fd8a 	bl	800147c <acc_hal_rss_integration_get_implementation>
 8001968:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

	if (!acc_rss_hal_register(hal)) {
 800196c:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8001970:	f007 fee8 	bl	8009744 <acc_rss_hal_register>
 8001974:	4603      	mov	r3, r0
 8001976:	f083 0301 	eor.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <acc_example_detector_distance_with_iq_data_print+0x5c>
		return EXIT_FAILURE;
 8001980:	2301      	movs	r3, #1
 8001982:	e0ed      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	resources.config = acc_detector_distance_config_create();
 8001984:	f003 fc96 	bl	80052b4 <acc_detector_distance_config_create>
 8001988:	4603      	mov	r3, r0
 800198a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	if (resources.config == NULL) {
 800198e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <acc_example_detector_distance_with_iq_data_print+0x82>
		printf("acc_detector_distance_config_create() failed\n");
 8001996:	4876      	ldr	r0, [pc, #472]	@ (8001b70 <acc_example_detector_distance_with_iq_data_print+0x248>)
 8001998:	f00e ff3e 	bl	8010818 <puts>
		cleanup(&resources);
 800199c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f8f7 	bl	8001b94 <cleanup>
		return EXIT_FAILURE;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0da      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	set_config(resources.config, DISTANCE_PRESET_CONFIG_BALANCED);
 80019aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80019ae:	2101      	movs	r1, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f91b 	bl	8001bec <set_config>

	if (!initialize_detector_resources(&resources)) {
 80019b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f992 	bl	8001ce4 <initialize_detector_resources>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <acc_example_detector_distance_with_iq_data_print+0xb8>
		printf("Initializing detector resources failed\n");
 80019cc:	4869      	ldr	r0, [pc, #420]	@ (8001b74 <acc_example_detector_distance_with_iq_data_print+0x24c>)
 80019ce:	f00e ff23 	bl	8010818 <puts>
		cleanup(&resources);
 80019d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f8dc 	bl	8001b94 <cleanup>
		return EXIT_FAILURE;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0bf      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	// Print the configuration
	acc_detector_distance_config_log(resources.handle, resources.config);
 80019e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019e4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fa4e 	bl	8005e8c <acc_detector_distance_config_log>

	/* Turn the sensor on */
	acc_hal_integration_sensor_supply_on(SENSOR_ID);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fca1 	bl	8001338 <acc_hal_integration_sensor_supply_on>
	acc_hal_integration_sensor_enable(SENSOR_ID);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff fcbe 	bl	8001378 <acc_hal_integration_sensor_enable>

	resources.sensor = acc_sensor_create(SENSOR_ID);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f008 fce5 	bl	800a3cc <acc_sensor_create>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	if (resources.sensor == NULL) {
 8001a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <acc_example_detector_distance_with_iq_data_print+0xfc>
		printf("acc_sensor_create() failed\n");
 8001a10:	4859      	ldr	r0, [pc, #356]	@ (8001b78 <acc_example_detector_distance_with_iq_data_print+0x250>)
 8001a12:	f00e ff01 	bl	8010818 <puts>
		cleanup(&resources);
 8001a16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f8ba 	bl	8001b94 <cleanup>
		return EXIT_FAILURE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e09d      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	acc_cal_result_t sensor_cal_result;

	if (!do_sensor_calibration(resources.sensor, &sensor_cal_result,
 8001a24:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001a28:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001a2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001a30:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001a34:	f000 f9b0 	bl	8001d98 <do_sensor_calibration>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f083 0301 	eor.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <acc_example_detector_distance_with_iq_data_print+0x130>
			resources.buffer, resources.buffer_size)) {
		printf("Sensor calibration failed\n");
 8001a44:	484d      	ldr	r0, [pc, #308]	@ (8001b7c <acc_example_detector_distance_with_iq_data_print+0x254>)
 8001a46:	f00e fee7 	bl	8010818 <puts>
		cleanup(&resources);
 8001a4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f8a0 	bl	8001b94 <cleanup>
		return EXIT_FAILURE;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e083      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	if (!do_full_detector_calibration(&resources, &sensor_cal_result)) {
 8001a58:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001a5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9ed 	bl	8001e42 <do_full_detector_calibration>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <acc_example_detector_distance_with_iq_data_print+0x160>
		printf("Detector calibration failed\n");
 8001a74:	4842      	ldr	r0, [pc, #264]	@ (8001b80 <acc_example_detector_distance_with_iq_data_print+0x258>)
 8001a76:	f00e fecf 	bl	8010818 <puts>
		cleanup(&resources);
 8001a7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f888 	bl	8001b94 <cleanup>
		return EXIT_FAILURE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e06b      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
	}

	while (true) {
		acc_detector_distance_result_t result = { 0 };
 8001a88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001a8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a90:	4618      	mov	r0, r3
 8001a92:	2364      	movs	r3, #100	@ 0x64
 8001a94:	461a      	mov	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f00e fff0 	bl	8010a7c <memset>

		if (!do_detector_get_next(&resources, &sensor_cal_result, &result)) {
 8001a9c:	f107 020c 	add.w	r2, r7, #12
 8001aa0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001aa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fa49 	bl	8001f40 <do_detector_get_next>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <acc_example_detector_distance_with_iq_data_print+0x1a6>
			printf("Could not get next result\n");
 8001aba:	4832      	ldr	r0, [pc, #200]	@ (8001b84 <acc_example_detector_distance_with_iq_data_print+0x25c>)
 8001abc:	f00e feac 	bl	8010818 <puts>
			cleanup(&resources);
 8001ac0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f865 	bl	8001b94 <cleanup>
			return EXIT_FAILURE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e048      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
		}

		print_distance_result(&result);
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fb70 	bl	80021b8 <print_distance_result>
		HAL_Delay(100);
 8001ad8:	2064      	movs	r0, #100	@ 0x64
 8001ada:	f001 faa1 	bl	8003020 <HAL_Delay>

		/* If "sensor calibration needed" is indicated, the sensor and detector needs to be recalibrated.
		 *
		 * Note that the detector result (printed above) is invalid if 'sensor_calibration_needed' is true.
		 */
		if (result.sensor_calibration_needed) {
 8001ade:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001ae2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ae6:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0cc      	beq.n	8001a88 <acc_example_detector_distance_with_iq_data_print+0x160>
			printf("Sensor- and detector recalibration needed ... \n");
 8001aee:	4826      	ldr	r0, [pc, #152]	@ (8001b88 <acc_example_detector_distance_with_iq_data_print+0x260>)
 8001af0:	f00e fe92 	bl	8010818 <puts>

			if (!do_sensor_calibration(resources.sensor, &sensor_cal_result,
 8001af4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001af8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001afc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001b00:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001b04:	f000 f948 	bl	8001d98 <do_sensor_calibration>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <acc_example_detector_distance_with_iq_data_print+0x200>
					resources.buffer, resources.buffer_size)) {
				printf("Sensor calibration failed\n");
 8001b14:	4819      	ldr	r0, [pc, #100]	@ (8001b7c <acc_example_detector_distance_with_iq_data_print+0x254>)
 8001b16:	f00e fe7f 	bl	8010818 <puts>
				cleanup(&resources);
 8001b1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f838 	bl	8001b94 <cleanup>
				return EXIT_FAILURE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01b      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
			}

			/* Once the sensor is recalibrated, the detector should be recalibrated and measuring can continue. */
			if (!do_detector_recalibration(&resources, &sensor_cal_result)) {
 8001b28:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001b2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f9c4 	bl	8001ec0 <do_detector_recalibration>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f083 0301 	eor.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <acc_example_detector_distance_with_iq_data_print+0x230>
				printf("Detector recalibration failed\n");
 8001b44:	4811      	ldr	r0, [pc, #68]	@ (8001b8c <acc_example_detector_distance_with_iq_data_print+0x264>)
 8001b46:	f00e fe67 	bl	8010818 <puts>
				cleanup(&resources);
 8001b4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f820 	bl	8001b94 <cleanup>
				return EXIT_FAILURE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e003      	b.n	8001b60 <acc_example_detector_distance_with_iq_data_print+0x238>
			}

			printf("Sensor- and detector recalibration done!\n");
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <acc_example_detector_distance_with_iq_data_print+0x268>)
 8001b5a:	f00e fe5d 	bl	8010818 <puts>
	while (true) {
 8001b5e:	e793      	b.n	8001a88 <acc_example_detector_distance_with_iq_data_print+0x160>
	cleanup(&resources);

	printf("Done!\n");

	return EXIT_SUCCESS;
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	0801460c 	.word	0x0801460c
 8001b70:	0801462c 	.word	0x0801462c
 8001b74:	0801465c 	.word	0x0801465c
 8001b78:	08014684 	.word	0x08014684
 8001b7c:	080146a0 	.word	0x080146a0
 8001b80:	080146bc 	.word	0x080146bc
 8001b84:	080146d8 	.word	0x080146d8
 8001b88:	080146f4 	.word	0x080146f4
 8001b8c:	08014724 	.word	0x08014724
 8001b90:	08014744 	.word	0x08014744

08001b94 <cleanup>:

static void cleanup(distance_detector_resources_t *resources) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	acc_hal_integration_sensor_disable(SENSOR_ID);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fc07 	bl	80013b0 <acc_hal_integration_sensor_disable>
	acc_hal_integration_sensor_supply_off(SENSOR_ID);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff fbd8 	bl	8001358 <acc_hal_integration_sensor_supply_off>

	acc_detector_distance_config_destroy(resources->config);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fb9f 	bl	80052f0 <acc_detector_distance_config_destroy>
	acc_detector_distance_destroy(resources->handle);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fbbe 	bl	8005338 <acc_detector_distance_destroy>

	acc_integration_mem_free(resources->buffer);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fd28 	bl	8001616 <acc_integration_mem_free>
	acc_integration_mem_free(resources->calibration_buffer);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fd23 	bl	8001616 <acc_integration_mem_free>

	if (resources->sensor != NULL) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <cleanup+0x4e>
		acc_sensor_destroy(resources->sensor);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f008 fbd3 	bl	800a388 <acc_sensor_destroy>
	}
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <set_config>:

static void set_config(acc_detector_distance_config_t *detector_config,
		distance_preset_config_t preset) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
	// Add configuration of the detector here
	switch (preset) {
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d037      	beq.n	8001c6e <set_config+0x82>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	dc67      	bgt.n	8001cd2 <set_config+0xe6>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d064      	beq.n	8001cd0 <set_config+0xe4>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <set_config+0x20>
		acc_detector_distance_config_signal_quality_set(detector_config, 20.0f);
		acc_detector_distance_config_close_range_leakage_cancellation_set(
				detector_config, false);
		break;
	}
}
 8001c0a:	e062      	b.n	8001cd2 <set_config+0xe6>
		acc_detector_distance_config_start_set(detector_config, 0.050f);
 8001c0c:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001cdc <set_config+0xf0>
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f004 f8b7 	bl	8005d84 <acc_detector_distance_config_start_set>
		acc_detector_distance_config_end_set(detector_config, 2.0000f);
 8001c16:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f004 f8be 	bl	8005d9c <acc_detector_distance_config_end_set>
		acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 8001c20:	2100      	movs	r1, #0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f004 f8c6 	bl	8005db4 <acc_detector_distance_config_max_step_length_set>
		acc_detector_distance_config_max_profile_set(detector_config,
 8001c28:	2101      	movs	r1, #1
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f004 f8e6 	bl	8005dfc <acc_detector_distance_config_max_profile_set>
		acc_detector_distance_config_reflector_shape_set(detector_config,
 8001c30:	2100      	movs	r1, #0
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f004 f91e 	bl	8005e74 <acc_detector_distance_config_reflector_shape_set>
		acc_detector_distance_config_peak_sorting_set(detector_config,
 8001c38:	2100      	movs	r1, #0
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f004 f8f6 	bl	8005e2c <acc_detector_distance_config_peak_sorting_set>
		acc_detector_distance_config_threshold_method_set(detector_config,
 8001c40:	2103      	movs	r1, #3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f004 f8e6 	bl	8005e14 <acc_detector_distance_config_threshold_method_set>
		acc_detector_distance_config_num_frames_recorded_threshold_set(
 8001c48:	2164      	movs	r1, #100	@ 0x64
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f004 f8fa 	bl	8005e44 <acc_detector_distance_config_num_frames_recorded_threshold_set>
		acc_detector_distance_config_threshold_sensitivity_set(detector_config,
 8001c50:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8001ce0 <set_config+0xf4>
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f004 f901 	bl	8005e5c <acc_detector_distance_config_threshold_sensitivity_set>
		acc_detector_distance_config_signal_quality_set(detector_config, 15.0f);
 8001c5a:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f004 f8c0 	bl	8005de4 <acc_detector_distance_config_signal_quality_set>
		acc_detector_distance_config_close_range_leakage_cancellation_set(
 8001c64:	2101      	movs	r1, #1
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f004 f8b0 	bl	8005dcc <acc_detector_distance_config_close_range_leakage_cancellation_set>
		break;
 8001c6c:	e031      	b.n	8001cd2 <set_config+0xe6>
		acc_detector_distance_config_start_set(detector_config, 0.25f);
 8001c6e:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f004 f886 	bl	8005d84 <acc_detector_distance_config_start_set>
		acc_detector_distance_config_end_set(detector_config, 3.0f);
 8001c78:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f004 f88d 	bl	8005d9c <acc_detector_distance_config_end_set>
		acc_detector_distance_config_max_step_length_set(detector_config, 2U);
 8001c82:	2102      	movs	r1, #2
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f004 f895 	bl	8005db4 <acc_detector_distance_config_max_step_length_set>
		acc_detector_distance_config_max_profile_set(detector_config,
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f004 f8b5 	bl	8005dfc <acc_detector_distance_config_max_profile_set>
		acc_detector_distance_config_reflector_shape_set(detector_config,
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f004 f8ed 	bl	8005e74 <acc_detector_distance_config_reflector_shape_set>
		acc_detector_distance_config_peak_sorting_set(detector_config,
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f004 f8c5 	bl	8005e2c <acc_detector_distance_config_peak_sorting_set>
		acc_detector_distance_config_threshold_method_set(detector_config,
 8001ca2:	2103      	movs	r1, #3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f004 f8b5 	bl	8005e14 <acc_detector_distance_config_threshold_method_set>
		acc_detector_distance_config_num_frames_recorded_threshold_set(
 8001caa:	2164      	movs	r1, #100	@ 0x64
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f004 f8c9 	bl	8005e44 <acc_detector_distance_config_num_frames_recorded_threshold_set>
		acc_detector_distance_config_threshold_sensitivity_set(detector_config,
 8001cb2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f004 f8d0 	bl	8005e5c <acc_detector_distance_config_threshold_sensitivity_set>
		acc_detector_distance_config_signal_quality_set(detector_config, 20.0f);
 8001cbc:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f004 f88f 	bl	8005de4 <acc_detector_distance_config_signal_quality_set>
		acc_detector_distance_config_close_range_leakage_cancellation_set(
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f004 f87f 	bl	8005dcc <acc_detector_distance_config_close_range_leakage_cancellation_set>
		break;
 8001cce:	e000      	b.n	8001cd2 <set_config+0xe6>
		break;
 8001cd0:	bf00      	nop
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	3d4ccccd 	.word	0x3d4ccccd
 8001ce0:	3f0ccccd 	.word	0x3f0ccccd

08001ce4 <initialize_detector_resources>:

static bool initialize_detector_resources(
		distance_detector_resources_t *resources) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	resources->handle = acc_detector_distance_create(resources->config);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fb77 	bl	80053e4 <acc_detector_distance_create>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
	if (resources->handle == NULL) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d104      	bne.n	8001d0e <initialize_detector_resources+0x2a>
		printf("acc_detector_distance_create() failed\n");
 8001d04:	4820      	ldr	r0, [pc, #128]	@ (8001d88 <initialize_detector_resources+0xa4>)
 8001d06:	f00e fd87 	bl	8010818 <puts>
		return false;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e037      	b.n	8001d7e <initialize_detector_resources+0x9a>
	}

	if (!acc_detector_distance_get_buffer_sizes(resources->handle,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6898      	ldr	r0, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f103 0110 	add.w	r1, r3, #16
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f003 faf5 	bl	800530c <acc_detector_distance_get_buffer_sizes>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f083 0301 	eor.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d004      	beq.n	8001d38 <initialize_detector_resources+0x54>
			&(resources->buffer_size), &(resources->calibration_buffer_size))) {
		printf("acc_detector_distance_get_buffer_sizes() failed\n");
 8001d2e:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <initialize_detector_resources+0xa8>)
 8001d30:	f00e fd72 	bl	8010818 <puts>
		return false;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e022      	b.n	8001d7e <initialize_detector_resources+0x9a>
	}

	resources->buffer = acc_integration_mem_alloc(resources->buffer_size);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fc5e 	bl	80015fe <acc_integration_mem_alloc>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
	if (resources->buffer == NULL) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <initialize_detector_resources+0x76>
		printf("sensor buffer allocation failed\n");
 8001d50:	480f      	ldr	r0, [pc, #60]	@ (8001d90 <initialize_detector_resources+0xac>)
 8001d52:	f00e fd61 	bl	8010818 <puts>
		return false;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e011      	b.n	8001d7e <initialize_detector_resources+0x9a>
	}

	resources->calibration_buffer = acc_integration_mem_alloc(
			resources->calibration_buffer_size);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
	resources->calibration_buffer = acc_integration_mem_alloc(
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fc4d 	bl	80015fe <acc_integration_mem_alloc>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	615a      	str	r2, [r3, #20]
	if (resources->calibration_buffer == NULL) {
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <initialize_detector_resources+0x98>
		printf("calibration buffer allocation failed\n");
 8001d72:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <initialize_detector_resources+0xb0>)
 8001d74:	f00e fd50 	bl	8010818 <puts>
		return false;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <initialize_detector_resources+0x9a>
	}

	return true;
 8001d7c:	2301      	movs	r3, #1
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	08014770 	.word	0x08014770
 8001d8c:	08014798 	.word	0x08014798
 8001d90:	080147c8 	.word	0x080147c8
 8001d94:	080147e8 	.word	0x080147e8

08001d98 <do_sensor_calibration>:

static bool do_sensor_calibration(acc_sensor_t *sensor,
		acc_cal_result_t *sensor_cal_result, void *buffer, uint32_t buffer_size) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	603b      	str	r3, [r7, #0]
	bool status = false;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
	bool cal_complete = false;
 8001daa:	2300      	movs	r3, #0
 8001dac:	747b      	strb	r3, [r7, #17]
	const uint16_t calibration_retries = 1U;
 8001dae:	2301      	movs	r3, #1
 8001db0:	827b      	strh	r3, [r7, #18]

	// Random disturbances may cause the calibration to fail. At failure, retry at least once.
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	82bb      	strh	r3, [r7, #20]
 8001db6:	e02c      	b.n	8001e12 <do_sensor_calibration+0x7a>
		// Reset sensor before calibration by disabling/enabling it
		acc_hal_integration_sensor_disable(SENSOR_ID);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff faf9 	bl	80013b0 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff fada 	bl	8001378 <acc_hal_integration_sensor_enable>

		do {
			status = acc_sensor_calibrate(sensor, &cal_complete,
 8001dc4:	f107 0111 	add.w	r1, r7, #17
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f008 fb45 	bl	800a460 <acc_sensor_calibrate>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	75fb      	strb	r3, [r7, #23]
					sensor_cal_result, buffer, buffer_size);

			if (status && !cal_complete) {
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <do_sensor_calibration+0x62>
 8001de0:	7c7b      	ldrb	r3, [r7, #17]
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d006      	beq.n	8001dfa <do_sensor_calibration+0x62>
				status = acc_hal_integration_wait_for_sensor_interrupt(
 8001dec:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff faf9 	bl	80013e8 <acc_hal_integration_wait_for_sensor_interrupt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
				SENSOR_ID, SENSOR_TIMEOUT_MS);
			}
		} while (status && !cal_complete);
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <do_sensor_calibration+0x74>
 8001e00:	7c7b      	ldrb	r3, [r7, #17]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1db      	bne.n	8001dc4 <do_sensor_calibration+0x2c>
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++) {
 8001e0c:	8abb      	ldrh	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	82bb      	strh	r3, [r7, #20]
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <do_sensor_calibration+0x8e>
 8001e1e:	8aba      	ldrh	r2, [r7, #20]
 8001e20:	8a7b      	ldrh	r3, [r7, #18]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d9c8      	bls.n	8001db8 <do_sensor_calibration+0x20>
	}

	if (status) {
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <do_sensor_calibration+0xa0>
		/* Reset sensor after calibration by disabling/enabling it */
		acc_hal_integration_sensor_disable(SENSOR_ID);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fabf 	bl	80013b0 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff faa0 	bl	8001378 <acc_hal_integration_sensor_enable>
	}

	return status;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <do_full_detector_calibration>:

static bool do_full_detector_calibration(
		distance_detector_resources_t *resources,
		const acc_cal_result_t *sensor_cal_result) {
 8001e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e44:	b089      	sub	sp, #36	@ 0x24
 8001e46:	af04      	add	r7, sp, #16
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
	bool done = false;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73bb      	strb	r3, [r7, #14]
	bool status;

	do {
		status = acc_detector_distance_calibrate(resources->sensor,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681c      	ldr	r4, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689d      	ldr	r5, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68de      	ldr	r6, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6952      	ldr	r2, [r2, #20]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6989      	ldr	r1, [r1, #24]
 8001e68:	f107 000e 	add.w	r0, r7, #14
 8001e6c:	9003      	str	r0, [sp, #12]
 8001e6e:	9102      	str	r1, [sp, #8]
 8001e70:	9201      	str	r2, [sp, #4]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4633      	mov	r3, r6
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4629      	mov	r1, r5
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f003 fbe0 	bl	8005640 <acc_detector_distance_calibrate>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
				resources->handle, sensor_cal_result, resources->buffer,
				resources->buffer_size, resources->calibration_buffer,
				resources->calibration_buffer_size, &done);

		if (status && !done) {
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <do_full_detector_calibration+0x62>
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <do_full_detector_calibration+0x62>
			status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID,
 8001e96:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff faa4 	bl	80013e8 <acc_hal_integration_wait_for_sensor_interrupt>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
			SENSOR_TIMEOUT_MS);
		}
	} while (status && !done);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <do_full_detector_calibration+0x74>
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1cc      	bne.n	8001e50 <do_full_detector_calibration+0xe>

	return status;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec0 <do_detector_recalibration>:

static bool do_detector_recalibration(distance_detector_resources_t *resources,
		const acc_cal_result_t *sensor_cal_result) {
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	bool done = false;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73bb      	strb	r3, [r7, #14]
	bool status;

	do {
		status = acc_detector_distance_recalibrate(resources->sensor,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681c      	ldr	r4, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689d      	ldr	r5, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68de      	ldr	r6, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6952      	ldr	r2, [r2, #20]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	6989      	ldr	r1, [r1, #24]
 8001ee6:	f107 000e 	add.w	r0, r7, #14
 8001eea:	9003      	str	r0, [sp, #12]
 8001eec:	9102      	str	r1, [sp, #8]
 8001eee:	9201      	str	r2, [sp, #4]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4633      	mov	r3, r6
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f003 fd83 	bl	8005a04 <acc_detector_distance_recalibrate>
 8001efe:	4603      	mov	r3, r0
 8001f00:	73fb      	strb	r3, [r7, #15]
				resources->handle, sensor_cal_result, resources->buffer,
				resources->buffer_size, resources->calibration_buffer,
				resources->calibration_buffer_size, &done);

		if (status && !done) {
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <do_detector_recalibration+0x62>
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <do_detector_recalibration+0x62>
			status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID,
 8001f14:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fa65 	bl	80013e8 <acc_hal_integration_wait_for_sensor_interrupt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
			SENSOR_TIMEOUT_MS);
		}
	} while (status && !done);
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <do_detector_recalibration+0x74>
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1cc      	bne.n	8001ece <do_detector_recalibration+0xe>

	return status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f40 <do_detector_get_next>:

static bool do_detector_get_next(distance_detector_resources_t *resources,
		const acc_cal_result_t *sensor_cal_result,
		acc_detector_distance_result_t *result) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	bool result_available = false;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75fb      	strb	r3, [r7, #23]

	do {
		if (!acc_detector_distance_prepare(resources->handle, resources->config,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6898      	ldr	r0, [r3, #8]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6912      	ldr	r2, [r2, #16]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	f003 fdf0 	bl	8005b50 <acc_detector_distance_prepare>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f083 0301 	eor.w	r3, r3, #1
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <do_detector_get_next+0x46>
				resources->sensor, sensor_cal_result, resources->buffer,
				resources->buffer_size)) {
			printf("acc_detector_distance_prepare() failed\n");
 8001f7c:	4832      	ldr	r0, [pc, #200]	@ (8002048 <do_detector_get_next+0x108>)
 8001f7e:	f00e fc4b 	bl	8010818 <puts>
			return false;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e05b      	b.n	800203e <do_detector_get_next+0xfe>
		}

		if (!acc_sensor_measure(resources->sensor)) {
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f008 faf0 	bl	800a570 <acc_sensor_measure>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <do_detector_get_next+0x66>
			printf("acc_sensor_measure() failed\n");
 8001f9c:	482b      	ldr	r0, [pc, #172]	@ (800204c <do_detector_get_next+0x10c>)
 8001f9e:	f00e fc3b 	bl	8010818 <puts>
			return false;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e04b      	b.n	800203e <do_detector_get_next+0xfe>
		}

		if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID,
 8001fa6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fa1c 	bl	80013e8 <acc_hal_integration_wait_for_sensor_interrupt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <do_detector_get_next+0x86>
		SENSOR_TIMEOUT_MS)) {
			printf("Sensor interrupt timeout\n");
 8001fbc:	4824      	ldr	r0, [pc, #144]	@ (8002050 <do_detector_get_next+0x110>)
 8001fbe:	f00e fc2b 	bl	8010818 <puts>
			return false;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e03b      	b.n	800203e <do_detector_get_next+0xfe>
		}

		if (!acc_sensor_read(resources->sensor, resources->buffer,
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f008 faf4 	bl	800a5c0 <acc_sensor_read>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <do_detector_get_next+0xae>
				resources->buffer_size)) {
			printf("acc_sensor_read() failed\n");
 8001fe4:	481b      	ldr	r0, [pc, #108]	@ (8002054 <do_detector_get_next+0x114>)
 8001fe6:	f00e fc17 	bl	8010818 <puts>
			return false;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e027      	b.n	800203e <do_detector_get_next+0xfe>
		}

		if (!acc_detector_distance_process(resources->handle, resources->buffer,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6898      	ldr	r0, [r3, #8]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68d9      	ldr	r1, [r3, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	f107 0417 	add.w	r4, r7, #23
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	4623      	mov	r3, r4
 8002004:	f003 fdca 	bl	8005b9c <acc_detector_distance_process>
 8002008:	4603      	mov	r3, r0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <do_detector_get_next+0xde>
				resources->calibration_buffer, &result_available, result)) {
			printf("acc_detector_distance_process() failed\n");
 8002014:	4810      	ldr	r0, [pc, #64]	@ (8002058 <do_detector_get_next+0x118>)
 8002016:	f00e fbff 	bl	8010818 <puts>
			return false;
 800201a:	2300      	movs	r3, #0
 800201c:	e00f      	b.n	800203e <do_detector_get_next+0xfe>

		/**
		 * The function for printing the IQ data must be called every time
		 * the acc_detector_distance_process has been called.
		 */
		print_iq_data(result->sensor_config, result->processing_result,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	461a      	mov	r2, r3
 800202c:	f000 f816 	bl	800205c <print_iq_data>
				result->processing_metadata);
	} while (!result_available);
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d189      	bne.n	8001f50 <do_detector_get_next+0x10>

	return true;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	08014810 	.word	0x08014810
 800204c:	08014838 	.word	0x08014838
 8002050:	08014854 	.word	0x08014854
 8002054:	08014870 	.word	0x08014870
 8002058:	0801488c 	.word	0x0801488c

0800205c <print_iq_data>:

static void print_iq_data(const acc_config_t *sensor_config,
		acc_processing_result_t *processing_result,
		acc_processing_metadata_t *processing_metadata) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b090      	sub	sp, #64	@ 0x40
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]

	/* Get the iq data frame from the processing result */
	acc_int16_complex_t *frame = processing_result->frame;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get information about the frame from the sensor config */
	uint16_t sweeps_per_frame = acc_config_sweeps_per_frame_get(sensor_config);
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f007 ffe4 	bl	800a03c <acc_config_sweeps_per_frame_get>
 8002074:	4603      	mov	r3, r0
 8002076:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint8_t num_subsweeps = acc_config_num_subsweeps_get(sensor_config);
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f007 fd91 	bl	8009ba0 <acc_config_num_subsweeps_get>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
//	printf("BEGIN:Distance(m),Amplitude\n");
//	uart_buffer_index += sprintf(uart_buffer + uart_buffer_index,
//			"BEGIN:Distance(m),Amplitude\n");

	/* Loop over all subsweeps */
	for (uint8_t subsweep_idx = 0; subsweep_idx < num_subsweeps;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800208a:	e086      	b.n	800219a <print_iq_data+0x13e>
			subsweep_idx++) {
		/* Get information about the start point and step length from the sensor config */
		int32_t start_point = acc_config_subsweep_start_point_get(sensor_config,
 800208c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002090:	4619      	mov	r1, r3
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f007 fdc0 	bl	8009c18 <acc_config_subsweep_start_point_get>
 8002098:	6278      	str	r0, [r7, #36]	@ 0x24
				subsweep_idx);
		uint16_t step_length = acc_config_subsweep_step_length_get(
 800209a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800209e:	4619      	mov	r1, r3
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f007 fe41 	bl	8009d28 <acc_config_subsweep_step_length_get>
 80020a6:	4603      	mov	r3, r0
 80020a8:	847b      	strh	r3, [r7, #34]	@ 0x22
				sensor_config, subsweep_idx);

		/* Get subsweep offset and length from the processing metadata */
		uint16_t subsweep_offset =
				processing_metadata->subsweep_data_offset[subsweep_idx];
 80020aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		uint16_t subsweep_offset =
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	889b      	ldrh	r3, [r3, #4]
 80020b6:	843b      	strh	r3, [r7, #32]
		uint16_t subsweep_length =
				processing_metadata->subsweep_data_length[subsweep_idx];
 80020b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		uint16_t subsweep_length =
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	83fb      	strh	r3, [r7, #30]

		/* Loop over all points in subsweep */
		for (uint16_t point_idx = 0; point_idx < subsweep_length; point_idx++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80020cc:	e05c      	b.n	8002188 <print_iq_data+0x12c>
			/* Perform a coherent mean calculation for the point over sweeps per frame */
			uint32_t iq_point_real_acc = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	63bb      	str	r3, [r7, #56]	@ 0x38
			uint32_t iq_point_imag_acc = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34

			/* Loop over all points in sweeps_per_frame */
			for (uint16_t sweep_idx = 0; sweep_idx < sweeps_per_frame;
 80020d6:	2300      	movs	r3, #0
 80020d8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80020da:	e021      	b.n	8002120 <print_iq_data+0xc4>
					sweep_idx++) {
				uint16_t point_offset = sweep_idx * subsweep_length
 80020dc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80020de:	8bfb      	ldrh	r3, [r7, #30]
 80020e0:	fb12 f303 	smulbb	r3, r2, r3
 80020e4:	b29a      	uxth	r2, r3
						+ subsweep_offset + point_idx;
 80020e6:	8c3b      	ldrh	r3, [r7, #32]
 80020e8:	4413      	add	r3, r2
 80020ea:	b29a      	uxth	r2, r3
				uint16_t point_offset = sweep_idx * subsweep_length
 80020ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80020ee:	4413      	add	r3, r2
 80020f0:	827b      	strh	r3, [r7, #18]
				iq_point_real_acc += frame[point_offset].real;
 80020f2:	8a7b      	ldrh	r3, [r7, #18]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020f8:	4413      	add	r3, r2
 80020fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fe:	461a      	mov	r2, r3
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	4413      	add	r3, r2
 8002104:	63bb      	str	r3, [r7, #56]	@ 0x38
				iq_point_imag_acc += frame[point_offset].imag;
 8002106:	8a7b      	ldrh	r3, [r7, #18]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800210c:	4413      	add	r3, r2
 800210e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002112:	461a      	mov	r2, r3
 8002114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002116:	4413      	add	r3, r2
 8002118:	637b      	str	r3, [r7, #52]	@ 0x34
					sweep_idx++) {
 800211a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800211c:	3301      	adds	r3, #1
 800211e:	867b      	strh	r3, [r7, #50]	@ 0x32
			for (uint16_t sweep_idx = 0; sweep_idx < sweeps_per_frame;
 8002120:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8002122:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002124:	429a      	cmp	r2, r3
 8002126:	d3d9      	bcc.n	80020dc <print_iq_data+0x80>
			}

			iq_point_real_acc = iq_point_real_acc / sweeps_per_frame;
 8002128:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800212a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
			iq_point_imag_acc = iq_point_imag_acc / sweeps_per_frame;
 8002132:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34

			/* Calculate the absolute value of the IQ point */
			uint32_t iq_point_abs = (uint32_t) sqrt(
					iq_point_real_acc * iq_point_real_acc
 800213c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800213e:	fb03 f203 	mul.w	r2, r3, r3
							+ iq_point_imag_acc * iq_point_imag_acc);
 8002142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002144:	fb03 f303 	mul.w	r3, r3, r3
 8002148:	4413      	add	r3, r2
			uint32_t iq_point_abs = (uint32_t) sqrt(
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f9e2 	bl	8000514 <__aeabi_ui2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	ec43 2b10 	vmov	d0, r2, r3
 8002158:	f010 fb36 	bl	80127c8 <sqrt>
 800215c:	ec53 2b10 	vmov	r2, r3, d0
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fd28 	bl	8000bb8 <__aeabi_d2uiz>
 8002168:	4603      	mov	r3, r0
 800216a:	61bb      	str	r3, [r7, #24]

			/* Print the point distance, in meters, and the point absolute value */
			float distance = acc_processing_points_to_meter(
					start_point + point_idx * step_length);
 800216c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800216e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002170:	fb03 f202 	mul.w	r2, r3, r2
			float distance = acc_processing_points_to_meter(
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	4413      	add	r3, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f008 f903 	bl	800a384 <acc_processing_points_to_meter>
 800217e:	ed87 0a05 	vstr	s0, [r7, #20]
		for (uint16_t point_idx = 0; point_idx < subsweep_length; point_idx++) {
 8002182:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002184:	3301      	adds	r3, #1
 8002186:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8002188:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800218a:	8bfb      	ldrh	r3, [r7, #30]
 800218c:	429a      	cmp	r2, r3
 800218e:	d39e      	bcc.n	80020ce <print_iq_data+0x72>
			subsweep_idx++) {
 8002190:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002194:	3301      	adds	r3, #1
 8002196:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	for (uint8_t subsweep_idx = 0; subsweep_idx < num_subsweeps;
 800219a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800219e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80021a2:	429a      	cmp	r2, r3
 80021a4:	f4ff af72 	bcc.w	800208c <print_iq_data+0x30>
//			"END:Distance(m),Amplitude\n");
//
//	uart_buffer[uart_buffer_index] = '\0';
//	printf("%s", uart_buffer);

}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3740      	adds	r7, #64	@ 0x40
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	0000      	movs	r0, r0
 80021b4:	0000      	movs	r0, r0
	...

080021b8 <print_distance_result>:

static void print_distance_result(const acc_detector_distance_result_t *result) {
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b094      	sub	sp, #80	@ 0x50
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
	static uint8_t Rejection_Count;
	bool Rejection_Flag = false;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	float Shortest_Distance = 0;
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	643b      	str	r3, [r7, #64]	@ 0x40
	static float Last_Detected_Distance_In_MM = 0;
	float Result_Strength = 0;
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if (result->num_distances > 0) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d032      	beq.n	8002242 <print_distance_result+0x8a>
//		printf(": ");
		Shortest_Distance = result->distances[0];
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	643b      	str	r3, [r7, #64]	@ 0x40
		Result_Strength = result->strengths[0];
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

		for (uint8_t i = 0; i < result->num_distances; i++) {
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80021ee:	e021      	b.n	8002234 <print_distance_result+0x7c>
//			printf("%" PRIfloat " m ",
//					ACC_LOG_FLOAT_TO_INTEGER(result->distances[i]));

			//COPY THE CLOSEST DISTANCE IN A VAR
			if (Shortest_Distance > result->distances[i]) {
 80021f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dd0e      	ble.n	800222a <print_distance_result+0x72>
				Shortest_Distance = result->distances[i];
 800220c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
				Result_Strength = result->strengths[i];
 800221a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	330a      	adds	r3, #10
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	63fb      	str	r3, [r7, #60]	@ 0x3c
		for (uint8_t i = 0; i < result->num_distances; i++) {
 800222a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800222e:	3301      	adds	r3, #1
 8002230:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800223a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800223e:	429a      	cmp	r2, r3
 8002240:	d3d6      	bcc.n	80021f0 <print_distance_result+0x38>
			}
		}
	}
	//Check whether the detected distance is in range or not || Reject if  range is <60 mm and > 2m

	float Current_Shortest_Distance_in_MM = Shortest_Distance * 1000;
 8002242:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002246:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002468 <print_distance_result+0x2b0>
 800224a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if ((Current_Shortest_Distance_in_MM < 60)	//IF IT IS IN THE RANGE
 8002252:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002256:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800246c <print_distance_result+0x2b4>
 800225a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800225e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002262:	d408      	bmi.n	8002276 <print_distance_result+0xbe>
	|| (Current_Shortest_Distance_in_MM > 20000)) {
 8002264:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002268:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8002470 <print_distance_result+0x2b8>
 800226c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	dd05      	ble.n	8002282 <print_distance_result+0xca>
//		printf(" \n DETECTED DISTANCE IS not in range (<60||>20000) ");
		Current_Shortest_Distance_in_MM = 0;
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
		Rejection_Flag = true;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	float Strength_Threshold = -5;	//CHECK THE AMPLITUDE / STRENGTH
 8002282:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <print_distance_result+0x2bc>)
 8002284:	633b      	str	r3, [r7, #48]	@ 0x30
	if (Result_Strength > Strength_Threshold) {
 8002286:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800228a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd05      	ble.n	80022a4 <print_distance_result+0xec>
		//		printf(" \n REJECTED DUE TO STRENGTH LOWER THEN Strength_Threshold ");
		Current_Shortest_Distance_in_MM = 0;
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
		Rejection_Flag = true;
 800229e:	2301      	movs	r3, #1
 80022a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

//check the difference from last detected range || Range differs from last result by more than x (start with 10mm)
	uint8_t Range_Difference_Value = 100;
 80022a4:	2364      	movs	r3, #100	@ 0x64
 80022a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if ((Current_Shortest_Distance_in_MM
			< Last_Detected_Distance_In_MM - Range_Difference_Value)
 80022aa:	4b73      	ldr	r3, [pc, #460]	@ (8002478 <print_distance_result+0x2c0>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
	if ((Current_Shortest_Distance_in_MM
 80022c0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80022c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	d411      	bmi.n	80022f2 <print_distance_result+0x13a>
			|| (Current_Shortest_Distance_in_MM
					> Last_Detected_Distance_In_MM + Range_Difference_Value)) {
 80022ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022da:	4b67      	ldr	r3, [pc, #412]	@ (8002478 <print_distance_result+0x2c0>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
			|| (Current_Shortest_Distance_in_MM
 80022e4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80022e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	dd0e      	ble.n	8002310 <print_distance_result+0x158>
		Last_Detected_Distance_In_MM = Current_Shortest_Distance_in_MM;
 80022f2:	4a61      	ldr	r2, [pc, #388]	@ (8002478 <print_distance_result+0x2c0>)
 80022f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f6:	6013      	str	r3, [r2, #0]
//		printf(" \n REJECTED DUE TO OUT OF RANGE WITH RESPECT TO LAST READING");
		Rejection_Count++;
 80022f8:	4b60      	ldr	r3, [pc, #384]	@ (800247c <print_distance_result+0x2c4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	4b5e      	ldr	r3, [pc, #376]	@ (800247c <print_distance_result+0x2c4>)
 8002302:	701a      	strb	r2, [r3, #0]
		Current_Shortest_Distance_in_MM = 0;
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
		Rejection_Flag = true;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	if (!Rejection_Flag) { //Is the last read data was correct
 8002310:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002314:	f083 0301 	eor.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <print_distance_result+0x16c>
		Rejection_Count = 0;
 800231e:	4b57      	ldr	r3, [pc, #348]	@ (800247c <print_distance_result+0x2c4>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
	}

	printf(" \n Current Detected distance in MM = %f Strength = %f ",
 8002324:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002326:	f7fe f917 	bl	8000558 <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	460d      	mov	r5, r1
 800232e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002330:	f7fe f912 	bl	8000558 <__aeabi_f2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	e9cd 2300 	strd	r2, r3, [sp]
 800233c:	4622      	mov	r2, r4
 800233e:	462b      	mov	r3, r5
 8002340:	484f      	ldr	r0, [pc, #316]	@ (8002480 <print_distance_result+0x2c8>)
 8002342:	f00e fa01 	bl	8010748 <iprintf>
			Current_Shortest_Distance_in_MM, Result_Strength);

	uCAN_MSG msg;
	msg.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8002346:	2301      	movs	r3, #1
 8002348:	723b      	strb	r3, [r7, #8]
	msg.frame.id = 0x13;
 800234a:	2313      	movs	r3, #19
 800234c:	60fb      	str	r3, [r7, #12]
	msg.frame.dlc = 8;
 800234e:	2308      	movs	r3, #8
 8002350:	743b      	strb	r3, [r7, #16]
	//First 4 bytes for distance and next 4 bytes for strength
	// Both are float values so we need to convert them to integer by multiplying with 100
	// and then send them
	uint32_t distance = {(uint32_t) (round(Current_Shortest_Distance_in_MM * 100))};
 8002352:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002356:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002484 <print_distance_result+0x2cc>
 800235a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235e:	ee17 0a90 	vmov	r0, s15
 8002362:	f7fe f8f9 	bl	8000558 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ec43 2b10 	vmov	d0, r2, r3
 800236e:	f010 fe11 	bl	8012f94 <round>
 8002372:	ec53 2b10 	vmov	r2, r3, d0
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fc1d 	bl	8000bb8 <__aeabi_d2uiz>
 800237e:	4603      	mov	r3, r0
 8002380:	62bb      	str	r3, [r7, #40]	@ 0x28
	
//123.456
	// Strength can be negative so we need to include the sign bit as well
	// This can be done by adding 0x80000000 to the strength value
	uint32_t strength = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24

	if (Result_Strength < 0) {
 8002386:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800238a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d511      	bpl.n	80023b8 <print_distance_result+0x200>
		strength = (uint32_t) (-Result_Strength * 100);
 8002394:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002398:	eef1 7a67 	vneg.f32	s15, s15
 800239c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002484 <print_distance_result+0x2cc>
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
		strength |= 0x80000000;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b6:	e00a      	b.n	80023ce <print_distance_result+0x216>
	} else {
		strength = (uint32_t) (Result_Strength * 100);
 80023b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023bc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002484 <print_distance_result+0x2cc>
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c8:	ee17 3a90 	vmov	r3, s15
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
//  4    2    F    F    4    E    D    9

//	printf(distance[0]);
//	printf(distance[1]);

	msg.frame.data0 = (distance >> 24) & 0xFF;
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	0e1b      	lsrs	r3, r3, #24
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	747b      	strb	r3, [r7, #17]
	msg.frame.data1 = (distance >> 16) & 0xFF;
 80023d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	74bb      	strb	r3, [r7, #18]
	msg.frame.data2 = (distance >> 8) & 0xFF;
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	74fb      	strb	r3, [r7, #19]
	msg.frame.data3 = distance & 0xFF;
 80023e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	753b      	strb	r3, [r7, #20]
	msg.frame.data4 = result->temperature;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	@ 0x54
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	757b      	strb	r3, [r7, #21]
	msg.frame.data5 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75bb      	strb	r3, [r7, #22]
	msg.frame.data6 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	75fb      	strb	r3, [r7, #23]
	msg.frame.data7 = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	763b      	strb	r3, [r7, #24]

	CANSPI_Transmit(&msg);
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f9c0 	bl	800178c <CANSPI_Transmit>

//SET PWM OUTPUT ACCORDING TO DISTANCE MEASURED VALUE
	float Mapped_Value = (Current_Shortest_Distance_in_MM / 20000.0) * 100.0;
 800240c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800240e:	f7fe f8a3 	bl	8000558 <__aeabi_f2d>
 8002412:	a313      	add	r3, pc, #76	@ (adr r3, 8002460 <print_distance_result+0x2a8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fe fa20 	bl	800085c <__aeabi_ddiv>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <print_distance_result+0x2d0>)
 800242a:	f7fe f8ed 	bl	8000608 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fbdf 	bl	8000bf8 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	623b      	str	r3, [r7, #32]
	uint8_t PWM_Duty_Cycle = (uint8_t) Mapped_Value;
 800243e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002446:	edc7 7a00 	vstr	s15, [r7]
 800244a:	783b      	ldrb	r3, [r7, #0]
 800244c:	77fb      	strb	r3, [r7, #31]
	Set_PWM_Duty_Cycle(PWM_Duty_Cycle);
 800244e:	7ffb      	ldrb	r3, [r7, #31]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fd35 	bl	8002ec0 <Set_PWM_Duty_Cycle>

//	if (Rejection_Count >= 10) {
//		HAL_GPIO_TogglePin(ALARM_LIGHT_GPIO_Port, ALARM_LIGHT_Pin);
//	}
}
 8002456:	bf00      	nop
 8002458:	3748      	adds	r7, #72	@ 0x48
 800245a:	46bd      	mov	sp, r7
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
 800245e:	bf00      	nop
 8002460:	00000000 	.word	0x00000000
 8002464:	40d38800 	.word	0x40d38800
 8002468:	447a0000 	.word	0x447a0000
 800246c:	42700000 	.word	0x42700000
 8002470:	469c4000 	.word	0x469c4000
 8002474:	c0a00000 	.word	0xc0a00000
 8002478:	200003ac 	.word	0x200003ac
 800247c:	200003b0 	.word	0x200003b0
 8002480:	080148b4 	.word	0x080148b4
 8002484:	42c80000 	.word	0x42c80000
 8002488:	40590000 	.word	0x40590000

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002490:	f000 fd54 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f000 f830 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002498:	f000 f950 	bl	800273c <MX_GPIO_Init>
  MX_SPI1_Init();
 800249c:	f000 f896 	bl	80025cc <MX_SPI1_Init>
  MX_TIM2_Init();
 80024a0:	f000 f900 	bl	80026a4 <MX_TIM2_Init>
  MX_SPI2_Init();
 80024a4:	f000 f8c8 	bl	8002638 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize CAN
  if(!CANSPI_Initialize()){
 80024a8:	f7ff f8c0 	bl	800162c <CANSPI_Initialize>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <main+0x2e>
 80024b8:	e012      	b.n	80024e0 <main+0x54>
	  printf("ERROR: Failed to Initialize MSP Device.\r\n");
 80024ba:	480e      	ldr	r0, [pc, #56]	@ (80024f4 <main+0x68>)
 80024bc:	f00e f9ac 	bl	8010818 <puts>
	  while(!CANSPI_Initialize()){
 80024c0:	e006      	b.n	80024d0 <main+0x44>
		  printf("ERROR: Failed to Initialize MSP Device.\r\n");
 80024c2:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <main+0x68>)
 80024c4:	f00e f9a8 	bl	8010818 <puts>
//      HAL_GPIO_TogglePin(ALARM_LIGHT_GPIO_Port, ALARM_LIGHT_Pin);
		  HAL_Delay(300);
 80024c8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80024cc:	f000 fda8 	bl	8003020 <HAL_Delay>
	  while(!CANSPI_Initialize()){
 80024d0:	f7ff f8ac 	bl	800162c <CANSPI_Initialize>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <main+0x36>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		acc_example_service(0, NULL);
		acc_example_detector_distance_with_iq_data_print(0, NULL);
 80024e0:	2100      	movs	r1, #0
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7ff fa20 	bl	8001928 <acc_example_detector_distance_with_iq_data_print>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80024e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024ec:	f000 fd98 	bl	8003020 <HAL_Delay>
		acc_example_detector_distance_with_iq_data_print(0, NULL);
 80024f0:	e7f6      	b.n	80024e0 <main+0x54>
 80024f2:	bf00      	nop
 80024f4:	080148ec 	.word	0x080148ec

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b094      	sub	sp, #80	@ 0x50
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0320 	add.w	r3, r7, #32
 8002502:	2230      	movs	r2, #48	@ 0x30
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f00e fab8 	bl	8010a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <SystemClock_Config+0xcc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	4a27      	ldr	r2, [pc, #156]	@ (80025c4 <SystemClock_Config+0xcc>)
 8002526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252a:	6413      	str	r3, [r2, #64]	@ 0x40
 800252c:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <SystemClock_Config+0xcc>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <SystemClock_Config+0xd0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002544:	4a20      	ldr	r2, [pc, #128]	@ (80025c8 <SystemClock_Config+0xd0>)
 8002546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <SystemClock_Config+0xd0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002558:	2301      	movs	r3, #1
 800255a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800255c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002562:	2302      	movs	r3, #2
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002566:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800256c:	2319      	movs	r3, #25
 800256e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002570:	2390      	movs	r3, #144	@ 0x90
 8002572:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002574:	2302      	movs	r3, #2
 8002576:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002578:	2303      	movs	r3, #3
 800257a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800257c:	f107 0320 	add.w	r3, r7, #32
 8002580:	4618      	mov	r0, r3
 8002582:	f001 f85d 	bl	8003640 <HAL_RCC_OscConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800258c:	f000 f94e 	bl	800282c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002590:	230f      	movs	r3, #15
 8002592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002594:	2302      	movs	r3, #2
 8002596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800259c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	2102      	movs	r1, #2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fabf 	bl	8003b30 <HAL_RCC_ClockConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025b8:	f000 f938 	bl	800282c <Error_Handler>
  }
}
 80025bc:	bf00      	nop
 80025be:	3750      	adds	r7, #80	@ 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000

080025cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d0:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025d2:	4a18      	ldr	r2, [pc, #96]	@ (8002634 <MX_SPI1_Init+0x68>)
 80025d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025d6:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025de:	4b14      	ldr	r3, [pc, #80]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <MX_SPI1_Init+0x64>)
 80025f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <MX_SPI1_Init+0x64>)
 8002600:	2208      	movs	r2, #8
 8002602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <MX_SPI1_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800260a:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <MX_SPI1_Init+0x64>)
 800260c:	2200      	movs	r2, #0
 800260e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <MX_SPI1_Init+0x64>)
 8002612:	2200      	movs	r2, #0
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <MX_SPI1_Init+0x64>)
 8002618:	220a      	movs	r2, #10
 800261a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800261c:	4804      	ldr	r0, [pc, #16]	@ (8002630 <MX_SPI1_Init+0x64>)
 800261e:	f001 fc33 	bl	8003e88 <HAL_SPI_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002628:	f000 f900 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200003b4 	.word	0x200003b4
 8002634:	40013000 	.word	0x40013000

08002638 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800263c:	4b17      	ldr	r3, [pc, #92]	@ (800269c <MX_SPI2_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <MX_SPI2_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <MX_SPI2_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	@ (800269c <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <MX_SPI2_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <MX_SPI2_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	@ (800269c <MX_SPI2_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <MX_SPI2_Init+0x64>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <MX_SPI2_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <MX_SPI2_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	@ (800269c <MX_SPI2_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MX_SPI2_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	@ (800269c <MX_SPI2_Init+0x64>)
 800268a:	f001 fbfd 	bl	8003e88 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002694:	f000 f8ca 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000040c 	.word	0x2000040c
 80026a0:	40003800 	.word	0x40003800

080026a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026ca:	2247      	movs	r2, #71	@ 0x47
 80026cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026d6:	2263      	movs	r2, #99	@ 0x63
 80026d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e0:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026e6:	4814      	ldr	r0, [pc, #80]	@ (8002738 <MX_TIM2_Init+0x94>)
 80026e8:	f002 f9b2 	bl	8004a50 <HAL_TIM_Base_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80026f2:	f000 f89b 	bl	800282c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4619      	mov	r1, r3
 8002702:	480d      	ldr	r0, [pc, #52]	@ (8002738 <MX_TIM2_Init+0x94>)
 8002704:	f002 faa4 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800270e:	f000 f88d 	bl	800282c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800271a:	463b      	mov	r3, r7
 800271c:	4619      	mov	r1, r3
 800271e:	4806      	ldr	r0, [pc, #24]	@ (8002738 <MX_TIM2_Init+0x94>)
 8002720:	f002 fcaa 	bl	8005078 <HAL_TIMEx_MasterConfigSynchronization>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800272a:	f000 f87f 	bl	800282c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000464 	.word	0x20000464

0800273c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <MX_GPIO_Init+0xe4>)
 800275c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b2f      	ldr	r3, [pc, #188]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a2a      	ldr	r2, [pc, #168]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <MX_GPIO_Init+0xe4>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <MX_GPIO_Init+0xe4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEN_EN1_Pin|A121_SPI_SS_Pin|SPI2_CS_Pin|SPI_SEL0_Pin
 80027a6:	2200      	movs	r2, #0
 80027a8:	f242 013b 	movw	r1, #8251	@ 0x203b
 80027ac:	481d      	ldr	r0, [pc, #116]	@ (8002824 <MX_GPIO_Init+0xe8>)
 80027ae:	f000 ff09 	bl	80035c4 <HAL_GPIO_WritePin>
                          |SPI_SEL1_Pin|SPI_SEL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SEN_INT1_Pin */
  GPIO_InitStruct.Pin = SEN_INT1_Pin;
 80027b2:	2310      	movs	r3, #16
 80027b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SEN_INT1_GPIO_Port, &GPIO_InitStruct);
 80027c0:	f107 030c 	add.w	r3, r7, #12
 80027c4:	4619      	mov	r1, r3
 80027c6:	4818      	ldr	r0, [pc, #96]	@ (8002828 <MX_GPIO_Init+0xec>)
 80027c8:	f000 fd60 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEN_EN1_Pin A121_SPI_SS_Pin */
  GPIO_InitStruct.Pin = SEN_EN1_Pin|A121_SPI_SS_Pin;
 80027cc:	2303      	movs	r3, #3
 80027ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d8:	2303      	movs	r3, #3
 80027da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	4619      	mov	r1, r3
 80027e2:	4810      	ldr	r0, [pc, #64]	@ (8002824 <MX_GPIO_Init+0xe8>)
 80027e4:	f000 fd52 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS_Pin SPI_SEL0_Pin SPI_SEL1_Pin SPI_SEL2_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|SPI_SEL0_Pin|SPI_SEL1_Pin|SPI_SEL2_Pin;
 80027e8:	f242 0338 	movw	r3, #8248	@ 0x2038
 80027ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4808      	ldr	r0, [pc, #32]	@ (8002824 <MX_GPIO_Init+0xe8>)
 8002802:	f000 fd43 	bl	800328c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	200a      	movs	r0, #10
 800280c:	f000 fd07 	bl	800321e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002810:	200a      	movs	r0, #10
 8002812:	f000 fd20 	bl	8003256 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40020400 	.word	0x40020400
 8002828:	40020000 	.word	0x40020000

0800282c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
}
 8002832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002834:	bf00      	nop
 8002836:	e7fd      	b.n	8002834 <Error_Handler+0x8>

08002838 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800283e:	2201      	movs	r2, #1
 8002840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002844:	480b      	ldr	r0, [pc, #44]	@ (8002874 <MCP2515_Initialize+0x3c>)
 8002846:	f000 febd 	bl	80035c4 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 800284a:	230a      	movs	r3, #10
 800284c:	71fb      	strb	r3, [r7, #7]

  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800284e:	480a      	ldr	r0, [pc, #40]	@ (8002878 <MCP2515_Initialize+0x40>)
 8002850:	f001 ffae 	bl	80047b0 <HAL_SPI_GetState>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <MCP2515_Initialize+0x26>
      return true;
 800285a:	2301      	movs	r3, #1
 800285c:	e006      	b.n	800286c <MCP2515_Initialize+0x34>

    loop--;
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	3b01      	subs	r3, #1
 8002862:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f1      	bne.n	800284e <MCP2515_Initialize+0x16>

  return false;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40020400 	.word	0x40020400
 8002878:	2000040c 	.word	0x2000040c

0800287c <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	200f      	movs	r0, #15
 8002886:	f000 f859 	bl	800293c <MCP2515_WriteByte>

  uint8_t loop = 10;
 800288a:	230a      	movs	r3, #10
 800288c:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800288e:	200e      	movs	r0, #14
 8002890:	f000 f830 	bl	80028f4 <MCP2515_ReadByte>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d101      	bne.n	80028a2 <MCP2515_SetConfigMode+0x26>
      return true;
 800289e:	2301      	movs	r3, #1
 80028a0:	e006      	b.n	80028b0 <MCP2515_SetConfigMode+0x34>

    loop--;
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ef      	bne.n	800288e <MCP2515_SetConfigMode+0x12>

  return false;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80028be:	2100      	movs	r1, #0
 80028c0:	200f      	movs	r0, #15
 80028c2:	f000 f83b 	bl	800293c <MCP2515_WriteByte>

  uint8_t loop = 10;
 80028c6:	230a      	movs	r3, #10
 80028c8:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80028ca:	200e      	movs	r0, #14
 80028cc:	f000 f812 	bl	80028f4 <MCP2515_ReadByte>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <MCP2515_SetNormalMode+0x26>
      return true;
 80028da:	2301      	movs	r3, #1
 80028dc:	e006      	b.n	80028ec <MCP2515_SetNormalMode+0x34>

    loop--;
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <MCP2515_SetNormalMode+0x12>

  return false;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <MCP2515_ReadByte+0x44>)
 8002906:	f000 fe5d 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800290a:	2003      	movs	r0, #3
 800290c:	f000 f8ce 	bl	8002aac <SPI_Tx>
  SPI_Tx(address);
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f8ca 	bl	8002aac <SPI_Tx>
  retVal = SPI_Rx();
 8002918:	f000 f8ee 	bl	8002af8 <SPI_Rx>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8002920:	2201      	movs	r2, #1
 8002922:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002926:	4804      	ldr	r0, [pc, #16]	@ (8002938 <MCP2515_ReadByte+0x44>)
 8002928:	f000 fe4c 	bl	80035c4 <HAL_GPIO_WritePin>

  return retVal;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40020400 	.word	0x40020400

0800293c <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	460a      	mov	r2, r1
 8002946:	71fb      	strb	r3, [r7, #7]
 8002948:	4613      	mov	r3, r2
 800294a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800294c:	2200      	movs	r2, #0
 800294e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002952:	480c      	ldr	r0, [pc, #48]	@ (8002984 <MCP2515_WriteByte+0x48>)
 8002954:	f000 fe36 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8002958:	2002      	movs	r0, #2
 800295a:	f000 f8a7 	bl	8002aac <SPI_Tx>
  SPI_Tx(address);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f8a3 	bl	8002aac <SPI_Tx>
  SPI_Tx(data);
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f89f 	bl	8002aac <SPI_Tx>

  MCP2515_CS_HIGH();
 800296e:	2201      	movs	r2, #1
 8002970:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002974:	4803      	ldr	r0, [pc, #12]	@ (8002984 <MCP2515_WriteByte+0x48>)
 8002976:	f000 fe25 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40020400 	.word	0x40020400

08002988 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	603a      	str	r2, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	460b      	mov	r3, r1
 8002996:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800299e:	480f      	ldr	r0, [pc, #60]	@ (80029dc <MCP2515_WriteByteSequence+0x54>)
 80029a0:	f000 fe10 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f000 f881 	bl	8002aac <SPI_Tx>
  SPI_Tx(startAddress);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f87d 	bl	8002aac <SPI_Tx>
 SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80029b2:	79ba      	ldrb	r2, [r7, #6]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	6838      	ldr	r0, [r7, #0]
 80029c2:	f000 f885 	bl	8002ad0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80029c6:	2201      	movs	r2, #1
 80029c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029cc:	4803      	ldr	r0, [pc, #12]	@ (80029dc <MCP2515_WriteByteSequence+0x54>)
 80029ce:	f000 fdf9 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40020400 	.word	0x40020400

080029e0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	4613      	mov	r3, r2
 80029f0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80029f2:	2200      	movs	r2, #0
 80029f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029f8:	480e      	ldr	r0, [pc, #56]	@ (8002a34 <MCP2515_LoadTxSequence+0x54>)
 80029fa:	f000 fde3 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f853 	bl	8002aac <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8002a06:	2104      	movs	r1, #4
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f000 f861 	bl	8002ad0 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8002a0e:	7bbb      	ldrb	r3, [r7, #14]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f84b 	bl	8002aac <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8002a16:	7bbb      	ldrb	r3, [r7, #14]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f858 	bl	8002ad0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8002a20:	2201      	movs	r2, #1
 8002a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a26:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <MCP2515_LoadTxSequence+0x54>)
 8002a28:	f000 fdcc 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40020400 	.word	0x40020400

08002a38 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a48:	4808      	ldr	r0, [pc, #32]	@ (8002a6c <MCP2515_RequestToSend+0x34>)
 8002a4a:	f000 fdbb 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f82b 	bl	8002aac <SPI_Tx>

  MCP2515_CS_HIGH();
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a5c:	4803      	ldr	r0, [pc, #12]	@ (8002a6c <MCP2515_RequestToSend+0x34>)
 8002a5e:	f000 fdb1 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40020400 	.word	0x40020400

08002a70 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a7c:	480a      	ldr	r0, [pc, #40]	@ (8002aa8 <MCP2515_ReadStatus+0x38>)
 8002a7e:	f000 fda1 	bl	80035c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8002a82:	20a0      	movs	r0, #160	@ 0xa0
 8002a84:	f000 f812 	bl	8002aac <SPI_Tx>
  retVal = SPI_Rx();
 8002a88:	f000 f836 	bl	8002af8 <SPI_Rx>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a96:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <MCP2515_ReadStatus+0x38>)
 8002a98:	f000 fd94 	bl	80035c4 <HAL_GPIO_WritePin>

  return retVal;
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40020400 	.word	0x40020400

08002aac <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8002ab6:	1df9      	adds	r1, r7, #7
 8002ab8:	230a      	movs	r3, #10
 8002aba:	2201      	movs	r2, #1
 8002abc:	4803      	ldr	r0, [pc, #12]	@ (8002acc <SPI_Tx+0x20>)
 8002abe:	f001 fa6c 	bl	8003f9a <HAL_SPI_Transmit>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	2000040c 	.word	0x2000040c

08002ad0 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4803      	ldr	r0, [pc, #12]	@ (8002af4 <SPI_TxBuffer+0x24>)
 8002ae6:	f001 fa58 	bl	8003f9a <HAL_SPI_Transmit>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000040c 	.word	0x2000040c

08002af8 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8002afe:	1df9      	adds	r1, r7, #7
 8002b00:	230a      	movs	r3, #10
 8002b02:	2201      	movs	r2, #1
 8002b04:	4803      	ldr	r0, [pc, #12]	@ (8002b14 <SPI_Rx+0x1c>)
 8002b06:	f001 fb8b 	bl	8004220 <HAL_SPI_Receive>
  return retVal;
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000040c 	.word	0x2000040c

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	@ 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 031c 	add.w	r3, r7, #28
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a32      	ldr	r2, [pc, #200]	@ (8002c50 <HAL_SPI_MspInit+0xe8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12c      	bne.n	8002be4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	4a30      	ldr	r2, [pc, #192]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002b94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb6:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bc2:	23e0      	movs	r3, #224	@ 0xe0
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	481e      	ldr	r0, [pc, #120]	@ (8002c58 <HAL_SPI_MspInit+0xf0>)
 8002bde:	f000 fb55 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002be2:	e031      	b.n	8002c48 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c5c <HAL_SPI_MspInit+0xf4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d12c      	bne.n	8002c48 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b18      	ldr	r3, [pc, #96]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b11      	ldr	r3, [pc, #68]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_SPI_MspInit+0xec>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002c26:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c38:	2305      	movs	r3, #5
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 031c 	add.w	r3, r7, #28
 8002c40:	4619      	mov	r1, r3
 8002c42:	4807      	ldr	r0, [pc, #28]	@ (8002c60 <HAL_SPI_MspInit+0xf8>)
 8002c44:	f000 fb22 	bl	800328c <HAL_GPIO_Init>
}
 8002c48:	bf00      	nop
 8002c4a:	3730      	adds	r7, #48	@ 0x30
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40013000 	.word	0x40013000
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40003800 	.word	0x40003800
 8002c60:	40020400 	.word	0x40020400

08002c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d10d      	bne.n	8002c92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <NMI_Handler+0x4>

08002cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfa:	f000 f971 	bl	8002fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SEN_INT1_Pin);
 8002d06:	2010      	movs	r0, #16
 8002d08:	f000 fc76 	bl	80035f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_kill>:

int _kill(int pid, int sig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d2a:	f00d ff09 	bl	8010b40 <__errno>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2216      	movs	r2, #22
 8002d32:	601a      	str	r2, [r3, #0]
  return -1;
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <_exit>:

void _exit (int status)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffe7 	bl	8002d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <_exit+0x12>

08002d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e00a      	b.n	8002d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d68:	f3af 8000 	nop.w
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	b2ca      	uxtb	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf0      	blt.n	8002d68 <_read+0x12>
  }

  return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e009      	b.n	8002db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf1      	blt.n	8002da2 <_write+0x12>
  }
  return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_close>:

int _close(int file)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df0:	605a      	str	r2, [r3, #4]
  return 0;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <_isatty>:

int _isatty(int file)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e08:	2301      	movs	r3, #1
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f00d fe6e 	bl	8010b40 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20010000 	.word	0x20010000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	200004ac 	.word	0x200004ac
 8002e98:	20000628 	.word	0x20000628

08002e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <Set_PWM_Duty_Cycle>:

#include <utility.h>

extern TIM_HandleTypeDef htim2;

void Set_PWM_Duty_Cycle(uint8_t PWM_Duty_Cycle) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = PWM_Duty_Cycle;
 8002eca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	6353      	str	r3, [r2, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4803      	ldr	r0, [pc, #12]	@ (8002ee4 <Set_PWM_Duty_Cycle+0x24>)
 8002ed6:	f001 fe0b 	bl	8004af0 <HAL_TIM_PWM_Start>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000464 	.word	0x20000464

08002ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002eec:	f7ff ffd6 	bl	8002e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ef0:	480c      	ldr	r0, [pc, #48]	@ (8002f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ef2:	490d      	ldr	r1, [pc, #52]	@ (8002f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef8:	e002      	b.n	8002f00 <LoopCopyDataInit>

08002efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efe:	3304      	adds	r3, #4

08002f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f04:	d3f9      	bcc.n	8002efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f08:	4c0a      	ldr	r4, [pc, #40]	@ (8002f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f0c:	e001      	b.n	8002f12 <LoopFillZerobss>

08002f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f10:	3204      	adds	r2, #4

08002f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f14:	d3fb      	bcc.n	8002f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f16:	f00d fe19 	bl	8010b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1a:	f7ff fab7 	bl	800248c <main>
  bx  lr    
 8002f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f28:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8002f2c:	0801a860 	.word	0x0801a860
  ldr r2, =_sbss
 8002f30:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 8002f34:	20000628 	.word	0x20000628

08002f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC_IRQHandler>
	...

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <HAL_Init+0x40>)
 8002f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <HAL_Init+0x40>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	@ (8002f7c <HAL_Init+0x40>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f64:	2003      	movs	r0, #3
 8002f66:	f000 f94f 	bl	8003208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f6a:	200f      	movs	r0, #15
 8002f6c:	f000 f808 	bl	8002f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f70:	f7ff fdd2 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40023c00 	.word	0x40023c00

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f88:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_InitTick+0x54>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_InitTick+0x58>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f967 	bl	8003272 <HAL_SYSTICK_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e00e      	b.n	8002fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0f      	cmp	r3, #15
 8002fb2:	d80a      	bhi.n	8002fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	f000 f92f 	bl	800321e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fc0:	4a06      	ldr	r2, [pc, #24]	@ (8002fdc <HAL_InitTick+0x5c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000000 	.word	0x20000000
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	20000004 	.word	0x20000004

08002fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_IncTick+0x20>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_IncTick+0x24>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <HAL_IncTick+0x24>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000008 	.word	0x20000008
 8003004:	200004b0 	.word	0x200004b0

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b03      	ldr	r3, [pc, #12]	@ (800301c <HAL_GetTick+0x14>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	200004b0 	.word	0x200004b0

08003020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff ffee 	bl	8003008 <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d005      	beq.n	8003046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_Delay+0x44>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003046:	bf00      	nop
 8003048:	f7ff ffde 	bl	8003008 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d8f7      	bhi.n	8003048 <HAL_Delay+0x28>
  {
  }
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000008 	.word	0x20000008

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	@ (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	@ (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	@ (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	@ 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	@ 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d4:	d301      	bcc.n	80031da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00f      	b.n	80031fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031da:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <SysTick_Config+0x40>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031e2:	210f      	movs	r1, #15
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f7ff ff8e 	bl	8003108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <SysTick_Config+0x40>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031f2:	4b04      	ldr	r3, [pc, #16]	@ (8003204 <SysTick_Config+0x40>)
 80031f4:	2207      	movs	r2, #7
 80031f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010

08003208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff29 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	4603      	mov	r3, r0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003230:	f7ff ff3e 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 8003234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	6978      	ldr	r0, [r7, #20]
 800323c:	f7ff ff8e 	bl	800315c <NVIC_EncodePriority>
 8003240:	4602      	mov	r2, r0
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	4611      	mov	r1, r2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff5d 	bl	8003108 <__NVIC_SetPriority>
}
 800324e:	bf00      	nop
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff31 	bl	80030cc <__NVIC_EnableIRQ>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ffa2 	bl	80031c4 <SysTick_Config>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e159      	b.n	800355c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 8148 	bne.w	8003556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d005      	beq.n	80032de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d130      	bne.n	8003340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 0201 	and.w	r2, r3, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b03      	cmp	r3, #3
 800334a:	d017      	beq.n	800337c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d123      	bne.n	80033d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	69b9      	ldr	r1, [r7, #24]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80a2 	beq.w	8003556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_GPIO_Init+0x2e8>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	4a56      	ldr	r2, [pc, #344]	@ (8003574 <HAL_GPIO_Init+0x2e8>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003420:	6453      	str	r3, [r2, #68]	@ 0x44
 8003422:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <HAL_GPIO_Init+0x2e8>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342e:	4a52      	ldr	r2, [pc, #328]	@ (8003578 <HAL_GPIO_Init+0x2ec>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a49      	ldr	r2, [pc, #292]	@ (800357c <HAL_GPIO_Init+0x2f0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d019      	beq.n	800348e <HAL_GPIO_Init+0x202>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a48      	ldr	r2, [pc, #288]	@ (8003580 <HAL_GPIO_Init+0x2f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_GPIO_Init+0x1fe>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a47      	ldr	r2, [pc, #284]	@ (8003584 <HAL_GPIO_Init+0x2f8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_GPIO_Init+0x1fa>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a46      	ldr	r2, [pc, #280]	@ (8003588 <HAL_GPIO_Init+0x2fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_Init+0x1f6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a45      	ldr	r2, [pc, #276]	@ (800358c <HAL_GPIO_Init+0x300>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_GPIO_Init+0x1f2>
 800347a:	2304      	movs	r3, #4
 800347c:	e008      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800347e:	2307      	movs	r3, #7
 8003480:	e006      	b.n	8003490 <HAL_GPIO_Init+0x204>
 8003482:	2303      	movs	r3, #3
 8003484:	e004      	b.n	8003490 <HAL_GPIO_Init+0x204>
 8003486:	2302      	movs	r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_GPIO_Init+0x204>
 800348e:	2300      	movs	r3, #0
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	f002 0203 	and.w	r2, r2, #3
 8003496:	0092      	lsls	r2, r2, #2
 8003498:	4093      	lsls	r3, r2
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034a0:	4935      	ldr	r1, [pc, #212]	@ (8003578 <HAL_GPIO_Init+0x2ec>)
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	3302      	adds	r3, #2
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ae:	4b38      	ldr	r3, [pc, #224]	@ (8003590 <HAL_GPIO_Init+0x304>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003590 <HAL_GPIO_Init+0x304>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <HAL_GPIO_Init+0x304>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034fc:	4a24      	ldr	r2, [pc, #144]	@ (8003590 <HAL_GPIO_Init+0x304>)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003502:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <HAL_GPIO_Init+0x304>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003526:	4a1a      	ldr	r2, [pc, #104]	@ (8003590 <HAL_GPIO_Init+0x304>)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800352c:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <HAL_GPIO_Init+0x304>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003550:	4a0f      	ldr	r2, [pc, #60]	@ (8003590 <HAL_GPIO_Init+0x304>)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	2b0f      	cmp	r3, #15
 8003560:	f67f aea2 	bls.w	80032a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3724      	adds	r7, #36	@ 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40013800 	.word	0x40013800
 800357c:	40020000 	.word	0x40020000
 8003580:	40020400 	.word	0x40020400
 8003584:	40020800 	.word	0x40020800
 8003588:	40020c00 	.word	0x40020c00
 800358c:	40021000 	.word	0x40021000
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003602:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800360e:	4a05      	ldr	r2, [pc, #20]	@ (8003624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f806 	bl	8003628 <HAL_GPIO_EXTI_Callback>
  }
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40013c00 	.word	0x40013c00

08003628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e267      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d075      	beq.n	800374a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800365e:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b04      	cmp	r3, #4
 8003668:	d00c      	beq.n	8003684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366a:	4b85      	ldr	r3, [pc, #532]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003672:	2b08      	cmp	r3, #8
 8003674:	d112      	bne.n	800369c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003676:	4b82      	ldr	r3, [pc, #520]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003682:	d10b      	bne.n	800369c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003684:	4b7e      	ldr	r3, [pc, #504]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05b      	beq.n	8003748 <HAL_RCC_OscConfig+0x108>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d157      	bne.n	8003748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e242      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_OscConfig+0x74>
 80036a6:	4b76      	ldr	r3, [pc, #472]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a75      	ldr	r2, [pc, #468]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e01d      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x98>
 80036be:	4b70      	ldr	r3, [pc, #448]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a6f      	ldr	r2, [pc, #444]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6c      	ldr	r2, [pc, #432]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0xb0>
 80036d8:	4b69      	ldr	r3, [pc, #420]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a68      	ldr	r2, [pc, #416]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b66      	ldr	r3, [pc, #408]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a65      	ldr	r2, [pc, #404]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7ff fc86 	bl	8003008 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003700:	f7ff fc82 	bl	8003008 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e207      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0xc0>
 800371e:	e014      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fc72 	bl	8003008 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7ff fc6e 	bl	8003008 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1f3      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	4b51      	ldr	r3, [pc, #324]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0xe8>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d063      	beq.n	800381e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003756:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003762:	4b47      	ldr	r3, [pc, #284]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376a:	2b08      	cmp	r3, #8
 800376c:	d11c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b44      	ldr	r3, [pc, #272]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d116      	bne.n	80037a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	4b41      	ldr	r3, [pc, #260]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x152>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e1c7      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4937      	ldr	r1, [pc, #220]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a6:	e03a      	b.n	800381e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x244>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7ff fc27 	bl	8003008 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037be:	f7ff fc23 	bl	8003008 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e1a8      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037dc:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4925      	ldr	r1, [pc, #148]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e015      	b.n	800381e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f2:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_RCC_OscConfig+0x244>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7ff fc06 	bl	8003008 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003800:	f7ff fc02 	bl	8003008 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e187      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	4b1b      	ldr	r3, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d036      	beq.n	8003898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <HAL_RCC_OscConfig+0x248>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7ff fbe6 	bl	8003008 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003840:	f7ff fbe2 	bl	8003008 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e167      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <HAL_RCC_OscConfig+0x240>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x200>
 800385e:	e01b      	b.n	8003898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003860:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <HAL_RCC_OscConfig+0x248>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003866:	f7ff fbcf 	bl	8003008 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	e00e      	b.n	800388c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386e:	f7ff fbcb 	bl	8003008 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d907      	bls.n	800388c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e150      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
 8003880:	40023800 	.word	0x40023800
 8003884:	42470000 	.word	0x42470000
 8003888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b88      	ldr	r3, [pc, #544]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ea      	bne.n	800386e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8097 	beq.w	80039d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b81      	ldr	r3, [pc, #516]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d6:	4b77      	ldr	r3, [pc, #476]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d118      	bne.n	8003914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e2:	4b74      	ldr	r3, [pc, #464]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a73      	ldr	r2, [pc, #460]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 80038e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ee:	f7ff fb8b 	bl	8003008 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f6:	f7ff fb87 	bl	8003008 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e10c      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x474>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x2ea>
 800391c:	4b64      	ldr	r3, [pc, #400]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a63      	ldr	r2, [pc, #396]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
 8003928:	e01c      	b.n	8003964 <HAL_RCC_OscConfig+0x324>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d10c      	bne.n	800394c <HAL_RCC_OscConfig+0x30c>
 8003932:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
 800393e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
 800394a:	e00b      	b.n	8003964 <HAL_RCC_OscConfig+0x324>
 800394c:	4b58      	ldr	r3, [pc, #352]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003950:	4a57      	ldr	r2, [pc, #348]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6713      	str	r3, [r2, #112]	@ 0x70
 8003958:	4b55      	ldr	r3, [pc, #340]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a54      	ldr	r2, [pc, #336]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 0304 	bic.w	r3, r3, #4
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7ff fb4c 	bl	8003008 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7ff fb48 	bl	8003008 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0cb      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398a:	4b49      	ldr	r3, [pc, #292]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0ee      	beq.n	8003974 <HAL_RCC_OscConfig+0x334>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7ff fb36 	bl	8003008 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a0:	f7ff fb32 	bl	8003008 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0b5      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c8:	4b39      	ldr	r3, [pc, #228]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	4a38      	ldr	r2, [pc, #224]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a1 	beq.w	8003b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039de:	4b34      	ldr	r3, [pc, #208]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d05c      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d141      	bne.n	8003a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fb06 	bl	8003008 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7ff fb02 	bl	8003008 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e087      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	491b      	ldr	r1, [pc, #108]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7ff fadb 	bl	8003008 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a56:	f7ff fad7 	bl	8003008 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e05c      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	4b11      	ldr	r3, [pc, #68]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x416>
 8003a74:	e054      	b.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b10      	ldr	r3, [pc, #64]	@ (8003ab8 <HAL_RCC_OscConfig+0x478>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7ff fac4 	bl	8003008 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7ff fac0 	bl	8003008 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e045      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCC_OscConfig+0x470>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x444>
 8003aa2:	e03d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e038      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003abc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <HAL_RCC_OscConfig+0x4ec>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d028      	beq.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d121      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d11a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	3b01      	subs	r3, #1
 8003b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800

08003b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0cc      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4b68      	ldr	r3, [pc, #416]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d90c      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b65      	ldr	r3, [pc, #404]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0b8      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a58      	ldr	r2, [pc, #352]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b9c:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a52      	ldr	r2, [pc, #328]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b50      	ldr	r3, [pc, #320]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	494d      	ldr	r1, [pc, #308]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d044      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d119      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e07f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d003      	beq.n	8003bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	4b3f      	ldr	r3, [pc, #252]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e067      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 0203 	bic.w	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4934      	ldr	r1, [pc, #208]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c20:	f7ff f9f2 	bl	8003008 <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c28:	f7ff f9ee 	bl	8003008 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04f      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 020c 	and.w	r2, r3, #12
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1eb      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c50:	4b25      	ldr	r3, [pc, #148]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d20c      	bcs.n	8003c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b20      	ldr	r3, [pc, #128]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d001      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e032      	b.n	8003cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c84:	4b19      	ldr	r3, [pc, #100]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	4916      	ldr	r1, [pc, #88]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca2:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	490e      	ldr	r1, [pc, #56]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cb6:	f000 f821 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	091b      	lsrs	r3, r3, #4
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	490a      	ldr	r1, [pc, #40]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	5ccb      	ldrb	r3, [r1, r3]
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cd2:	4b09      	ldr	r3, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff f952 	bl	8002f80 <HAL_InitTick>

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40023c00 	.word	0x40023c00
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	080149b4 	.word	0x080149b4
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	20000004 	.word	0x20000004

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b090      	sub	sp, #64	@ 0x40
 8003d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d08:	2300      	movs	r3, #0
 8003d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d14:	4b59      	ldr	r3, [pc, #356]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x40>
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	f200 80a1 	bhi.w	8003e68 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2e:	e09b      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d32:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003d34:	e09b      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d36:	4b53      	ldr	r3, [pc, #332]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d3a:	e098      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d46:	4b4d      	ldr	r3, [pc, #308]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d028      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d52:	4b4a      	ldr	r3, [pc, #296]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	2200      	movs	r2, #0
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d64:	2100      	movs	r1, #0
 8003d66:	4b47      	ldr	r3, [pc, #284]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d68:	fb03 f201 	mul.w	r2, r3, r1
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	fb00 f303 	mul.w	r3, r0, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	4a43      	ldr	r2, [pc, #268]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d76:	fba0 1202 	umull	r1, r2, r0, r2
 8003d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d7c:	460a      	mov	r2, r1
 8003d7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d82:	4413      	add	r3, r2
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	61fa      	str	r2, [r7, #28]
 8003d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d96:	f7fc ff7f 	bl	8000c98 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003da2:	e053      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	617a      	str	r2, [r7, #20]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003db6:	f04f 0b00 	mov.w	fp, #0
 8003dba:	4652      	mov	r2, sl
 8003dbc:	465b      	mov	r3, fp
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0159      	lsls	r1, r3, #5
 8003dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dcc:	0150      	lsls	r0, r2, #5
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	ebb2 080a 	subs.w	r8, r2, sl
 8003dd6:	eb63 090b 	sbc.w	r9, r3, fp
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003de6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dee:	ebb2 0408 	subs.w	r4, r2, r8
 8003df2:	eb63 0509 	sbc.w	r5, r3, r9
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	00eb      	lsls	r3, r5, #3
 8003e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e04:	00e2      	lsls	r2, r4, #3
 8003e06:	4614      	mov	r4, r2
 8003e08:	461d      	mov	r5, r3
 8003e0a:	eb14 030a 	adds.w	r3, r4, sl
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	eb45 030b 	adc.w	r3, r5, fp
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e22:	4629      	mov	r1, r5
 8003e24:	028b      	lsls	r3, r1, #10
 8003e26:	4621      	mov	r1, r4
 8003e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	028a      	lsls	r2, r1, #10
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	2200      	movs	r2, #0
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	60fa      	str	r2, [r7, #12]
 8003e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e40:	f7fc ff2a 	bl	8000c98 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	0c1b      	lsrs	r3, r3, #16
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	3301      	adds	r3, #1
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e66:	e002      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3740      	adds	r7, #64	@ 0x40
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	00f42400 	.word	0x00f42400
 8003e84:	017d7840 	.word	0x017d7840

08003e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07b      	b.n	8003f92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eaa:	d009      	beq.n	8003ec0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
 8003eb2:	e005      	b.n	8003ec0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fe fe44 	bl	8002b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	ea42 0103 	orr.w	r1, r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0104 	and.w	r1, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	f003 0210 	and.w	r2, r3, #16
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b088      	sub	sp, #32
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_SPI_Transmit+0x22>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e12d      	b.n	8004218 <HAL_SPI_Transmit+0x27e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fc4:	f7ff f820 	bl	8003008 <HAL_GetTick>
 8003fc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fde:	e116      	b.n	800420e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit+0x52>
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ff0:	e10d      	b.n	800420e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004038:	d10f      	bne.n	800405a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d007      	beq.n	8004078 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004080:	d14f      	bne.n	8004122 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0xf6>
 800408a:	8afb      	ldrh	r3, [r7, #22]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d142      	bne.n	8004116 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040b4:	e02f      	b.n	8004116 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d112      	bne.n	80040ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040e8:	e015      	b.n	8004116 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ea:	f7fe ff8d 	bl	8003008 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d803      	bhi.n	8004102 <HAL_SPI_Transmit+0x168>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004100:	d102      	bne.n	8004108 <HAL_SPI_Transmit+0x16e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004114:	e07b      	b.n	800420e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ca      	bne.n	80040b6 <HAL_SPI_Transmit+0x11c>
 8004120:	e050      	b.n	80041c4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Transmit+0x196>
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d144      	bne.n	80041ba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	7812      	ldrb	r2, [r2, #0]
 800413c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004156:	e030      	b.n	80041ba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d113      	bne.n	800418e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	330c      	adds	r3, #12
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800418c:	e015      	b.n	80041ba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418e:	f7fe ff3b 	bl	8003008 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d803      	bhi.n	80041a6 <HAL_SPI_Transmit+0x20c>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d102      	bne.n	80041ac <HAL_SPI_Transmit+0x212>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041b8:	e029      	b.n	800420e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1c9      	bne.n	8004158 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fbed 	bl	80049a8 <SPI_EndRxTxTransaction>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e003      	b.n	800420e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004216:	7ffb      	ldrb	r3, [r7, #31]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004244:	e0fb      	b.n	800443e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424e:	d112      	bne.n	8004276 <HAL_SPI_Receive+0x56>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10e      	bne.n	8004276 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2204      	movs	r2, #4
 800425c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f8ef 	bl	8004450 <HAL_SPI_TransmitReceive>
 8004272:	4603      	mov	r3, r0
 8004274:	e0e8      	b.n	8004448 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_SPI_Receive+0x64>
 8004280:	2302      	movs	r3, #2
 8004282:	e0e1      	b.n	8004448 <HAL_SPI_Receive+0x228>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428c:	f7fe febc 	bl	8003008 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_Receive+0x7e>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042a2:	e0cc      	b.n	800443e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2204      	movs	r2, #4
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d10f      	bne.n	800430c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b40      	cmp	r3, #64	@ 0x40
 8004318:	d007      	beq.n	800432a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d16a      	bne.n	8004408 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004332:	e032      	b.n	800439a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d115      	bne.n	800436e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f103 020c 	add.w	r2, r3, #12
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800436c:	e015      	b.n	800439a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436e:	f7fe fe4b 	bl	8003008 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d803      	bhi.n	8004386 <HAL_SPI_Receive+0x166>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004384:	d102      	bne.n	800438c <HAL_SPI_Receive+0x16c>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004398:	e051      	b.n	800443e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1c7      	bne.n	8004334 <HAL_SPI_Receive+0x114>
 80043a4:	e035      	b.n	8004412 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	b292      	uxth	r2, r2
 80043c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	1c9a      	adds	r2, r3, #2
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043da:	e015      	b.n	8004408 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043dc:	f7fe fe14 	bl	8003008 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d803      	bhi.n	80043f4 <HAL_SPI_Receive+0x1d4>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Receive+0x1da>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004406:	e01a      	b.n	800443e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1c9      	bne.n	80043a6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fa60 	bl	80048dc <SPI_EndRxTransaction>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
 8004434:	e003      	b.n	800443e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08c      	sub	sp, #48	@ 0x30
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800445e:	2301      	movs	r3, #1
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x26>
 8004472:	2302      	movs	r3, #2
 8004474:	e198      	b.n	80047a8 <HAL_SPI_TransmitReceive+0x358>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800447e:	f7fe fdc3 	bl	8003008 <HAL_GetTick>
 8004482:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800449c:	2b01      	cmp	r3, #1
 800449e:	d00f      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x70>
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a6:	d107      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x68>
 80044b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d003      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80044be:	e16d      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x82>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x82>
 80044cc:	887b      	ldrh	r3, [r7, #2]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80044d8:	e160      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d003      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	887a      	ldrh	r2, [r7, #2]
 80044fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	887a      	ldrh	r2, [r7, #2]
 8004516:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452e:	2b40      	cmp	r3, #64	@ 0x40
 8004530:	d007      	beq.n	8004542 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800454a:	d17c      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x10a>
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d16a      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457e:	e057      	b.n	8004630 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b02      	cmp	r3, #2
 800458c:	d11b      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d113      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	881a      	ldrh	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d119      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x1b8>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d014      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	b292      	uxth	r2, r2
 80045ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	1c9a      	adds	r2, r3, #2
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004604:	2301      	movs	r3, #1
 8004606:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004608:	f7fe fcfe 	bl	8003008 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004614:	429a      	cmp	r2, r3
 8004616:	d80b      	bhi.n	8004630 <HAL_SPI_TransmitReceive+0x1e0>
 8004618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461e:	d007      	beq.n	8004630 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800462e:	e0b5      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1a2      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x130>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d19d      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x130>
 8004644:	e080      	b.n	8004748 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x204>
 800464e:	8b7b      	ldrh	r3, [r7, #26]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d16f      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	7812      	ldrb	r2, [r2, #0]
 8004660:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467a:	e05b      	b.n	8004734 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d11c      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x274>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d017      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x274>
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	2b01      	cmp	r3, #1
 8004698:	d114      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	330c      	adds	r3, #12
 80046a4:	7812      	ldrb	r2, [r2, #0]
 80046a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d119      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x2b6>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d014      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004702:	2301      	movs	r3, #1
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004706:	f7fe fc7f 	bl	8003008 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004712:	429a      	cmp	r2, r3
 8004714:	d803      	bhi.n	800471e <HAL_SPI_TransmitReceive+0x2ce>
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d102      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x2d4>
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004732:	e033      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d19e      	bne.n	800467c <HAL_SPI_TransmitReceive+0x22c>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d199      	bne.n	800467c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f92b 	bl	80049a8 <SPI_EndRxTxTransaction>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d006      	beq.n	8004766 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004764:	e01a      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004792:	e003      	b.n	800479c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3730      	adds	r7, #48	@ 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047be:	b2db      	uxtb	r3, r3
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047dc:	f7fe fc14 	bl	8003008 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047ec:	f7fe fc0c 	bl	8003008 <HAL_GetTick>
 80047f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047f2:	4b39      	ldr	r3, [pc, #228]	@ (80048d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	015b      	lsls	r3, r3, #5
 80047f8:	0d1b      	lsrs	r3, r3, #20
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	fb02 f303 	mul.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004802:	e054      	b.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d050      	beq.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800480c:	f7fe fbfc 	bl	8003008 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d13d      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800483a:	d111      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004844:	d004      	beq.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484e:	d107      	bne.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800485e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004868:	d10f      	bne.n	800488a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e017      	b.n	80048ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d19b      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000000 	.word	0x20000000

080048dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048f0:	d111      	bne.n	8004916 <SPI_EndRxTransaction+0x3a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fa:	d004      	beq.n	8004906 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004904:	d107      	bne.n	8004916 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800491e:	d12a      	bne.n	8004976 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004928:	d012      	beq.n	8004950 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2200      	movs	r2, #0
 8004932:	2180      	movs	r1, #128	@ 0x80
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff ff49 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d02d      	beq.n	800499c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e026      	b.n	800499e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	2101      	movs	r1, #1
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7ff ff36 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01a      	beq.n	800499c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e013      	b.n	800499e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	2101      	movs	r1, #1
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff ff23 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e000      	b.n	800499e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2201      	movs	r2, #1
 80049bc:	2102      	movs	r1, #2
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ff04 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e032      	b.n	8004a40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049da:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <SPI_EndRxTxTransaction+0xa0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1b      	ldr	r2, [pc, #108]	@ (8004a4c <SPI_EndRxTxTransaction+0xa4>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	0d5b      	lsrs	r3, r3, #21
 80049e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049f8:	d112      	bne.n	8004a20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2180      	movs	r1, #128	@ 0x80
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fee1 	bl	80047cc <SPI_WaitFlagStateUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d016      	beq.n	8004a3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e00f      	b.n	8004a40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a36:	2b80      	cmp	r3, #128	@ 0x80
 8004a38:	d0f2      	beq.n	8004a20 <SPI_EndRxTxTransaction+0x78>
 8004a3a:	e000      	b.n	8004a3e <SPI_EndRxTxTransaction+0x96>
        break;
 8004a3c:	bf00      	nop
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	165e9f81 	.word	0x165e9f81

08004a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e041      	b.n	8004ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fe f8f4 	bl	8002c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 f9a6 	bl	8004de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_TIM_PWM_Start+0x24>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e022      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d109      	bne.n	8004b2e <HAL_TIM_PWM_Start+0x3e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e015      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d109      	bne.n	8004b48 <HAL_TIM_PWM_Start+0x58>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e008      	b.n	8004b5a <HAL_TIM_PWM_Start+0x6a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e068      	b.n	8004c34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x82>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b70:	e013      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x92>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b80:	e00b      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b90:	e003      	b.n	8004b9a <HAL_TIM_PWM_Start+0xaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	6839      	ldr	r1, [r7, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fa42 	bl	800502c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <HAL_TIM_PWM_Start+0x14c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <HAL_TIM_PWM_Start+0x14c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x10e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x10e>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <HAL_TIM_PWM_Start+0x150>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x10e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <HAL_TIM_PWM_Start+0x154>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x10e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a16      	ldr	r2, [pc, #88]	@ (8004c48 <HAL_TIM_PWM_Start+0x158>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x10e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a14      	ldr	r2, [pc, #80]	@ (8004c4c <HAL_TIM_PWM_Start+0x15c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d010      	beq.n	8004c32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c20:	e007      	b.n	8004c32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40014000 	.word	0x40014000

08004c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_TIM_ConfigClockSource+0x1c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0b4      	b.n	8004dd6 <HAL_TIM_ConfigClockSource+0x186>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca4:	d03e      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004caa:	f200 8087 	bhi.w	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb2:	f000 8086 	beq.w	8004dc2 <HAL_TIM_ConfigClockSource+0x172>
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cba:	d87f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b70      	cmp	r3, #112	@ 0x70
 8004cbe:	d01a      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8004cc0:	2b70      	cmp	r3, #112	@ 0x70
 8004cc2:	d87b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b60      	cmp	r3, #96	@ 0x60
 8004cc6:	d050      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x11a>
 8004cc8:	2b60      	cmp	r3, #96	@ 0x60
 8004cca:	d877      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b50      	cmp	r3, #80	@ 0x50
 8004cce:	d03c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xfa>
 8004cd0:	2b50      	cmp	r3, #80	@ 0x50
 8004cd2:	d873      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b40      	cmp	r3, #64	@ 0x40
 8004cd6:	d058      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x13a>
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d86f      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b30      	cmp	r3, #48	@ 0x30
 8004cde:	d064      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b30      	cmp	r3, #48	@ 0x30
 8004ce2:	d86b      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d060      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d867      	bhi.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05c      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d05a      	beq.n	8004daa <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	e062      	b.n	8004dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d06:	f000 f971 	bl	8004fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	609a      	str	r2, [r3, #8]
      break;
 8004d22:	e04f      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d34:	f000 f95a 	bl	8004fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d46:	609a      	str	r2, [r3, #8]
      break;
 8004d48:	e03c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 f8ce 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2150      	movs	r1, #80	@ 0x50
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 f927 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 8004d68:	e02c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 f8ed 	bl	8004f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2160      	movs	r1, #96	@ 0x60
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f917 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 8004d88:	e01c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	461a      	mov	r2, r3
 8004d98:	f000 f8ae 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2140      	movs	r1, #64	@ 0x40
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f907 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 8004da8:	e00c      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f000 f8fe 	bl	8004fb6 <TIM_ITRx_SetConfig>
      break;
 8004dba:	e003      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3a      	ldr	r2, [pc, #232]	@ (8004edc <TIM_Base_SetConfig+0xfc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a37      	ldr	r2, [pc, #220]	@ (8004ee0 <TIM_Base_SetConfig+0x100>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a36      	ldr	r2, [pc, #216]	@ (8004ee4 <TIM_Base_SetConfig+0x104>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a35      	ldr	r2, [pc, #212]	@ (8004ee8 <TIM_Base_SetConfig+0x108>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004edc <TIM_Base_SetConfig+0xfc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01b      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e38:	d017      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	@ (8004ee0 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <TIM_Base_SetConfig+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ee8 <TIM_Base_SetConfig+0x108>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a25      	ldr	r2, [pc, #148]	@ (8004eec <TIM_Base_SetConfig+0x10c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ef0 <TIM_Base_SetConfig+0x110>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a23      	ldr	r2, [pc, #140]	@ (8004ef4 <TIM_Base_SetConfig+0x114>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8004edc <TIM_Base_SetConfig+0xfc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f023 0210 	bic.w	r2, r3, #16
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 0307 	orr.w	r3, r3, #7
 8004fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	431a      	orrs	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2201      	movs	r2, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	43db      	mvns	r3, r3
 800504e:	401a      	ands	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800508c:	2302      	movs	r3, #2
 800508e:	e050      	b.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d018      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050dc:	d013      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a16      	ldr	r2, [pc, #88]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a13      	ldr	r2, [pc, #76]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10c      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800510c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40014000 	.word	0x40014000

08005154 <create_measurement_resources>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	4605      	mov	r5, r0
 800515c:	4688      	mov	r8, r1
 800515e:	4616      	mov	r6, r2
 8005160:	461f      	mov	r7, r3
 8005162:	f004 fcd7 	bl	8009b14 <acc_config_create>
 8005166:	4604      	mov	r4, r0
 8005168:	b300      	cbz	r0, 80051ac <create_measurement_resources+0x58>
 800516a:	2d01      	cmp	r5, #1
 800516c:	f108 0004 	add.w	r0, r8, #4
 8005170:	4621      	mov	r1, r4
 8005172:	d10a      	bne.n	800518a <create_measurement_resources+0x36>
 8005174:	f004 faaa 	bl	80096cc <acc_detector_distance_translation_get_far_range_sensor_config>
 8005178:	4605      	mov	r5, r0
 800517a:	b95d      	cbnz	r5, 8005194 <create_measurement_resources+0x40>
 800517c:	4620      	mov	r0, r4
 800517e:	f004 fce1 	bl	8009b44 <acc_config_destroy>
 8005182:	4628      	mov	r0, r5
 8005184:	b002      	add	sp, #8
 8005186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518a:	f004 f9d5 	bl	8009538 <acc_detector_distance_translation_get_close_range_sensor_config>
 800518e:	4605      	mov	r5, r0
 8005190:	2d00      	cmp	r5, #0
 8005192:	d0f3      	beq.n	800517c <create_measurement_resources+0x28>
 8005194:	9908      	ldr	r1, [sp, #32]
 8005196:	4620      	mov	r0, r4
 8005198:	f005 f882 	bl	800a2a0 <acc_processing_create>
 800519c:	4603      	mov	r3, r0
 800519e:	b150      	cbz	r0, 80051b6 <create_measurement_resources+0x62>
 80051a0:	4628      	mov	r0, r5
 80051a2:	6034      	str	r4, [r6, #0]
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	b002      	add	sp, #8
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	4605      	mov	r5, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	b002      	add	sp, #8
 80051b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b6:	4620      	mov	r0, r4
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	f004 fcc3 	bl	8009b44 <acc_config_destroy>
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	461d      	mov	r5, r3
 80051c2:	e7de      	b.n	8005182 <create_measurement_resources+0x2e>

080051c4 <create_noise_calibration_resources>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	4606      	mov	r6, r0
 80051ca:	4688      	mov	r8, r1
 80051cc:	4617      	mov	r7, r2
 80051ce:	461d      	mov	r5, r3
 80051d0:	f004 fca0 	bl	8009b14 <acc_config_create>
 80051d4:	4604      	mov	r4, r0
 80051d6:	b160      	cbz	r0, 80051f2 <create_noise_calibration_resources+0x2e>
 80051d8:	4631      	mov	r1, r6
 80051da:	f002 fb17 	bl	800780c <acc_detector_distance_calibration_noise_settings_set>
 80051de:	4629      	mov	r1, r5
 80051e0:	4620      	mov	r0, r4
 80051e2:	f005 f85d 	bl	800a2a0 <acc_processing_create>
 80051e6:	4605      	mov	r5, r0
 80051e8:	b128      	cbz	r0, 80051f6 <create_noise_calibration_resources+0x32>
 80051ea:	f8c8 4000 	str.w	r4, [r8]
 80051ee:	2001      	movs	r0, #1
 80051f0:	603d      	str	r5, [r7, #0]
 80051f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f6:	4620      	mov	r0, r4
 80051f8:	f004 fca4 	bl	8009b44 <acc_config_destroy>
 80051fc:	4628      	mov	r0, r5
 80051fe:	e7f8      	b.n	80051f2 <create_noise_calibration_resources+0x2e>

08005200 <prepare_and_measure>:
 8005200:	b510      	push	{r4, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	9c04      	ldr	r4, [sp, #16]
 8005206:	9400      	str	r4, [sp, #0]
 8005208:	4604      	mov	r4, r0
 800520a:	f005 f95b 	bl	800a4c4 <acc_sensor_prepare>
 800520e:	b908      	cbnz	r0, 8005214 <prepare_and_measure+0x14>
 8005210:	b002      	add	sp, #8
 8005212:	bd10      	pop	{r4, pc}
 8005214:	4620      	mov	r0, r4
 8005216:	b002      	add	sp, #8
 8005218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521c:	f005 b9a8 	b.w	800a570 <acc_sensor_measure>

08005220 <validate_distance_config.part.0>:
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <validate_distance_config.part.0+0xc>)
 8005222:	4a03      	ldr	r2, [pc, #12]	@ (8005230 <validate_distance_config.part.0+0x10>)
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	4903      	ldr	r1, [pc, #12]	@ (8005234 <validate_distance_config.part.0+0x14>)
 8005228:	2000      	movs	r0, #0
 800522a:	4718      	bx	r3
 800522c:	20000610 	.word	0x20000610
 8005230:	080149c4 	.word	0x080149c4
 8005234:	080149dc 	.word	0x080149dc

08005238 <validate_distance_handle.part.0>:
 8005238:	4b02      	ldr	r3, [pc, #8]	@ (8005244 <validate_distance_handle.part.0+0xc>)
 800523a:	4a03      	ldr	r2, [pc, #12]	@ (8005248 <validate_distance_handle.part.0+0x10>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	4903      	ldr	r1, [pc, #12]	@ (800524c <validate_distance_handle.part.0+0x14>)
 8005240:	2000      	movs	r0, #0
 8005242:	4718      	bx	r3
 8005244:	20000610 	.word	0x20000610
 8005248:	080149f0 	.word	0x080149f0
 800524c:	080149dc 	.word	0x080149dc

08005250 <detector_has_close_range>:
 8005250:	b508      	push	{r3, lr}
 8005252:	b118      	cbz	r0, 800525c <detector_has_close_range+0xc>
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <detector_has_close_range+0x20>)
 8005256:	6802      	ldr	r2, [r0, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d003      	beq.n	8005264 <detector_has_close_range+0x14>
 800525c:	f7ff ffec 	bl	8005238 <validate_distance_handle.part.0>
 8005260:	2000      	movs	r0, #0
 8005262:	bd08      	pop	{r3, pc}
 8005264:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8005266:	3800      	subs	r0, #0
 8005268:	bf18      	it	ne
 800526a:	2001      	movne	r0, #1
 800526c:	bd08      	pop	{r3, pc}
 800526e:	bf00      	nop
 8005270:	acc0d130 	.word	0xacc0d130

08005274 <detector_has_far_range>:
 8005274:	b508      	push	{r3, lr}
 8005276:	b118      	cbz	r0, 8005280 <detector_has_far_range+0xc>
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <detector_has_far_range+0x20>)
 800527a:	6802      	ldr	r2, [r0, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d003      	beq.n	8005288 <detector_has_far_range+0x14>
 8005280:	f7ff ffda 	bl	8005238 <validate_distance_handle.part.0>
 8005284:	2000      	movs	r0, #0
 8005286:	bd08      	pop	{r3, pc}
 8005288:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 800528a:	3800      	subs	r0, #0
 800528c:	bf18      	it	ne
 800528e:	2001      	movne	r0, #1
 8005290:	bd08      	pop	{r3, pc}
 8005292:	bf00      	nop
 8005294:	acc0d130 	.word	0xacc0d130

08005298 <decide_next_measurement_type>:
 8005298:	b508      	push	{r3, lr}
 800529a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800529e:	b91b      	cbnz	r3, 80052a8 <decide_next_measurement_type+0x10>
 80052a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052a4:	f7ff bfe6 	b.w	8005274 <detector_has_far_range>
 80052a8:	f7ff ffd2 	bl	8005250 <detector_has_close_range>
 80052ac:	f080 0001 	eor.w	r0, r0, #1
 80052b0:	b2c0      	uxtb	r0, r0
 80052b2:	bd08      	pop	{r3, pc}

080052b4 <acc_detector_distance_config_create>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	490b      	ldr	r1, [pc, #44]	@ (80052e4 <acc_detector_distance_config_create+0x30>)
 80052b8:	f240 1251 	movw	r2, #337	@ 0x151
 80052bc:	2030      	movs	r0, #48	@ 0x30
 80052be:	f007 f8c3 	bl	800c448 <acc_rss_integration_mem_alloc_debug>
 80052c2:	4606      	mov	r6, r0
 80052c4:	b160      	cbz	r0, 80052e0 <acc_detector_distance_config_create+0x2c>
 80052c6:	4d08      	ldr	r5, [pc, #32]	@ (80052e8 <acc_detector_distance_config_create+0x34>)
 80052c8:	4f08      	ldr	r7, [pc, #32]	@ (80052ec <acc_detector_distance_config_create+0x38>)
 80052ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052cc:	4634      	mov	r4, r6
 80052ce:	f844 7b04 	str.w	r7, [r4], #4
 80052d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052e0:	4630      	mov	r0, r6
 80052e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e4:	080149dc 	.word	0x080149dc
 80052e8:	08014918 	.word	0x08014918
 80052ec:	acc0d150 	.word	0xacc0d150

080052f0 <acc_detector_distance_config_destroy>:
 80052f0:	b118      	cbz	r0, 80052fa <acc_detector_distance_config_destroy+0xa>
 80052f2:	4a05      	ldr	r2, [pc, #20]	@ (8005308 <acc_detector_distance_config_destroy+0x18>)
 80052f4:	6801      	ldr	r1, [r0, #0]
 80052f6:	4291      	cmp	r1, r2
 80052f8:	d001      	beq.n	80052fe <acc_detector_distance_config_destroy+0xe>
 80052fa:	f7ff bf91 	b.w	8005220 <validate_distance_config.part.0>
 80052fe:	2200      	movs	r2, #0
 8005300:	6002      	str	r2, [r0, #0]
 8005302:	f007 b8e1 	b.w	800c4c8 <acc_rss_integration_mem_free>
 8005306:	bf00      	nop
 8005308:	acc0d150 	.word	0xacc0d150

0800530c <acc_detector_distance_get_buffer_sizes>:
 800530c:	b510      	push	{r4, lr}
 800530e:	b118      	cbz	r0, 8005318 <acc_detector_distance_get_buffer_sizes+0xc>
 8005310:	4b08      	ldr	r3, [pc, #32]	@ (8005334 <acc_detector_distance_get_buffer_sizes+0x28>)
 8005312:	6804      	ldr	r4, [r0, #0]
 8005314:	429c      	cmp	r4, r3
 8005316:	d003      	beq.n	8005320 <acc_detector_distance_get_buffer_sizes+0x14>
 8005318:	f7ff ff8e 	bl	8005238 <validate_distance_handle.part.0>
 800531c:	2000      	movs	r0, #0
 800531e:	bd10      	pop	{r4, pc}
 8005320:	6883      	ldr	r3, [r0, #8]
 8005322:	6904      	ldr	r4, [r0, #16]
 8005324:	4423      	add	r3, r4
 8005326:	600b      	str	r3, [r1, #0]
 8005328:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800532a:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800532c:	440b      	add	r3, r1
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	2001      	movs	r0, #1
 8005332:	bd10      	pop	{r4, pc}
 8005334:	acc0d130 	.word	0xacc0d130

08005338 <acc_detector_distance_destroy>:
 8005338:	2800      	cmp	r0, #0
 800533a:	d04f      	beq.n	80053dc <acc_detector_distance_destroy+0xa4>
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	6802      	ldr	r2, [r0, #0]
 8005340:	4b27      	ldr	r3, [pc, #156]	@ (80053e0 <acc_detector_distance_destroy+0xa8>)
 8005342:	429a      	cmp	r2, r3
 8005344:	4604      	mov	r4, r0
 8005346:	d003      	beq.n	8005350 <acc_detector_distance_destroy+0x18>
 8005348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800534c:	f7ff bf74 	b.w	8005238 <validate_distance_handle.part.0>
 8005350:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8005352:	2500      	movs	r5, #0
 8005354:	6025      	str	r5, [r4, #0]
 8005356:	b110      	cbz	r0, 800535e <acc_detector_distance_destroy+0x26>
 8005358:	f004 fbf4 	bl	8009b44 <acc_config_destroy>
 800535c:	65a5      	str	r5, [r4, #88]	@ 0x58
 800535e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005360:	b118      	cbz	r0, 800536a <acc_detector_distance_destroy+0x32>
 8005362:	f004 ff79 	bl	800a258 <acc_processing_destroy>
 8005366:	2300      	movs	r3, #0
 8005368:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800536a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800536c:	b118      	cbz	r0, 8005376 <acc_detector_distance_destroy+0x3e>
 800536e:	f004 fbe9 	bl	8009b44 <acc_config_destroy>
 8005372:	2300      	movs	r3, #0
 8005374:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8005376:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005378:	b118      	cbz	r0, 8005382 <acc_detector_distance_destroy+0x4a>
 800537a:	f004 ff6d 	bl	800a258 <acc_processing_destroy>
 800537e:	2300      	movs	r3, #0
 8005380:	6723      	str	r3, [r4, #112]	@ 0x70
 8005382:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005384:	b118      	cbz	r0, 800538e <acc_detector_distance_destroy+0x56>
 8005386:	f004 fbdd 	bl	8009b44 <acc_config_destroy>
 800538a:	2300      	movs	r3, #0
 800538c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800538e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005390:	b118      	cbz	r0, 800539a <acc_detector_distance_destroy+0x62>
 8005392:	f004 ff61 	bl	800a258 <acc_processing_destroy>
 8005396:	2300      	movs	r3, #0
 8005398:	6623      	str	r3, [r4, #96]	@ 0x60
 800539a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800539c:	b118      	cbz	r0, 80053a6 <acc_detector_distance_destroy+0x6e>
 800539e:	f004 fbd1 	bl	8009b44 <acc_config_destroy>
 80053a2:	2300      	movs	r3, #0
 80053a4:	6523      	str	r3, [r4, #80]	@ 0x50
 80053a6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80053a8:	b118      	cbz	r0, 80053b2 <acc_detector_distance_destroy+0x7a>
 80053aa:	f004 ff55 	bl	800a258 <acc_processing_destroy>
 80053ae:	2300      	movs	r3, #0
 80053b0:	6663      	str	r3, [r4, #100]	@ 0x64
 80053b2:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80053b4:	b118      	cbz	r0, 80053be <acc_detector_distance_destroy+0x86>
 80053b6:	f004 fbc5 	bl	8009b44 <acc_config_destroy>
 80053ba:	2300      	movs	r3, #0
 80053bc:	6563      	str	r3, [r4, #84]	@ 0x54
 80053be:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 80053c0:	b118      	cbz	r0, 80053ca <acc_detector_distance_destroy+0x92>
 80053c2:	f004 ff49 	bl	800a258 <acc_processing_destroy>
 80053c6:	2300      	movs	r3, #0
 80053c8:	66a3      	str	r3, [r4, #104]	@ 0x68
 80053ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80053cc:	b108      	cbz	r0, 80053d2 <acc_detector_distance_destroy+0x9a>
 80053ce:	f001 f8af 	bl	8006530 <acc_detector_distance_aggregator_destroy>
 80053d2:	4620      	mov	r0, r4
 80053d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d8:	f007 b876 	b.w	800c4c8 <acc_rss_integration_mem_free>
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	acc0d130 	.word	0xacc0d130

080053e4 <acc_detector_distance_create>:
 80053e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053e8:	b0ad      	sub	sp, #180	@ 0xb4
 80053ea:	b120      	cbz	r0, 80053f6 <acc_detector_distance_create+0x12>
 80053ec:	4b8f      	ldr	r3, [pc, #572]	@ (800562c <acc_detector_distance_create+0x248>)
 80053ee:	6802      	ldr	r2, [r0, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	4605      	mov	r5, r0
 80053f4:	d010      	beq.n	8005418 <acc_detector_distance_create+0x34>
 80053f6:	f7ff ff13 	bl	8005220 <validate_distance_config.part.0>
 80053fa:	2400      	movs	r4, #0
 80053fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005630 <acc_detector_distance_create+0x24c>)
 80053fe:	4a8d      	ldr	r2, [pc, #564]	@ (8005634 <acc_detector_distance_create+0x250>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	498d      	ldr	r1, [pc, #564]	@ (8005638 <acc_detector_distance_create+0x254>)
 8005404:	2000      	movs	r0, #0
 8005406:	4798      	blx	r3
 8005408:	4620      	mov	r0, r4
 800540a:	f7ff ff95 	bl	8005338 <acc_detector_distance_destroy>
 800540e:	2400      	movs	r4, #0
 8005410:	4620      	mov	r0, r4
 8005412:	b02d      	add	sp, #180	@ 0xb4
 8005414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005418:	4a87      	ldr	r2, [pc, #540]	@ (8005638 <acc_detector_distance_create+0x254>)
 800541a:	f240 1385 	movw	r3, #389	@ 0x185
 800541e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8005422:	2001      	movs	r0, #1
 8005424:	f007 f834 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 8005428:	4604      	mov	r4, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d0e6      	beq.n	80053fc <acc_detector_distance_create+0x18>
 800542e:	462e      	mov	r6, r5
 8005430:	4b82      	ldr	r3, [pc, #520]	@ (800563c <acc_detector_distance_create+0x258>)
 8005432:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8005436:	6462      	str	r2, [r4, #68]	@ 0x44
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	228c      	movs	r2, #140	@ 0x8c
 800543c:	2100      	movs	r1, #0
 800543e:	a809      	add	r0, sp, #36	@ 0x24
 8005440:	f00b fb1c 	bl	8010a7c <memset>
 8005444:	4630      	mov	r0, r6
 8005446:	f003 ffcd 	bl	80093e4 <acc_detector_distance_translation_get_num_processor_specifications>
 800544a:	4680      	mov	r8, r0
 800544c:	4642      	mov	r2, r8
 800544e:	4630      	mov	r0, r6
 8005450:	a909      	add	r1, sp, #36	@ 0x24
 8005452:	f003 ffd5 	bl	8009400 <acc_detector_distance_translation_get_processor_specifications>
 8005456:	4606      	mov	r6, r0
 8005458:	2800      	cmp	r0, #0
 800545a:	d0cf      	beq.n	80053fc <acc_detector_distance_create+0x18>
 800545c:	f1b8 0f00 	cmp.w	r8, #0
 8005460:	d01c      	beq.n	800549c <acc_detector_distance_create+0xb8>
 8005462:	f108 31ff 	add.w	r1, r8, #4294967295
 8005466:	b289      	uxth	r1, r1
 8005468:	ab10      	add	r3, sp, #64	@ 0x40
 800546a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800546e:	2000      	movs	r0, #0
 8005470:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005474:	4607      	mov	r7, r0
 8005476:	ab09      	add	r3, sp, #36	@ 0x24
 8005478:	e005      	b.n	8005486 <acc_detector_distance_create+0xa2>
 800547a:	331c      	adds	r3, #28
 800547c:	2a01      	cmp	r2, #1
 800547e:	bf08      	it	eq
 8005480:	4630      	moveq	r0, r6
 8005482:	4299      	cmp	r1, r3
 8005484:	d006      	beq.n	8005494 <acc_detector_distance_create+0xb0>
 8005486:	785a      	ldrb	r2, [r3, #1]
 8005488:	2a00      	cmp	r2, #0
 800548a:	d1f6      	bne.n	800547a <acc_detector_distance_create+0x96>
 800548c:	331c      	adds	r3, #28
 800548e:	4299      	cmp	r1, r3
 8005490:	4637      	mov	r7, r6
 8005492:	d1f8      	bne.n	8005486 <acc_detector_distance_create+0xa2>
 8005494:	2800      	cmp	r0, #0
 8005496:	d15a      	bne.n	800554e <acc_detector_distance_create+0x16a>
 8005498:	2f00      	cmp	r7, #0
 800549a:	d176      	bne.n	800558a <acc_detector_distance_create+0x1a6>
 800549c:	2700      	movs	r7, #0
 800549e:	2300      	movs	r3, #0
 80054a0:	7523      	strb	r3, [r4, #20]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff fed4 	bl	8005250 <detector_has_close_range>
 80054a8:	4681      	mov	r9, r0
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff fee2 	bl	8005274 <detector_has_far_range>
 80054b0:	b118      	cbz	r0, 80054ba <acc_detector_distance_create+0xd6>
 80054b2:	7e2e      	ldrb	r6, [r5, #24]
 80054b4:	3e02      	subs	r6, #2
 80054b6:	bf18      	it	ne
 80054b8:	2601      	movne	r6, #1
 80054ba:	f089 0901 	eor.w	r9, r9, #1
 80054be:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
 80054c2:	f884 6049 	strb.w	r6, [r4, #73]	@ 0x49
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fed4 	bl	8005274 <detector_has_far_range>
 80054cc:	4602      	mov	r2, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 80a2 	bne.w	8005618 <acc_detector_distance_create+0x234>
 80054d4:	4639      	mov	r1, r7
 80054d6:	f104 0018 	add.w	r0, r4, #24
 80054da:	f002 f8db 	bl	8007694 <acc_detector_distance_calibration_buffer_map_init>
 80054de:	f004 fb19 	bl	8009b14 <acc_config_create>
 80054e2:	4606      	mov	r6, r0
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d089      	beq.n	80053fc <acc_detector_distance_create+0x18>
 80054e8:	f002 f8fc 	bl	80076e4 <acc_detector_distance_calibration_offset_settings_set>
 80054ec:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 80054f0:	4630      	mov	r0, r6
 80054f2:	f004 fed5 	bl	800a2a0 <acc_processing_create>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f000 8093 	beq.w	8005622 <acc_detector_distance_create+0x23e>
 80054fc:	64e6      	str	r6, [r4, #76]	@ 0x4c
 80054fe:	6620      	str	r0, [r4, #96]	@ 0x60
 8005500:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005502:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005504:	7e68      	ldrb	r0, [r5, #25]
 8005506:	f8cd 8000 	str.w	r8, [sp]
 800550a:	ab09      	add	r3, sp, #36	@ 0x24
 800550c:	f000 ff80 	bl	8006410 <acc_detector_distance_aggregator_create>
 8005510:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8005512:	2800      	cmp	r0, #0
 8005514:	f43f af72 	beq.w	80053fc <acc_detector_distance_create+0x18>
 8005518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800551a:	2600      	movs	r6, #0
 800551c:	6066      	str	r6, [r4, #4]
 800551e:	9004      	str	r0, [sp, #16]
 8005520:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005522:	9305      	str	r3, [sp, #20]
 8005524:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005526:	9306      	str	r3, [sp, #24]
 8005528:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800552e:	9308      	str	r3, [sp, #32]
 8005530:	4637      	mov	r7, r6
 8005532:	2501      	movs	r5, #1
 8005534:	a903      	add	r1, sp, #12
 8005536:	2800      	cmp	r0, #0
 8005538:	d049      	beq.n	80055ce <acc_detector_distance_create+0x1ea>
 800553a:	9703      	str	r7, [sp, #12]
 800553c:	f004 f906 	bl	800974c <acc_rss_get_buffer_size>
 8005540:	2800      	cmp	r0, #0
 8005542:	d140      	bne.n	80055c6 <acc_detector_distance_create+0x1e2>
 8005544:	4630      	mov	r0, r6
 8005546:	f006 ff13 	bl	800c370 <acc_detector_utils_align_size_32bit>
 800554a:	60a0      	str	r0, [r4, #8]
 800554c:	e756      	b.n	80053fc <acc_detector_distance_create+0x18>
 800554e:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 8005552:	2001      	movs	r0, #1
 8005554:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8005558:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4629      	mov	r1, r5
 8005560:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 8005564:	f7ff fdf6 	bl	8005154 <create_measurement_resources>
 8005568:	2800      	cmp	r0, #0
 800556a:	f43f af47 	beq.w	80053fc <acc_detector_distance_create+0x18>
 800556e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005570:	f104 03ac 	add.w	r3, r4, #172	@ 0xac
 8005574:	f104 0268 	add.w	r2, r4, #104	@ 0x68
 8005578:	f104 0154 	add.w	r1, r4, #84	@ 0x54
 800557c:	f7ff fe22 	bl	80051c4 <create_noise_calibration_resources>
 8005580:	2800      	cmp	r0, #0
 8005582:	f43f af3b 	beq.w	80053fc <acc_detector_distance_create+0x18>
 8005586:	2f00      	cmp	r7, #0
 8005588:	d088      	beq.n	800549c <acc_detector_distance_create+0xb8>
 800558a:	f104 03c8 	add.w	r3, r4, #200	@ 0xc8
 800558e:	2000      	movs	r0, #0
 8005590:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 8005594:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	4629      	mov	r1, r5
 800559c:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 80055a0:	f7ff fdd8 	bl	8005154 <create_measurement_resources>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f43f af29 	beq.w	80053fc <acc_detector_distance_create+0x18>
 80055aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055ac:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 80055b0:	f104 0264 	add.w	r2, r4, #100	@ 0x64
 80055b4:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 80055b8:	f7ff fe04 	bl	80051c4 <create_noise_calibration_resources>
 80055bc:	4607      	mov	r7, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	f47f af6d 	bne.w	800549e <acc_detector_distance_create+0xba>
 80055c4:	e71a      	b.n	80053fc <acc_detector_distance_create+0x18>
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	429e      	cmp	r6, r3
 80055ca:	bf38      	it	cc
 80055cc:	461e      	movcc	r6, r3
 80055ce:	2d05      	cmp	r5, #5
 80055d0:	d007      	beq.n	80055e2 <acc_detector_distance_create+0x1fe>
 80055d2:	ab2c      	add	r3, sp, #176	@ 0xb0
 80055d4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80055d8:	3501      	adds	r5, #1
 80055da:	f853 0ca0 	ldr.w	r0, [r3, #-160]
 80055de:	b2ad      	uxth	r5, r5
 80055e0:	e7a8      	b.n	8005534 <acc_detector_distance_create+0x150>
 80055e2:	4630      	mov	r0, r6
 80055e4:	f006 fec4 	bl	800c370 <acc_detector_utils_align_size_32bit>
 80055e8:	2300      	movs	r3, #0
 80055ea:	e9c4 0002 	strd	r0, r0, [r4, #8]
 80055ee:	f104 0238 	add.w	r2, r4, #56	@ 0x38
 80055f2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	a904      	add	r1, sp, #16
 80055f8:	f000 fef6 	bl	80063e8 <acc_detector_distance_aggregator_get_buffer_sizes>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	f43f aefd 	beq.w	80053fc <acc_detector_distance_create+0x18>
 8005602:	9b04      	ldr	r3, [sp, #16]
 8005604:	f5b3 6fee 	cmp.w	r3, #1904	@ 0x770
 8005608:	bf38      	it	cc
 800560a:	f44f 63ee 	movcc.w	r3, #1904	@ 0x770
 800560e:	4620      	mov	r0, r4
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	b02d      	add	sp, #180	@ 0xb4
 8005614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005618:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800561a:	f004 fac1 	bl	8009ba0 <acc_config_num_subsweeps_get>
 800561e:	4602      	mov	r2, r0
 8005620:	e758      	b.n	80054d4 <acc_detector_distance_create+0xf0>
 8005622:	4630      	mov	r0, r6
 8005624:	f004 fa8e 	bl	8009b44 <acc_config_destroy>
 8005628:	e6e8      	b.n	80053fc <acc_detector_distance_create+0x18>
 800562a:	bf00      	nop
 800562c:	acc0d150 	.word	0xacc0d150
 8005630:	20000610 	.word	0x20000610
 8005634:	08014a08 	.word	0x08014a08
 8005638:	080149dc 	.word	0x080149dc
 800563c:	acc0d130 	.word	0xacc0d130

08005640 <acc_detector_distance_calibrate>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	b08d      	sub	sp, #52	@ 0x34
 8005646:	2400      	movs	r4, #0
 8005648:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800564c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800564e:	b131      	cbz	r1, 800565e <acc_detector_distance_calibrate+0x1e>
 8005650:	4617      	mov	r7, r2
 8005652:	4698      	mov	r8, r3
 8005654:	680a      	ldr	r2, [r1, #0]
 8005656:	4b9b      	ldr	r3, [pc, #620]	@ (80058c4 <acc_detector_distance_calibrate+0x284>)
 8005658:	429a      	cmp	r2, r3
 800565a:	460d      	mov	r5, r1
 800565c:	d005      	beq.n	800566a <acc_detector_distance_calibrate+0x2a>
 800565e:	f7ff fdeb 	bl	8005238 <validate_distance_handle.part.0>
 8005662:	2000      	movs	r0, #0
 8005664:	b00d      	add	sp, #52	@ 0x34
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	aa08      	add	r2, sp, #32
 800566c:	4606      	mov	r6, r0
 800566e:	a907      	add	r1, sp, #28
 8005670:	4628      	mov	r0, r5
 8005672:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005676:	f7ff fe49 	bl	800530c <acc_detector_distance_get_buffer_sizes>
 800567a:	9b07      	ldr	r3, [sp, #28]
 800567c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800567e:	4293      	cmp	r3, r2
 8005680:	d80d      	bhi.n	800569e <acc_detector_distance_calibrate+0x5e>
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8005686:	429a      	cmp	r2, r3
 8005688:	d214      	bcs.n	80056b4 <acc_detector_distance_calibrate+0x74>
 800568a:	4d8f      	ldr	r5, [pc, #572]	@ (80058c8 <acc_detector_distance_calibrate+0x288>)
 800568c:	692b      	ldr	r3, [r5, #16]
 800568e:	4a8f      	ldr	r2, [pc, #572]	@ (80058cc <acc_detector_distance_calibrate+0x28c>)
 8005690:	498f      	ldr	r1, [pc, #572]	@ (80058d0 <acc_detector_distance_calibrate+0x290>)
 8005692:	2000      	movs	r0, #0
 8005694:	4798      	blx	r3
 8005696:	2000      	movs	r0, #0
 8005698:	b00d      	add	sp, #52	@ 0x34
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	4d8a      	ldr	r5, [pc, #552]	@ (80058c8 <acc_detector_distance_calibrate+0x288>)
 80056a0:	4a8c      	ldr	r2, [pc, #560]	@ (80058d4 <acc_detector_distance_calibrate+0x294>)
 80056a2:	692b      	ldr	r3, [r5, #16]
 80056a4:	498a      	ldr	r1, [pc, #552]	@ (80058d0 <acc_detector_distance_calibrate+0x290>)
 80056a6:	4620      	mov	r0, r4
 80056a8:	4798      	blx	r3
 80056aa:	9b08      	ldr	r3, [sp, #32]
 80056ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d3ec      	bcc.n	800568c <acc_detector_distance_calibrate+0x4c>
 80056b2:	e7d6      	b.n	8005662 <acc_detector_distance_calibrate+0x22>
 80056b4:	7d2b      	ldrb	r3, [r5, #20]
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	f200 8193 	bhi.w	80059e2 <acc_detector_distance_calibrate+0x3a2>
 80056bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056c0:	010c0140 	.word	0x010c0140
 80056c4:	008900ca 	.word	0x008900ca
 80056c8:	00060012 	.word	0x00060012
 80056cc:	f006 ff10 	bl	800c4f0 <acc_rss_integration_log_level>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f040 8143 	bne.w	800595c <acc_detector_distance_calibrate+0x31c>
 80056d6:	7d2b      	ldrb	r3, [r5, #20]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d074      	beq.n	80057c6 <acc_detector_distance_calibrate+0x186>
 80056dc:	2001      	movs	r0, #1
 80056de:	b00d      	add	sp, #52	@ 0x34
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80056e6:	4641      	mov	r1, r8
 80056e8:	4630      	mov	r0, r6
 80056ea:	f004 ff69 	bl	800a5c0 <acc_sensor_read>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d0b7      	beq.n	8005662 <acc_detector_distance_calibrate+0x22>
 80056f2:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 8137 	bne.w	800596a <acc_detector_distance_calibrate+0x32a>
 80056fc:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80056fe:	aa09      	add	r2, sp, #36	@ 0x24
 8005700:	4641      	mov	r1, r8
 8005702:	f004 fd6d 	bl	800a1e0 <acc_processing_execute>
 8005706:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 800570a:	b14b      	cbz	r3, 8005720 <acc_detector_distance_calibrate+0xe0>
 800570c:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 8005710:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8005712:	2a00      	cmp	r2, #0
 8005714:	f040 812e 	bne.w	8005974 <acc_detector_distance_calibrate+0x334>
 8005718:	f105 02c8 	add.w	r2, r5, #200	@ 0xc8
 800571c:	a909      	add	r1, sp, #36	@ 0x24
 800571e:	4798      	blx	r3
 8005720:	f895 4040 	ldrb.w	r4, [r5, #64]	@ 0x40
 8005724:	68eb      	ldr	r3, [r5, #12]
 8005726:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005728:	f8d5 a03c 	ldr.w	sl, [r5, #60]	@ 0x3c
 800572c:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8005730:	f105 0918 	add.w	r9, r5, #24
 8005734:	4622      	mov	r2, r4
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	4443      	add	r3, r8
 800573c:	4649      	mov	r1, r9
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	f88d c020 	strb.w	ip, [sp, #32]
 8005744:	f001 ffba 	bl	80076bc <acc_detector_distance_calibration_buffer_bg_noise_array_get>
 8005748:	4649      	mov	r1, r9
 800574a:	4603      	mov	r3, r0
 800574c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800574e:	9305      	str	r3, [sp, #20]
 8005750:	f001 ffc4 	bl	80076dc <acc_detector_distance_calibration_buffer_aggregator_partition_get>
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	4621      	mov	r1, r4
 800575a:	ac08      	add	r4, sp, #32
 800575c:	9001      	str	r0, [sp, #4]
 800575e:	9b05      	ldr	r3, [sp, #20]
 8005760:	9402      	str	r4, [sp, #8]
 8005762:	465a      	mov	r2, fp
 8005764:	4650      	mov	r0, sl
 8005766:	f000 fefd 	bl	8006564 <acc_detector_distance_aggregator_calibrate>
 800576a:	2800      	cmp	r0, #0
 800576c:	f43f af7a 	beq.w	8005664 <acc_detector_distance_calibrate+0x24>
 8005770:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 8005774:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8005778:	442b      	add	r3, r5
 800577a:	4628      	mov	r0, r5
 800577c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8005780:	f7ff fd8a 	bl	8005298 <decide_next_measurement_type>
 8005784:	182b      	adds	r3, r5, r0
 8005786:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800578a:	b90b      	cbnz	r3, 8005790 <acc_detector_distance_calibrate+0x150>
 800578c:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 8005790:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8005794:	b123      	cbz	r3, 80057a0 <acc_detector_distance_calibrate+0x160>
 8005796:	f895 3049 	ldrb.w	r3, [r5, #73]	@ 0x49
 800579a:	2b00      	cmp	r3, #0
 800579c:	f040 810e 	bne.w	80059bc <acc_detector_distance_calibrate+0x37c>
 80057a0:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 8102 	bne.w	80059ae <acc_detector_distance_calibrate+0x36e>
 80057aa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80057ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	463a      	mov	r2, r7
 80057b2:	4643      	mov	r3, r8
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff fd23 	bl	8005200 <prepare_and_measure>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f43f af51 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 80057c0:	7d2b      	ldrb	r3, [r5, #20]
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	d18a      	bne.n	80056dc <acc_detector_distance_calibrate+0x9c>
 80057c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057c8:	2001      	movs	r0, #1
 80057ca:	7018      	strb	r0, [r3, #0]
 80057cc:	b00d      	add	sp, #52	@ 0x34
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80057d4:	4641      	mov	r1, r8
 80057d6:	4630      	mov	r0, r6
 80057d8:	f004 fef2 	bl	800a5c0 <acc_sensor_read>
 80057dc:	2800      	cmp	r0, #0
 80057de:	f43f af40 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 80057e2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 80057e4:	aa09      	add	r2, sp, #36	@ 0x24
 80057e6:	4641      	mov	r1, r8
 80057e8:	f004 fcfa 	bl	800a1e0 <acc_processing_execute>
 80057ec:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 80057f0:	b123      	cbz	r3, 80057fc <acc_detector_distance_calibrate+0x1bc>
 80057f2:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 80057f4:	a909      	add	r1, sp, #36	@ 0x24
 80057f6:	f105 02ac 	add.w	r2, r5, #172	@ 0xac
 80057fa:	4798      	blx	r3
 80057fc:	2201      	movs	r2, #1
 80057fe:	f105 0118 	add.w	r1, r5, #24
 8005802:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005804:	f001 ff5a 	bl	80076bc <acc_detector_distance_calibration_buffer_bg_noise_array_get>
 8005808:	68ea      	ldr	r2, [r5, #12]
 800580a:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800580c:	4603      	mov	r3, r0
 800580e:	4442      	add	r2, r8
 8005810:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005812:	f002 f87d 	bl	8007910 <acc_detector_distance_calibration_noise_process>
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f af23 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 800581c:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800581e:	f000 fef3 	bl	8006608 <acc_detector_distance_aggregator_calibration_needed>
 8005822:	2800      	cmp	r0, #0
 8005824:	f000 80c0 	beq.w	80059a8 <acc_detector_distance_calibrate+0x368>
 8005828:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80c3 	beq.w	80059b8 <acc_detector_distance_calibrate+0x378>
 8005832:	2b01      	cmp	r3, #1
 8005834:	f040 80d3 	bne.w	80059de <acc_detector_distance_calibrate+0x39e>
 8005838:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800583a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	463a      	mov	r2, r7
 8005840:	4643      	mov	r3, r8
 8005842:	4630      	mov	r0, r6
 8005844:	f7ff fcdc 	bl	8005200 <prepare_and_measure>
 8005848:	2800      	cmp	r0, #0
 800584a:	f43f af0a 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 800584e:	2304      	movs	r3, #4
 8005850:	752b      	strb	r3, [r5, #20]
 8005852:	e743      	b.n	80056dc <acc_detector_distance_calibrate+0x9c>
 8005854:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005856:	4641      	mov	r1, r8
 8005858:	4630      	mov	r0, r6
 800585a:	f004 feb1 	bl	800a5c0 <acc_sensor_read>
 800585e:	2800      	cmp	r0, #0
 8005860:	f43f aeff 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 8005864:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 8005866:	aa09      	add	r2, sp, #36	@ 0x24
 8005868:	4641      	mov	r1, r8
 800586a:	f004 fcb9 	bl	800a1e0 <acc_processing_execute>
 800586e:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 8005872:	b123      	cbz	r3, 800587e <acc_detector_distance_calibrate+0x23e>
 8005874:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8005876:	a909      	add	r1, sp, #36	@ 0x24
 8005878:	f105 0290 	add.w	r2, r5, #144	@ 0x90
 800587c:	4798      	blx	r3
 800587e:	2200      	movs	r2, #0
 8005880:	f105 0118 	add.w	r1, r5, #24
 8005884:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005886:	f001 ff19 	bl	80076bc <acc_detector_distance_calibration_buffer_bg_noise_array_get>
 800588a:	68ea      	ldr	r2, [r5, #12]
 800588c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800588e:	4603      	mov	r3, r0
 8005890:	4442      	add	r2, r8
 8005892:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005894:	f002 f83c 	bl	8007910 <acc_detector_distance_calibration_noise_process>
 8005898:	2800      	cmp	r0, #0
 800589a:	f43f aee2 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 800589e:	4628      	mov	r0, r5
 80058a0:	f7ff fce8 	bl	8005274 <detector_has_far_range>
 80058a4:	4604      	mov	r4, r0
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d170      	bne.n	800598c <acc_detector_distance_calibrate+0x34c>
 80058aa:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80058ac:	f000 feac 	bl	8006608 <acc_detector_distance_aggregator_calibration_needed>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d079      	beq.n	80059a8 <acc_detector_distance_calibrate+0x368>
 80058b4:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d07d      	beq.n	80059b8 <acc_detector_distance_calibrate+0x378>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d0bb      	beq.n	8005838 <acc_detector_distance_calibrate+0x1f8>
 80058c0:	4621      	mov	r1, r4
 80058c2:	e7ba      	b.n	800583a <acc_detector_distance_calibrate+0x1fa>
 80058c4:	acc0d130 	.word	0xacc0d130
 80058c8:	20000610 	.word	0x20000610
 80058cc:	08014a44 	.word	0x08014a44
 80058d0:	080149dc 	.word	0x080149dc
 80058d4:	08014a2c 	.word	0x08014a2c
 80058d8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80058da:	4641      	mov	r1, r8
 80058dc:	4630      	mov	r0, r6
 80058de:	f004 fe6f 	bl	800a5c0 <acc_sensor_read>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f43f aebd 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 80058e8:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 80058ea:	aa09      	add	r2, sp, #36	@ 0x24
 80058ec:	4641      	mov	r1, r8
 80058ee:	f004 fc77 	bl	800a1e0 <acc_processing_execute>
 80058f2:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 80058f6:	b123      	cbz	r3, 8005902 <acc_detector_distance_calibrate+0x2c2>
 80058f8:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 80058fa:	a909      	add	r1, sp, #36	@ 0x24
 80058fc:	f105 0274 	add.w	r2, r5, #116	@ 0x74
 8005900:	4798      	blx	r3
 8005902:	f105 0118 	add.w	r1, r5, #24
 8005906:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8005908:	f001 fee4 	bl	80076d4 <acc_detector_distance_calibration_buffer_loopback_peak_distance_get>
 800590c:	68e9      	ldr	r1, [r5, #12]
 800590e:	4604      	mov	r4, r0
 8005910:	4441      	add	r1, r8
 8005912:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005914:	f001 ff1a 	bl	800774c <acc_detector_distance_calibration_offset_process>
 8005918:	4628      	mov	r0, r5
 800591a:	ed84 0a00 	vstr	s0, [r4]
 800591e:	f7ff fc97 	bl	8005250 <detector_has_close_range>
 8005922:	b368      	cbz	r0, 8005980 <acc_detector_distance_calibrate+0x340>
 8005924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800592a:	4643      	mov	r3, r8
 800592c:	463a      	mov	r2, r7
 800592e:	4630      	mov	r0, r6
 8005930:	f7ff fc66 	bl	8005200 <prepare_and_measure>
 8005934:	2800      	cmp	r0, #0
 8005936:	f43f ae94 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 800593a:	2302      	movs	r3, #2
 800593c:	752b      	strb	r3, [r5, #20]
 800593e:	e6cd      	b.n	80056dc <acc_detector_distance_calibrate+0x9c>
 8005940:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005946:	4643      	mov	r3, r8
 8005948:	463a      	mov	r2, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f7ff fc58 	bl	8005200 <prepare_and_measure>
 8005950:	2800      	cmp	r0, #0
 8005952:	f43f ae86 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 8005956:	2301      	movs	r3, #1
 8005958:	752b      	strb	r3, [r5, #20]
 800595a:	e6bf      	b.n	80056dc <acc_detector_distance_calibrate+0x9c>
 800595c:	4b25      	ldr	r3, [pc, #148]	@ (80059f4 <acc_detector_distance_calibrate+0x3b4>)
 800595e:	4a26      	ldr	r2, [pc, #152]	@ (80059f8 <acc_detector_distance_calibrate+0x3b8>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	4926      	ldr	r1, [pc, #152]	@ (80059fc <acc_detector_distance_calibrate+0x3bc>)
 8005964:	2001      	movs	r0, #1
 8005966:	4798      	blx	r3
 8005968:	e6b5      	b.n	80056d6 <acc_detector_distance_calibrate+0x96>
 800596a:	2b01      	cmp	r3, #1
 800596c:	bf0c      	ite	eq
 800596e:	6f28      	ldreq	r0, [r5, #112]	@ 0x70
 8005970:	2000      	movne	r0, #0
 8005972:	e6c4      	b.n	80056fe <acc_detector_distance_calibrate+0xbe>
 8005974:	2a01      	cmp	r2, #1
 8005976:	bf0c      	ite	eq
 8005978:	f105 02e4 	addeq.w	r2, r5, #228	@ 0xe4
 800597c:	2200      	movne	r2, #0
 800597e:	e6cd      	b.n	800571c <acc_detector_distance_calibrate+0xdc>
 8005980:	4628      	mov	r0, r5
 8005982:	f7ff fc77 	bl	8005274 <detector_has_far_range>
 8005986:	2800      	cmp	r0, #0
 8005988:	f43f ae6b 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 800598c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8005992:	4643      	mov	r3, r8
 8005994:	463a      	mov	r2, r7
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff fc32 	bl	8005200 <prepare_and_measure>
 800599c:	2800      	cmp	r0, #0
 800599e:	f43f ae60 	beq.w	8005662 <acc_detector_distance_calibrate+0x22>
 80059a2:	2303      	movs	r3, #3
 80059a4:	752b      	strb	r3, [r5, #20]
 80059a6:	e699      	b.n	80056dc <acc_detector_distance_calibrate+0x9c>
 80059a8:	2305      	movs	r3, #5
 80059aa:	752b      	strb	r3, [r5, #20]
 80059ac:	e70b      	b.n	80057c6 <acc_detector_distance_calibrate+0x186>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	bf0c      	ite	eq
 80059b2:	6de9      	ldreq	r1, [r5, #92]	@ 0x5c
 80059b4:	2100      	movne	r1, #0
 80059b6:	e6f9      	b.n	80057ac <acc_detector_distance_calibrate+0x16c>
 80059b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80059ba:	e73e      	b.n	800583a <acc_detector_distance_calibrate+0x1fa>
 80059bc:	2305      	movs	r3, #5
 80059be:	752b      	strb	r3, [r5, #20]
 80059c0:	4628      	mov	r0, r5
 80059c2:	f7ff fc45 	bl	8005250 <detector_has_close_range>
 80059c6:	f080 0001 	eor.w	r0, r0, #1
 80059ca:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 80059ce:	4649      	mov	r1, r9
 80059d0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80059d2:	f001 fe7b 	bl	80076cc <acc_detector_distance_calibration_buffer_reference_temperature_get>
 80059d6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 80059da:	8003      	strh	r3, [r0, #0]
 80059dc:	e67b      	b.n	80056d6 <acc_detector_distance_calibrate+0x96>
 80059de:	2100      	movs	r1, #0
 80059e0:	e72b      	b.n	800583a <acc_detector_distance_calibrate+0x1fa>
 80059e2:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <acc_detector_distance_calibrate+0x3b4>)
 80059e4:	4a06      	ldr	r2, [pc, #24]	@ (8005a00 <acc_detector_distance_calibrate+0x3c0>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	4904      	ldr	r1, [pc, #16]	@ (80059fc <acc_detector_distance_calibrate+0x3bc>)
 80059ea:	2000      	movs	r0, #0
 80059ec:	4798      	blx	r3
 80059ee:	2000      	movs	r0, #0
 80059f0:	e638      	b.n	8005664 <acc_detector_distance_calibrate+0x24>
 80059f2:	bf00      	nop
 80059f4:	20000610 	.word	0x20000610
 80059f8:	08014a64 	.word	0x08014a64
 80059fc:	080149dc 	.word	0x080149dc
 8005a00:	08014aa4 	.word	0x08014aa4

08005a04 <acc_detector_distance_recalibrate>:
 8005a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	2400      	movs	r4, #0
 8005a0c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005a10:	9407      	str	r4, [sp, #28]
 8005a12:	b131      	cbz	r1, 8005a22 <acc_detector_distance_recalibrate+0x1e>
 8005a14:	4617      	mov	r7, r2
 8005a16:	461e      	mov	r6, r3
 8005a18:	680a      	ldr	r2, [r1, #0]
 8005a1a:	4b45      	ldr	r3, [pc, #276]	@ (8005b30 <acc_detector_distance_recalibrate+0x12c>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	460d      	mov	r5, r1
 8005a20:	d006      	beq.n	8005a30 <acc_detector_distance_recalibrate+0x2c>
 8005a22:	f7ff fc09 	bl	8005238 <validate_distance_handle.part.0>
 8005a26:	2400      	movs	r4, #0
 8005a28:	4620      	mov	r0, r4
 8005a2a:	b008      	add	sp, #32
 8005a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a30:	aa04      	add	r2, sp, #16
 8005a32:	4680      	mov	r8, r0
 8005a34:	a903      	add	r1, sp, #12
 8005a36:	4628      	mov	r0, r5
 8005a38:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005a3c:	f7ff fc66 	bl	800530c <acc_detector_distance_get_buffer_sizes>
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d80e      	bhi.n	8005a66 <acc_detector_distance_recalibrate+0x62>
 8005a48:	9b04      	ldr	r3, [sp, #16]
 8005a4a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d215      	bcs.n	8005a7c <acc_detector_distance_recalibrate+0x78>
 8005a50:	4d38      	ldr	r5, [pc, #224]	@ (8005b34 <acc_detector_distance_recalibrate+0x130>)
 8005a52:	692b      	ldr	r3, [r5, #16]
 8005a54:	4a38      	ldr	r2, [pc, #224]	@ (8005b38 <acc_detector_distance_recalibrate+0x134>)
 8005a56:	4939      	ldr	r1, [pc, #228]	@ (8005b3c <acc_detector_distance_recalibrate+0x138>)
 8005a58:	2000      	movs	r0, #0
 8005a5a:	4798      	blx	r3
 8005a5c:	2400      	movs	r4, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	b008      	add	sp, #32
 8005a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a66:	4d33      	ldr	r5, [pc, #204]	@ (8005b34 <acc_detector_distance_recalibrate+0x130>)
 8005a68:	4a35      	ldr	r2, [pc, #212]	@ (8005b40 <acc_detector_distance_recalibrate+0x13c>)
 8005a6a:	692b      	ldr	r3, [r5, #16]
 8005a6c:	4933      	ldr	r1, [pc, #204]	@ (8005b3c <acc_detector_distance_recalibrate+0x138>)
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4798      	blx	r3
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d2d6      	bcs.n	8005a28 <acc_detector_distance_recalibrate+0x24>
 8005a7a:	e7ea      	b.n	8005a52 <acc_detector_distance_recalibrate+0x4e>
 8005a7c:	7d2b      	ldrb	r3, [r5, #20]
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d852      	bhi.n	8005b28 <acc_detector_distance_recalibrate+0x124>
 8005a82:	e8df f003 	tbb	[pc, r3]
 8005a86:	0f3b      	.short	0x0f3b
 8005a88:	43030303 	.word	0x43030303
 8005a8c:	f006 fd30 	bl	800c4f0 <acc_rss_integration_log_level>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d0c8      	beq.n	8005a26 <acc_detector_distance_recalibrate+0x22>
 8005a94:	4b27      	ldr	r3, [pc, #156]	@ (8005b34 <acc_detector_distance_recalibrate+0x130>)
 8005a96:	4a2b      	ldr	r2, [pc, #172]	@ (8005b44 <acc_detector_distance_recalibrate+0x140>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	4928      	ldr	r1, [pc, #160]	@ (8005b3c <acc_detector_distance_recalibrate+0x138>)
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	4798      	blx	r3
 8005aa0:	2400      	movs	r4, #0
 8005aa2:	e7c1      	b.n	8005a28 <acc_detector_distance_recalibrate+0x24>
 8005aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	f004 fd89 	bl	800a5c0 <acc_sensor_read>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d0b8      	beq.n	8005a26 <acc_detector_distance_recalibrate+0x22>
 8005ab4:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 8005ab6:	aa05      	add	r2, sp, #20
 8005ab8:	4631      	mov	r1, r6
 8005aba:	f004 fb91 	bl	800a1e0 <acc_processing_execute>
 8005abe:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 8005ac2:	b123      	cbz	r3, 8005ace <acc_detector_distance_recalibrate+0xca>
 8005ac4:	6c68      	ldr	r0, [r5, #68]	@ 0x44
 8005ac6:	a905      	add	r1, sp, #20
 8005ac8:	f105 0274 	add.w	r2, r5, #116	@ 0x74
 8005acc:	4798      	blx	r3
 8005ace:	f105 0118 	add.w	r1, r5, #24
 8005ad2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005ad4:	f001 fdfe 	bl	80076d4 <acc_detector_distance_calibration_buffer_loopback_peak_distance_get>
 8005ad8:	68e9      	ldr	r1, [r5, #12]
 8005ada:	4603      	mov	r3, r0
 8005adc:	4431      	add	r1, r6
 8005ade:	9807      	ldr	r0, [sp, #28]
 8005ae0:	461e      	mov	r6, r3
 8005ae2:	f001 fe33 	bl	800774c <acc_detector_distance_calibration_offset_process>
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	ed86 0a00 	vstr	s0, [r6]
 8005aec:	752a      	strb	r2, [r5, #20]
 8005aee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005af0:	2301      	movs	r3, #1
 8005af2:	4620      	mov	r0, r4
 8005af4:	7013      	strb	r3, [r2, #0]
 8005af6:	b008      	add	sp, #32
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <acc_detector_distance_recalibrate+0x130>)
 8005afe:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <acc_detector_distance_recalibrate+0x144>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	490e      	ldr	r1, [pc, #56]	@ (8005b3c <acc_detector_distance_recalibrate+0x138>)
 8005b04:	2000      	movs	r0, #0
 8005b06:	4798      	blx	r3
 8005b08:	2400      	movs	r4, #0
 8005b0a:	e78d      	b.n	8005a28 <acc_detector_distance_recalibrate+0x24>
 8005b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005b12:	4633      	mov	r3, r6
 8005b14:	463a      	mov	r2, r7
 8005b16:	4640      	mov	r0, r8
 8005b18:	f7ff fb72 	bl	8005200 <prepare_and_measure>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d081      	beq.n	8005a26 <acc_detector_distance_recalibrate+0x22>
 8005b22:	2301      	movs	r3, #1
 8005b24:	752b      	strb	r3, [r5, #20]
 8005b26:	e77f      	b.n	8005a28 <acc_detector_distance_recalibrate+0x24>
 8005b28:	4b02      	ldr	r3, [pc, #8]	@ (8005b34 <acc_detector_distance_recalibrate+0x130>)
 8005b2a:	4a08      	ldr	r2, [pc, #32]	@ (8005b4c <acc_detector_distance_recalibrate+0x148>)
 8005b2c:	e7e8      	b.n	8005b00 <acc_detector_distance_recalibrate+0xfc>
 8005b2e:	bf00      	nop
 8005b30:	acc0d130 	.word	0xacc0d130
 8005b34:	20000610 	.word	0x20000610
 8005b38:	08014a44 	.word	0x08014a44
 8005b3c:	080149dc 	.word	0x080149dc
 8005b40:	08014a2c 	.word	0x08014a2c
 8005b44:	08014ae0 	.word	0x08014ae0
 8005b48:	08014ac4 	.word	0x08014ac4
 8005b4c:	08014aa4 	.word	0x08014aa4

08005b50 <acc_detector_distance_prepare>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4614      	mov	r4, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	e9dd 3504 	ldrd	r3, r5, [sp, #16]
 8005b5a:	b118      	cbz	r0, 8005b64 <acc_detector_distance_prepare+0x14>
 8005b5c:	490e      	ldr	r1, [pc, #56]	@ (8005b98 <acc_detector_distance_prepare+0x48>)
 8005b5e:	6806      	ldr	r6, [r0, #0]
 8005b60:	428e      	cmp	r6, r1
 8005b62:	d003      	beq.n	8005b6c <acc_detector_distance_prepare+0x1c>
 8005b64:	f7ff fb68 	bl	8005238 <validate_distance_handle.part.0>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f890 1040 	ldrb.w	r1, [r0, #64]	@ 0x40
 8005b70:	b151      	cbz	r1, 8005b88 <acc_detector_distance_prepare+0x38>
 8005b72:	2901      	cmp	r1, #1
 8005b74:	bf08      	it	eq
 8005b76:	6dc1      	ldreq	r1, [r0, #92]	@ 0x5c
 8005b78:	9504      	str	r5, [sp, #16]
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	bf18      	it	ne
 8005b7e:	2100      	movne	r1, #0
 8005b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b84:	f004 bc9e 	b.w	800a4c4 <acc_sensor_prepare>
 8005b88:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8005b8a:	9504      	str	r5, [sp, #16]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b92:	f004 bc97 	b.w	800a4c4 <acc_sensor_prepare>
 8005b96:	bf00      	nop
 8005b98:	acc0d130 	.word	0xacc0d130

08005b9c <acc_detector_distance_process>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	b0a3      	sub	sp, #140	@ 0x8c
 8005ba2:	b130      	cbz	r0, 8005bb2 <acc_detector_distance_process+0x16>
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	6802      	ldr	r2, [r0, #0]
 8005baa:	4b72      	ldr	r3, [pc, #456]	@ (8005d74 <acc_detector_distance_process+0x1d8>)
 8005bac:	429a      	cmp	r2, r3
 8005bae:	4604      	mov	r4, r0
 8005bb0:	d00c      	beq.n	8005bcc <acc_detector_distance_process+0x30>
 8005bb2:	f7ff fb41 	bl	8005238 <validate_distance_handle.part.0>
 8005bb6:	4b70      	ldr	r3, [pc, #448]	@ (8005d78 <acc_detector_distance_process+0x1dc>)
 8005bb8:	4a70      	ldr	r2, [pc, #448]	@ (8005d7c <acc_detector_distance_process+0x1e0>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4970      	ldr	r1, [pc, #448]	@ (8005d80 <acc_detector_distance_process+0x1e4>)
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	4798      	blx	r3
 8005bc2:	2700      	movs	r7, #0
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	b023      	add	sp, #140	@ 0x8c
 8005bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bcc:	4688      	mov	r8, r1
 8005bce:	f7ff fb63 	bl	8005298 <decide_next_measurement_type>
 8005bd2:	f894 7040 	ldrb.w	r7, [r4, #64]	@ 0x40
 8005bd6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005bd8:	2f00      	cmp	r7, #0
 8005bda:	f000 8098 	beq.w	8005d0e <acc_detector_distance_process+0x172>
 8005bde:	f04f 0a00 	mov.w	sl, #0
 8005be2:	ad0d      	add	r5, sp, #52	@ 0x34
 8005be4:	f8c4 a100 	str.w	sl, [r4, #256]	@ 0x100
 8005be8:	f8c4 a104 	str.w	sl, [r4, #260]	@ 0x104
 8005bec:	f8c4 a108 	str.w	sl, [r4, #264]	@ 0x108
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	2254      	movs	r2, #84	@ 0x54
 8005bf6:	f00a ff41 	bl	8010a7c <memset>
 8005bfa:	2f01      	cmp	r7, #1
 8005bfc:	f504 7b80 	add.w	fp, r4, #256	@ 0x100
 8005c00:	f040 80ab 	bne.w	8005d5a <acc_detector_distance_process+0x1be>
 8005c04:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005c06:	465a      	mov	r2, fp
 8005c08:	4641      	mov	r1, r8
 8005c0a:	f004 fae9 	bl	800a1e0 <acc_processing_execute>
 8005c0e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005c10:	f8c3 b058 	str.w	fp, [r3, #88]	@ 0x58
 8005c14:	f894 a040 	ldrb.w	sl, [r4, #64]	@ 0x40
 8005c18:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8005c1c:	f1ba 0f00 	cmp.w	sl, #0
 8005c20:	f040 8089 	bne.w	8005d36 <acc_detector_distance_process+0x19a>
 8005c24:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005c26:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8005c28:	660a      	str	r2, [r1, #96]	@ 0x60
 8005c2a:	f104 02c8 	add.w	r2, r4, #200	@ 0xc8
 8005c2e:	65ca      	str	r2, [r1, #92]	@ 0x5c
 8005c30:	b123      	cbz	r3, 8005c3c <acc_detector_distance_process+0xa0>
 8005c32:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005c34:	4659      	mov	r1, fp
 8005c36:	4798      	blx	r3
 8005c38:	f894 a040 	ldrb.w	sl, [r4, #64]	@ 0x40
 8005c3c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005c3e:	f894 2102 	ldrb.w	r2, [r4, #258]	@ 0x102
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	f9b4 b104 	ldrsh.w	fp, [r4, #260]	@ 0x104
 8005c48:	f881 2052 	strb.w	r2, [r1, #82]	@ 0x52
 8005c4c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8005c4e:	4443      	add	r3, r8
 8005c50:	f104 0118 	add.w	r1, r4, #24
 8005c54:	f8a2 b054 	strh.w	fp, [r2, #84]	@ 0x54
 8005c58:	9307      	str	r3, [sp, #28]
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 8005c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c62:	4630      	mov	r0, r6
 8005c64:	f8d4 803c 	ldr.w	r8, [r4, #60]	@ 0x3c
 8005c68:	9106      	str	r1, [sp, #24]
 8005c6a:	f001 fd27 	bl	80076bc <acc_detector_distance_calibration_buffer_bg_noise_array_get>
 8005c6e:	9906      	ldr	r1, [sp, #24]
 8005c70:	9108      	str	r1, [sp, #32]
 8005c72:	4602      	mov	r2, r0
 8005c74:	4630      	mov	r0, r6
 8005c76:	9206      	str	r2, [sp, #24]
 8005c78:	f001 fd28 	bl	80076cc <acc_detector_distance_calibration_buffer_reference_temperature_get>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	9908      	ldr	r1, [sp, #32]
 8005c80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005c84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c86:	4630      	mov	r0, r6
 8005c88:	f001 fd24 	bl	80076d4 <acc_detector_distance_calibration_buffer_loopback_peak_distance_get>
 8005c8c:	ed90 0a00 	vldr	s0, [r0]
 8005c90:	9908      	ldr	r1, [sp, #32]
 8005c92:	ed8d 0a08 	vstr	s0, [sp, #32]
 8005c96:	4630      	mov	r0, r6
 8005c98:	f001 fd20 	bl	80076dc <acc_detector_distance_calibration_buffer_aggregator_partition_get>
 8005c9c:	9b07      	ldr	r3, [sp, #28]
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ca4:	9202      	str	r2, [sp, #8]
 8005ca6:	e9cd b300 	strd	fp, r3, [sp]
 8005caa:	9004      	str	r0, [sp, #16]
 8005cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cae:	ed9d 0a08 	vldr	s0, [sp, #32]
 8005cb2:	9505      	str	r5, [sp, #20]
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4651      	mov	r1, sl
 8005cb8:	463a      	mov	r2, r7
 8005cba:	f000 fcc7 	bl	800664c <acc_detector_distance_aggregator_process>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f43f af79 	beq.w	8005bb6 <acc_detector_distance_process+0x1a>
 8005cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d050      	beq.n	8005d70 <acc_detector_distance_process+0x1d4>
 8005cce:	f8bd 4084 	ldrh.w	r4, [sp, #132]	@ 0x84
 8005cd2:	2c09      	cmp	r4, #9
 8005cd4:	d83c      	bhi.n	8005d50 <acc_detector_distance_process+0x1b4>
 8005cd6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005cd8:	f883 4050 	strb.w	r4, [r3, #80]	@ 0x50
 8005cdc:	b15c      	cbz	r4, 8005cf6 <acc_detector_distance_process+0x15a>
 8005cde:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f855 1b04 	ldr.w	r1, [r5], #4
 8005ce6:	f842 1b04 	str.w	r1, [r2], #4
 8005cea:	3301      	adds	r3, #1
 8005cec:	b299      	uxth	r1, r3
 8005cee:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8005cf0:	6250      	str	r0, [r2, #36]	@ 0x24
 8005cf2:	428c      	cmp	r4, r1
 8005cf4:	d8f5      	bhi.n	8005ce2 <acc_detector_distance_process+0x146>
 8005cf6:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8005cf8:	f89d 3086 	ldrb.w	r3, [sp, #134]	@ 0x86
 8005cfc:	f882 3051 	strb.w	r3, [r2, #81]	@ 0x51
 8005d00:	4638      	mov	r0, r7
 8005d02:	2301      	movs	r3, #1
 8005d04:	f889 3000 	strb.w	r3, [r9]
 8005d08:	b023      	add	sp, #140	@ 0x8c
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	ad0d      	add	r5, sp, #52	@ 0x34
 8005d10:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
 8005d14:	f8c4 7104 	str.w	r7, [r4, #260]	@ 0x104
 8005d18:	f8c4 7108 	str.w	r7, [r4, #264]	@ 0x108
 8005d1c:	4639      	mov	r1, r7
 8005d1e:	4628      	mov	r0, r5
 8005d20:	2254      	movs	r2, #84	@ 0x54
 8005d22:	f00a feab 	bl	8010a7c <memset>
 8005d26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d28:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005d2a:	1e5f      	subs	r7, r3, #1
 8005d2c:	bf18      	it	ne
 8005d2e:	2701      	movne	r7, #1
 8005d30:	f504 7b80 	add.w	fp, r4, #256	@ 0x100
 8005d34:	e767      	b.n	8005c06 <acc_detector_distance_process+0x6a>
 8005d36:	f1ba 0f01 	cmp.w	sl, #1
 8005d3a:	d111      	bne.n	8005d60 <acc_detector_distance_process+0x1c4>
 8005d3c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005d3e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8005d40:	660a      	str	r2, [r1, #96]	@ 0x60
 8005d42:	f104 02e4 	add.w	r2, r4, #228	@ 0xe4
 8005d46:	65ca      	str	r2, [r1, #92]	@ 0x5c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af72 	bne.w	8005c32 <acc_detector_distance_process+0x96>
 8005d4e:	e775      	b.n	8005c3c <acc_detector_distance_process+0xa0>
 8005d50:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8005d52:	240a      	movs	r4, #10
 8005d54:	f883 4050 	strb.w	r4, [r3, #80]	@ 0x50
 8005d58:	e7c1      	b.n	8005cde <acc_detector_distance_process+0x142>
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	2701      	movs	r7, #1
 8005d5e:	e752      	b.n	8005c06 <acc_detector_distance_process+0x6a>
 8005d60:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8005d62:	2200      	movs	r2, #0
 8005d64:	e9c1 2217 	strd	r2, r2, [r1, #92]	@ 0x5c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f af62 	bne.w	8005c32 <acc_detector_distance_process+0x96>
 8005d6e:	e765      	b.n	8005c3c <acc_detector_distance_process+0xa0>
 8005d70:	4607      	mov	r7, r0
 8005d72:	e727      	b.n	8005bc4 <acc_detector_distance_process+0x28>
 8005d74:	acc0d130 	.word	0xacc0d130
 8005d78:	20000610 	.word	0x20000610
 8005d7c:	08014b04 	.word	0x08014b04
 8005d80:	080149dc 	.word	0x080149dc

08005d84 <acc_detector_distance_config_start_set>:
 8005d84:	b118      	cbz	r0, 8005d8e <acc_detector_distance_config_start_set+0xa>
 8005d86:	4b04      	ldr	r3, [pc, #16]	@ (8005d98 <acc_detector_distance_config_start_set+0x14>)
 8005d88:	6802      	ldr	r2, [r0, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d001      	beq.n	8005d92 <acc_detector_distance_config_start_set+0xe>
 8005d8e:	f7ff ba47 	b.w	8005220 <validate_distance_config.part.0>
 8005d92:	ed80 0a02 	vstr	s0, [r0, #8]
 8005d96:	4770      	bx	lr
 8005d98:	acc0d150 	.word	0xacc0d150

08005d9c <acc_detector_distance_config_end_set>:
 8005d9c:	b118      	cbz	r0, 8005da6 <acc_detector_distance_config_end_set+0xa>
 8005d9e:	4b04      	ldr	r3, [pc, #16]	@ (8005db0 <acc_detector_distance_config_end_set+0x14>)
 8005da0:	6802      	ldr	r2, [r0, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d001      	beq.n	8005daa <acc_detector_distance_config_end_set+0xe>
 8005da6:	f7ff ba3b 	b.w	8005220 <validate_distance_config.part.0>
 8005daa:	ed80 0a03 	vstr	s0, [r0, #12]
 8005dae:	4770      	bx	lr
 8005db0:	acc0d150 	.word	0xacc0d150

08005db4 <acc_detector_distance_config_max_step_length_set>:
 8005db4:	b118      	cbz	r0, 8005dbe <acc_detector_distance_config_max_step_length_set+0xa>
 8005db6:	4b04      	ldr	r3, [pc, #16]	@ (8005dc8 <acc_detector_distance_config_max_step_length_set+0x14>)
 8005db8:	6802      	ldr	r2, [r0, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d001      	beq.n	8005dc2 <acc_detector_distance_config_max_step_length_set+0xe>
 8005dbe:	f7ff ba2f 	b.w	8005220 <validate_distance_config.part.0>
 8005dc2:	8201      	strh	r1, [r0, #16]
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	acc0d150 	.word	0xacc0d150

08005dcc <acc_detector_distance_config_close_range_leakage_cancellation_set>:
 8005dcc:	b118      	cbz	r0, 8005dd6 <acc_detector_distance_config_close_range_leakage_cancellation_set+0xa>
 8005dce:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <acc_detector_distance_config_close_range_leakage_cancellation_set+0x14>)
 8005dd0:	6802      	ldr	r2, [r0, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d001      	beq.n	8005dda <acc_detector_distance_config_close_range_leakage_cancellation_set+0xe>
 8005dd6:	f7ff ba23 	b.w	8005220 <validate_distance_config.part.0>
 8005dda:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8005dde:	4770      	bx	lr
 8005de0:	acc0d150 	.word	0xacc0d150

08005de4 <acc_detector_distance_config_signal_quality_set>:
 8005de4:	b118      	cbz	r0, 8005dee <acc_detector_distance_config_signal_quality_set+0xa>
 8005de6:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <acc_detector_distance_config_signal_quality_set+0x14>)
 8005de8:	6802      	ldr	r2, [r0, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d001      	beq.n	8005df2 <acc_detector_distance_config_signal_quality_set+0xe>
 8005dee:	f7ff ba17 	b.w	8005220 <validate_distance_config.part.0>
 8005df2:	ed80 0a05 	vstr	s0, [r0, #20]
 8005df6:	4770      	bx	lr
 8005df8:	acc0d150 	.word	0xacc0d150

08005dfc <acc_detector_distance_config_max_profile_set>:
 8005dfc:	b118      	cbz	r0, 8005e06 <acc_detector_distance_config_max_profile_set+0xa>
 8005dfe:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <acc_detector_distance_config_max_profile_set+0x14>)
 8005e00:	6802      	ldr	r2, [r0, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d001      	beq.n	8005e0a <acc_detector_distance_config_max_profile_set+0xe>
 8005e06:	f7ff ba0b 	b.w	8005220 <validate_distance_config.part.0>
 8005e0a:	7481      	strb	r1, [r0, #18]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	acc0d150 	.word	0xacc0d150

08005e14 <acc_detector_distance_config_threshold_method_set>:
 8005e14:	b118      	cbz	r0, 8005e1e <acc_detector_distance_config_threshold_method_set+0xa>
 8005e16:	4b04      	ldr	r3, [pc, #16]	@ (8005e28 <acc_detector_distance_config_threshold_method_set+0x14>)
 8005e18:	6802      	ldr	r2, [r0, #0]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d001      	beq.n	8005e22 <acc_detector_distance_config_threshold_method_set+0xe>
 8005e1e:	f7ff b9ff 	b.w	8005220 <validate_distance_config.part.0>
 8005e22:	7601      	strb	r1, [r0, #24]
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	acc0d150 	.word	0xacc0d150

08005e2c <acc_detector_distance_config_peak_sorting_set>:
 8005e2c:	b118      	cbz	r0, 8005e36 <acc_detector_distance_config_peak_sorting_set+0xa>
 8005e2e:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <acc_detector_distance_config_peak_sorting_set+0x14>)
 8005e30:	6802      	ldr	r2, [r0, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d001      	beq.n	8005e3a <acc_detector_distance_config_peak_sorting_set+0xe>
 8005e36:	f7ff b9f3 	b.w	8005220 <validate_distance_config.part.0>
 8005e3a:	7641      	strb	r1, [r0, #25]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	acc0d150 	.word	0xacc0d150

08005e44 <acc_detector_distance_config_num_frames_recorded_threshold_set>:
 8005e44:	b118      	cbz	r0, 8005e4e <acc_detector_distance_config_num_frames_recorded_threshold_set+0xa>
 8005e46:	4b04      	ldr	r3, [pc, #16]	@ (8005e58 <acc_detector_distance_config_num_frames_recorded_threshold_set+0x14>)
 8005e48:	6802      	ldr	r2, [r0, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d001      	beq.n	8005e52 <acc_detector_distance_config_num_frames_recorded_threshold_set+0xe>
 8005e4e:	f7ff b9e7 	b.w	8005220 <validate_distance_config.part.0>
 8005e52:	8381      	strh	r1, [r0, #28]
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	acc0d150 	.word	0xacc0d150

08005e5c <acc_detector_distance_config_threshold_sensitivity_set>:
 8005e5c:	b118      	cbz	r0, 8005e66 <acc_detector_distance_config_threshold_sensitivity_set+0xa>
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <acc_detector_distance_config_threshold_sensitivity_set+0x14>)
 8005e60:	6802      	ldr	r2, [r0, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d001      	beq.n	8005e6a <acc_detector_distance_config_threshold_sensitivity_set+0xe>
 8005e66:	f7ff b9db 	b.w	8005220 <validate_distance_config.part.0>
 8005e6a:	ed80 0a0a 	vstr	s0, [r0, #40]	@ 0x28
 8005e6e:	4770      	bx	lr
 8005e70:	acc0d150 	.word	0xacc0d150

08005e74 <acc_detector_distance_config_reflector_shape_set>:
 8005e74:	b118      	cbz	r0, 8005e7e <acc_detector_distance_config_reflector_shape_set+0xa>
 8005e76:	4b04      	ldr	r3, [pc, #16]	@ (8005e88 <acc_detector_distance_config_reflector_shape_set+0x14>)
 8005e78:	6802      	ldr	r2, [r0, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d001      	beq.n	8005e82 <acc_detector_distance_config_reflector_shape_set+0xe>
 8005e7e:	f7ff b9cf 	b.w	8005220 <validate_distance_config.part.0>
 8005e82:	7681      	strb	r1, [r0, #26]
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	acc0d150 	.word	0xacc0d150

08005e8c <acc_detector_distance_config_log>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	b082      	sub	sp, #8
 8005e92:	b129      	cbz	r1, 8005ea0 <acc_detector_distance_config_log+0x14>
 8005e94:	4b37      	ldr	r3, [pc, #220]	@ (8005f74 <acc_detector_distance_config_log+0xe8>)
 8005e96:	680a      	ldr	r2, [r1, #0]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	f000 8080 	beq.w	8005fa0 <acc_detector_distance_config_log+0x114>
 8005ea0:	f7ff f9be 	bl	8005220 <validate_distance_config.part.0>
 8005ea4:	4b34      	ldr	r3, [pc, #208]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005ea6:	4a35      	ldr	r2, [pc, #212]	@ (8005f7c <acc_detector_distance_config_log+0xf0>)
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	4935      	ldr	r1, [pc, #212]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005eac:	2000      	movs	r0, #0
 8005eae:	4798      	blx	r3
 8005eb0:	2c00      	cmp	r4, #0
 8005eb2:	f000 8258 	beq.w	8006366 <acc_detector_distance_config_log+0x4da>
 8005eb6:	4b33      	ldr	r3, [pc, #204]	@ (8005f84 <acc_detector_distance_config_log+0xf8>)
 8005eb8:	6822      	ldr	r2, [r4, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d00a      	beq.n	8005ed4 <acc_detector_distance_config_log+0x48>
 8005ebe:	f7ff f9bb 	bl	8005238 <validate_distance_handle.part.0>
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005ec4:	4a30      	ldr	r2, [pc, #192]	@ (8005f88 <acc_detector_distance_config_log+0xfc>)
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	492d      	ldr	r1, [pc, #180]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	b002      	add	sp, #8
 8005ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ed2:	4718      	bx	r3
 8005ed4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005ed6:	b163      	cbz	r3, 8005ef2 <acc_detector_distance_config_log+0x66>
 8005ed8:	f006 fb0a 	bl	800c4f0 <acc_rss_integration_log_level>
 8005edc:	2801      	cmp	r0, #1
 8005ede:	d905      	bls.n	8005eec <acc_detector_distance_config_log+0x60>
 8005ee0:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <acc_detector_distance_config_log+0x100>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4926      	ldr	r1, [pc, #152]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005ee8:	2002      	movs	r0, #2
 8005eea:	4798      	blx	r3
 8005eec:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005eee:	f003 fc57 	bl	80097a0 <acc_config_log>
 8005ef2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005ef4:	b163      	cbz	r3, 8005f10 <acc_detector_distance_config_log+0x84>
 8005ef6:	f006 fafb 	bl	800c4f0 <acc_rss_integration_log_level>
 8005efa:	2801      	cmp	r0, #1
 8005efc:	d905      	bls.n	8005f0a <acc_detector_distance_config_log+0x7e>
 8005efe:	4b1e      	ldr	r3, [pc, #120]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005f00:	4a23      	ldr	r2, [pc, #140]	@ (8005f90 <acc_detector_distance_config_log+0x104>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	491e      	ldr	r1, [pc, #120]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005f06:	2002      	movs	r0, #2
 8005f08:	4798      	blx	r3
 8005f0a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005f0c:	f003 fc48 	bl	80097a0 <acc_config_log>
 8005f10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005f12:	b163      	cbz	r3, 8005f2e <acc_detector_distance_config_log+0xa2>
 8005f14:	f006 faec 	bl	800c4f0 <acc_rss_integration_log_level>
 8005f18:	2801      	cmp	r0, #1
 8005f1a:	d905      	bls.n	8005f28 <acc_detector_distance_config_log+0x9c>
 8005f1c:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <acc_detector_distance_config_log+0x108>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4917      	ldr	r1, [pc, #92]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005f24:	2002      	movs	r0, #2
 8005f26:	4798      	blx	r3
 8005f28:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005f2a:	f003 fc39 	bl	80097a0 <acc_config_log>
 8005f2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f30:	b163      	cbz	r3, 8005f4c <acc_detector_distance_config_log+0xc0>
 8005f32:	f006 fadd 	bl	800c4f0 <acc_rss_integration_log_level>
 8005f36:	2801      	cmp	r0, #1
 8005f38:	d905      	bls.n	8005f46 <acc_detector_distance_config_log+0xba>
 8005f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005f3c:	4a16      	ldr	r2, [pc, #88]	@ (8005f98 <acc_detector_distance_config_log+0x10c>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	490f      	ldr	r1, [pc, #60]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005f42:	2002      	movs	r0, #2
 8005f44:	4798      	blx	r3
 8005f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f48:	f003 fc2a 	bl	80097a0 <acc_config_log>
 8005f4c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8209 	beq.w	8006366 <acc_detector_distance_config_log+0x4da>
 8005f54:	f006 facc 	bl	800c4f0 <acc_rss_integration_log_level>
 8005f58:	2801      	cmp	r0, #1
 8005f5a:	d905      	bls.n	8005f68 <acc_detector_distance_config_log+0xdc>
 8005f5c:	4b06      	ldr	r3, [pc, #24]	@ (8005f78 <acc_detector_distance_config_log+0xec>)
 8005f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f9c <acc_detector_distance_config_log+0x110>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4907      	ldr	r1, [pc, #28]	@ (8005f80 <acc_detector_distance_config_log+0xf4>)
 8005f64:	2002      	movs	r0, #2
 8005f66:	4798      	blx	r3
 8005f68:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005f6a:	b002      	add	sp, #8
 8005f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f70:	f003 bc16 	b.w	80097a0 <acc_config_log>
 8005f74:	acc0d150 	.word	0xacc0d150
 8005f78:	20000610 	.word	0x20000610
 8005f7c:	08014d58 	.word	0x08014d58
 8005f80:	080149dc 	.word	0x080149dc
 8005f84:	acc0d130 	.word	0xacc0d130
 8005f88:	08014d40 	.word	0x08014d40
 8005f8c:	08014cd8 	.word	0x08014cd8
 8005f90:	08014cf4 	.word	0x08014cf4
 8005f94:	08014d0c 	.word	0x08014d0c
 8005f98:	08014d24 	.word	0x08014d24
 8005f9c:	08014d34 	.word	0x08014d34
 8005fa0:	f006 faa6 	bl	800c4f0 <acc_rss_integration_log_level>
 8005fa4:	2801      	cmp	r0, #1
 8005fa6:	d905      	bls.n	8005fb4 <acc_detector_distance_config_log+0x128>
 8005fa8:	4bc8      	ldr	r3, [pc, #800]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 8005faa:	4ac9      	ldr	r2, [pc, #804]	@ (80062d0 <acc_detector_distance_config_log+0x444>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	49c9      	ldr	r1, [pc, #804]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 8005fb0:	2002      	movs	r0, #2
 8005fb2:	4798      	blx	r3
 8005fb4:	f006 fa9c 	bl	800c4f0 <acc_rss_integration_log_level>
 8005fb8:	2801      	cmp	r0, #1
 8005fba:	d906      	bls.n	8005fca <acc_detector_distance_config_log+0x13e>
 8005fbc:	4ac3      	ldr	r2, [pc, #780]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 8005fbe:	686b      	ldr	r3, [r5, #4]
 8005fc0:	6916      	ldr	r6, [r2, #16]
 8005fc2:	49c4      	ldr	r1, [pc, #784]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 8005fc4:	4ac4      	ldr	r2, [pc, #784]	@ (80062d8 <acc_detector_distance_config_log+0x44c>)
 8005fc6:	2002      	movs	r0, #2
 8005fc8:	47b0      	blx	r6
 8005fca:	f006 fa91 	bl	800c4f0 <acc_rss_integration_log_level>
 8005fce:	2801      	cmp	r0, #1
 8005fd0:	d935      	bls.n	800603e <acc_detector_distance_config_log+0x1b2>
 8005fd2:	edd5 7a02 	vldr	s15, [r5, #8]
 8005fd6:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 80062dc <acc_detector_distance_config_log+0x450>
 8005fda:	4bbc      	ldr	r3, [pc, #752]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 8005fdc:	ed9f 6abf 	vldr	s12, [pc, #764]	@ 80062dc <acc_detector_distance_config_log+0x450>
 8005fe0:	691e      	ldr	r6, [r3, #16]
 8005fe2:	eddf 6abf 	vldr	s13, [pc, #764]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 8005fe6:	49bb      	ldr	r1, [pc, #748]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 8005fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff0:	bf48      	it	mi
 8005ff2:	eef1 7a67 	vnegmi.f32	s15, s15
 8005ff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ffa:	bf4c      	ite	mi
 8005ffc:	4bb9      	ldrmi	r3, [pc, #740]	@ (80062e4 <acc_detector_distance_config_log+0x458>)
 8005ffe:	4bba      	ldrpl	r3, [pc, #744]	@ (80062e8 <acc_detector_distance_config_log+0x45c>)
 8006000:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800600c:	ee17 2a10 	vmov	r2, s14
 8006010:	bf4c      	ite	mi
 8006012:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006016:	eeb0 7a67 	vmovpl.f32	s14, s15
 800601a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800601e:	9200      	str	r2, [sp, #0]
 8006020:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006024:	4ab1      	ldr	r2, [pc, #708]	@ (80062ec <acc_detector_distance_config_log+0x460>)
 8006026:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800602a:	2002      	movs	r0, #2
 800602c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006030:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006038:	edcd 7a01 	vstr	s15, [sp, #4]
 800603c:	47b0      	blx	r6
 800603e:	f006 fa57 	bl	800c4f0 <acc_rss_integration_log_level>
 8006042:	2801      	cmp	r0, #1
 8006044:	d935      	bls.n	80060b2 <acc_detector_distance_config_log+0x226>
 8006046:	edd5 7a03 	vldr	s15, [r5, #12]
 800604a:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80062dc <acc_detector_distance_config_log+0x450>
 800604e:	4b9f      	ldr	r3, [pc, #636]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 8006050:	ed9f 6aa2 	vldr	s12, [pc, #648]	@ 80062dc <acc_detector_distance_config_log+0x450>
 8006054:	691e      	ldr	r6, [r3, #16]
 8006056:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 800605a:	499e      	ldr	r1, [pc, #632]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 800605c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	bf48      	it	mi
 8006066:	eef1 7a67 	vnegmi.f32	s15, s15
 800606a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800606e:	bf4c      	ite	mi
 8006070:	4b9c      	ldrmi	r3, [pc, #624]	@ (80062e4 <acc_detector_distance_config_log+0x458>)
 8006072:	4b9d      	ldrpl	r3, [pc, #628]	@ (80062e8 <acc_detector_distance_config_log+0x45c>)
 8006074:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006080:	ee17 2a10 	vmov	r2, s14
 8006084:	bf4c      	ite	mi
 8006086:	eeb1 7a67 	vnegmi.f32	s14, s15
 800608a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800608e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006092:	9200      	str	r2, [sp, #0]
 8006094:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006098:	4a95      	ldr	r2, [pc, #596]	@ (80062f0 <acc_detector_distance_config_log+0x464>)
 800609a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800609e:	2002      	movs	r0, #2
 80060a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ac:	edcd 7a01 	vstr	s15, [sp, #4]
 80060b0:	47b0      	blx	r6
 80060b2:	f006 fa1d 	bl	800c4f0 <acc_rss_integration_log_level>
 80060b6:	2801      	cmp	r0, #1
 80060b8:	d906      	bls.n	80060c8 <acc_detector_distance_config_log+0x23c>
 80060ba:	4a84      	ldr	r2, [pc, #528]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 80060bc:	8a2b      	ldrh	r3, [r5, #16]
 80060be:	6916      	ldr	r6, [r2, #16]
 80060c0:	4984      	ldr	r1, [pc, #528]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 80060c2:	4a8c      	ldr	r2, [pc, #560]	@ (80062f4 <acc_detector_distance_config_log+0x468>)
 80060c4:	2002      	movs	r0, #2
 80060c6:	47b0      	blx	r6
 80060c8:	f006 fa12 	bl	800c4f0 <acc_rss_integration_log_level>
 80060cc:	2801      	cmp	r0, #1
 80060ce:	f200 815d 	bhi.w	800638c <acc_detector_distance_config_log+0x500>
 80060d2:	f006 fa0d 	bl	800c4f0 <acc_rss_integration_log_level>
 80060d6:	2801      	cmp	r0, #1
 80060d8:	f200 8147 	bhi.w	800636a <acc_detector_distance_config_log+0x4de>
 80060dc:	f006 fa08 	bl	800c4f0 <acc_rss_integration_log_level>
 80060e0:	2801      	cmp	r0, #1
 80060e2:	d935      	bls.n	8006150 <acc_detector_distance_config_log+0x2c4>
 80060e4:	edd5 7a05 	vldr	s15, [r5, #20]
 80060e8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80060ec:	4b77      	ldr	r3, [pc, #476]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 80060ee:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80060f2:	691e      	ldr	r6, [r3, #16]
 80060f4:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 80060f8:	4976      	ldr	r1, [pc, #472]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 80060fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	bf48      	it	mi
 8006104:	eef1 7a67 	vnegmi.f32	s15, s15
 8006108:	ee77 7a87 	vadd.f32	s15, s15, s14
 800610c:	bf4c      	ite	mi
 800610e:	4b75      	ldrmi	r3, [pc, #468]	@ (80062e4 <acc_detector_distance_config_log+0x458>)
 8006110:	4b75      	ldrpl	r3, [pc, #468]	@ (80062e8 <acc_detector_distance_config_log+0x45c>)
 8006112:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800611a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800611e:	ee17 2a10 	vmov	r2, s14
 8006122:	bf4c      	ite	mi
 8006124:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006128:	eeb0 7a67 	vmovpl.f32	s14, s15
 800612c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006130:	9200      	str	r2, [sp, #0]
 8006132:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006136:	4a70      	ldr	r2, [pc, #448]	@ (80062f8 <acc_detector_distance_config_log+0x46c>)
 8006138:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800613c:	2002      	movs	r0, #2
 800613e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	edcd 7a01 	vstr	s15, [sp, #4]
 800614e:	47b0      	blx	r6
 8006150:	f006 f9ce 	bl	800c4f0 <acc_rss_integration_log_level>
 8006154:	2801      	cmp	r0, #1
 8006156:	d90c      	bls.n	8006172 <acc_detector_distance_config_log+0x2e6>
 8006158:	7e2b      	ldrb	r3, [r5, #24]
 800615a:	4a5c      	ldr	r2, [pc, #368]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 800615c:	495d      	ldr	r1, [pc, #372]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 800615e:	6916      	ldr	r6, [r2, #16]
 8006160:	2b03      	cmp	r3, #3
 8006162:	bf96      	itet	ls
 8006164:	4a65      	ldrls	r2, [pc, #404]	@ (80062fc <acc_detector_distance_config_log+0x470>)
 8006166:	4b66      	ldrhi	r3, [pc, #408]	@ (8006300 <acc_detector_distance_config_log+0x474>)
 8006168:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800616c:	4a65      	ldr	r2, [pc, #404]	@ (8006304 <acc_detector_distance_config_log+0x478>)
 800616e:	2002      	movs	r0, #2
 8006170:	47b0      	blx	r6
 8006172:	f006 f9bd 	bl	800c4f0 <acc_rss_integration_log_level>
 8006176:	2801      	cmp	r0, #1
 8006178:	d90e      	bls.n	8006198 <acc_detector_distance_config_log+0x30c>
 800617a:	4b54      	ldr	r3, [pc, #336]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 800617c:	7e6a      	ldrb	r2, [r5, #25]
 800617e:	691e      	ldr	r6, [r3, #16]
 8006180:	2a00      	cmp	r2, #0
 8006182:	f000 8113 	beq.w	80063ac <acc_detector_distance_config_log+0x520>
 8006186:	4b5e      	ldr	r3, [pc, #376]	@ (8006300 <acc_detector_distance_config_log+0x474>)
 8006188:	495f      	ldr	r1, [pc, #380]	@ (8006308 <acc_detector_distance_config_log+0x47c>)
 800618a:	2a01      	cmp	r2, #1
 800618c:	bf08      	it	eq
 800618e:	460b      	moveq	r3, r1
 8006190:	4a5e      	ldr	r2, [pc, #376]	@ (800630c <acc_detector_distance_config_log+0x480>)
 8006192:	4950      	ldr	r1, [pc, #320]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 8006194:	2002      	movs	r0, #2
 8006196:	47b0      	blx	r6
 8006198:	f006 f9aa 	bl	800c4f0 <acc_rss_integration_log_level>
 800619c:	2801      	cmp	r0, #1
 800619e:	d906      	bls.n	80061ae <acc_detector_distance_config_log+0x322>
 80061a0:	4a4a      	ldr	r2, [pc, #296]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 80061a2:	8bab      	ldrh	r3, [r5, #28]
 80061a4:	6916      	ldr	r6, [r2, #16]
 80061a6:	494b      	ldr	r1, [pc, #300]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 80061a8:	4a59      	ldr	r2, [pc, #356]	@ (8006310 <acc_detector_distance_config_log+0x484>)
 80061aa:	2002      	movs	r0, #2
 80061ac:	47b0      	blx	r6
 80061ae:	f006 f99f 	bl	800c4f0 <acc_rss_integration_log_level>
 80061b2:	2801      	cmp	r0, #1
 80061b4:	d935      	bls.n	8006222 <acc_detector_distance_config_log+0x396>
 80061b6:	edd5 7a08 	vldr	s15, [r5, #32]
 80061ba:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80061be:	4b43      	ldr	r3, [pc, #268]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 80061c0:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80061c4:	691e      	ldr	r6, [r3, #16]
 80061c6:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 80061ca:	4942      	ldr	r1, [pc, #264]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 80061cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	bf48      	it	mi
 80061d6:	eef1 7a67 	vnegmi.f32	s15, s15
 80061da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061de:	bf4c      	ite	mi
 80061e0:	4b40      	ldrmi	r3, [pc, #256]	@ (80062e4 <acc_detector_distance_config_log+0x458>)
 80061e2:	4b41      	ldrpl	r3, [pc, #260]	@ (80062e8 <acc_detector_distance_config_log+0x45c>)
 80061e4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80061e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f0:	ee17 2a10 	vmov	r2, s14
 80061f4:	bf4c      	ite	mi
 80061f6:	eeb1 7a67 	vnegmi.f32	s14, s15
 80061fa:	eeb0 7a67 	vmovpl.f32	s14, s15
 80061fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006202:	9200      	str	r2, [sp, #0]
 8006204:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006208:	4a42      	ldr	r2, [pc, #264]	@ (8006314 <acc_detector_distance_config_log+0x488>)
 800620a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800620e:	2002      	movs	r0, #2
 8006210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621c:	edcd 7a01 	vstr	s15, [sp, #4]
 8006220:	47b0      	blx	r6
 8006222:	f006 f965 	bl	800c4f0 <acc_rss_integration_log_level>
 8006226:	2801      	cmp	r0, #1
 8006228:	d935      	bls.n	8006296 <acc_detector_distance_config_log+0x40a>
 800622a:	edd5 7a09 	vldr	s15, [r5, #36]	@ 0x24
 800622e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80062dc <acc_detector_distance_config_log+0x450>
 8006232:	4b26      	ldr	r3, [pc, #152]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 8006234:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 80062dc <acc_detector_distance_config_log+0x450>
 8006238:	691e      	ldr	r6, [r3, #16]
 800623a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 800623e:	4925      	ldr	r1, [pc, #148]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 8006240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	bf48      	it	mi
 800624a:	eef1 7a67 	vnegmi.f32	s15, s15
 800624e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006252:	bf4c      	ite	mi
 8006254:	4b23      	ldrmi	r3, [pc, #140]	@ (80062e4 <acc_detector_distance_config_log+0x458>)
 8006256:	4b24      	ldrpl	r3, [pc, #144]	@ (80062e8 <acc_detector_distance_config_log+0x45c>)
 8006258:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800625c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	ee17 2a10 	vmov	r2, s14
 8006268:	bf4c      	ite	mi
 800626a:	eeb1 7a67 	vnegmi.f32	s14, s15
 800626e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006272:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006276:	9200      	str	r2, [sp, #0]
 8006278:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800627c:	4a26      	ldr	r2, [pc, #152]	@ (8006318 <acc_detector_distance_config_log+0x48c>)
 800627e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006282:	2002      	movs	r0, #2
 8006284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800628c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006290:	edcd 7a01 	vstr	s15, [sp, #4]
 8006294:	47b0      	blx	r6
 8006296:	f006 f92b 	bl	800c4f0 <acc_rss_integration_log_level>
 800629a:	2801      	cmp	r0, #1
 800629c:	f67f ae08 	bls.w	8005eb0 <acc_detector_distance_config_log+0x24>
 80062a0:	edd5 7a0a 	vldr	s15, [r5, #40]	@ 0x28
 80062a4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80062a8:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <acc_detector_distance_config_log+0x440>)
 80062aa:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 80062dc <acc_detector_distance_config_log+0x450>
 80062ae:	691d      	ldr	r5, [r3, #16]
 80062b0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80062e0 <acc_detector_distance_config_log+0x454>
 80062b4:	4907      	ldr	r1, [pc, #28]	@ (80062d4 <acc_detector_distance_config_log+0x448>)
 80062b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062be:	bf48      	it	mi
 80062c0:	eef1 7a67 	vnegmi.f32	s15, s15
 80062c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c8:	e028      	b.n	800631c <acc_detector_distance_config_log+0x490>
 80062ca:	bf00      	nop
 80062cc:	20000610 	.word	0x20000610
 80062d0:	08014b40 	.word	0x08014b40
 80062d4:	080149dc 	.word	0x080149dc
 80062d8:	08014b5c 	.word	0x08014b5c
 80062dc:	350637bd 	.word	0x350637bd
 80062e0:	49742400 	.word	0x49742400
 80062e4:	08014b20 	.word	0x08014b20
 80062e8:	08015d24 	.word	0x08015d24
 80062ec:	08014b68 	.word	0x08014b68
 80062f0:	08014b80 	.word	0x08014b80
 80062f4:	08014b94 	.word	0x08014b94
 80062f8:	08014be4 	.word	0x08014be4
 80062fc:	08014da4 	.word	0x08014da4
 8006300:	08014b24 	.word	0x08014b24
 8006304:	08014c00 	.word	0x08014c00
 8006308:	08014b34 	.word	0x08014b34
 800630c:	08014c18 	.word	0x08014c18
 8006310:	08014c30 	.word	0x08014c30
 8006314:	08014c58 	.word	0x08014c58
 8006318:	08014c88 	.word	0x08014c88
 800631c:	bf4c      	ite	mi
 800631e:	4b24      	ldrmi	r3, [pc, #144]	@ (80063b0 <acc_detector_distance_config_log+0x524>)
 8006320:	4b24      	ldrpl	r3, [pc, #144]	@ (80063b4 <acc_detector_distance_config_log+0x528>)
 8006322:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8006326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800632a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632e:	ee17 2a10 	vmov	r2, s14
 8006332:	bf4c      	ite	mi
 8006334:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006338:	eeb0 7a67 	vmovpl.f32	s14, s15
 800633c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006340:	9200      	str	r2, [sp, #0]
 8006342:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006346:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <acc_detector_distance_config_log+0x52c>)
 8006348:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800634c:	2002      	movs	r0, #2
 800634e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006352:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800635a:	edcd 7a01 	vstr	s15, [sp, #4]
 800635e:	47a8      	blx	r5
 8006360:	2c00      	cmp	r4, #0
 8006362:	f47f ada8 	bne.w	8005eb6 <acc_detector_distance_config_log+0x2a>
 8006366:	b002      	add	sp, #8
 8006368:	bd70      	pop	{r4, r5, r6, pc}
 800636a:	4b14      	ldr	r3, [pc, #80]	@ (80063bc <acc_detector_distance_config_log+0x530>)
 800636c:	f895 002c 	ldrb.w	r0, [r5, #44]	@ 0x2c
 8006370:	691e      	ldr	r6, [r3, #16]
 8006372:	f008 fa15 	bl	800e7a0 <acc_utils_bool_to_str>
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <acc_detector_distance_config_log+0x534>)
 8006378:	4912      	ldr	r1, [pc, #72]	@ (80063c4 <acc_detector_distance_config_log+0x538>)
 800637a:	4603      	mov	r3, r0
 800637c:	2002      	movs	r0, #2
 800637e:	47b0      	blx	r6
 8006380:	f006 f8b6 	bl	800c4f0 <acc_rss_integration_log_level>
 8006384:	2801      	cmp	r0, #1
 8006386:	f63f aead 	bhi.w	80060e4 <acc_detector_distance_config_log+0x258>
 800638a:	e6e1      	b.n	8006150 <acc_detector_distance_config_log+0x2c4>
 800638c:	4b0b      	ldr	r3, [pc, #44]	@ (80063bc <acc_detector_distance_config_log+0x530>)
 800638e:	7ca8      	ldrb	r0, [r5, #18]
 8006390:	691e      	ldr	r6, [r3, #16]
 8006392:	f008 fa1d 	bl	800e7d0 <acc_utils_profile_to_str>
 8006396:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <acc_detector_distance_config_log+0x53c>)
 8006398:	490a      	ldr	r1, [pc, #40]	@ (80063c4 <acc_detector_distance_config_log+0x538>)
 800639a:	4603      	mov	r3, r0
 800639c:	2002      	movs	r0, #2
 800639e:	47b0      	blx	r6
 80063a0:	f006 f8a6 	bl	800c4f0 <acc_rss_integration_log_level>
 80063a4:	2801      	cmp	r0, #1
 80063a6:	f67f ae99 	bls.w	80060dc <acc_detector_distance_config_log+0x250>
 80063aa:	e7de      	b.n	800636a <acc_detector_distance_config_log+0x4de>
 80063ac:	4b07      	ldr	r3, [pc, #28]	@ (80063cc <acc_detector_distance_config_log+0x540>)
 80063ae:	e6ef      	b.n	8006190 <acc_detector_distance_config_log+0x304>
 80063b0:	08014b20 	.word	0x08014b20
 80063b4:	08015d24 	.word	0x08015d24
 80063b8:	08014cb4 	.word	0x08014cb4
 80063bc:	20000610 	.word	0x20000610
 80063c0:	08014bbc 	.word	0x08014bbc
 80063c4:	080149dc 	.word	0x080149dc
 80063c8:	08014bac 	.word	0x08014bac
 80063cc:	08014b2c 	.word	0x08014b2c

080063d0 <validate_aggregator_handle.part.0>:
 80063d0:	4b02      	ldr	r3, [pc, #8]	@ (80063dc <validate_aggregator_handle.part.0+0xc>)
 80063d2:	4a03      	ldr	r2, [pc, #12]	@ (80063e0 <validate_aggregator_handle.part.0+0x10>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4903      	ldr	r1, [pc, #12]	@ (80063e4 <validate_aggregator_handle.part.0+0x14>)
 80063d8:	2000      	movs	r0, #0
 80063da:	4718      	bx	r3
 80063dc:	20000610 	.word	0x20000610
 80063e0:	08014db4 	.word	0x08014db4
 80063e4:	08014dd0 	.word	0x08014dd0

080063e8 <acc_detector_distance_aggregator_get_buffer_sizes>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	b118      	cbz	r0, 80063f4 <acc_detector_distance_aggregator_get_buffer_sizes+0xc>
 80063ec:	4b07      	ldr	r3, [pc, #28]	@ (800640c <acc_detector_distance_aggregator_get_buffer_sizes+0x24>)
 80063ee:	6804      	ldr	r4, [r0, #0]
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d003      	beq.n	80063fc <acc_detector_distance_aggregator_get_buffer_sizes+0x14>
 80063f4:	f7ff ffec 	bl	80063d0 <validate_aggregator_handle.part.0>
 80063f8:	2000      	movs	r0, #0
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	f8d0 318c 	ldr.w	r3, [r0, #396]	@ 0x18c
 8006400:	600b      	str	r3, [r1, #0]
 8006402:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	2001      	movs	r0, #1
 800640a:	bd10      	pop	{r4, pc}
 800640c:	acc0d152 	.word	0xacc0d152

08006410 <acc_detector_distance_aggregator_create>:
 8006410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006414:	b08b      	sub	sp, #44	@ 0x2c
 8006416:	4605      	mov	r5, r0
 8006418:	468a      	mov	sl, r1
 800641a:	4693      	mov	fp, r2
 800641c:	461c      	mov	r4, r3
 800641e:	4a40      	ldr	r2, [pc, #256]	@ (8006520 <acc_detector_distance_aggregator_create+0x110>)
 8006420:	f8bd 7050 	ldrh.w	r7, [sp, #80]	@ 0x50
 8006424:	238c      	movs	r3, #140	@ 0x8c
 8006426:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800642a:	2001      	movs	r0, #1
 800642c:	f006 f830 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 8006430:	4606      	mov	r6, r0
 8006432:	2800      	cmp	r0, #0
 8006434:	d06b      	beq.n	800650e <acc_detector_distance_aggregator_create+0xfe>
 8006436:	4b3b      	ldr	r3, [pc, #236]	@ (8006524 <acc_detector_distance_aggregator_create+0x114>)
 8006438:	f8a0 7044 	strh.w	r7, [r0, #68]	@ 0x44
 800643c:	7105      	strb	r5, [r0, #4]
 800643e:	6003      	str	r3, [r0, #0]
 8006440:	46b8      	mov	r8, r7
 8006442:	2f00      	cmp	r7, #0
 8006444:	d05d      	beq.n	8006502 <acc_detector_distance_aggregator_create+0xf2>
 8006446:	3f01      	subs	r7, #1
 8006448:	b2ba      	uxth	r2, r7
 800644a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800644e:	2700      	movs	r7, #0
 8006450:	f102 030c 	add.w	r3, r2, #12
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	3414      	adds	r4, #20
 8006458:	46b8      	mov	r8, r7
 800645a:	46b9      	mov	r9, r7
 800645c:	f100 0508 	add.w	r5, r0, #8
 8006460:	9001      	str	r0, [sp, #4]
 8006462:	f1a4 0e14 	sub.w	lr, r4, #20
 8006466:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800646a:	f10d 0c14 	add.w	ip, sp, #20
 800646e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006472:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8006476:	f8de 6000 	ldr.w	r6, [lr]
 800647a:	7923      	ldrb	r3, [r4, #4]
 800647c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006480:	2900      	cmp	r1, #0
 8006482:	bf0c      	ite	eq
 8006484:	4651      	moveq	r1, sl
 8006486:	4659      	movne	r1, fp
 8006488:	4622      	mov	r2, r4
 800648a:	a805      	add	r0, sp, #20
 800648c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006490:	f8cc 6000 	str.w	r6, [ip]
 8006494:	f001 fc04 	bl	8007ca0 <acc_detector_distance_processor_create>
 8006498:	f845 0b04 	str.w	r0, [r5], #4
 800649c:	b9c8      	cbnz	r0, 80064d2 <acc_detector_distance_aggregator_create+0xc2>
 800649e:	9e01      	ldr	r6, [sp, #4]
 80064a0:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 80064a4:	2400      	movs	r4, #0
 80064a6:	6034      	str	r4, [r6, #0]
 80064a8:	b15b      	cbz	r3, 80064c2 <acc_detector_distance_aggregator_create+0xb2>
 80064aa:	1ca3      	adds	r3, r4, #2
 80064ac:	3401      	adds	r4, #1
 80064ae:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80064b2:	f001 fd89 	bl	8007fc8 <acc_detector_distance_processor_destroy>
 80064b6:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 80064ba:	b2e3      	uxtb	r3, r4
 80064bc:	429a      	cmp	r2, r3
 80064be:	461c      	mov	r4, r3
 80064c0:	d8f3      	bhi.n	80064aa <acc_detector_distance_aggregator_create+0x9a>
 80064c2:	4630      	mov	r0, r6
 80064c4:	f006 f800 	bl	800c4c8 <acc_rss_integration_mem_free>
 80064c8:	2600      	movs	r6, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	b00b      	add	sp, #44	@ 0x2c
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d2:	aa04      	add	r2, sp, #16
 80064d4:	a903      	add	r1, sp, #12
 80064d6:	f8c5 8010 	str.w	r8, [r5, #16]
 80064da:	626f      	str	r7, [r5, #36]	@ 0x24
 80064dc:	f001 fbc2 	bl	8007c64 <acc_detector_distance_processor_get_buffer_sizes>
 80064e0:	4606      	mov	r6, r0
 80064e2:	9803      	ldr	r0, [sp, #12]
 80064e4:	f005 ff44 	bl	800c370 <acc_detector_utils_align_size_32bit>
 80064e8:	4602      	mov	r2, r0
 80064ea:	9804      	ldr	r0, [sp, #16]
 80064ec:	4490      	add	r8, r2
 80064ee:	f005 ff3f 	bl	800c370 <acc_detector_utils_align_size_32bit>
 80064f2:	341c      	adds	r4, #28
 80064f4:	4407      	add	r7, r0
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	d0d1      	beq.n	800649e <acc_detector_distance_aggregator_create+0x8e>
 80064fa:	9b00      	ldr	r3, [sp, #0]
 80064fc:	429d      	cmp	r5, r3
 80064fe:	d1b0      	bne.n	8006462 <acc_detector_distance_aggregator_create+0x52>
 8006500:	9e01      	ldr	r6, [sp, #4]
 8006502:	4630      	mov	r0, r6
 8006504:	e9c6 8763 	strd	r8, r7, [r6, #396]	@ 0x18c
 8006508:	b00b      	add	sp, #44	@ 0x2c
 800650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650e:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <acc_detector_distance_aggregator_create+0x118>)
 8006510:	4a06      	ldr	r2, [pc, #24]	@ (800652c <acc_detector_distance_aggregator_create+0x11c>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	4902      	ldr	r1, [pc, #8]	@ (8006520 <acc_detector_distance_aggregator_create+0x110>)
 8006516:	4798      	blx	r3
 8006518:	4630      	mov	r0, r6
 800651a:	b00b      	add	sp, #44	@ 0x2c
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	08014dd0 	.word	0x08014dd0
 8006524:	acc0d152 	.word	0xacc0d152
 8006528:	20000610 	.word	0x20000610
 800652c:	08014df0 	.word	0x08014df0

08006530 <acc_detector_distance_aggregator_destroy>:
 8006530:	b1b8      	cbz	r0, 8006562 <acc_detector_distance_aggregator_destroy+0x32>
 8006532:	b538      	push	{r3, r4, r5, lr}
 8006534:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8006538:	2400      	movs	r4, #0
 800653a:	4605      	mov	r5, r0
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	b15b      	cbz	r3, 8006558 <acc_detector_distance_aggregator_destroy+0x28>
 8006540:	1ca3      	adds	r3, r4, #2
 8006542:	3401      	adds	r4, #1
 8006544:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8006548:	f001 fd3e 	bl	8007fc8 <acc_detector_distance_processor_destroy>
 800654c:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 8006550:	b2e3      	uxtb	r3, r4
 8006552:	429a      	cmp	r2, r3
 8006554:	461c      	mov	r4, r3
 8006556:	d8f3      	bhi.n	8006540 <acc_detector_distance_aggregator_destroy+0x10>
 8006558:	4628      	mov	r0, r5
 800655a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800655e:	f005 bfb3 	b.w	800c4c8 <acc_rss_integration_mem_free>
 8006562:	4770      	bx	lr

08006564 <acc_detector_distance_aggregator_calibrate>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	4606      	mov	r6, r0
 800656a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
 800656e:	b087      	sub	sp, #28
 8006570:	2800      	cmp	r0, #0
 8006572:	d045      	beq.n	8006600 <acc_detector_distance_aggregator_calibrate+0x9c>
 8006574:	469a      	mov	sl, r3
 8006576:	2400      	movs	r4, #0
 8006578:	2301      	movs	r3, #1
 800657a:	4688      	mov	r8, r1
 800657c:	4691      	mov	r9, r2
 800657e:	46a3      	mov	fp, r4
 8006580:	9303      	str	r3, [sp, #12]
 8006582:	e004      	b.n	800658e <acc_detector_distance_aggregator_calibrate+0x2a>
 8006584:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 8006588:	b2a3      	uxth	r3, r4
 800658a:	429a      	cmp	r2, r3
 800658c:	d930      	bls.n	80065f0 <acc_detector_distance_aggregator_calibrate+0x8c>
 800658e:	b2a5      	uxth	r5, r4
 8006590:	1cab      	adds	r3, r5, #2
 8006592:	3401      	adds	r4, #1
 8006594:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 8006598:	4638      	mov	r0, r7
 800659a:	f001 fd1b 	bl	8007fd4 <acc_detector_distance_processor_calibration_needed>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d0f0      	beq.n	8006584 <acc_detector_distance_aggregator_calibrate+0x20>
 80065a2:	4638      	mov	r0, r7
 80065a4:	f002 f98c 	bl	80088c0 <acc_detector_distance_processor_measurement_type_get>
 80065a8:	4686      	mov	lr, r0
 80065aa:	45c6      	cmp	lr, r8
 80065ac:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
 80065b0:	4652      	mov	r2, sl
 80065b2:	4649      	mov	r1, r9
 80065b4:	4638      	mov	r0, r7
 80065b6:	d1e5      	bne.n	8006584 <acc_detector_distance_aggregator_calibrate+0x20>
 80065b8:	f10d 0717 	add.w	r7, sp, #23
 80065bc:	f8dc 5030 	ldr.w	r5, [ip, #48]	@ 0x30
 80065c0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80065c4:	9701      	str	r7, [sp, #4]
 80065c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80065c8:	f88d b017 	strb.w	fp, [sp, #23]
 80065cc:	443d      	add	r5, r7
 80065ce:	9500      	str	r5, [sp, #0]
 80065d0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80065d2:	442b      	add	r3, r5
 80065d4:	f001 fd1c 	bl	8008010 <acc_detector_distance_processor_calibrate>
 80065d8:	b178      	cbz	r0, 80065fa <acc_detector_distance_aggregator_calibrate+0x96>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0d1      	beq.n	8006584 <acc_detector_distance_aggregator_calibrate+0x20>
 80065e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80065e4:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	b2a3      	uxth	r3, r4
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d8ce      	bhi.n	800658e <acc_detector_distance_aggregator_calibrate+0x2a>
 80065f0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065f2:	461a      	mov	r2, r3
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	7013      	strb	r3, [r2, #0]
 80065f8:	2001      	movs	r0, #1
 80065fa:	b007      	add	sp, #28
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	2301      	movs	r3, #1
 8006602:	9303      	str	r3, [sp, #12]
 8006604:	e7f4      	b.n	80065f0 <acc_detector_distance_aggregator_calibrate+0x8c>
 8006606:	bf00      	nop

08006608 <acc_detector_distance_aggregator_calibration_needed>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	b120      	cbz	r0, 8006616 <acc_detector_distance_aggregator_calibration_needed+0xe>
 800660c:	4b0e      	ldr	r3, [pc, #56]	@ (8006648 <acc_detector_distance_aggregator_calibration_needed+0x40>)
 800660e:	6802      	ldr	r2, [r0, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	4605      	mov	r5, r0
 8006614:	d003      	beq.n	800661e <acc_detector_distance_aggregator_calibration_needed+0x16>
 8006616:	f7ff fedb 	bl	80063d0 <validate_aggregator_handle.part.0>
 800661a:	2000      	movs	r0, #0
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f9      	beq.n	800661a <acc_detector_distance_aggregator_calibration_needed+0x12>
 8006626:	2400      	movs	r4, #0
 8006628:	e003      	b.n	8006632 <acc_detector_distance_aggregator_calibration_needed+0x2a>
 800662a:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 800662e:	4293      	cmp	r3, r2
 8006630:	d9f3      	bls.n	800661a <acc_detector_distance_aggregator_calibration_needed+0x12>
 8006632:	b2a3      	uxth	r3, r4
 8006634:	3302      	adds	r3, #2
 8006636:	3401      	adds	r4, #1
 8006638:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800663c:	f001 fcca 	bl	8007fd4 <acc_detector_distance_processor_calibration_needed>
 8006640:	b2a2      	uxth	r2, r4
 8006642:	2800      	cmp	r0, #0
 8006644:	d0f1      	beq.n	800662a <acc_detector_distance_aggregator_calibration_needed+0x22>
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	acc0d152 	.word	0xacc0d152

0800664c <acc_detector_distance_aggregator_process>:
 800664c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006650:	ed2d 8b02 	vpush	{d8}
 8006654:	b0f5      	sub	sp, #468	@ 0x1d4
 8006656:	9209      	str	r2, [sp, #36]	@ 0x24
 8006658:	f9bd 2200 	ldrsh.w	r2, [sp, #512]	@ 0x200
 800665c:	9207      	str	r2, [sp, #28]
 800665e:	f9bd 2208 	ldrsh.w	r2, [sp, #520]	@ 0x208
 8006662:	9105      	str	r1, [sp, #20]
 8006664:	9208      	str	r2, [sp, #32]
 8006666:	9306      	str	r3, [sp, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80b6 	beq.w	80067da <acc_detector_distance_aggregator_process+0x18e>
 800666e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8006672:	4605      	mov	r5, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a6 	beq.w	80067c6 <acc_detector_distance_aggregator_process+0x17a>
 800667a:	2700      	movs	r7, #0
 800667c:	eeb0 8a40 	vmov.f32	s16, s0
 8006680:	46bb      	mov	fp, r7
 8006682:	f04f 0901 	mov.w	r9, #1
 8006686:	e007      	b.n	8006698 <acc_detector_distance_aggregator_process+0x4c>
 8006688:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 800668c:	3701      	adds	r7, #1
 800668e:	fa1f fb87 	uxth.w	fp, r7
 8006692:	455b      	cmp	r3, fp
 8006694:	f240 8094 	bls.w	80067c0 <acc_detector_distance_aggregator_process+0x174>
 8006698:	b2be      	uxth	r6, r7
 800669a:	1cb3      	adds	r3, r6, #2
 800669c:	f855 8023 	ldr.w	r8, [r5, r3, lsl #2]
 80066a0:	4640      	mov	r0, r8
 80066a2:	f002 f90d 	bl	80088c0 <acc_detector_distance_processor_measurement_type_get>
 80066a6:	9b05      	ldr	r3, [sp, #20]
 80066a8:	4298      	cmp	r0, r3
 80066aa:	d1ed      	bne.n	8006688 <acc_detector_distance_aggregator_process+0x3c>
 80066ac:	2100      	movs	r1, #0
 80066ae:	2228      	movs	r2, #40	@ 0x28
 80066b0:	f10d 0a68 	add.w	sl, sp, #104	@ 0x68
 80066b4:	a810      	add	r0, sp, #64	@ 0x40
 80066b6:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 80066ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066bc:	910d      	str	r1, [sp, #52]	@ 0x34
 80066be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80066c0:	f00a f9dc 	bl	8010a7c <memset>
 80066c4:	2100      	movs	r1, #0
 80066c6:	2228      	movs	r2, #40	@ 0x28
 80066c8:	4650      	mov	r0, sl
 80066ca:	f00a f9d7 	bl	8010a7c <memset>
 80066ce:	2100      	movs	r1, #0
 80066d0:	4648      	mov	r0, r9
 80066d2:	2228      	movs	r2, #40	@ 0x28
 80066d4:	f00a f9d2 	bl	8010a7c <memset>
 80066d8:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 80066dc:	9908      	ldr	r1, [sp, #32]
 80066de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	9100      	str	r1, [sp, #0]
 80066e4:	9984      	ldr	r1, [sp, #528]	@ 0x210
 80066e6:	440a      	add	r2, r1
 80066e8:	9983      	ldr	r1, [sp, #524]	@ 0x20c
 80066ea:	ae0a      	add	r6, sp, #40	@ 0x28
 80066ec:	440b      	add	r3, r1
 80066ee:	ac10      	add	r4, sp, #64	@ 0x40
 80066f0:	e9cd 2602 	strd	r2, r6, [sp, #8]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80066fa:	9b81      	ldr	r3, [sp, #516]	@ 0x204
 80066fc:	f8c6 9010 	str.w	r9, [r6, #16]
 8006700:	eeb0 0a48 	vmov.f32	s0, s16
 8006704:	4640      	mov	r0, r8
 8006706:	6034      	str	r4, [r6, #0]
 8006708:	f8c6 a008 	str.w	sl, [r6, #8]
 800670c:	f001 fdbe 	bl	800828c <acc_detector_distance_processor_process>
 8006710:	88b3      	ldrh	r3, [r6, #4]
 8006712:	4681      	mov	r9, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d044      	beq.n	80067a2 <acc_detector_distance_aggregator_process+0x156>
 8006718:	6831      	ldr	r1, [r6, #0]
 800671a:	68b2      	ldr	r2, [r6, #8]
 800671c:	6933      	ldr	r3, [r6, #16]
 800671e:	6809      	ldr	r1, [r1, #0]
 8006720:	f8d2 e000 	ldr.w	lr, [r2]
 8006724:	f8d3 a000 	ldr.w	sl, [r3]
 8006728:	b398      	cbz	r0, 8006792 <acc_detector_distance_aggregator_process+0x146>
 800672a:	f8b5 c188 	ldrh.w	ip, [r5, #392]	@ 0x188
 800672e:	2400      	movs	r4, #0
 8006730:	e029      	b.n	8006786 <acc_detector_distance_aggregator_process+0x13a>
 8006732:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
 8006736:	6499      	str	r1, [r3, #72]	@ 0x48
 8006738:	f8c3 e04c 	str.w	lr, [r3, #76]	@ 0x4c
 800673c:	f002 f8d8 	bl	80088f0 <acc_detector_distance_processor_profile_get>
 8006740:	f8b5 a188 	ldrh.w	sl, [r5, #392]	@ 0x188
 8006744:	f005 fd38 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8006748:	f8b5 c188 	ldrh.w	ip, [r5, #392]	@ 0x188
 800674c:	88b3      	ldrh	r3, [r6, #4]
 800674e:	3401      	adds	r4, #1
 8006750:	f10c 0c01 	add.w	ip, ip, #1
 8006754:	b2a4      	uxth	r4, r4
 8006756:	eb05 1a0a 	add.w	sl, r5, sl, lsl #4
 800675a:	fa1f fc8c 	uxth.w	ip, ip
 800675e:	42a3      	cmp	r3, r4
 8006760:	ed8a 0a15 	vstr	s0, [sl, #84]	@ 0x54
 8006764:	f8a5 c188 	strh.w	ip, [r5, #392]	@ 0x188
 8006768:	d91b      	bls.n	80067a2 <acc_detector_distance_aggregator_process+0x156>
 800676a:	6831      	ldr	r1, [r6, #0]
 800676c:	68b2      	ldr	r2, [r6, #8]
 800676e:	6933      	ldr	r3, [r6, #16]
 8006770:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006774:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006778:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800677c:	6809      	ldr	r1, [r1, #0]
 800677e:	f8d2 e000 	ldr.w	lr, [r2]
 8006782:	f8d3 a000 	ldr.w	sl, [r3]
 8006786:	f1bc 0f13 	cmp.w	ip, #19
 800678a:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800678e:	4640      	mov	r0, r8
 8006790:	d9cf      	bls.n	8006732 <acc_detector_distance_aggregator_process+0xe6>
 8006792:	4b36      	ldr	r3, [pc, #216]	@ (800686c <acc_detector_distance_aggregator_process+0x220>)
 8006794:	4a36      	ldr	r2, [pc, #216]	@ (8006870 <acc_detector_distance_aggregator_process+0x224>)
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	4936      	ldr	r1, [pc, #216]	@ (8006874 <acc_detector_distance_aggregator_process+0x228>)
 800679a:	2000      	movs	r0, #0
 800679c:	4798      	blx	r3
 800679e:	f04f 0900 	mov.w	r9, #0
 80067a2:	f1bb 0f00 	cmp.w	fp, #0
 80067a6:	f47f af6f 	bne.w	8006688 <acc_detector_distance_aggregator_process+0x3c>
 80067aa:	7db3      	ldrb	r3, [r6, #22]
 80067ac:	f885 318a 	strb.w	r3, [r5, #394]	@ 0x18a
 80067b0:	3701      	adds	r7, #1
 80067b2:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 80067b6:	fa1f fb87 	uxth.w	fp, r7
 80067ba:	455b      	cmp	r3, fp
 80067bc:	f63f af6c 	bhi.w	8006698 <acc_detector_distance_aggregator_process+0x4c>
 80067c0:	f1b9 0f00 	cmp.w	r9, #0
 80067c4:	d003      	beq.n	80067ce <acc_detector_distance_aggregator_process+0x182>
 80067c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c8:	b97b      	cbnz	r3, 80067ea <acc_detector_distance_aggregator_process+0x19e>
 80067ca:	f04f 0901 	mov.w	r9, #1
 80067ce:	4648      	mov	r0, r9
 80067d0:	b075      	add	sp, #468	@ 0x1d4
 80067d2:	ecbd 8b02 	vpop	{d8}
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80067de:	4648      	mov	r0, r9
 80067e0:	b075      	add	sp, #468	@ 0x1d4
 80067e2:	ecbd 8b02 	vpop	{d8}
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	f8b5 1188 	ldrh.w	r1, [r5, #392]	@ 0x188
 80067ee:	792e      	ldrb	r6, [r5, #4]
 80067f0:	ac1a      	add	r4, sp, #104	@ 0x68
 80067f2:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80067f6:	2200      	movs	r2, #0
 80067f8:	2700      	movs	r7, #0
 80067fa:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80067fe:	f000 fcb9 	bl	8007174 <acc_detector_distance_alg_peak_inplace_sort>
 8006802:	9400      	str	r4, [sp, #0]
 8006804:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006808:	aa24      	add	r2, sp, #144	@ 0x90
 800680a:	2314      	movs	r3, #20
 800680c:	8027      	strh	r7, [r4, #0]
 800680e:	f000 fd05 	bl	800721c <acc_detector_distance_alg_merge_peaks>
 8006812:	2e01      	cmp	r6, #1
 8006814:	d024      	beq.n	8006860 <acc_detector_distance_aggregator_process+0x214>
 8006816:	8821      	ldrh	r1, [r4, #0]
 8006818:	9b85      	ldr	r3, [sp, #532]	@ 0x214
 800681a:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800681e:	b179      	cbz	r1, 8006840 <acc_detector_distance_aggregator_process+0x1f4>
 8006820:	9b85      	ldr	r3, [sp, #532]	@ 0x214
 8006822:	3901      	subs	r1, #1
 8006824:	b289      	uxth	r1, r1
 8006826:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800682a:	aa24      	add	r2, sp, #144	@ 0x90
 800682c:	6810      	ldr	r0, [r2, #0]
 800682e:	6018      	str	r0, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	3304      	adds	r3, #4
 8006834:	6894      	ldr	r4, [r2, #8]
 8006836:	625c      	str	r4, [r3, #36]	@ 0x24
 8006838:	4281      	cmp	r1, r0
 800683a:	f102 0210 	add.w	r2, r2, #16
 800683e:	d1f5      	bne.n	800682c <acc_detector_distance_aggregator_process+0x1e0>
 8006840:	9a85      	ldr	r2, [sp, #532]	@ 0x214
 8006842:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8006846:	f895 318a 	ldrb.w	r3, [r5, #394]	@ 0x18a
 800684a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
 800684e:	4648      	mov	r0, r9
 8006850:	2300      	movs	r3, #0
 8006852:	f8a5 3188 	strh.w	r3, [r5, #392]	@ 0x188
 8006856:	b075      	add	sp, #468	@ 0x1d4
 8006858:	ecbd 8b02 	vpop	{d8}
 800685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006860:	8821      	ldrh	r1, [r4, #0]
 8006862:	4632      	mov	r2, r6
 8006864:	a824      	add	r0, sp, #144	@ 0x90
 8006866:	f000 fc85 	bl	8007174 <acc_detector_distance_alg_peak_inplace_sort>
 800686a:	e7d4      	b.n	8006816 <acc_detector_distance_aggregator_process+0x1ca>
 800686c:	20000610 	.word	0x20000610
 8006870:	08014e10 	.word	0x08014e10
 8006874:	08014dd0 	.word	0x08014dd0

08006878 <reverse>:
 8006878:	ea5f 0c51 	movs.w	ip, r1, lsr #1
 800687c:	d01d      	beq.n	80068ba <reverse+0x42>
 800687e:	b4f0      	push	{r4, r5, r6, r7}
 8006880:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006884:	fa1f f38c 	uxth.w	r3, ip
 8006888:	3901      	subs	r1, #1
 800688a:	f100 0c08 	add.w	ip, r0, #8
 800688e:	eb0c 0cc3 	add.w	ip, ip, r3, lsl #3
 8006892:	b28a      	uxth	r2, r1
 8006894:	4603      	mov	r3, r0
 8006896:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800689a:	681d      	ldr	r5, [r3, #0]
 800689c:	680f      	ldr	r7, [r1, #0]
 800689e:	684e      	ldr	r6, [r1, #4]
 80068a0:	685c      	ldr	r4, [r3, #4]
 80068a2:	f843 7b08 	str.w	r7, [r3], #8
 80068a6:	3a01      	subs	r2, #1
 80068a8:	4563      	cmp	r3, ip
 80068aa:	f843 6c04 	str.w	r6, [r3, #-4]
 80068ae:	b292      	uxth	r2, r2
 80068b0:	600d      	str	r5, [r1, #0]
 80068b2:	604c      	str	r4, [r1, #4]
 80068b4:	d1ef      	bne.n	8006896 <reverse+0x1e>
 80068b6:	bcf0      	pop	{r4, r5, r6, r7}
 80068b8:	4770      	bx	lr
 80068ba:	4770      	bx	lr

080068bc <merge_peak_range.part.0>:
 80068bc:	b410      	push	{r4}
 80068be:	2400      	movs	r4, #0
 80068c0:	ed92 7a03 	vldr	s14, [r2, #12]
 80068c4:	601c      	str	r4, [r3, #0]
 80068c6:	605c      	str	r4, [r3, #4]
 80068c8:	609c      	str	r4, [r3, #8]
 80068ca:	60dc      	str	r4, [r3, #12]
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d042      	beq.n	8006956 <merge_peak_range.part.0+0x9a>
 80068d0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8006964 <merge_peak_range.part.0+0xa8>
 80068d4:	1e4c      	subs	r4, r1, #1
 80068d6:	fa10 f484 	uxtah	r4, r0, r4
 80068da:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80068de:	eef0 6a67 	vmov.f32	s13, s15
 80068e2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80068e6:	eeb0 6a67 	vmov.f32	s12, s15
 80068ea:	e000      	b.n	80068ee <merge_peak_range.part.0+0x32>
 80068ec:	4602      	mov	r2, r0
 80068ee:	edd2 5a00 	vldr	s11, [r2]
 80068f2:	ee36 6a25 	vadd.f32	s12, s12, s11
 80068f6:	f102 0010 	add.w	r0, r2, #16
 80068fa:	ed83 6a00 	vstr	s12, [r3]
 80068fe:	edd2 5a01 	vldr	s11, [r2, #4]
 8006902:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006906:	edc3 6a01 	vstr	s13, [r3, #4]
 800690a:	edd2 5a02 	vldr	s11, [r2, #8]
 800690e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006912:	edc3 7a02 	vstr	s15, [r3, #8]
 8006916:	edd2 5a03 	vldr	s11, [r2, #12]
 800691a:	eef4 5a47 	vcmp.f32	s11, s14
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	bfc8      	it	gt
 8006924:	eeb0 7a65 	vmovgt.f32	s14, s11
 8006928:	4294      	cmp	r4, r2
 800692a:	d1df      	bne.n	80068ec <merge_peak_range.part.0+0x30>
 800692c:	ee05 1a90 	vmov	s11, r1
 8006930:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8006934:	ed83 7a03 	vstr	s14, [r3, #12]
 8006938:	ee86 5a25 	vdiv.f32	s10, s12, s11
 800693c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006940:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8006944:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8006948:	ed83 5a00 	vstr	s10, [r3]
 800694c:	ed83 6a01 	vstr	s12, [r3, #4]
 8006950:	ed83 7a02 	vstr	s14, [r3, #8]
 8006954:	4770      	bx	lr
 8006956:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8006964 <merge_peak_range.part.0+0xa8>
 800695a:	eef0 6a67 	vmov.f32	s13, s15
 800695e:	eeb0 6a67 	vmov.f32	s12, s15
 8006962:	e7e3      	b.n	800692c <merge_peak_range.part.0+0x70>
 8006964:	00000000 	.word	0x00000000

08006968 <acc_detector_distance_alg_complex_filter>:
 8006968:	ed91 7a00 	vldr	s14, [r1]
 800696c:	ed92 6a00 	vldr	s12, [r2]
 8006970:	edd2 6a01 	vldr	s13, [r2, #4]
 8006974:	edd1 4a01 	vldr	s9, [r1, #4]
 8006978:	ee67 5a06 	vmul.f32	s11, s14, s12
 800697c:	ee26 4a24 	vmul.f32	s8, s12, s9
 8006980:	ee67 7a26 	vmul.f32	s15, s14, s13
 8006984:	ee66 4aa4 	vmul.f32	s9, s13, s9
 8006988:	2b00      	cmp	r3, #0
 800698a:	d042      	beq.n	8006a12 <acc_detector_distance_alg_complex_filter+0xaa>
 800698c:	3b01      	subs	r3, #1
 800698e:	b29b      	uxth	r3, r3
 8006990:	ed2d 8b02 	vpush	{d8}
 8006994:	edd0 1a00 	vldr	s3, [r0]
 8006998:	ed90 2a01 	vldr	s4, [r0, #4]
 800699c:	edd0 2a02 	vldr	s5, [r0, #8]
 80069a0:	ed90 3a03 	vldr	s6, [r0, #12]
 80069a4:	edd0 3a04 	vldr	s7, [r0, #16]
 80069a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069ac:	e004      	b.n	80069b8 <acc_detector_distance_alg_complex_filter+0x50>
 80069ae:	edd2 6a03 	vldr	s13, [r2, #12]
 80069b2:	ed92 6a02 	vldr	s12, [r2, #8]
 80069b6:	3208      	adds	r2, #8
 80069b8:	ee21 5a86 	vmul.f32	s10, s3, s12
 80069bc:	ee21 7aa6 	vmul.f32	s14, s3, s13
 80069c0:	ee35 5a25 	vadd.f32	s10, s10, s11
 80069c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069c8:	ee62 5a06 	vmul.f32	s11, s4, s12
 80069cc:	ee62 7a26 	vmul.f32	s15, s4, s13
 80069d0:	ee75 5a84 	vadd.f32	s11, s11, s8
 80069d4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80069d8:	ee23 8a05 	vmul.f32	s16, s6, s10
 80069dc:	ee23 0a85 	vmul.f32	s0, s7, s10
 80069e0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80069e4:	ee63 0a07 	vmul.f32	s1, s6, s14
 80069e8:	ee23 1a87 	vmul.f32	s2, s7, s14
 80069ec:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80069f0:	429a      	cmp	r2, r3
 80069f2:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80069f6:	ee36 4a40 	vsub.f32	s8, s12, s0
 80069fa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80069fe:	ee76 4ac1 	vsub.f32	s9, s13, s2
 8006a02:	ed82 5a00 	vstr	s10, [r2]
 8006a06:	ed82 7a01 	vstr	s14, [r2, #4]
 8006a0a:	d1d0      	bne.n	80069ae <acc_detector_distance_alg_complex_filter+0x46>
 8006a0c:	ecbd 8b02 	vpop	{d8}
 8006a10:	4770      	bx	lr
 8006a12:	4770      	bx	lr

08006a14 <acc_detector_distance_alg_odd_padding_add>:
 8006a14:	b4f0      	push	{r4, r5, r6, r7}
 8006a16:	1e57      	subs	r7, r2, #1
 8006a18:	1a3f      	subs	r7, r7, r0
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d043      	beq.n	8006aa6 <acc_detector_distance_alg_odd_padding_add+0x92>
 8006a1e:	b2bf      	uxth	r7, r7
 8006a20:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 8006a24:	eb01 05c7 	add.w	r5, r1, r7, lsl #3
 8006a28:	2401      	movs	r4, #1
 8006a2a:	1902      	adds	r2, r0, r4
 8006a2c:	ed96 7a01 	vldr	s14, [r6, #4]
 8006a30:	edd6 7a00 	vldr	s15, [r6]
 8006a34:	b292      	uxth	r2, r2
 8006a36:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 8006a3a:	0063      	lsls	r3, r4, #1
 8006a3c:	ed9c 6a01 	vldr	s12, [ip, #4]
 8006a40:	eddc 6a00 	vldr	s13, [ip]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006a4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006a54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006a5e:	ed82 7a01 	vstr	s14, [r2, #4]
 8006a62:	edc2 7a00 	vstr	s15, [r2]
 8006a66:	1b3a      	subs	r2, r7, r4
 8006a68:	ed95 7a01 	vldr	s14, [r5, #4]
 8006a6c:	edd5 7a00 	vldr	s15, [r5]
 8006a70:	b292      	uxth	r2, r2
 8006a72:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 8006a76:	ed9c 6a01 	vldr	s12, [ip, #4]
 8006a7a:	eddc 6a00 	vldr	s13, [ip]
 8006a7e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006a82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006a86:	4413      	add	r3, r2
 8006a88:	3401      	adds	r4, #1
 8006a8a:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006a8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	b2a4      	uxth	r4, r4
 8006a96:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006a9a:	42a0      	cmp	r0, r4
 8006a9c:	ed83 7a01 	vstr	s14, [r3, #4]
 8006aa0:	edc3 7a00 	vstr	s15, [r3]
 8006aa4:	d2c1      	bcs.n	8006a2a <acc_detector_distance_alg_odd_padding_add+0x16>
 8006aa6:	bcf0      	pop	{r4, r5, r6, r7}
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop

08006aac <acc_detector_distance_alg_filter_steady_state_calculate>:
 8006aac:	ed90 5a03 	vldr	s10, [r0, #12]
 8006ab0:	edd0 7a04 	vldr	s15, [r0, #16]
 8006ab4:	ed90 6a00 	vldr	s12, [r0]
 8006ab8:	ed90 7a01 	vldr	s14, [r0, #4]
 8006abc:	edd0 5a02 	vldr	s11, [r0, #8]
 8006ac0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8006ac4:	ee75 6a04 	vadd.f32	s13, s10, s8
 8006ac8:	ee65 4a06 	vmul.f32	s9, s10, s12
 8006acc:	ee76 3aa7 	vadd.f32	s7, s13, s15
 8006ad0:	ee27 5a86 	vmul.f32	s10, s15, s12
 8006ad4:	ee84 6a23 	vdiv.f32	s12, s8, s7
 8006ad8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006adc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006ae0:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8006ae4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8006ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aec:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006af0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006af4:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006b00:	edc1 7a01 	vstr	s15, [r1, #4]
 8006b04:	ed81 7a00 	vstr	s14, [r1]
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop

08006b0c <acc_detector_distance_alg_filtfilt>:
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	2b09      	cmp	r3, #9
 8006b12:	b084      	sub	sp, #16
 8006b14:	d80a      	bhi.n	8006b2c <acc_detector_distance_alg_filtfilt+0x20>
 8006b16:	4924      	ldr	r1, [pc, #144]	@ (8006ba8 <acc_detector_distance_alg_filtfilt+0x9c>)
 8006b18:	4a24      	ldr	r2, [pc, #144]	@ (8006bac <acc_detector_distance_alg_filtfilt+0xa0>)
 8006b1a:	690c      	ldr	r4, [r1, #16]
 8006b1c:	4924      	ldr	r1, [pc, #144]	@ (8006bb0 <acc_detector_distance_alg_filtfilt+0xa4>)
 8006b1e:	200a      	movs	r0, #10
 8006b20:	9000      	str	r0, [sp, #0]
 8006b22:	2000      	movs	r0, #0
 8006b24:	47a0      	blx	r4
 8006b26:	b004      	add	sp, #16
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	1e5c      	subs	r4, r3, #1
 8006b2e:	4680      	mov	r8, r0
 8006b30:	461f      	mov	r7, r3
 8006b32:	4616      	mov	r6, r2
 8006b34:	b2a4      	uxth	r4, r4
 8006b36:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006b3a:	f104 0509 	add.w	r5, r4, #9
 8006b3e:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006b42:	b2ad      	uxth	r5, r5
 8006b44:	3c01      	subs	r4, #1
 8006b46:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8006b4a:	b2a4      	uxth	r4, r4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	606b      	str	r3, [r5, #4]
 8006b52:	4284      	cmp	r4, r0
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	d1f0      	bne.n	8006b3a <acc_detector_distance_alg_filtfilt+0x2e>
 8006b58:	f107 0412 	add.w	r4, r7, #18
 8006b5c:	b2a4      	uxth	r4, r4
 8006b5e:	4622      	mov	r2, r4
 8006b60:	4631      	mov	r1, r6
 8006b62:	2009      	movs	r0, #9
 8006b64:	f7ff ff56 	bl	8006a14 <acc_detector_distance_alg_odd_padding_add>
 8006b68:	4640      	mov	r0, r8
 8006b6a:	a902      	add	r1, sp, #8
 8006b6c:	f7ff ff9e 	bl	8006aac <acc_detector_distance_alg_filter_steady_state_calculate>
 8006b70:	4623      	mov	r3, r4
 8006b72:	4632      	mov	r2, r6
 8006b74:	a902      	add	r1, sp, #8
 8006b76:	f7ff fef7 	bl	8006968 <acc_detector_distance_alg_complex_filter>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f7ff fe7b 	bl	8006878 <reverse>
 8006b82:	4632      	mov	r2, r6
 8006b84:	4623      	mov	r3, r4
 8006b86:	a902      	add	r1, sp, #8
 8006b88:	4640      	mov	r0, r8
 8006b8a:	f7ff feed 	bl	8006968 <acc_detector_distance_alg_complex_filter>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fe71 	bl	8006878 <reverse>
 8006b96:	00fa      	lsls	r2, r7, #3
 8006b98:	f106 0148 	add.w	r1, r6, #72	@ 0x48
 8006b9c:	b004      	add	sp, #16
 8006b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	f009 bf51 	b.w	8010a48 <memmove>
 8006ba6:	bf00      	nop
 8006ba8:	20000610 	.word	0x20000610
 8006bac:	08014e28 	.word	0x08014e28
 8006bb0:	08014e5c 	.word	0x08014e5c

08006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>:
 8006bb4:	b500      	push	{lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	9101      	str	r1, [sp, #4]
 8006bba:	b919      	cbnz	r1, 8006bc4 <acc_detector_distance_alg_get_distance_filter_edge_margin+0x10>
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	b003      	add	sp, #12
 8006bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc4:	f005 faf8 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8006bc8:	eddd 7a01 	vldr	s15, [sp, #4]
 8006bcc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006bec <acc_detector_distance_alg_get_distance_filter_edge_margin+0x38>
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bd8:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006bdc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006be0:	ee17 3a10 	vmov	r3, s14
 8006be4:	b298      	uxth	r0, r3
 8006be6:	b003      	add	sp, #12
 8006be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bec:	3b23d70a 	.word	0x3b23d70a

08006bf0 <acc_detector_distance_alg_calculate_biquad_coeffs>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	b3e8      	cbz	r0, 8006c72 <acc_detector_distance_alg_calculate_biquad_coeffs+0x82>
 8006bf6:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8006c88 <acc_detector_distance_alg_calculate_biquad_coeffs+0x98>
 8006bfa:	eeb0 7ac0 	vabs.f32	s14, s0
 8006bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c06:	dc35      	bgt.n	8006c74 <acc_detector_distance_alg_calculate_biquad_coeffs+0x84>
 8006c08:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8006c8c <acc_detector_distance_alg_calculate_biquad_coeffs+0x9c>
 8006c0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006c14:	f00b ff94 	bl	8012b40 <cosf>
 8006c18:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006c1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006c20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006c24:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8006c90 <acc_detector_distance_alg_calculate_biquad_coeffs+0xa0>
 8006c28:	eeb1 6ac7 	vsqrt.f32	s12, s14
 8006c2c:	ee37 5ac0 	vsub.f32	s10, s15, s0
 8006c30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006c34:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8006c38:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 8006c3c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006c40:	ee65 5a25 	vmul.f32	s11, s10, s11
 8006c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c48:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006c4c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8006c50:	eec0 6a06 	vdiv.f32	s13, s0, s12
 8006c54:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8006c58:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	edc4 7a00 	vstr	s15, [r4]
 8006c62:	edc4 5a01 	vstr	s11, [r4, #4]
 8006c66:	edc4 7a02 	vstr	s15, [r4, #8]
 8006c6a:	edc4 6a03 	vstr	s13, [r4, #12]
 8006c6e:	ed84 7a04 	vstr	s14, [r4, #16]
 8006c72:	bd10      	pop	{r4, pc}
 8006c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c78:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8006c7c:	eef0 7a47 	vmov.f32	s15, s14
 8006c80:	eef0 5a66 	vmov.f32	s11, s13
 8006c84:	e7ea      	b.n	8006c5c <acc_detector_distance_alg_calculate_biquad_coeffs+0x6c>
 8006c86:	bf00      	nop
 8006c88:	3effffde 	.word	0x3effffde
 8006c8c:	40490fdb 	.word	0x40490fdb
 8006c90:	3fb504f3 	.word	0x3fb504f3

08006c94 <acc_detector_distance_alg_get_distance_filter_coeffs>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	4614      	mov	r4, r2
 8006c9a:	9101      	str	r1, [sp, #4]
 8006c9c:	f005 fa8c 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8006ca0:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006cdc <acc_detector_distance_alg_get_distance_filter_coeffs+0x48>
 8006ca4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cac:	dc02      	bgt.n	8006cb4 <acc_detector_distance_alg_get_distance_filter_coeffs+0x20>
 8006cae:	2000      	movs	r0, #0
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd10      	pop	{r4, pc}
 8006cb4:	eddd 7a01 	vldr	s15, [sp, #4]
 8006cb8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006ce0 <acc_detector_distance_alg_get_distance_filter_coeffs+0x4c>
 8006cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cca:	eec7 6a80 	vdiv.f32	s13, s15, s0
 8006cce:	ee26 0a87 	vmul.f32	s0, s13, s14
 8006cd2:	b002      	add	sp, #8
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f7ff bf8a 	b.w	8006bf0 <acc_detector_distance_alg_calculate_biquad_coeffs>
 8006cdc:	3727c5ac 	.word	0x3727c5ac
 8006ce0:	3b23d70a 	.word	0x3b23d70a

08006ce4 <acc_detector_distance_alg_calculate_cfar>:
 8006ce4:	b430      	push	{r4, r5}
 8006ce6:	18d4      	adds	r4, r2, r3
 8006ce8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 8006cec:	b2a4      	uxth	r4, r4
 8006cee:	42ac      	cmp	r4, r5
 8006cf0:	d82f      	bhi.n	8006d52 <acc_detector_distance_alg_calculate_cfar+0x6e>
 8006cf2:	1b09      	subs	r1, r1, r4
 8006cf4:	b289      	uxth	r1, r1
 8006cf6:	42a9      	cmp	r1, r5
 8006cf8:	d92b      	bls.n	8006d52 <acc_detector_distance_alg_calculate_cfar+0x6e>
 8006cfa:	1aec      	subs	r4, r5, r3
 8006cfc:	3501      	adds	r5, #1
 8006cfe:	1aa4      	subs	r4, r4, r2
 8006d00:	442a      	add	r2, r5
 8006d02:	b2a4      	uxth	r4, r4
 8006d04:	b292      	uxth	r2, r2
 8006d06:	b343      	cbz	r3, 8006d5a <acc_detector_distance_alg_calculate_cfar+0x76>
 8006d08:	1e59      	subs	r1, r3, #1
 8006d0a:	fa14 f581 	uxtah	r5, r4, r1
 8006d0e:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006d60 <acc_detector_distance_alg_calculate_cfar+0x7c>
 8006d12:	1d01      	adds	r1, r0, #4
 8006d14:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006d18:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006d1c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8006d20:	ecf0 6a01 	vldmia	r0!, {s13}
 8006d24:	ecb2 7a01 	vldmia	r2!, {s14}
 8006d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2c:	4281      	cmp	r1, r0
 8006d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d32:	d1f5      	bne.n	8006d20 <acc_detector_distance_alg_calculate_cfar+0x3c>
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	b17b      	cbz	r3, 8006d5a <acc_detector_distance_alg_calculate_cfar+0x76>
 8006d3a:	ee07 3a10 	vmov	s14, r3
 8006d3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006d42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d46:	bc30      	pop	{r4, r5}
 8006d48:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006d4c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8006d50:	4770      	bx	lr
 8006d52:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8006d64 <acc_detector_distance_alg_calculate_cfar+0x80>
 8006d56:	bc30      	pop	{r4, r5}
 8006d58:	4770      	bx	lr
 8006d5a:	eddf 6a01 	vldr	s13, [pc, #4]	@ 8006d60 <acc_detector_distance_alg_calculate_cfar+0x7c>
 8006d5e:	e7f2      	b.n	8006d46 <acc_detector_distance_alg_calculate_cfar+0x62>
 8006d60:	00000000 	.word	0x00000000
 8006d64:	7f7fffff 	.word	0x7f7fffff

08006d68 <acc_detector_distance_alg_cfar_window_length>:
 8006d68:	ee07 0a90 	vmov	s15, r0
 8006d6c:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8006db0 <acc_detector_distance_alg_cfar_window_length+0x48>
 8006d70:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8006db4 <acc_detector_distance_alg_cfar_window_length+0x4c>
 8006d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d84:	dc01      	bgt.n	8006d8a <acc_detector_distance_alg_cfar_window_length+0x22>
 8006d86:	2001      	movs	r0, #1
 8006d88:	4770      	bx	lr
 8006d8a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8006d8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d96:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006d9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da2:	ddf0      	ble.n	8006d86 <acc_detector_distance_alg_cfar_window_length+0x1e>
 8006da4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006da8:	ee17 3a10 	vmov	r3, s14
 8006dac:	b298      	uxth	r0, r3
 8006dae:	4770      	bx	lr
 8006db0:	3b23d70a 	.word	0x3b23d70a
 8006db4:	3727c5ac 	.word	0x3727c5ac

08006db8 <acc_detector_distance_alg_cfar_guard_half_length>:
 8006db8:	ee07 0a90 	vmov	s15, r0
 8006dbc:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8006dfc <acc_detector_distance_alg_cfar_guard_half_length+0x44>
 8006dc0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006e00 <acc_detector_distance_alg_cfar_guard_half_length+0x48>
 8006dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd4:	dd0f      	ble.n	8006df6 <acc_detector_distance_alg_cfar_guard_half_length+0x3e>
 8006dd6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006dda:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006dde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006de2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006de6:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006dea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006dee:	ee17 3a90 	vmov	r3, s15
 8006df2:	b298      	uxth	r0, r3
 8006df4:	4770      	bx	lr
 8006df6:	2001      	movs	r0, #1
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	3b23d70a 	.word	0x3b23d70a
 8006e00:	3727c5ac 	.word	0x3727c5ac

08006e04 <acc_detector_distance_alg_cfar_margin>:
 8006e04:	ee07 0a90 	vmov	s15, r0
 8006e08:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8006e70 <acc_detector_distance_alg_cfar_margin+0x6c>
 8006e0c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006e74 <acc_detector_distance_alg_cfar_margin+0x70>
 8006e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e20:	dc01      	bgt.n	8006e26 <acc_detector_distance_alg_cfar_margin+0x22>
 8006e22:	2002      	movs	r0, #2
 8006e24:	4770      	bx	lr
 8006e26:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8006e2a:	ee60 6a26 	vmul.f32	s13, s0, s13
 8006e2e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e36:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	dd15      	ble.n	8006e6c <acc_detector_distance_alg_cfar_margin+0x68>
 8006e40:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006e44:	ee17 3a10 	vmov	r3, s14
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006e4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006e52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006e5a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 8006e5e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006e62:	ee17 0a90 	vmov	r0, s15
 8006e66:	4418      	add	r0, r3
 8006e68:	b280      	uxth	r0, r0
 8006e6a:	4770      	bx	lr
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e7ec      	b.n	8006e4a <acc_detector_distance_alg_cfar_margin+0x46>
 8006e70:	3b23d70a 	.word	0x3b23d70a
 8006e74:	3727c5ac 	.word	0x3727c5ac

08006e78 <acc_detector_distance_alg_calculate_threshold_recording>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8006e82:	f8bd e038 	ldrh.w	lr, [sp, #56]	@ 0x38
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	d065      	beq.n	8006f56 <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 8006e8a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8006e8c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8006f64 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 8006e90:	ed9f 5a35 	vldr	s10, [pc, #212]	@ 8006f68 <acc_detector_distance_alg_calculate_threshold_recording+0xf0>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	b2a4      	uxth	r4, r4
 8006e98:	f107 0802 	add.w	r8, r7, #2
 8006e9c:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8006ea0:	1d0c      	adds	r4, r1, #4
 8006ea2:	f04f 0c00 	mov.w	ip, #0
 8006ea6:	9401      	str	r4, [sp, #4]
 8006ea8:	e003      	b.n	8006eb2 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 8006eaa:	4547      	cmp	r7, r8
 8006eac:	f10c 0c04 	add.w	ip, ip, #4
 8006eb0:	d051      	beq.n	8006f56 <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 8006eb2:	f837 6f02 	ldrh.w	r6, [r7, #2]!
 8006eb6:	eba6 040e 	sub.w	r4, r6, lr
 8006eba:	b2a4      	uxth	r4, r4
 8006ebc:	4294      	cmp	r4, r2
 8006ebe:	d8f4      	bhi.n	8006eaa <acc_detector_distance_alg_calculate_threshold_recording+0x32>
 8006ec0:	f837 9c02 	ldrh.w	r9, [r7, #-2]
 8006ec4:	eba9 050e 	sub.w	r5, r9, lr
 8006ec8:	b2ad      	uxth	r5, r5
 8006eca:	42a5      	cmp	r5, r4
 8006ecc:	d246      	bcs.n	8006f5c <acc_detector_distance_alg_calculate_threshold_recording+0xe4>
 8006ece:	ebae 0a09 	sub.w	sl, lr, r9
 8006ed2:	eb03 0b0c 	add.w	fp, r3, ip
 8006ed6:	3c01      	subs	r4, #1
 8006ed8:	4454      	add	r4, sl
 8006eda:	ed9b 6a00 	vldr	s12, [fp]
 8006ede:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8006f64 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 8006ee2:	fa15 fa84 	uxtah	sl, r5, r4
 8006ee6:	9c01      	ldr	r4, [sp, #4]
 8006ee8:	ee26 6a06 	vmul.f32	s12, s12, s12
 8006eec:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8006ef0:	eb01 0a85 	add.w	sl, r1, r5, lsl #2
 8006ef4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006ef8:	ecfa 7a01 	vldmia	sl!, {s15}
 8006efc:	ecb5 7a01 	vldmia	r5!, {s14}
 8006f00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f04:	eef0 6ac7 	vabs.f32	s13, s14
 8006f08:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f14:	eef4 6ac5 	vcmpe.f32	s13, s10
 8006f18:	bfd8      	it	le
 8006f1a:	eef0 7a64 	vmovle.f32	s15, s9
 8006f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f22:	dd05      	ble.n	8006f30 <acc_detector_distance_alg_calculate_threshold_recording+0xb8>
 8006f24:	eef1 6ae7 	vsqrt.f32	s13, s15
 8006f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006f30:	4554      	cmp	r4, sl
 8006f32:	d1e1      	bne.n	8006ef8 <acc_detector_distance_alg_calculate_threshold_recording+0x80>
 8006f34:	eba6 0609 	sub.w	r6, r6, r9
 8006f38:	b2b6      	uxth	r6, r6
 8006f3a:	ee07 6a90 	vmov	s15, r6
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8006f44:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8006f48:	4464      	add	r4, ip
 8006f4a:	4547      	cmp	r7, r8
 8006f4c:	f10c 0c04 	add.w	ip, ip, #4
 8006f50:	ed84 7a00 	vstr	s14, [r4]
 8006f54:	d1ad      	bne.n	8006eb2 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	eddf 5a01 	vldr	s11, [pc, #4]	@ 8006f64 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 8006f60:	e7e8      	b.n	8006f34 <acc_detector_distance_alg_calculate_threshold_recording+0xbc>
 8006f62:	bf00      	nop
 8006f64:	00000000 	.word	0x00000000
 8006f68:	3727c5ac 	.word	0x3727c5ac

08006f6c <acc_detector_distance_alg_interpolate_peaks>:
 8006f6c:	b4f0      	push	{r4, r5, r6, r7}
 8006f6e:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8006f72:	ee05 4a10 	vmov	s10, r4
 8006f76:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d07b      	beq.n	8007076 <acc_detector_distance_alg_interpolate_peaks+0x10a>
 8006f7e:	1e5e      	subs	r6, r3, #1
 8006f80:	b2b6      	uxth	r6, r6
 8006f82:	ee04 4a10 	vmov	s8, r4
 8006f86:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8006f8a:	1e4f      	subs	r7, r1, #1
 8006f8c:	3a02      	subs	r2, #2
 8006f8e:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8006f92:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8006f96:	eefe 3a00 	vmov.f32	s7, #224	@ 0xbf000000 -0.5
 8006f9a:	e00d      	b.n	8006fb8 <acc_detector_distance_alg_interpolate_peaks+0x4c>
 8006f9c:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 8006fa0:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006fa4:	edc4 7a00 	vstr	s15, [r4]
 8006fa8:	6803      	ldr	r3, [r0, #0]
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	42b2      	cmp	r2, r6
 8006fae:	f104 0404 	add.w	r4, r4, #4
 8006fb2:	f101 0104 	add.w	r1, r1, #4
 8006fb6:	d05e      	beq.n	8007076 <acc_detector_distance_alg_interpolate_peaks+0x10a>
 8006fb8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0ed      	beq.n	8006f9c <acc_detector_distance_alg_interpolate_peaks+0x30>
 8006fc0:	1c5d      	adds	r5, r3, #1
 8006fc2:	42bb      	cmp	r3, r7
 8006fc4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006fc8:	d2f0      	bcs.n	8006fac <acc_detector_distance_alg_interpolate_peaks+0x40>
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	ed15 6a02 	vldr	s12, [r5, #-8]
 8006fd2:	edd5 5a00 	vldr	s11, [r5]
 8006fd6:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fde:	ee35 7ae6 	vsub.f32	s14, s11, s13
 8006fe2:	ee37 3ae4 	vsub.f32	s6, s15, s9
 8006fe6:	ee76 5a65 	vsub.f32	s11, s12, s11
 8006fea:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006fee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8006ff2:	ee77 2aa4 	vadd.f32	s5, s15, s9
 8006ff6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ffe:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007002:	ee62 5aa6 	vmul.f32	s11, s5, s13
 8007006:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800700a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800700e:	eef8 5a44 	vcvt.f32.u32	s11, s8
 8007012:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007016:	42b2      	cmp	r2, r6
 8007018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800701c:	ee37 2a07 	vadd.f32	s4, s14, s14
 8007020:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007024:	ee63 6a07 	vmul.f32	s13, s6, s14
 8007028:	eef1 1a67 	vneg.f32	s3, s15
 800702c:	eec1 2a82 	vdiv.f32	s5, s3, s4
 8007030:	f104 0404 	add.w	r4, r4, #4
 8007034:	f101 0104 	add.w	r1, r1, #4
 8007038:	ee66 6a83 	vmul.f32	s13, s13, s6
 800703c:	ee27 7a22 	vmul.f32	s14, s14, s5
 8007040:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007044:	ee23 3a27 	vmul.f32	s6, s6, s15
 8007048:	ee27 7a22 	vmul.f32	s14, s14, s5
 800704c:	ee65 6aa2 	vmul.f32	s13, s11, s5
 8007050:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007054:	eef8 5ac5 	vcvt.f32.s32	s11, s10
 8007058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800705c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007060:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8007064:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007068:	ee27 7a00 	vmul.f32	s14, s14, s0
 800706c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8007070:	ed41 7a01 	vstr	s15, [r1, #-4]
 8007074:	d1a0      	bne.n	8006fb8 <acc_detector_distance_alg_interpolate_peaks+0x4c>
 8007076:	bcf0      	pop	{r4, r5, r6, r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <acc_detector_distance_alg_find_peaks>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	b083      	sub	sp, #12
 8007082:	2901      	cmp	r1, #1
 8007084:	f8bd b030 	ldrh.w	fp, [sp, #48]	@ 0x30
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	d96d      	bls.n	8007168 <acc_detector_distance_alg_find_peaks+0xec>
 800708c:	2301      	movs	r3, #1
 800708e:	469a      	mov	sl, r3
 8007090:	f04f 0800 	mov.w	r8, #0
 8007094:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 8007098:	1e4e      	subs	r6, r1, #1
 800709a:	e010      	b.n	80070be <acc_detector_distance_alg_find_peaks+0x42>
 800709c:	eb03 0409 	add.w	r4, r3, r9
 80070a0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80070a4:	ed94 7a00 	vldr	s14, [r4]
 80070a8:	edd4 7a01 	vldr	s15, [r4, #4]
 80070ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b4:	db21      	blt.n	80070fa <acc_detector_distance_alg_find_peaks+0x7e>
 80070b6:	3301      	adds	r3, #1
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	428b      	cmp	r3, r1
 80070bc:	d216      	bcs.n	80070ec <acc_detector_distance_alg_find_peaks+0x70>
 80070be:	1e5c      	subs	r4, r3, #1
 80070c0:	0965      	lsrs	r5, r4, #5
 80070c2:	f004 041f 	and.w	r4, r4, #31
 80070c6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80070ca:	fa25 f404 	lsr.w	r4, r5, r4
 80070ce:	07e7      	lsls	r7, r4, #31
 80070d0:	d5f1      	bpl.n	80070b6 <acc_detector_distance_alg_find_peaks+0x3a>
 80070d2:	095d      	lsrs	r5, r3, #5
 80070d4:	f003 041f 	and.w	r4, r3, #31
 80070d8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80070dc:	fa25 f404 	lsr.w	r4, r5, r4
 80070e0:	07e5      	lsls	r5, r4, #31
 80070e2:	d4db      	bmi.n	800709c <acc_detector_distance_alg_find_peaks+0x20>
 80070e4:	3302      	adds	r3, #2
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	428b      	cmp	r3, r1
 80070ea:	d3e8      	bcc.n	80070be <acc_detector_distance_alg_find_peaks+0x42>
 80070ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070ee:	4650      	mov	r0, sl
 80070f0:	f8a3 8000 	strh.w	r8, [r3]
 80070f4:	b003      	add	sp, #12
 80070f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070fa:	1c5c      	adds	r4, r3, #1
 80070fc:	469c      	mov	ip, r3
 80070fe:	b2a3      	uxth	r3, r4
 8007100:	42b3      	cmp	r3, r6
 8007102:	ea4f 1453 	mov.w	r4, r3, lsr #5
 8007106:	f003 0e1f 	and.w	lr, r3, #31
 800710a:	d2d6      	bcs.n	80070ba <acc_detector_distance_alg_find_peaks+0x3e>
 800710c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8007110:	fa24 f40e 	lsr.w	r4, r4, lr
 8007114:	07e4      	lsls	r4, r4, #31
 8007116:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800711a:	eb00 058c 	add.w	r5, r0, ip, lsl #2
 800711e:	d5cc      	bpl.n	80070ba <acc_detector_distance_alg_find_peaks+0x3e>
 8007120:	ed97 7a00 	vldr	s14, [r7]
 8007124:	edd5 7a00 	vldr	s15, [r5]
 8007128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007130:	f103 0401 	add.w	r4, r3, #1
 8007134:	dce2      	bgt.n	80070fc <acc_detector_distance_alg_find_peaks+0x80>
 8007136:	d5e2      	bpl.n	80070fe <acc_detector_distance_alg_find_peaks+0x82>
 8007138:	f10c 0401 	add.w	r4, ip, #1
 800713c:	0965      	lsrs	r5, r4, #5
 800713e:	f004 041f 	and.w	r4, r4, #31
 8007142:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8007146:	fa25 f404 	lsr.w	r4, r5, r4
 800714a:	07e4      	lsls	r4, r4, #31
 800714c:	d5b5      	bpl.n	80070ba <acc_detector_distance_alg_find_peaks+0x3e>
 800714e:	45d8      	cmp	r8, fp
 8007150:	d207      	bcs.n	8007162 <acc_detector_distance_alg_find_peaks+0xe6>
 8007152:	9d01      	ldr	r5, [sp, #4]
 8007154:	f108 0401 	add.w	r4, r8, #1
 8007158:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 800715c:	fa1f f884 	uxth.w	r8, r4
 8007160:	e7ab      	b.n	80070ba <acc_detector_distance_alg_find_peaks+0x3e>
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	e7a8      	b.n	80070ba <acc_detector_distance_alg_find_peaks+0x3e>
 8007168:	f04f 0800 	mov.w	r8, #0
 800716c:	f04f 0a01 	mov.w	sl, #1
 8007170:	e7bc      	b.n	80070ec <acc_detector_distance_alg_find_peaks+0x70>
 8007172:	bf00      	nop

08007174 <acc_detector_distance_alg_peak_inplace_sort>:
 8007174:	2800      	cmp	r0, #0
 8007176:	d045      	beq.n	8007204 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 8007178:	2900      	cmp	r1, #0
 800717a:	d043      	beq.n	8007204 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	f1b1 0a01 	subs.w	sl, r1, #1
 8007184:	b084      	sub	sp, #16
 8007186:	d03a      	beq.n	80071fe <acc_detector_distance_alg_peak_inplace_sort+0x8a>
 8007188:	f04f 0900 	mov.w	r9, #0
 800718c:	4696      	mov	lr, r2
 800718e:	4684      	mov	ip, r0
 8007190:	46c8      	mov	r8, r9
 8007192:	466f      	mov	r7, sp
 8007194:	ebba 0808 	subs.w	r8, sl, r8
 8007198:	d02a      	beq.n	80071f0 <acc_detector_distance_alg_peak_inplace_sort+0x7c>
 800719a:	2600      	movs	r6, #0
 800719c:	4634      	mov	r4, r6
 800719e:	eb0c 1504 	add.w	r5, ip, r4, lsl #4
 80071a2:	eb0c 1404 	add.w	r4, ip, r4, lsl #4
 80071a6:	3510      	adds	r5, #16
 80071a8:	ed94 7a00 	vldr	s14, [r4]
 80071ac:	ed94 6a02 	vldr	s12, [r4, #8]
 80071b0:	edd5 7a00 	vldr	s15, [r5]
 80071b4:	edd5 6a02 	vldr	s13, [r5, #8]
 80071b8:	f1be 0f00 	cmp.w	lr, #0
 80071bc:	d123      	bne.n	8007206 <acc_detector_distance_alg_peak_inplace_sort+0x92>
 80071be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c6:	bfcc      	ite	gt
 80071c8:	2301      	movgt	r3, #1
 80071ca:	2300      	movle	r3, #0
 80071cc:	b15b      	cbz	r3, 80071e6 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 80071ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80071d2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80071d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80071da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80071de:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80071e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80071e6:	3601      	adds	r6, #1
 80071e8:	b2b6      	uxth	r6, r6
 80071ea:	4546      	cmp	r6, r8
 80071ec:	4634      	mov	r4, r6
 80071ee:	d3d6      	bcc.n	800719e <acc_detector_distance_alg_peak_inplace_sort+0x2a>
 80071f0:	f109 0901 	add.w	r9, r9, #1
 80071f4:	fa1f f989 	uxth.w	r9, r9
 80071f8:	45d1      	cmp	r9, sl
 80071fa:	46c8      	mov	r8, r9
 80071fc:	d3ca      	bcc.n	8007194 <acc_detector_distance_alg_peak_inplace_sort+0x20>
 80071fe:	b004      	add	sp, #16
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	4770      	bx	lr
 8007206:	f1be 0f01 	cmp.w	lr, #1
 800720a:	d1ec      	bne.n	80071e6 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 800720c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8007210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007214:	bf4c      	ite	mi
 8007216:	2301      	movmi	r3, #1
 8007218:	2300      	movpl	r3, #0
 800721a:	e7d7      	b.n	80071cc <acc_detector_distance_alg_peak_inplace_sort+0x58>

0800721c <acc_detector_distance_alg_merge_peaks>:
 800721c:	2800      	cmp	r0, #0
 800721e:	d03e      	beq.n	800729e <acc_detector_distance_alg_merge_peaks+0x82>
 8007220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	4691      	mov	r9, r2
 8007226:	b3ba      	cbz	r2, 8007298 <acc_detector_distance_alg_merge_peaks+0x7c>
 8007228:	4698      	mov	r8, r3
 800722a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800722c:	b3a3      	cbz	r3, 8007298 <acc_detector_distance_alg_merge_peaks+0x7c>
 800722e:	2901      	cmp	r1, #1
 8007230:	468a      	mov	sl, r1
 8007232:	4607      	mov	r7, r0
 8007234:	d935      	bls.n	80072a2 <acc_detector_distance_alg_merge_peaks+0x86>
 8007236:	2400      	movs	r4, #0
 8007238:	4620      	mov	r0, r4
 800723a:	4626      	mov	r6, r4
 800723c:	4625      	mov	r5, r4
 800723e:	f101 3bff 	add.w	fp, r1, #4294967295
 8007242:	e00b      	b.n	800725c <acc_detector_distance_alg_merge_peaks+0x40>
 8007244:	463a      	mov	r2, r7
 8007246:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 800724a:	b329      	cbz	r1, 8007298 <acc_detector_distance_alg_merge_peaks+0x7c>
 800724c:	3601      	adds	r6, #1
 800724e:	f7ff fb35 	bl	80068bc <merge_peak_range.part.0>
 8007252:	b2b6      	uxth	r6, r6
 8007254:	4620      	mov	r0, r4
 8007256:	455c      	cmp	r4, fp
 8007258:	4625      	mov	r5, r4
 800725a:	d224      	bcs.n	80072a6 <acc_detector_distance_alg_merge_peaks+0x8a>
 800725c:	eb07 1305 	add.w	r3, r7, r5, lsl #4
 8007260:	edd3 6a07 	vldr	s13, [r3, #28]
 8007264:	edd3 7a03 	vldr	s15, [r3, #12]
 8007268:	ed93 7a04 	vldr	s14, [r3, #16]
 800726c:	ed93 6a00 	vldr	s12, [r3]
 8007270:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	ee37 7a46 	vsub.f32	s14, s14, s12
 800727c:	bf58      	it	pl
 800727e:	eef0 7a66 	vmovpl.f32	s15, s13
 8007282:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007286:	3401      	adds	r4, #1
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	b2a4      	uxth	r4, r4
 800728e:	d4e2      	bmi.n	8007256 <acc_detector_distance_alg_merge_peaks+0x3a>
 8007290:	1a21      	subs	r1, r4, r0
 8007292:	45b0      	cmp	r8, r6
 8007294:	b289      	uxth	r1, r1
 8007296:	d8d5      	bhi.n	8007244 <acc_detector_distance_alg_merge_peaks+0x28>
 8007298:	2000      	movs	r0, #0
 800729a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	2000      	movs	r0, #0
 80072a0:	4770      	bx	lr
 80072a2:	2000      	movs	r0, #0
 80072a4:	4606      	mov	r6, r0
 80072a6:	4582      	cmp	sl, r0
 80072a8:	d90b      	bls.n	80072c2 <acc_detector_distance_alg_merge_peaks+0xa6>
 80072aa:	45b0      	cmp	r8, r6
 80072ac:	d9f4      	bls.n	8007298 <acc_detector_distance_alg_merge_peaks+0x7c>
 80072ae:	ebaa 0100 	sub.w	r1, sl, r0
 80072b2:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 80072b6:	b289      	uxth	r1, r1
 80072b8:	463a      	mov	r2, r7
 80072ba:	f7ff faff 	bl	80068bc <merge_peak_range.part.0>
 80072be:	3601      	adds	r6, #1
 80072c0:	b2b6      	uxth	r6, r6
 80072c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072c4:	2001      	movs	r0, #1
 80072c6:	801e      	strh	r6, [r3, #0]
 80072c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072cc <acc_detector_distance_alg_get_loopback_peak_offset>:
 80072cc:	3801      	subs	r0, #1
 80072ce:	b2c0      	uxtb	r0, r0
 80072d0:	2804      	cmp	r0, #4
 80072d2:	d80e      	bhi.n	80072f2 <acc_detector_distance_alg_get_loopback_peak_offset+0x26>
 80072d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007304 <acc_detector_distance_alg_get_loopback_peak_offset+0x38>)
 80072d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <acc_detector_distance_alg_get_loopback_peak_offset+0x3c>)
 80072d8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80072dc:	edd2 7a00 	vldr	s15, [r2]
 80072e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072e4:	ed90 7a00 	vldr	s14, [r0]
 80072e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80072ec:	ee30 0a07 	vadd.f32	s0, s0, s14
 80072f0:	4770      	bx	lr
 80072f2:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800730c <acc_detector_distance_alg_get_loopback_peak_offset+0x40>
 80072f6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8007310 <acc_detector_distance_alg_get_loopback_peak_offset+0x44>
 80072fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80072fe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8007302:	4770      	bx	lr
 8007304:	08014e74 	.word	0x08014e74
 8007308:	08014e88 	.word	0x08014e88
 800730c:	3f6c04ec 	.word	0x3f6c04ec
 8007310:	3c5e3515 	.word	0x3c5e3515

08007314 <acc_detector_distance_alg_phase_comp_mean_sweep>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	ed2d 8b08 	vpush	{d8-d11}
 800731c:	b087      	sub	sp, #28
 800731e:	469b      	mov	fp, r3
 8007320:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 8007324:	9104      	str	r1, [sp, #16]
 8007326:	460c      	mov	r4, r1
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	f89d 1070 	ldrb.w	r1, [sp, #112]	@ 0x70
 800732e:	2800      	cmp	r0, #0
 8007330:	f000 80b9 	beq.w	80074a6 <acc_detector_distance_alg_phase_comp_mean_sweep+0x192>
 8007334:	4681      	mov	r9, r0
 8007336:	4690      	mov	r8, r2
 8007338:	4620      	mov	r0, r4
 800733a:	1e62      	subs	r2, r4, #1
 800733c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800733e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007342:	444b      	add	r3, r9
 8007344:	ee07 0a90 	vmov	s15, r0
 8007348:	fa1f fb83 	uxth.w	fp, r3
 800734c:	b292      	uxth	r2, r2
 800734e:	2300      	movs	r3, #0
 8007350:	3404      	adds	r4, #4
 8007352:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 8007356:	9302      	str	r3, [sp, #8]
 8007358:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 800735c:	465b      	mov	r3, fp
 800735e:	eddf 8a7a 	vldr	s17, [pc, #488]	@ 8007548 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8007362:	46d3      	mov	fp, sl
 8007364:	46ca      	mov	sl, r9
 8007366:	4699      	mov	r9, r3
 8007368:	ed9f aa77 	vldr	s20, [pc, #476]	@ 8007548 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	eef0 aa4a 	vmov.f32	s21, s20
 8007372:	2b00      	cmp	r3, #0
 8007374:	d077      	beq.n	8007466 <acc_detector_distance_alg_phase_comp_mean_sweep+0x152>
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	9d02      	ldr	r5, [sp, #8]
 800737a:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	@ 0x60
 800737e:	195c      	adds	r4, r3, r5
 8007380:	eef0 aa4a 	vmov.f32	s21, s20
 8007384:	464b      	mov	r3, r9
 8007386:	b2a4      	uxth	r4, r4
 8007388:	4689      	mov	r9, r1
 800738a:	f1b9 0f00 	cmp.w	r9, #0
 800738e:	f040 808f 	bne.w	80074b0 <acc_detector_distance_alg_phase_comp_mean_sweep+0x19c>
 8007392:	ed97 0a00 	vldr	s0, [r7]
 8007396:	edd6 7a00 	vldr	s15, [r6]
 800739a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800739e:	ee27 0aa8 	vmul.f32	s0, s15, s17
 80073a2:	ee78 0ae7 	vsub.f32	s1, s17, s15
 80073a6:	ee30 0a28 	vadd.f32	s0, s0, s17
 80073aa:	eef4 0a40 	vcmp.f32	s1, s0
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	f180 8090 	bvs.w	80074d6 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1c2>
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f00b fcda 	bl	8012d70 <cexpf>
 80073bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80073be:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80073c2:	eeb0 ba60 	vmov.f32	s22, s1
 80073c6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80073d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d4:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 80073d8:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80073dc:	ee77 1aa8 	vadd.f32	s3, s15, s17
 80073e0:	ee08 3a10 	vmov	s16, r3
 80073e4:	eeb4 7a61 	vcmp.f32	s14, s3
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80073f0:	9b01      	ldr	r3, [sp, #4]
 80073f2:	eef0 9a40 	vmov.f32	s19, s0
 80073f6:	f180 808a 	bvs.w	800750e <acc_detector_distance_alg_phase_comp_mean_sweep+0x1fa>
 80073fa:	ee38 8a07 	vadd.f32	s16, s16, s14
 80073fe:	ee71 1aa8 	vadd.f32	s3, s3, s17
 8007402:	ee29 7a88 	vmul.f32	s14, s19, s16
 8007406:	ee2b 6a21 	vmul.f32	s12, s22, s3
 800740a:	ee69 7aa1 	vmul.f32	s15, s19, s3
 800740e:	ee6b 6a08 	vmul.f32	s13, s22, s16
 8007412:	ee37 6a46 	vsub.f32	s12, s14, s12
 8007416:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800741a:	eeb4 6a66 	vcmp.f32	s12, s13
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	d665      	bvs.n	80074f0 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1dc>
 8007424:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8007428:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 800742c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007430:	ee07 1a10 	vmov	s14, r1
 8007434:	ee07 2a90 	vmov	s15, r2
 8007438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800743c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007440:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007448:	ee7a aa87 	vadd.f32	s21, s21, s14
 800744c:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007450:	3604      	adds	r6, #4
 8007452:	441c      	add	r4, r3
 8007454:	4455      	add	r5, sl
 8007456:	45b3      	cmp	fp, r6
 8007458:	b2a4      	uxth	r4, r4
 800745a:	b2ad      	uxth	r5, r5
 800745c:	f107 0704 	add.w	r7, r7, #4
 8007460:	d193      	bne.n	800738a <acc_detector_distance_alg_phase_comp_mean_sweep+0x76>
 8007462:	4649      	mov	r1, r9
 8007464:	4699      	mov	r9, r3
 8007466:	ee8a 0a09 	vdiv.f32	s0, s20, s18
 800746a:	ee8a 8a89 	vdiv.f32	s16, s21, s18
 800746e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007472:	ee70 0a28 	vadd.f32	s1, s0, s17
 8007476:	eef4 7a60 	vcmp.f32	s15, s1
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d656      	bvs.n	800752e <acc_detector_distance_alg_phase_comp_mean_sweep+0x21a>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	3301      	adds	r3, #1
 8007484:	b298      	uxth	r0, r3
 8007486:	ee38 8a27 	vadd.f32	s16, s16, s15
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	9002      	str	r0, [sp, #8]
 800748e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8007492:	ed83 8a00 	vstr	s16, [r3]
 8007496:	edc3 0a01 	vstr	s1, [r3, #4]
 800749a:	4582      	cmp	sl, r0
 800749c:	f103 0308 	add.w	r3, r3, #8
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	f47f af61 	bne.w	8007368 <acc_detector_distance_alg_phase_comp_mean_sweep+0x54>
 80074a6:	b007      	add	sp, #28
 80074a8:	ecbd 8b08 	vpop	{d8-d11}
 80074ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b0:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 80074b4:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 80074b8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80074bc:	ee07 1a10 	vmov	s14, r1
 80074c0:	ee07 2a90 	vmov	s15, r2
 80074c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074cc:	ee7a aa87 	vadd.f32	s21, s21, s14
 80074d0:	ee3a aa27 	vadd.f32	s20, s20, s15
 80074d4:	e7bc      	b.n	8007450 <acc_detector_distance_alg_phase_comp_mean_sweep+0x13c>
 80074d6:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8007548 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	eeb0 0a67 	vmov.f32	s0, s15
 80074e0:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 80074e4:	eeb0 1a68 	vmov.f32	s2, s17
 80074e8:	f7f9 fbee 	bl	8000cc8 <__mulsc3>
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	e762      	b.n	80073b6 <acc_detector_distance_alg_phase_comp_mean_sweep+0xa2>
 80074f0:	eeb0 1a48 	vmov.f32	s2, s16
 80074f4:	eef0 0a4b 	vmov.f32	s1, s22
 80074f8:	eeb0 0a69 	vmov.f32	s0, s19
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f7f9 fbe3 	bl	8000cc8 <__mulsc3>
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	eeb0 6a40 	vmov.f32	s12, s0
 8007508:	eef0 6a60 	vmov.f32	s13, s1
 800750c:	e78a      	b.n	8007424 <acc_detector_distance_alg_phase_comp_mean_sweep+0x110>
 800750e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8007512:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8007548 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8007516:	eeb0 0a67 	vmov.f32	s0, s15
 800751a:	eeb0 1a68 	vmov.f32	s2, s17
 800751e:	f7f9 fbd3 	bl	8000cc8 <__mulsc3>
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	eeb0 7a40 	vmov.f32	s14, s0
 8007528:	eef0 1a60 	vmov.f32	s3, s1
 800752c:	e765      	b.n	80073fa <acc_detector_distance_alg_phase_comp_mean_sweep+0xe6>
 800752e:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8007548 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 8007532:	9101      	str	r1, [sp, #4]
 8007534:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8007538:	eeb0 1a68 	vmov.f32	s2, s17
 800753c:	f7f9 fbc4 	bl	8000cc8 <__mulsc3>
 8007540:	9901      	ldr	r1, [sp, #4]
 8007542:	eef0 7a40 	vmov.f32	s15, s0
 8007546:	e79b      	b.n	8007480 <acc_detector_distance_alg_phase_comp_mean_sweep+0x16c>
 8007548:	00000000 	.word	0x00000000

0800754c <acc_detector_distance_alg_argmaxf>:
 800754c:	b1c9      	cbz	r1, 8007582 <acc_detector_distance_alg_argmaxf+0x36>
 800754e:	2300      	movs	r3, #0
 8007550:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007588 <acc_detector_distance_alg_argmaxf+0x3c>
 8007554:	b410      	push	{r4}
 8007556:	461a      	mov	r2, r3
 8007558:	4604      	mov	r4, r0
 800755a:	4618      	mov	r0, r3
 800755c:	ecf4 7a01 	vldmia	r4!, {s15}
 8007560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	f103 0301 	add.w	r3, r3, #1
 800756c:	bfc8      	it	gt
 800756e:	4610      	movgt	r0, r2
 8007570:	b29a      	uxth	r2, r3
 8007572:	bfc8      	it	gt
 8007574:	eeb0 7a67 	vmovgt.f32	s14, s15
 8007578:	4291      	cmp	r1, r2
 800757a:	d8ef      	bhi.n	800755c <acc_detector_distance_alg_argmaxf+0x10>
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	4608      	mov	r0, r1
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	00000000 	.word	0x00000000

0800758c <acc_detector_distance_alg_zero_mean_stdf>:
 800758c:	b1b9      	cbz	r1, 80075be <acc_detector_distance_alg_zero_mean_stdf+0x32>
 800758e:	1e4b      	subs	r3, r1, #1
 8007590:	1d02      	adds	r2, r0, #4
 8007592:	b29b      	uxth	r3, r3
 8007594:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80075c4 <acc_detector_distance_alg_zero_mean_stdf+0x38>
 8007598:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800759c:	ecf0 7a01 	vldmia	r0!, {s15}
 80075a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80075a4:	4283      	cmp	r3, r0
 80075a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075aa:	d1f7      	bne.n	800759c <acc_detector_distance_alg_zero_mean_stdf+0x10>
 80075ac:	ee07 1a90 	vmov	s15, r1
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80075b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80075bc:	4770      	bx	lr
 80075be:	ed9f 7a01 	vldr	s14, [pc, #4]	@ 80075c4 <acc_detector_distance_alg_zero_mean_stdf+0x38>
 80075c2:	e7f3      	b.n	80075ac <acc_detector_distance_alg_zero_mean_stdf+0x20>
 80075c4:	00000000 	.word	0x00000000

080075c8 <acc_detector_distance_alg_calc_processing_gain>:
 80075c8:	b508      	push	{r3, lr}
 80075ca:	ed2d 8b02 	vpush	{d8}
 80075ce:	ee08 1a10 	vmov	s16, r1
 80075d2:	f004 fdf1 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 80075d6:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800768c <acc_detector_distance_alg_calc_processing_gain+0xc4>
 80075da:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80075de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80075e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075e6:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80075ea:	f00b fd19 	bl	8013020 <floorf>
 80075ee:	eeb0 8a00 	vmov.f32	s16, #0	@ 0x40000000  2.0
 80075f2:	ee30 8a08 	vadd.f32	s16, s0, s16
 80075f6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80075fa:	ee28 0a00 	vmul.f32	s0, s16, s0
 80075fe:	f00b fd0f 	bl	8013020 <floorf>
 8007602:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8007606:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800760a:	ee17 3a10 	vmov	r3, s14
 800760e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007612:	ee70 5a46 	vsub.f32	s11, s0, s12
 8007616:	b298      	uxth	r0, r3
 8007618:	ee17 3a90 	vmov	r3, s15
 800761c:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8007620:	b299      	uxth	r1, r3
 8007622:	b380      	cbz	r0, 8007686 <acc_detector_distance_alg_calc_processing_gain+0xbe>
 8007624:	2200      	movs	r2, #0
 8007626:	4613      	mov	r3, r2
 8007628:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007690 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 800762c:	ee07 3a90 	vmov	s15, r3
 8007630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007634:	3201      	adds	r2, #1
 8007636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800763a:	b293      	uxth	r3, r2
 800763c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007640:	4283      	cmp	r3, r0
 8007642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007646:	d3f1      	bcc.n	800762c <acc_detector_distance_alg_calc_processing_gain+0x64>
 8007648:	ee38 8a40 	vsub.f32	s16, s16, s0
 800764c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007650:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007654:	1a09      	subs	r1, r1, r0
 8007656:	2900      	cmp	r1, #0
 8007658:	eec7 6a88 	vdiv.f32	s13, s15, s16
 800765c:	dd0e      	ble.n	800767c <acc_detector_distance_alg_calc_processing_gain+0xb4>
 800765e:	2300      	movs	r3, #0
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	b293      	uxth	r3, r2
 800766c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007670:	428b      	cmp	r3, r1
 8007672:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800767a:	dbf1      	blt.n	8007660 <acc_detector_distance_alg_calc_processing_gain+0x98>
 800767c:	ecbd 8b02 	vpop	{d8}
 8007680:	eeb0 0a47 	vmov.f32	s0, s14
 8007684:	bd08      	pop	{r3, pc}
 8007686:	ed9f 7a02 	vldr	s14, [pc, #8]	@ 8007690 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 800768a:	e7dd      	b.n	8007648 <acc_detector_distance_alg_calc_processing_gain+0x80>
 800768c:	3b23d70a 	.word	0x3b23d70a
 8007690:	00000000 	.word	0x00000000

08007694 <acc_detector_distance_calibration_buffer_map_init>:
 8007694:	b121      	cbz	r1, 80076a0 <acc_detector_distance_calibration_buffer_map_init+0xc>
 8007696:	2101      	movs	r1, #1
 8007698:	2300      	movs	r3, #0
 800769a:	8081      	strh	r1, [r0, #4]
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	2104      	movs	r1, #4
 80076a0:	b11a      	cbz	r2, 80076aa <acc_detector_distance_calibration_buffer_map_init+0x16>
 80076a2:	6081      	str	r1, [r0, #8]
 80076a4:	8182      	strh	r2, [r0, #12]
 80076a6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076aa:	1d0a      	adds	r2, r1, #4
 80076ac:	f101 0308 	add.w	r3, r1, #8
 80076b0:	e9c0 1204 	strd	r1, r2, [r0, #16]
 80076b4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <acc_detector_distance_calibration_buffer_bg_noise_array_get>:
 80076bc:	b912      	cbnz	r2, 80076c4 <acc_detector_distance_calibration_buffer_bg_noise_array_get+0x8>
 80076be:	680b      	ldr	r3, [r1, #0]
 80076c0:	4418      	add	r0, r3
 80076c2:	4770      	bx	lr
 80076c4:	688b      	ldr	r3, [r1, #8]
 80076c6:	4418      	add	r0, r3
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop

080076cc <acc_detector_distance_calibration_buffer_reference_temperature_get>:
 80076cc:	690b      	ldr	r3, [r1, #16]
 80076ce:	4418      	add	r0, r3
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <acc_detector_distance_calibration_buffer_loopback_peak_distance_get>:
 80076d4:	694b      	ldr	r3, [r1, #20]
 80076d6:	4418      	add	r0, r3
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop

080076dc <acc_detector_distance_calibration_buffer_aggregator_partition_get>:
 80076dc:	69cb      	ldr	r3, [r1, #28]
 80076de:	4418      	add	r0, r3
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop

080076e4 <acc_detector_distance_calibration_offset_settings_set>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	f06f 011d 	mvn.w	r1, #29
 80076ea:	4604      	mov	r4, r0
 80076ec:	f002 fc70 	bl	8009fd0 <acc_config_start_point_set>
 80076f0:	4620      	mov	r0, r4
 80076f2:	2132      	movs	r1, #50	@ 0x32
 80076f4:	f002 fc70 	bl	8009fd8 <acc_config_num_points_set>
 80076f8:	4620      	mov	r0, r4
 80076fa:	2101      	movs	r1, #1
 80076fc:	f002 fc70 	bl	8009fe0 <acc_config_step_length_set>
 8007700:	4620      	mov	r0, r4
 8007702:	2140      	movs	r1, #64	@ 0x40
 8007704:	f002 fc74 	bl	8009ff0 <acc_config_hwaas_set>
 8007708:	4620      	mov	r0, r4
 800770a:	2110      	movs	r1, #16
 800770c:	f002 fc74 	bl	8009ff8 <acc_config_receiver_gain_set>
 8007710:	4620      	mov	r0, r4
 8007712:	2101      	movs	r1, #1
 8007714:	f002 fc74 	bl	800a000 <acc_config_enable_tx_set>
 8007718:	4620      	mov	r0, r4
 800771a:	2101      	movs	r1, #1
 800771c:	f002 fc74 	bl	800a008 <acc_config_phase_enhancement_set>
 8007720:	4620      	mov	r0, r4
 8007722:	2101      	movs	r1, #1
 8007724:	f002 fd48 	bl	800a1b8 <acc_config_enable_loopback_set>
 8007728:	4620      	mov	r0, r4
 800772a:	2101      	movs	r1, #1
 800772c:	f002 fc5c 	bl	8009fe8 <acc_config_profile_set>
 8007730:	4620      	mov	r0, r4
 8007732:	2102      	movs	r1, #2
 8007734:	f002 fd1a 	bl	800a16c <acc_config_prf_set>
 8007738:	4620      	mov	r0, r4
 800773a:	2101      	movs	r1, #1
 800773c:	f002 fc68 	bl	800a010 <acc_config_sweeps_per_frame_set>
 8007740:	4620      	mov	r0, r4
 8007742:	2101      	movs	r1, #1
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f002 ba14 	b.w	8009b74 <acc_config_num_subsweeps_set>

0800774c <acc_detector_distance_calibration_offset_process>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	ed2d 8b02 	vpush	{d8}
 8007752:	460d      	mov	r5, r1
 8007754:	b08c      	sub	sp, #48	@ 0x30
 8007756:	2101      	movs	r1, #1
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	aa07      	add	r2, sp, #28
 800775e:	4608      	mov	r0, r1
 8007760:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 8007804 <acc_detector_distance_calibration_offset_process+0xb8>
 8007764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007766:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800776a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800776e:	f7ff fa91 	bl	8006c94 <acc_detector_distance_alg_get_distance_filter_coeffs>
 8007772:	4620      	mov	r0, r4
 8007774:	f104 02c8 	add.w	r2, r4, #200	@ 0xc8
 8007778:	462b      	mov	r3, r5
 800777a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800777e:	ee07 1a10 	vmov	s14, r1
 8007782:	f930 1b04 	ldrsh.w	r1, [r0], #4
 8007786:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800778a:	ee07 1a90 	vmov	s15, r1
 800778e:	ee67 6a08 	vmul.f32	s13, s14, s16
 8007792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007796:	4282      	cmp	r2, r0
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	ed83 7a01 	vstr	s14, [r3, #4]
 80077a0:	edc3 7a00 	vstr	s15, [r3]
 80077a4:	f103 0308 	add.w	r3, r3, #8
 80077a8:	d1e7      	bne.n	800777a <acc_detector_distance_calibration_offset_process+0x2e>
 80077aa:	a807      	add	r0, sp, #28
 80077ac:	462a      	mov	r2, r5
 80077ae:	4629      	mov	r1, r5
 80077b0:	2332      	movs	r3, #50	@ 0x32
 80077b2:	f7ff f9ab 	bl	8006b0c <acc_detector_distance_alg_filtfilt>
 80077b6:	462a      	mov	r2, r5
 80077b8:	2332      	movs	r3, #50	@ 0x32
 80077ba:	4628      	mov	r0, r5
 80077bc:	2100      	movs	r1, #0
 80077be:	f004 fd39 	bl	800c234 <acc_detector_utils_get_abs_sweep>
 80077c2:	2132      	movs	r1, #50	@ 0x32
 80077c4:	4628      	mov	r0, r5
 80077c6:	f7ff fec1 	bl	800754c <acc_detector_distance_alg_argmaxf>
 80077ca:	ae06      	add	r6, sp, #24
 80077cc:	4602      	mov	r2, r0
 80077ce:	2301      	movs	r3, #1
 80077d0:	ac05      	add	r4, sp, #20
 80077d2:	f06f 011d 	mvn.w	r1, #29
 80077d6:	e9cd 1300 	strd	r1, r3, [sp]
 80077da:	f8ad 2012 	strh.w	r2, [sp, #18]
 80077de:	e9cd 4602 	strd	r4, r6, [sp, #8]
 80077e2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8007808 <acc_detector_distance_calibration_offset_process+0xbc>
 80077e6:	ed8d 8a05 	vstr	s16, [sp, #20]
 80077ea:	4628      	mov	r0, r5
 80077ec:	f10d 0212 	add.w	r2, sp, #18
 80077f0:	2132      	movs	r1, #50	@ 0x32
 80077f2:	f7ff fbbb 	bl	8006f6c <acc_detector_distance_alg_interpolate_peaks>
 80077f6:	ed9d 0a05 	vldr	s0, [sp, #20]
 80077fa:	b00c      	add	sp, #48	@ 0x30
 80077fc:	ecbd 8b02 	vpop	{d8}
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	bf00      	nop
 8007804:	00000000 	.word	0x00000000
 8007808:	3b23d70a 	.word	0x3b23d70a

0800780c <acc_detector_distance_calibration_noise_settings_set>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	ed2d 8b02 	vpush	{d8}
 8007814:	460e      	mov	r6, r1
 8007816:	b085      	sub	sp, #20
 8007818:	2101      	movs	r1, #1
 800781a:	4605      	mov	r5, r0
 800781c:	f002 fbf8 	bl	800a010 <acc_config_sweeps_per_frame_set>
 8007820:	4630      	mov	r0, r6
 8007822:	f002 f9bd 	bl	8009ba0 <acc_config_num_subsweeps_get>
 8007826:	2100      	movs	r1, #0
 8007828:	4603      	mov	r3, r0
 800782a:	4630      	mov	r0, r6
 800782c:	461f      	mov	r7, r3
 800782e:	9303      	str	r3, [sp, #12]
 8007830:	f002 fc58 	bl	800a0e4 <acc_config_subsweep_enable_loopback_get>
 8007834:	1a39      	subs	r1, r7, r0
 8007836:	4604      	mov	r4, r0
 8007838:	b2c9      	uxtb	r1, r1
 800783a:	4628      	mov	r0, r5
 800783c:	f002 f99a 	bl	8009b74 <acc_config_num_subsweeps_set>
 8007840:	42a7      	cmp	r7, r4
 8007842:	d960      	bls.n	8007906 <acc_detector_distance_calibration_noise_settings_set+0xfa>
 8007844:	2300      	movs	r3, #0
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	4621      	mov	r1, r4
 800784a:	4630      	mov	r0, r6
 800784c:	f002 faf4 	bl	8009e38 <acc_config_subsweep_hwaas_get>
 8007850:	4621      	mov	r1, r4
 8007852:	4603      	mov	r3, r0
 8007854:	4630      	mov	r0, r6
 8007856:	9302      	str	r3, [sp, #8]
 8007858:	f002 fb32 	bl	8009ec0 <acc_config_subsweep_receiver_gain_get>
 800785c:	4621      	mov	r1, r4
 800785e:	4683      	mov	fp, r0
 8007860:	4630      	mov	r0, r6
 8007862:	f002 fb93 	bl	8009f8c <acc_config_subsweep_phase_enhancement_get>
 8007866:	4621      	mov	r1, r4
 8007868:	4682      	mov	sl, r0
 800786a:	4630      	mov	r0, r6
 800786c:	f002 fc3a 	bl	800a0e4 <acc_config_subsweep_enable_loopback_get>
 8007870:	4621      	mov	r1, r4
 8007872:	4681      	mov	r9, r0
 8007874:	4630      	mov	r0, r6
 8007876:	ee08 9a10 	vmov	s16, r9
 800787a:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800787e:	f002 fa97 	bl	8009db0 <acc_config_subsweep_profile_get>
 8007882:	4621      	mov	r1, r4
 8007884:	4680      	mov	r8, r0
 8007886:	4630      	mov	r0, r6
 8007888:	f002 fc74 	bl	800a174 <acc_config_subsweep_prf_get>
 800788c:	464a      	mov	r2, r9
 800788e:	4607      	mov	r7, r0
 8007890:	2100      	movs	r1, #0
 8007892:	4628      	mov	r0, r5
 8007894:	f002 fb36 	bl	8009f04 <acc_config_subsweep_enable_tx_set>
 8007898:	464a      	mov	r2, r9
 800789a:	2101      	movs	r1, #1
 800789c:	4628      	mov	r0, r5
 800789e:	f002 fa21 	bl	8009ce4 <acc_config_subsweep_step_length_set>
 80078a2:	464a      	mov	r2, r9
 80078a4:	2100      	movs	r1, #0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f002 f994 	bl	8009bd4 <acc_config_subsweep_start_point_set>
 80078ac:	464a      	mov	r2, r9
 80078ae:	21dc      	movs	r1, #220	@ 0xdc
 80078b0:	4628      	mov	r0, r5
 80078b2:	f002 f9d3 	bl	8009c5c <acc_config_subsweep_num_points_set>
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	464a      	mov	r2, r9
 80078ba:	4619      	mov	r1, r3
 80078bc:	4628      	mov	r0, r5
 80078be:	f002 fa99 	bl	8009df4 <acc_config_subsweep_hwaas_set>
 80078c2:	464a      	mov	r2, r9
 80078c4:	4659      	mov	r1, fp
 80078c6:	4628      	mov	r0, r5
 80078c8:	f002 fad8 	bl	8009e7c <acc_config_subsweep_receiver_gain_set>
 80078cc:	464a      	mov	r2, r9
 80078ce:	4651      	mov	r1, sl
 80078d0:	4628      	mov	r0, r5
 80078d2:	f002 fb39 	bl	8009f48 <acc_config_subsweep_phase_enhancement_set>
 80078d6:	ee18 1a10 	vmov	r1, s16
 80078da:	464a      	mov	r2, r9
 80078dc:	4628      	mov	r0, r5
 80078de:	f002 fbdf 	bl	800a0a0 <acc_config_subsweep_enable_loopback_set>
 80078e2:	464a      	mov	r2, r9
 80078e4:	4641      	mov	r1, r8
 80078e6:	4628      	mov	r0, r5
 80078e8:	f002 fa40 	bl	8009d6c <acc_config_subsweep_profile_set>
 80078ec:	464a      	mov	r2, r9
 80078ee:	4639      	mov	r1, r7
 80078f0:	4628      	mov	r0, r5
 80078f2:	f002 fc19 	bl	800a128 <acc_config_subsweep_prf_set>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	3301      	adds	r3, #1
 80078fa:	3401      	adds	r4, #1
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	9b03      	ldr	r3, [sp, #12]
 8007900:	b2e4      	uxtb	r4, r4
 8007902:	42a3      	cmp	r3, r4
 8007904:	d1a0      	bne.n	8007848 <acc_detector_distance_calibration_noise_settings_set+0x3c>
 8007906:	b005      	add	sp, #20
 8007908:	ecbd 8b02 	vpop	{d8}
 800790c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007910 <acc_detector_distance_calibration_noise_process>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	ed2d 8b02 	vpush	{d8}
 8007918:	4604      	mov	r4, r0
 800791a:	b089      	sub	sp, #36	@ 0x24
 800791c:	4608      	mov	r0, r1
 800791e:	4689      	mov	r9, r1
 8007920:	4616      	mov	r6, r2
 8007922:	4698      	mov	r8, r3
 8007924:	f002 f93c 	bl	8009ba0 <acc_config_num_subsweeps_get>
 8007928:	2100      	movs	r1, #0
 800792a:	4682      	mov	sl, r0
 800792c:	4648      	mov	r0, r9
 800792e:	f002 fbd9 	bl	800a0e4 <acc_config_subsweep_enable_loopback_get>
 8007932:	4582      	cmp	sl, r0
 8007934:	d952      	bls.n	80079dc <acc_detector_distance_calibration_noise_process+0xcc>
 8007936:	ed9f 8a2c 	vldr	s16, [pc, #176]	@ 80079e8 <acc_detector_distance_calibration_noise_process+0xd8>
 800793a:	4605      	mov	r5, r0
 800793c:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 8007940:	4629      	mov	r1, r5
 8007942:	4648      	mov	r0, r9
 8007944:	f002 fa34 	bl	8009db0 <acc_config_subsweep_profile_get>
 8007948:	4629      	mov	r1, r5
 800794a:	4683      	mov	fp, r0
 800794c:	4648      	mov	r0, r9
 800794e:	f002 f9eb 	bl	8009d28 <acc_config_subsweep_step_length_get>
 8007952:	4601      	mov	r1, r0
 8007954:	9001      	str	r0, [sp, #4]
 8007956:	4658      	mov	r0, fp
 8007958:	f7ff f92c 	bl	8006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800795c:	9901      	ldr	r1, [sp, #4]
 800795e:	4607      	mov	r7, r0
 8007960:	aa03      	add	r2, sp, #12
 8007962:	4658      	mov	r0, fp
 8007964:	f7ff f996 	bl	8006c94 <acc_detector_distance_alg_get_distance_filter_coeffs>
 8007968:	b3c8      	cbz	r0, 80079de <acc_detector_distance_calibration_noise_process+0xce>
 800796a:	f5a4 725c 	sub.w	r2, r4, #880	@ 0x370
 800796e:	4633      	mov	r3, r6
 8007970:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8007974:	ee07 1a10 	vmov	s14, r1
 8007978:	f932 1b04 	ldrsh.w	r1, [r2], #4
 800797c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007980:	ee07 1a90 	vmov	s15, r1
 8007984:	ee67 6a08 	vmul.f32	s13, s14, s16
 8007988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800798c:	42a2      	cmp	r2, r4
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ed83 7a01 	vstr	s14, [r3, #4]
 8007996:	edc3 7a00 	vstr	s15, [r3]
 800799a:	f103 0308 	add.w	r3, r3, #8
 800799e:	d1e7      	bne.n	8007970 <acc_detector_distance_calibration_noise_process+0x60>
 80079a0:	f1c7 0b6e 	rsb	fp, r7, #110	@ 0x6e
 80079a4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80079a8:	23dc      	movs	r3, #220	@ 0xdc
 80079aa:	4632      	mov	r2, r6
 80079ac:	4631      	mov	r1, r6
 80079ae:	a803      	add	r0, sp, #12
 80079b0:	fa1f fb8b 	uxth.w	fp, fp
 80079b4:	f7ff f8aa 	bl	8006b0c <acc_detector_distance_alg_filtfilt>
 80079b8:	4639      	mov	r1, r7
 80079ba:	465b      	mov	r3, fp
 80079bc:	4632      	mov	r2, r6
 80079be:	4630      	mov	r0, r6
 80079c0:	f004 fc38 	bl	800c234 <acc_detector_utils_get_abs_sweep>
 80079c4:	4659      	mov	r1, fp
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff fde0 	bl	800758c <acc_detector_distance_alg_zero_mean_stdf>
 80079cc:	3501      	adds	r5, #1
 80079ce:	b2ed      	uxtb	r5, r5
 80079d0:	45aa      	cmp	sl, r5
 80079d2:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 80079d6:	eca8 0a01 	vstmia	r8!, {s0}
 80079da:	d8b1      	bhi.n	8007940 <acc_detector_distance_calibration_noise_process+0x30>
 80079dc:	2001      	movs	r0, #1
 80079de:	b009      	add	sp, #36	@ 0x24
 80079e0:	ecbd 8b02 	vpop	{d8}
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	00000000 	.word	0x00000000

080079ec <get_radar_equation_parameters_for_distance>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	4607      	mov	r7, r0
 80079f2:	ed2d 8b02 	vpush	{d8}
 80079f6:	460d      	mov	r5, r1
 80079f8:	461e      	mov	r6, r3
 80079fa:	b982      	cbnz	r2, 8007a1e <get_radar_equation_parameters_for_distance+0x32>
 80079fc:	3210      	adds	r2, #16
 80079fe:	2001      	movs	r0, #1
 8007a00:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 8007a04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	ecbd 8b02 	vpop	{d8}
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	edc6 7a00 	vstr	s15, [r6]
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	f04f 0900 	mov.w	r9, #0
 8007a22:	f890 801d 	ldrb.w	r8, [r0, #29]
 8007a26:	eeb0 8a40 	vmov.f32	s16, s0
 8007a2a:	464c      	mov	r4, r9
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f002 fca9 	bl	800a384 <acc_processing_points_to_meter>
 8007a32:	eb07 0344 	add.w	r3, r7, r4, lsl #1
 8007a36:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8007a38:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	fb12 f201 	smulbb	r2, r2, r1
 8007a40:	fa13 f282 	uxtah	r2, r3, r2
 8007a44:	ee07 2a90 	vmov	s15, r2
 8007a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a4c:	f109 0901 	add.w	r9, r9, #1
 8007a50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007a54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	d40e      	bmi.n	8007a7c <get_radar_equation_parameters_for_distance+0x90>
 8007a5e:	fa5f f489 	uxtb.w	r4, r9
 8007a62:	45a0      	cmp	r8, r4
 8007a64:	d2e2      	bcs.n	8007a2c <get_radar_equation_parameters_for_distance+0x40>
 8007a66:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <get_radar_equation_parameters_for_distance+0xa8>)
 8007a68:	4a0b      	ldr	r2, [pc, #44]	@ (8007a98 <get_radar_equation_parameters_for_distance+0xac>)
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	490b      	ldr	r1, [pc, #44]	@ (8007a9c <get_radar_equation_parameters_for_distance+0xb0>)
 8007a6e:	2000      	movs	r0, #0
 8007a70:	4798      	blx	r3
 8007a72:	ecbd 8b02 	vpop	{d8}
 8007a76:	2000      	movs	r0, #0
 8007a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7c:	2c00      	cmp	r4, #0
 8007a7e:	d0f2      	beq.n	8007a66 <get_radar_equation_parameters_for_distance+0x7a>
 8007a80:	1e62      	subs	r2, r4, #1
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	2a03      	cmp	r2, #3
 8007a86:	d8ee      	bhi.n	8007a66 <get_radar_equation_parameters_for_distance+0x7a>
 8007a88:	18bb      	adds	r3, r7, r2
 8007a8a:	7e5b      	ldrb	r3, [r3, #25]
 8007a8c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8007a90:	e7b4      	b.n	80079fc <get_radar_equation_parameters_for_distance+0x10>
 8007a92:	bf00      	nop
 8007a94:	20000610 	.word	0x20000610
 8007a98:	08014e9c 	.word	0x08014e9c
 8007a9c:	08014ec0 	.word	0x08014ec0

08007aa0 <map_calibration_buffer_data>:
 8007aa0:	7903      	ldrb	r3, [r0, #4]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	b430      	push	{r4, r5}
 8007aa6:	d113      	bne.n	8007ad0 <map_calibration_buffer_data+0x30>
 8007aa8:	f8d0 5098 	ldr.w	r5, [r0, #152]	@ 0x98
 8007aac:	f8d0 40a4 	ldr.w	r4, [r0, #164]	@ 0xa4
 8007ab0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 8007ab4:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
 8007ab8:	440d      	add	r5, r1
 8007aba:	440c      	add	r4, r1
 8007abc:	440a      	add	r2, r1
 8007abe:	440b      	add	r3, r1
 8007ac0:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
 8007ac4:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 8007ac8:	f8c0 20cc 	str.w	r2, [r0, #204]	@ 0xcc
 8007acc:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
 8007ad0:	7943      	ldrb	r3, [r0, #5]
 8007ad2:	b94b      	cbnz	r3, 8007ae8 <map_calibration_buffer_data+0x48>
 8007ad4:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8007ad8:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 8007adc:	440b      	add	r3, r1
 8007ade:	4411      	add	r1, r2
 8007ae0:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
 8007ae4:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 8007ae8:	bc30      	pop	{r4, r5}
 8007aea:	4770      	bx	lr

08007aec <reset_calibration_state.part.0>:
 8007aec:	b430      	push	{r4, r5}
 8007aee:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8007af0:	b18d      	cbz	r5, 8007b16 <reset_calibration_state.part.0+0x2a>
 8007af2:	f8d0 20cc 	ldr.w	r2, [r0, #204]	@ 0xcc
 8007af6:	f8d0 40d8 	ldr.w	r4, [r0, #216]	@ 0xd8
 8007afa:	3d01      	subs	r5, #1
 8007afc:	b2ad      	uxth	r5, r5
 8007afe:	1d13      	adds	r3, r2, #4
 8007b00:	2100      	movs	r1, #0
 8007b02:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007b06:	e000      	b.n	8007b0a <reset_calibration_state.part.0+0x1e>
 8007b08:	3304      	adds	r3, #4
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	f844 1b04 	str.w	r1, [r4], #4
 8007b12:	461a      	mov	r2, r3
 8007b14:	d1f8      	bne.n	8007b08 <reset_calibration_state.part.0+0x1c>
 8007b16:	2201      	movs	r2, #1
 8007b18:	2300      	movs	r3, #0
 8007b1a:	bc30      	pop	{r4, r5}
 8007b1c:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
 8007b20:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <process_subsweeps>:
 8007b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	f8b0 4066 	ldrh.w	r4, [r0, #102]	@ 0x66
 8007b30:	b091      	sub	sp, #68	@ 0x44
 8007b32:	4605      	mov	r5, r0
 8007b34:	7940      	ldrb	r0, [r0, #5]
 8007b36:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8007b3a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8007b3e:	b388      	cbz	r0, 8007ba4 <process_subsweeps+0x7c>
 8007b40:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8007b42:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 8007b44:	b303      	cbz	r3, 8007b88 <process_subsweeps+0x60>
 8007b46:	1e58      	subs	r0, r3, #1
 8007b48:	b280      	uxth	r0, r0
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 8007c5c <process_subsweeps+0x134>
 8007b50:	4621      	mov	r1, r4
 8007b52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007b56:	4614      	mov	r4, r2
 8007b58:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8007b5c:	ee07 6a10 	vmov	s14, r6
 8007b60:	f931 6b04 	ldrsh.w	r6, [r1], #4
 8007b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b68:	ee07 6a90 	vmov	s15, r6
 8007b6c:	ee67 6a06 	vmul.f32	s13, s14, s12
 8007b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b74:	4288      	cmp	r0, r1
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ed84 7a01 	vstr	s14, [r4, #4]
 8007b7e:	edc4 7a00 	vstr	s15, [r4]
 8007b82:	f104 0408 	add.w	r4, r4, #8
 8007b86:	d1e7      	bne.n	8007b58 <process_subsweeps+0x30>
 8007b88:	4611      	mov	r1, r2
 8007b8a:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8007b8e:	f7fe ffbd 	bl	8006b0c <acc_detector_distance_alg_filtfilt>
 8007b92:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 8007b94:	8f2b      	ldrh	r3, [r5, #56]	@ 0x38
 8007b96:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f004 fb4b 	bl	800c234 <acc_detector_utils_get_abs_sweep>
 8007b9e:	b011      	add	sp, #68	@ 0x44
 8007ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ba4:	f8b5 c030 	ldrh.w	ip, [r5, #48]	@ 0x30
 8007ba8:	f10c 0c01 	add.w	ip, ip, #1
 8007bac:	4698      	mov	r8, r3
 8007bae:	4617      	mov	r7, r2
 8007bb0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	aa06      	add	r2, sp, #24
 8007bb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	6808      	ldr	r0, [r1, #0]
 8007bc0:	f842 0c04 	str.w	r0, [r2, #-4]
 8007bc4:	2b0b      	cmp	r3, #11
 8007bc6:	4461      	add	r1, ip
 8007bc8:	d1f5      	bne.n	8007bb6 <process_subsweeps+0x8e>
 8007bca:	a806      	add	r0, sp, #24
 8007bcc:	220a      	movs	r2, #10
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f004 fb78 	bl	800c2c4 <acc_detector_utils_get_complex_angle>
 8007bd4:	b186      	cbz	r6, 8007bf8 <process_subsweeps+0xd0>
 8007bd6:	ed95 7a17 	vldr	s14, [r5, #92]	@ 0x5c
 8007bda:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8007c60 <process_subsweeps+0x138>
 8007bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007be2:	463b      	mov	r3, r7
 8007be4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8007be8:	edd3 7a00 	vldr	s15, [r3]
 8007bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bf0:	ece3 7a01 	vstmia	r3!, {s15}
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d1f7      	bne.n	8007be8 <process_subsweeps+0xc0>
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	d019      	beq.n	8007c32 <process_subsweeps+0x10a>
 8007bfe:	f04f 0900 	mov.w	r9, #0
 8007c02:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007c04:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 8007c08:	1c51      	adds	r1, r2, #1
 8007c0a:	fb11 f109 	smulbb	r1, r1, r9
 8007c0e:	b289      	uxth	r1, r1
 8007c10:	eba1 0009 	sub.w	r0, r1, r9
 8007c14:	3101      	adds	r1, #1
 8007c16:	b280      	uxth	r0, r0
 8007c18:	b289      	uxth	r1, r1
 8007c1a:	0092      	lsls	r2, r2, #2
 8007c1c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007c20:	f109 0901 	add.w	r9, r9, #1
 8007c24:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8007c28:	f008 ffb7 	bl	8010b9a <memcpy>
 8007c2c:	f1b9 0f0a 	cmp.w	r9, #10
 8007c30:	d1e7      	bne.n	8007c02 <process_subsweeps+0xda>
 8007c32:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 8007c36:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007c46:	9701      	str	r7, [sp, #4]
 8007c48:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8007c4a:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	210a      	movs	r1, #10
 8007c50:	f7ff fb60 	bl	8007314 <acc_detector_distance_alg_phase_comp_mean_sweep>
 8007c54:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 8007c56:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8007c58:	e796      	b.n	8007b88 <process_subsweeps+0x60>
 8007c5a:	bf00      	nop
 8007c5c:	00000000 	.word	0x00000000
 8007c60:	3d4ccccd 	.word	0x3d4ccccd

08007c64 <acc_detector_distance_processor_get_buffer_sizes>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	b118      	cbz	r0, 8007c70 <acc_detector_distance_processor_get_buffer_sizes+0xc>
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <acc_detector_distance_processor_get_buffer_sizes+0x2c>)
 8007c6a:	6804      	ldr	r4, [r0, #0]
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d007      	beq.n	8007c80 <acc_detector_distance_processor_get_buffer_sizes+0x1c>
 8007c70:	4b08      	ldr	r3, [pc, #32]	@ (8007c94 <acc_detector_distance_processor_get_buffer_sizes+0x30>)
 8007c72:	4a09      	ldr	r2, [pc, #36]	@ (8007c98 <acc_detector_distance_processor_get_buffer_sizes+0x34>)
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4909      	ldr	r1, [pc, #36]	@ (8007c9c <acc_detector_distance_processor_get_buffer_sizes+0x38>)
 8007c78:	2000      	movs	r0, #0
 8007c7a:	4798      	blx	r3
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	bd10      	pop	{r4, pc}
 8007c80:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8007c84:	600b      	str	r3, [r1, #0]
 8007c86:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	bd10      	pop	{r4, pc}
 8007c90:	0fa1afe1 	.word	0x0fa1afe1
 8007c94:	20000610 	.word	0x20000610
 8007c98:	08014edc 	.word	0x08014edc
 8007c9c:	08014ec0 	.word	0x08014ec0

08007ca0 <acc_detector_distance_processor_create>:
 8007ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	ed2d 8b02 	vpush	{d8}
 8007caa:	d90b      	bls.n	8007cc4 <acc_detector_distance_processor_create+0x24>
 8007cac:	4bbc      	ldr	r3, [pc, #752]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007cae:	4abd      	ldr	r2, [pc, #756]	@ (8007fa4 <acc_detector_distance_processor_create+0x304>)
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	49bd      	ldr	r1, [pc, #756]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	4798      	blx	r3
 8007cb8:	2400      	movs	r4, #0
 8007cba:	ecbd 8b02 	vpop	{d8}
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	461f      	mov	r7, r3
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	460d      	mov	r5, r1
 8007cca:	4616      	mov	r6, r2
 8007ccc:	f240 13ef 	movw	r3, #495	@ 0x1ef
 8007cd0:	4ab5      	ldr	r2, [pc, #724]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007cd2:	21e4      	movs	r1, #228	@ 0xe4
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	f004 fbdb 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f000 814f 	beq.w	8007f80 <acc_detector_distance_processor_create+0x2e0>
 8007ce2:	46c6      	mov	lr, r8
 8007ce4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007ce8:	46a4      	mov	ip, r4
 8007cea:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 8007fc4 <acc_detector_distance_processor_create+0x324>
 8007cee:	f84c 9b04 	str.w	r9, [ip], #4
 8007cf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007cf6:	f8de 3000 	ldr.w	r3, [lr]
 8007cfa:	f8cc 3000 	str.w	r3, [ip]
 8007cfe:	7767      	strb	r7, [r4, #29]
 8007d00:	b15f      	cbz	r7, 8007d1a <acc_detector_distance_processor_create+0x7a>
 8007d02:	1e78      	subs	r0, r7, #1
 8007d04:	fa56 f080 	uxtab	r0, r6, r0
 8007d08:	1e72      	subs	r2, r6, #1
 8007d0a:	f104 0319 	add.w	r3, r4, #25
 8007d0e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	4290      	cmp	r0, r2
 8007d18:	d1f9      	bne.n	8007d0e <acc_detector_distance_processor_create+0x6e>
 8007d1a:	7966      	ldrb	r6, [r4, #5]
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	d160      	bne.n	8007de2 <acc_detector_distance_processor_create+0x142>
 8007d20:	7ea1      	ldrb	r1, [r4, #26]
 8007d22:	4628      	mov	r0, r5
 8007d24:	f001 ff78 	bl	8009c18 <acc_config_subsweep_start_point_get>
 8007d28:	7ea1      	ldrb	r1, [r4, #26]
 8007d2a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f001 fffb 	bl	8009d28 <acc_config_subsweep_step_length_get>
 8007d32:	7ea1      	ldrb	r1, [r4, #26]
 8007d34:	8520      	strh	r0, [r4, #40]	@ 0x28
 8007d36:	4628      	mov	r0, r5
 8007d38:	f002 f83a 	bl	8009db0 <acc_config_subsweep_profile_get>
 8007d3c:	f104 091a 	add.w	r9, r4, #26
 8007d40:	77a0      	strb	r0, [r4, #30]
 8007d42:	8626      	strh	r6, [r4, #48]	@ 0x30
 8007d44:	2701      	movs	r7, #1
 8007d46:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d4a:	f104 0a20 	add.w	sl, r4, #32
 8007d4e:	2600      	movs	r6, #0
 8007d50:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8007d54:	4628      	mov	r0, r5
 8007d56:	f001 ffa3 	bl	8009ca0 <acc_config_subsweep_num_points_get>
 8007d5a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007d5c:	4418      	add	r0, r3
 8007d5e:	8620      	strh	r0, [r4, #48]	@ 0x30
 8007d60:	f899 1000 	ldrb.w	r1, [r9]
 8007d64:	4628      	mov	r0, r5
 8007d66:	f002 f867 	bl	8009e38 <acc_config_subsweep_hwaas_get>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	f82a 0b02 	strh.w	r0, [sl], #2
 8007d70:	b2f6      	uxtb	r6, r6
 8007d72:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007d74:	f8aa 301c 	strh.w	r3, [sl, #28]
 8007d78:	42be      	cmp	r6, r7
 8007d7a:	d3e9      	bcc.n	8007d50 <acc_detector_distance_processor_create+0xb0>
 8007d7c:	7962      	ldrb	r2, [r4, #5]
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d15b      	bne.n	8007e3a <acc_detector_distance_processor_create+0x19a>
 8007d82:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007d84:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 8007d88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8007d92:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8007d94:	7fa0      	ldrb	r0, [r4, #30]
 8007d96:	f7fe ff0d 	bl	8006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8007d9a:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007d9c:	8760      	strh	r0, [r4, #58]	@ 0x3a
 8007d9e:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 8007da2:	4603      	mov	r3, r0
 8007da4:	ea4f 0540 	mov.w	r5, r0, lsl #1
 8007da8:	d931      	bls.n	8007e0e <acc_detector_distance_processor_create+0x16e>
 8007daa:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8007dae:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 8007db0:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8007db2:	4288      	cmp	r0, r1
 8007db4:	d85a      	bhi.n	8007e6c <acc_detector_distance_processor_create+0x1cc>
 8007db6:	1a09      	subs	r1, r1, r0
 8007db8:	87b9      	strh	r1, [r7, #60]	@ 0x3c
 8007dba:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8007dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dbe:	7fa0      	ldrb	r0, [r4, #30]
 8007dc0:	1b52      	subs	r2, r2, r5
 8007dc2:	fb01 6303 	mla	r3, r1, r3, r6
 8007dc6:	8722      	strh	r2, [r4, #56]	@ 0x38
 8007dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dca:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 8007dce:	f7fe ff61 	bl	8006c94 <acc_detector_distance_alg_get_distance_filter_coeffs>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d151      	bne.n	8007e7a <acc_detector_distance_processor_create+0x1da>
 8007dd6:	4d72      	ldr	r5, [pc, #456]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007dd8:	4a74      	ldr	r2, [pc, #464]	@ (8007fac <acc_detector_distance_processor_create+0x30c>)
 8007dda:	692b      	ldr	r3, [r5, #16]
 8007ddc:	4972      	ldr	r1, [pc, #456]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007dde:	4798      	blx	r3
 8007de0:	e01b      	b.n	8007e1a <acc_detector_distance_processor_create+0x17a>
 8007de2:	7e61      	ldrb	r1, [r4, #25]
 8007de4:	4628      	mov	r0, r5
 8007de6:	f001 ff17 	bl	8009c18 <acc_config_subsweep_start_point_get>
 8007dea:	7e61      	ldrb	r1, [r4, #25]
 8007dec:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8007dee:	4628      	mov	r0, r5
 8007df0:	f001 ff9a 	bl	8009d28 <acc_config_subsweep_step_length_get>
 8007df4:	7e61      	ldrb	r1, [r4, #25]
 8007df6:	8520      	strh	r0, [r4, #40]	@ 0x28
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f001 ffd9 	bl	8009db0 <acc_config_subsweep_profile_get>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	77a0      	strb	r0, [r4, #30]
 8007e02:	8623      	strh	r3, [r4, #48]	@ 0x30
 8007e04:	2f00      	cmp	r7, #0
 8007e06:	d0b9      	beq.n	8007d7c <acc_detector_distance_processor_create+0xdc>
 8007e08:	f104 0919 	add.w	r9, r4, #25
 8007e0c:	e79b      	b.n	8007d46 <acc_detector_distance_processor_create+0xa6>
 8007e0e:	4d64      	ldr	r5, [pc, #400]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007e10:	4a67      	ldr	r2, [pc, #412]	@ (8007fb0 <acc_detector_distance_processor_create+0x310>)
 8007e12:	692b      	ldr	r3, [r5, #16]
 8007e14:	4964      	ldr	r1, [pc, #400]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007e16:	2000      	movs	r0, #0
 8007e18:	4798      	blx	r3
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	692b      	ldr	r3, [r5, #16]
 8007e1e:	4a65      	ldr	r2, [pc, #404]	@ (8007fb4 <acc_detector_distance_processor_create+0x314>)
 8007e20:	4961      	ldr	r1, [pc, #388]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007e22:	4605      	mov	r5, r0
 8007e24:	4798      	blx	r3
 8007e26:	4620      	mov	r0, r4
 8007e28:	6025      	str	r5, [r4, #0]
 8007e2a:	f004 fb4d 	bl	800c4c8 <acc_rss_integration_mem_free>
 8007e2e:	ecbd 8b02 	vpop	{d8}
 8007e32:	462c      	mov	r4, r5
 8007e34:	4620      	mov	r0, r4
 8007e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e3a:	f894 9019 	ldrb.w	r9, [r4, #25]
 8007e3e:	2600      	movs	r6, #0
 8007e40:	f8a4 6066 	strh.w	r6, [r4, #102]	@ 0x66
 8007e44:	4631      	mov	r1, r6
 8007e46:	f1b9 0f00 	cmp.w	r9, #0
 8007e4a:	d00b      	beq.n	8007e64 <acc_detector_distance_processor_create+0x1c4>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f001 ff27 	bl	8009ca0 <acc_config_subsweep_num_points_get>
 8007e52:	3601      	adds	r6, #1
 8007e54:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 8007e58:	b2f1      	uxtb	r1, r6
 8007e5a:	4403      	add	r3, r0
 8007e5c:	4589      	cmp	r9, r1
 8007e5e:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 8007e62:	d8f3      	bhi.n	8007e4c <acc_detector_distance_processor_create+0x1ac>
 8007e64:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007e66:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 8007e6a:	e792      	b.n	8007d92 <acc_detector_distance_processor_create+0xf2>
 8007e6c:	4d4c      	ldr	r5, [pc, #304]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007e6e:	4a52      	ldr	r2, [pc, #328]	@ (8007fb8 <acc_detector_distance_processor_create+0x318>)
 8007e70:	692b      	ldr	r3, [r5, #16]
 8007e72:	494d      	ldr	r1, [pc, #308]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007e74:	2000      	movs	r0, #0
 8007e76:	4798      	blx	r3
 8007e78:	e7cf      	b.n	8007e1a <acc_detector_distance_processor_create+0x17a>
 8007e7a:	edd4 7a02 	vldr	s15, [r4, #8]
 8007e7e:	7923      	ldrb	r3, [r4, #4]
 8007e80:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8007e84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e88:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007e8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
 8007e96:	d917      	bls.n	8007ec8 <acc_detector_distance_processor_create+0x228>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d17a      	bne.n	8007f92 <acc_detector_distance_processor_create+0x2f2>
 8007e9c:	7fa0      	ldrb	r0, [r4, #30]
 8007e9e:	f004 f98b 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8007ea2:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8007ea4:	eeb0 8a40 	vmov.f32	s16, s0
 8007ea8:	f7fe ff5e 	bl	8006d68 <acc_detector_distance_alg_cfar_window_length>
 8007eac:	eeb0 0a48 	vmov.f32	s0, s16
 8007eb0:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 8007eb4:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8007eb6:	f7fe ff7f 	bl	8006db8 <acc_detector_distance_alg_cfar_guard_half_length>
 8007eba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 8007ebe:	f8a4 0062 	strh.w	r0, [r4, #98]	@ 0x62
 8007ec2:	4403      	add	r3, r0
 8007ec4:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8007ec8:	f898 3000 	ldrb.w	r3, [r8]
 8007ecc:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d03b      	beq.n	8007f4a <acc_detector_distance_processor_create+0x2aa>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007ed8:	b32b      	cbz	r3, 8007f26 <acc_detector_distance_processor_create+0x286>
 8007eda:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007edc:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8007ee0:	3312      	adds	r3, #18
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	ecbd 8b02 	vpop	{d8}
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f101 001f 	add.w	r0, r1, #31
 8007eee:	084a      	lsrs	r2, r1, #1
 8007ef0:	0940      	lsrs	r0, r0, #5
 8007ef2:	009d      	lsls	r5, r3, #2
 8007ef4:	0789      	lsls	r1, r1, #30
 8007ef6:	bf48      	it	mi
 8007ef8:	3201      	addmi	r2, #1
 8007efa:	f8a4 3078 	strh.w	r3, [r4, #120]	@ 0x78
 8007efe:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8007f02:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8007f04:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8007f08:	2500      	movs	r5, #0
 8007f0a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8007f0e:	2101      	movs	r1, #1
 8007f10:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 8007f14:	6725      	str	r5, [r4, #112]	@ 0x70
 8007f16:	4620      	mov	r0, r4
 8007f18:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8007f1c:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 8007f20:	7621      	strb	r1, [r4, #24]
 8007f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f26:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8007f28:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
 8007f2c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007f30:	0040      	lsls	r0, r0, #1
 8007f32:	b280      	uxth	r0, r0
 8007f34:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8007f38:	250a      	movs	r5, #10
 8007f3a:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
 8007f3e:	f8a4 00b8 	strh.w	r0, [r4, #184]	@ 0xb8
 8007f42:	3228      	adds	r2, #40	@ 0x28
 8007f44:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
 8007f48:	e7c8      	b.n	8007edc <acc_detector_distance_processor_create+0x23c>
 8007f4a:	7963      	ldrb	r3, [r4, #5]
 8007f4c:	f8a4 10a0 	strh.w	r1, [r4, #160]	@ 0xa0
 8007f50:	008a      	lsls	r2, r1, #2
 8007f52:	2000      	movs	r0, #0
 8007f54:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
 8007f58:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 8007f5c:	b1b3      	cbz	r3, 8007f8c <acc_detector_distance_processor_create+0x2ec>
 8007f5e:	7f63      	ldrb	r3, [r4, #29]
 8007f60:	b29d      	uxth	r5, r3
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	18d0      	adds	r0, r2, r3
 8007f68:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8007f6c:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 8007f70:	4402      	add	r2, r0
 8007f72:	f8a4 50ac 	strh.w	r5, [r4, #172]	@ 0xac
 8007f76:	f8a4 10d0 	strh.w	r1, [r4, #208]	@ 0xd0
 8007f7a:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8007f7e:	e7a9      	b.n	8007ed4 <acc_detector_distance_processor_create+0x234>
 8007f80:	4b07      	ldr	r3, [pc, #28]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007f82:	4a0e      	ldr	r2, [pc, #56]	@ (8007fbc <acc_detector_distance_processor_create+0x31c>)
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	4908      	ldr	r1, [pc, #32]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007f88:	4798      	blx	r3
 8007f8a:	e696      	b.n	8007cba <acc_detector_distance_processor_create+0x1a>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	2501      	movs	r5, #1
 8007f90:	e7e8      	b.n	8007f64 <acc_detector_distance_processor_create+0x2c4>
 8007f92:	4d03      	ldr	r5, [pc, #12]	@ (8007fa0 <acc_detector_distance_processor_create+0x300>)
 8007f94:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc0 <acc_detector_distance_processor_create+0x320>)
 8007f96:	692b      	ldr	r3, [r5, #16]
 8007f98:	4903      	ldr	r1, [pc, #12]	@ (8007fa8 <acc_detector_distance_processor_create+0x308>)
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	4798      	blx	r3
 8007f9e:	e73c      	b.n	8007e1a <acc_detector_distance_processor_create+0x17a>
 8007fa0:	20000610 	.word	0x20000610
 8007fa4:	08014ef8 	.word	0x08014ef8
 8007fa8:	08014ec0 	.word	0x08014ec0
 8007fac:	08014fa4 	.word	0x08014fa4
 8007fb0:	08014f3c 	.word	0x08014f3c
 8007fb4:	08014fe8 	.word	0x08014fe8
 8007fb8:	08014f74 	.word	0x08014f74
 8007fbc:	08014f14 	.word	0x08014f14
 8007fc0:	08014fcc 	.word	0x08014fcc
 8007fc4:	0fa1afe1 	.word	0x0fa1afe1

08007fc8 <acc_detector_distance_processor_destroy>:
 8007fc8:	b118      	cbz	r0, 8007fd2 <acc_detector_distance_processor_destroy+0xa>
 8007fca:	2200      	movs	r2, #0
 8007fcc:	6002      	str	r2, [r0, #0]
 8007fce:	f004 ba7b 	b.w	800c4c8 <acc_rss_integration_mem_free>
 8007fd2:	4770      	bx	lr

08007fd4 <acc_detector_distance_processor_calibration_needed>:
 8007fd4:	b508      	push	{r3, lr}
 8007fd6:	b118      	cbz	r0, 8007fe0 <acc_detector_distance_processor_calibration_needed+0xc>
 8007fd8:	4b09      	ldr	r3, [pc, #36]	@ (8008000 <acc_detector_distance_processor_calibration_needed+0x2c>)
 8007fda:	6802      	ldr	r2, [r0, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d007      	beq.n	8007ff0 <acc_detector_distance_processor_calibration_needed+0x1c>
 8007fe0:	4b08      	ldr	r3, [pc, #32]	@ (8008004 <acc_detector_distance_processor_calibration_needed+0x30>)
 8007fe2:	4a09      	ldr	r2, [pc, #36]	@ (8008008 <acc_detector_distance_processor_calibration_needed+0x34>)
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	4909      	ldr	r1, [pc, #36]	@ (800800c <acc_detector_distance_processor_calibration_needed+0x38>)
 8007fe8:	2000      	movs	r0, #0
 8007fea:	4798      	blx	r3
 8007fec:	2000      	movs	r0, #0
 8007fee:	bd08      	pop	{r3, pc}
 8007ff0:	7900      	ldrb	r0, [r0, #4]
 8007ff2:	f1a0 0002 	sub.w	r0, r0, #2
 8007ff6:	fab0 f080 	clz	r0, r0
 8007ffa:	0940      	lsrs	r0, r0, #5
 8007ffc:	bd08      	pop	{r3, pc}
 8007ffe:	bf00      	nop
 8008000:	0fa1afe1 	.word	0x0fa1afe1
 8008004:	20000610 	.word	0x20000610
 8008008:	08014edc 	.word	0x08014edc
 800800c:	08014ec0 	.word	0x08014ec0

08008010 <acc_detector_distance_processor_calibrate>:
 8008010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	b092      	sub	sp, #72	@ 0x48
 8008016:	b130      	cbz	r0, 8008026 <acc_detector_distance_processor_calibrate+0x16>
 8008018:	460d      	mov	r5, r1
 800801a:	4616      	mov	r6, r2
 800801c:	6801      	ldr	r1, [r0, #0]
 800801e:	4a96      	ldr	r2, [pc, #600]	@ (8008278 <acc_detector_distance_processor_calibrate+0x268>)
 8008020:	4291      	cmp	r1, r2
 8008022:	4604      	mov	r4, r0
 8008024:	d009      	beq.n	800803a <acc_detector_distance_processor_calibrate+0x2a>
 8008026:	4b95      	ldr	r3, [pc, #596]	@ (800827c <acc_detector_distance_processor_calibrate+0x26c>)
 8008028:	4a95      	ldr	r2, [pc, #596]	@ (8008280 <acc_detector_distance_processor_calibrate+0x270>)
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	4995      	ldr	r1, [pc, #596]	@ (8008284 <acc_detector_distance_processor_calibrate+0x274>)
 800802e:	2000      	movs	r0, #0
 8008030:	4798      	blx	r3
 8008032:	2000      	movs	r0, #0
 8008034:	b012      	add	sp, #72	@ 0x48
 8008036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803a:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800803e:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8008040:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008042:	441f      	add	r7, r3
 8008044:	441a      	add	r2, r3
 8008046:	440b      	add	r3, r1
 8008048:	6747      	str	r7, [r0, #116]	@ 0x74
 800804a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 800804e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008050:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 8008054:	f7ff fd24 	bl	8007aa0 <map_calibration_buffer_data>
 8008058:	7e03      	ldrb	r3, [r0, #24]
 800805a:	7947      	ldrb	r7, [r0, #5]
 800805c:	b15b      	cbz	r3, 8008076 <acc_detector_distance_processor_calibrate+0x66>
 800805e:	b90f      	cbnz	r7, 8008064 <acc_detector_distance_processor_calibrate+0x54>
 8008060:	f880 706d 	strb.w	r7, [r0, #109]	@ 0x6d
 8008064:	7923      	ldrb	r3, [r4, #4]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d103      	bne.n	8008072 <acc_detector_distance_processor_calibrate+0x62>
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff fd3e 	bl	8007aec <reset_calibration_state.part.0>
 8008070:	7967      	ldrb	r7, [r4, #5]
 8008072:	2300      	movs	r3, #0
 8008074:	7623      	strb	r3, [r4, #24]
 8008076:	bb2f      	cbnz	r7, 80080c4 <acc_detector_distance_processor_calibrate+0xb4>
 8008078:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800807c:	bb13      	cbnz	r3, 80080c4 <acc_detector_distance_processor_calibrate+0xb4>
 800807e:	2228      	movs	r2, #40	@ 0x28
 8008080:	4639      	mov	r1, r7
 8008082:	a808      	add	r0, sp, #32
 8008084:	f008 fcfa 	bl	8010a7c <memset>
 8008088:	2301      	movs	r3, #1
 800808a:	4629      	mov	r1, r5
 800808c:	aa08      	add	r2, sp, #32
 800808e:	4620      	mov	r0, r4
 8008090:	9700      	str	r7, [sp, #0]
 8008092:	f7ff fd49 	bl	8007b28 <process_subsweeps>
 8008096:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 800809a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	a908      	add	r1, sp, #32
 80080a2:	f008 fd7a 	bl	8010b9a <memcpy>
 80080a6:	7963      	ldrb	r3, [r4, #5]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f884 206d 	strb.w	r2, [r4, #109]	@ 0x6d
 80080ae:	b34b      	cbz	r3, 8008104 <acc_detector_distance_processor_calibrate+0xf4>
 80080b0:	7923      	ldrb	r3, [r4, #4]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d026      	beq.n	8008104 <acc_detector_distance_processor_calibrate+0xf4>
 80080b6:	2300      	movs	r3, #0
 80080b8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080ba:	2001      	movs	r0, #1
 80080bc:	7013      	strb	r3, [r2, #0]
 80080be:	b012      	add	sp, #72	@ 0x48
 80080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c4:	7923      	ldrb	r3, [r4, #4]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d021      	beq.n	800810e <acc_detector_distance_processor_calibrate+0xfe>
 80080ca:	2228      	movs	r2, #40	@ 0x28
 80080cc:	2100      	movs	r1, #0
 80080ce:	a808      	add	r0, sp, #32
 80080d0:	f008 fcd4 	bl	8010a7c <memset>
 80080d4:	2300      	movs	r3, #0
 80080d6:	aa08      	add	r2, sp, #32
 80080d8:	4629      	mov	r1, r5
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff fd23 	bl	8007b28 <process_subsweeps>
 80080e2:	f004 fa05 	bl	800c4f0 <acc_rss_integration_log_level>
 80080e6:	2801      	cmp	r0, #1
 80080e8:	d905      	bls.n	80080f6 <acc_detector_distance_processor_calibrate+0xe6>
 80080ea:	4b64      	ldr	r3, [pc, #400]	@ (800827c <acc_detector_distance_processor_calibrate+0x26c>)
 80080ec:	4a66      	ldr	r2, [pc, #408]	@ (8008288 <acc_detector_distance_processor_calibrate+0x278>)
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	4964      	ldr	r1, [pc, #400]	@ (8008284 <acc_detector_distance_processor_calibrate+0x274>)
 80080f2:	2002      	movs	r0, #2
 80080f4:	4798      	blx	r3
 80080f6:	7961      	ldrb	r1, [r4, #5]
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d1d9      	bne.n	80080b0 <acc_detector_distance_processor_calibrate+0xa0>
 80080fc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0d5      	beq.n	80080b0 <acc_detector_distance_processor_calibrate+0xa0>
 8008104:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1d5      	bne.n	80080b8 <acc_detector_distance_processor_calibrate+0xa8>
 800810c:	e7d3      	b.n	80080b6 <acc_detector_distance_processor_calibrate+0xa6>
 800810e:	f894 706c 	ldrb.w	r7, [r4, #108]	@ 0x6c
 8008112:	2f00      	cmp	r7, #0
 8008114:	d1d9      	bne.n	80080ca <acc_detector_distance_processor_calibrate+0xba>
 8008116:	2228      	movs	r2, #40	@ 0x28
 8008118:	4639      	mov	r1, r7
 800811a:	a808      	add	r0, sp, #32
 800811c:	f04f 0801 	mov.w	r8, #1
 8008120:	f008 fcac 	bl	8010a7c <memset>
 8008124:	4629      	mov	r1, r5
 8008126:	aa08      	add	r2, sp, #32
 8008128:	f8cd 8000 	str.w	r8, [sp]
 800812c:	463b      	mov	r3, r7
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff fcfa 	bl	8007b28 <process_subsweeps>
 8008134:	7961      	ldrb	r1, [r4, #5]
 8008136:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800813a:	e9cd 7706 	strd	r7, r7, [sp, #24]
 800813e:	2900      	cmp	r1, #0
 8008140:	f000 808c 	beq.w	800825c <acc_detector_distance_processor_calibrate+0x24c>
 8008144:	f894 801d 	ldrb.w	r8, [r4, #29]
 8008148:	fa1f f588 	uxth.w	r5, r8
 800814c:	f1b8 0f00 	cmp.w	r8, #0
 8008150:	f000 808f 	beq.w	8008272 <acc_detector_distance_processor_calibrate+0x262>
 8008154:	3d01      	subs	r5, #1
 8008156:	f104 031a 	add.w	r3, r4, #26
 800815a:	fa13 f585 	uxtah	r5, r3, r5
 800815e:	f104 0219 	add.w	r2, r4, #25
 8008162:	a804      	add	r0, sp, #16
 8008164:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800816c:	42aa      	cmp	r2, r5
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f840 3b04 	str.w	r3, [r0], #4
 8008174:	d1f6      	bne.n	8008164 <acc_detector_distance_processor_calibrate+0x154>
 8008176:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 8008178:	2a00      	cmp	r2, #0
 800817a:	d072      	beq.n	8008262 <acc_detector_distance_processor_calibrate+0x252>
 800817c:	f8d4 70cc 	ldr.w	r7, [r4, #204]	@ 0xcc
 8008180:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8008182:	f8d4 c0d8 	ldr.w	ip, [r4, #216]	@ 0xd8
 8008186:	f102 39ff 	add.w	r9, r2, #4294967295
 800818a:	fa1f f989 	uxth.w	r9, r9
 800818e:	1d3e      	adds	r6, r7, #4
 8008190:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
 8008194:	463b      	mov	r3, r7
 8008196:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800819a:	468e      	mov	lr, r1
 800819c:	460d      	mov	r5, r1
 800819e:	4660      	mov	r0, ip
 80081a0:	ed95 7a00 	vldr	s14, [r5]
 80081a4:	edd3 7a00 	vldr	s15, [r3]
 80081a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081ac:	ece3 7a01 	vstmia	r3!, {s15}
 80081b0:	ecf5 7a01 	vldmia	r5!, {s15}
 80081b4:	ed90 7a00 	vldr	s14, [r0]
 80081b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80081bc:	459a      	cmp	sl, r3
 80081be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081c2:	ece0 7a01 	vstmia	r0!, {s15}
 80081c6:	d1eb      	bne.n	80081a0 <acc_detector_distance_processor_calibrate+0x190>
 80081c8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d939      	bls.n	8008244 <acc_detector_distance_processor_calibrate+0x234>
 80081d0:	1e58      	subs	r0, r3, #1
 80081d2:	b280      	uxth	r0, r0
 80081d4:	ee07 0a90 	vmov	s15, r0
 80081d8:	ee07 3a10 	vmov	s14, r3
 80081dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80081e4:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80081e8:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 80081ec:	1d03      	adds	r3, r0, #4
 80081ee:	4499      	add	r9, r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	edd7 7a00 	vldr	s15, [r7]
 80081f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80081fa:	4637      	mov	r7, r6
 80081fc:	3604      	adds	r6, #4
 80081fe:	eca3 7a01 	vstmia	r3!, {s14}
 8008202:	ecbc 6a01 	vldmia	ip!, {s12}
 8008206:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800820a:	4599      	cmp	r9, r3
 800820c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8008210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008214:	eef0 7ae7 	vabs.f32	s15, s15
 8008218:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800821c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8008220:	ecae 7a01 	vstmia	lr!, {s14}
 8008224:	d1e5      	bne.n	80081f2 <acc_detector_distance_processor_calibrate+0x1e2>
 8008226:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800822a:	f8cd 8000 	str.w	r8, [sp]
 800822e:	8f66      	ldrh	r6, [r4, #58]	@ 0x3a
 8008230:	9303      	str	r3, [sp, #12]
 8008232:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 8008236:	ab04      	add	r3, sp, #16
 8008238:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800823c:	f7fe fe1c 	bl	8006e78 <acc_detector_distance_alg_calculate_threshold_recording>
 8008240:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8008244:	7961      	ldrb	r1, [r4, #5]
 8008246:	8aa2      	ldrh	r2, [r4, #20]
 8008248:	1c58      	adds	r0, r3, #1
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	fab3 f383 	clz	r3, r3
 8008250:	095b      	lsrs	r3, r3, #5
 8008252:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 8008256:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 800825a:	e74d      	b.n	80080f8 <acc_detector_distance_processor_calibrate+0xe8>
 800825c:	6833      	ldr	r3, [r6, #0]
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	e789      	b.n	8008176 <acc_detector_distance_processor_calibrate+0x166>
 8008262:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8008266:	2b01      	cmp	r3, #1
 8008268:	d9ed      	bls.n	8008246 <acc_detector_distance_processor_calibrate+0x236>
 800826a:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800826e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8008270:	e7d9      	b.n	8008226 <acc_detector_distance_processor_calibrate+0x216>
 8008272:	46a8      	mov	r8, r5
 8008274:	e77f      	b.n	8008176 <acc_detector_distance_processor_calibrate+0x166>
 8008276:	bf00      	nop
 8008278:	0fa1afe1 	.word	0x0fa1afe1
 800827c:	20000610 	.word	0x20000610
 8008280:	08014edc 	.word	0x08014edc
 8008284:	08014ec0 	.word	0x08014ec0
 8008288:	0801500c 	.word	0x0801500c

0800828c <acc_detector_distance_processor_process>:
 800828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	ed2d 8b0a 	vpush	{d8-d12}
 8008294:	b099      	sub	sp, #100	@ 0x64
 8008296:	f9bd 80b0 	ldrsh.w	r8, [sp, #176]	@ 0xb0
 800829a:	9205      	str	r2, [sp, #20]
 800829c:	b128      	cbz	r0, 80082aa <acc_detector_distance_processor_process+0x1e>
 800829e:	6802      	ldr	r2, [r0, #0]
 80082a0:	461f      	mov	r7, r3
 80082a2:	4bb0      	ldr	r3, [pc, #704]	@ (8008564 <acc_detector_distance_processor_process+0x2d8>)
 80082a4:	429a      	cmp	r2, r3
 80082a6:	4604      	mov	r4, r0
 80082a8:	d00b      	beq.n	80082c2 <acc_detector_distance_processor_process+0x36>
 80082aa:	4baf      	ldr	r3, [pc, #700]	@ (8008568 <acc_detector_distance_processor_process+0x2dc>)
 80082ac:	4aaf      	ldr	r2, [pc, #700]	@ (800856c <acc_detector_distance_processor_process+0x2e0>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	49af      	ldr	r1, [pc, #700]	@ (8008570 <acc_detector_distance_processor_process+0x2e4>)
 80082b2:	2000      	movs	r0, #0
 80082b4:	4798      	blx	r3
 80082b6:	2000      	movs	r0, #0
 80082b8:	b019      	add	sp, #100	@ 0x64
 80082ba:	ecbd 8b0a 	vpop	{d8-d12}
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80082c4:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80082c6:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
 80082ca:	4689      	mov	r9, r1
 80082cc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80082ce:	440b      	add	r3, r1
 80082d0:	440a      	add	r2, r1
 80082d2:	440d      	add	r5, r1
 80082d4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 80082d8:	6742      	str	r2, [r0, #116]	@ 0x74
 80082da:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80082dc:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 80082e0:	eeb0 9a40 	vmov.f32	s18, s0
 80082e4:	f7ff fbdc 	bl	8007aa0 <map_calibration_buffer_data>
 80082e8:	2100      	movs	r1, #0
 80082ea:	460e      	mov	r6, r1
 80082ec:	2228      	movs	r2, #40	@ 0x28
 80082ee:	a80e      	add	r0, sp, #56	@ 0x38
 80082f0:	f008 fbc4 	bl	8010a7c <memset>
 80082f4:	4649      	mov	r1, r9
 80082f6:	aa0e      	add	r2, sp, #56	@ 0x38
 80082f8:	9600      	str	r6, [sp, #0]
 80082fa:	4633      	mov	r3, r6
 80082fc:	4620      	mov	r0, r4
 80082fe:	f7ff fc13 	bl	8007b28 <process_subsweeps>
 8008302:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8008304:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8008308:	2900      	cmp	r1, #0
 800830a:	f000 8114 	beq.w	8008536 <acc_detector_distance_processor_process+0x2aa>
 800830e:	2301      	movs	r3, #1
 8008310:	eddf 9a99 	vldr	s19, [pc, #612]	@ 8008578 <acc_detector_distance_processor_process+0x2ec>
 8008314:	9306      	str	r3, [sp, #24]
 8008316:	4635      	mov	r5, r6
 8008318:	7923      	ldrb	r3, [r4, #4]
 800831a:	2b03      	cmp	r3, #3
 800831c:	f200 82ba 	bhi.w	8008894 <acc_detector_distance_processor_process+0x608>
 8008320:	e8df f003 	tbb	[pc, r3]
 8008324:	02257cca 	.word	0x02257cca
 8008328:	7963      	ldrb	r3, [r4, #5]
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80f0 	beq.w	8008510 <acc_detector_distance_processor_process+0x284>
 8008330:	f894 c01d 	ldrb.w	ip, [r4, #29]
 8008334:	eeb0 0a69 	vmov.f32	s0, s19
 8008338:	f1bc 0f00 	cmp.w	ip, #0
 800833c:	f000 80ea 	beq.w	8008514 <acc_detector_distance_processor_process+0x288>
 8008340:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8008344:	2300      	movs	r3, #0
 8008346:	f104 0e19 	add.w	lr, r4, #25
 800834a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800834e:	42a8      	cmp	r0, r5
 8008350:	d808      	bhi.n	8008364 <acc_detector_distance_processor_process+0xd8>
 8008352:	8810      	ldrh	r0, [r2, #0]
 8008354:	42a8      	cmp	r0, r5
 8008356:	d905      	bls.n	8008364 <acc_detector_distance_processor_process+0xd8>
 8008358:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800835c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8008360:	ed90 0a00 	vldr	s0, [r0]
 8008364:	3301      	adds	r3, #1
 8008366:	b298      	uxth	r0, r3
 8008368:	4584      	cmp	ip, r0
 800836a:	d8ee      	bhi.n	800834a <acc_detector_distance_processor_process+0xbe>
 800836c:	e0d2      	b.n	8008514 <acc_detector_distance_processor_process+0x288>
 800836e:	9b05      	ldr	r3, [sp, #20]
 8008370:	7fa1      	ldrb	r1, [r4, #30]
 8008372:	eba3 0008 	sub.w	r0, r3, r8
 8008376:	b200      	sxth	r0, r0
 8008378:	f003 ff74 	bl	800c264 <acc_detector_utils_get_temperature_adjustment_factors>
 800837c:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8008380:	edcd 0a0d 	vstr	s1, [sp, #52]	@ 0x34
 8008384:	b2b3      	uxth	r3, r6
 8008386:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800838a:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 800838e:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 8008390:	edd1 7a00 	vldr	s15, [r1]
 8008394:	7961      	ldrb	r1, [r4, #5]
 8008396:	442a      	add	r2, r5
 8008398:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800839c:	b292      	uxth	r2, r2
 800839e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80083a2:	2900      	cmp	r1, #0
 80083a4:	f040 808e 	bne.w	80084c4 <acc_detector_distance_processor_process+0x238>
 80083a8:	f894 901d 	ldrb.w	r9, [r4, #29]
 80083ac:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80083b0:	ed97 7a00 	vldr	s14, [r7]
 80083b4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	f000 8213 	beq.w	80087e6 <acc_detector_distance_processor_process+0x55a>
 80083c0:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80083c4:	eef0 6a69 	vmov.f32	s13, s19
 80083c8:	f04f 0e00 	mov.w	lr, #0
 80083cc:	f831 bb02 	ldrh.w	fp, [r1], #2
 80083d0:	f10e 0e01 	add.w	lr, lr, #1
 80083d4:	455a      	cmp	r2, fp
 80083d6:	fa1f fa8e 	uxth.w	sl, lr
 80083da:	d305      	bcc.n	80083e8 <acc_detector_distance_processor_process+0x15c>
 80083dc:	f8b1 b000 	ldrh.w	fp, [r1]
 80083e0:	4593      	cmp	fp, r2
 80083e2:	bf88      	it	hi
 80083e4:	edd0 6a00 	vldrhi	s13, [r0]
 80083e8:	45d1      	cmp	r9, sl
 80083ea:	f100 0004 	add.w	r0, r0, #4
 80083ee:	d8ed      	bhi.n	80083cc <acc_detector_distance_processor_process+0x140>
 80083f0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80083f4:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 80083f8:	ed94 0a17 	vldr	s0, [r4, #92]	@ 0x5c
 80083fc:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80083fe:	ee66 5a06 	vmul.f32	s11, s12, s12
 8008402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008406:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800840a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800840e:	eef1 7ac7 	vsqrt.f32	s15, s14
 8008412:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008416:	ee77 7a86 	vadd.f32	s15, s15, s12
 800841a:	e024      	b.n	8008466 <acc_detector_distance_processor_process+0x1da>
 800841c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800841e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008420:	fb13 f305 	smulbb	r3, r3, r5
 8008424:	fa12 f383 	uxtah	r3, r2, r3
 8008428:	ee08 3a10 	vmov	s16, r3
 800842c:	2001      	movs	r0, #1
 800842e:	f001 ffa9 	bl	800a384 <acc_processing_points_to_meter>
 8008432:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8008436:	ab0a      	add	r3, sp, #40	@ 0x28
 8008438:	ee28 8a00 	vmul.f32	s16, s16, s0
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	7962      	ldrb	r2, [r4, #5]
 8008440:	edd4 aa04 	vldr	s21, [r4, #16]
 8008444:	eeb0 0a48 	vmov.f32	s0, s16
 8008448:	ab0b      	add	r3, sp, #44	@ 0x2c
 800844a:	4639      	mov	r1, r7
 800844c:	4620      	mov	r0, r4
 800844e:	f7ff facd 	bl	80079ec <get_radar_equation_parameters_for_distance>
 8008452:	9006      	str	r0, [sp, #24]
 8008454:	2800      	cmp	r0, #0
 8008456:	f040 8091 	bne.w	800857c <acc_detector_distance_processor_process+0x2f0>
 800845a:	eef0 7a69 	vmov.f32	s15, s19
 800845e:	b2b3      	uxth	r3, r6
 8008460:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8008462:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008466:	f8d4 e074 	ldr.w	lr, [r4, #116]	@ 0x74
 800846a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800846e:	44f4      	add	ip, lr
 8008470:	ed9c 7a00 	vldr	s14, [ip]
 8008474:	095b      	lsrs	r3, r3, #5
 8008476:	f005 0c1f 	and.w	ip, r5, #31
 800847a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800847e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008482:	2501      	movs	r5, #1
 8008484:	fa05 f50c 	lsl.w	r5, r5, ip
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	bfcc      	ite	gt
 800848e:	4305      	orrgt	r5, r0
 8008490:	ea20 0505 	bicle.w	r5, r0, r5
 8008494:	3601      	adds	r6, #1
 8008496:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800849a:	b2b5      	uxth	r5, r6
 800849c:	42a9      	cmp	r1, r5
 800849e:	f63f af3b 	bhi.w	8008318 <acc_detector_distance_processor_process+0x8c>
 80084a2:	4613      	mov	r3, r2
 80084a4:	9a06      	ldr	r2, [sp, #24]
 80084a6:	4670      	mov	r0, lr
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	d147      	bne.n	800853c <acc_detector_distance_processor_process+0x2b0>
 80084ac:	2001      	movs	r0, #1
 80084ae:	b019      	add	sp, #100	@ 0x64
 80084b0:	ecbd 8b0a 	vpop	{d8-d12}
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b8:	b2b3      	uxth	r3, r6
 80084ba:	edd4 7a03 	vldr	s15, [r4, #12]
 80084be:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80084c2:	e7d0      	b.n	8008466 <acc_detector_distance_processor_process+0x1da>
 80084c4:	f894 901d 	ldrb.w	r9, [r4, #29]
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	f000 818e 	beq.w	80087ec <acc_detector_distance_processor_process+0x560>
 80084d0:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80084d4:	eeb0 7a69 	vmov.f32	s14, s19
 80084d8:	468e      	mov	lr, r1
 80084da:	2000      	movs	r0, #0
 80084dc:	f104 0b19 	add.w	fp, r4, #25
 80084e0:	f83e ab02 	ldrh.w	sl, [lr], #2
 80084e4:	4552      	cmp	r2, sl
 80084e6:	d309      	bcc.n	80084fc <acc_detector_distance_processor_process+0x270>
 80084e8:	f8be a000 	ldrh.w	sl, [lr]
 80084ec:	4592      	cmp	sl, r2
 80084ee:	d905      	bls.n	80084fc <acc_detector_distance_processor_process+0x270>
 80084f0:	f81b a000 	ldrb.w	sl, [fp, r0]
 80084f4:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
 80084f8:	ed9a 7a00 	vldr	s14, [sl]
 80084fc:	3001      	adds	r0, #1
 80084fe:	fa1f fa80 	uxth.w	sl, r0
 8008502:	45d1      	cmp	r9, sl
 8008504:	d8ec      	bhi.n	80084e0 <acc_detector_distance_processor_process+0x254>
 8008506:	ee27 7a07 	vmul.f32	s14, s14, s14
 800850a:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800850e:	e759      	b.n	80083c4 <acc_detector_distance_processor_process+0x138>
 8008510:	ed97 0a00 	vldr	s0, [r7]
 8008514:	9500      	str	r5, [sp, #0]
 8008516:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800851a:	edd4 0a17 	vldr	s1, [r4, #92]	@ 0x5c
 800851e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 8008522:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008524:	f7fe fbde 	bl	8006ce4 <acc_detector_distance_alg_calculate_cfar>
 8008528:	b2b3      	uxth	r3, r6
 800852a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800852c:	eef0 7a40 	vmov.f32	s15, s0
 8008530:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008534:	e797      	b.n	8008466 <acc_detector_distance_processor_process+0x1da>
 8008536:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008538:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800853c:	f8b4 5090 	ldrh.w	r5, [r4, #144]	@ 0x90
 8008540:	9500      	str	r5, [sp, #0]
 8008542:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8008546:	9201      	str	r2, [sp, #4]
 8008548:	461a      	mov	r2, r3
 800854a:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800854e:	f7fe fd95 	bl	800707c <acc_detector_distance_alg_find_peaks>
 8008552:	2800      	cmp	r0, #0
 8008554:	d179      	bne.n	800864a <acc_detector_distance_processor_process+0x3be>
 8008556:	4b04      	ldr	r3, [pc, #16]	@ (8008568 <acc_detector_distance_processor_process+0x2dc>)
 8008558:	4a06      	ldr	r2, [pc, #24]	@ (8008574 <acc_detector_distance_processor_process+0x2e8>)
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	4904      	ldr	r1, [pc, #16]	@ (8008570 <acc_detector_distance_processor_process+0x2e4>)
 800855e:	4798      	blx	r3
 8008560:	e7a4      	b.n	80084ac <acc_detector_distance_processor_process+0x220>
 8008562:	bf00      	nop
 8008564:	0fa1afe1 	.word	0x0fa1afe1
 8008568:	20000610 	.word	0x20000610
 800856c:	08014edc 	.word	0x08014edc
 8008570:	08014ec0 	.word	0x08014ec0
 8008574:	08015024 	.word	0x08015024
 8008578:	00000000 	.word	0x00000000
 800857c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800857e:	79a0      	ldrb	r0, [r4, #6]
 8008580:	f894 901e 	ldrb.w	r9, [r4, #30]
 8008584:	9107      	str	r1, [sp, #28]
 8008586:	f001 f8c1 	bl	800970c <acc_detector_distance_utils_reflector_shape_exponent_get>
 800858a:	9907      	ldr	r1, [sp, #28]
 800858c:	ed9d ba0a 	vldr	s22, [sp, #40]	@ 0x28
 8008590:	4648      	mov	r0, r9
 8008592:	eeb0 aa40 	vmov.f32	s20, s0
 8008596:	f7ff f817 	bl	80075c8 <acc_detector_distance_alg_calc_processing_gain>
 800859a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	f77f af5a 	ble.w	800845a <acc_detector_distance_processor_process+0x1ce>
 80085a6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80085aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ae:	f77f af54 	ble.w	800845a <acc_detector_distance_processor_process+0x1ce>
 80085b2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80085b6:	f00a fb65 	bl	8012c84 <fmaxf>
 80085ba:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80085be:	eef0 8a40 	vmov.f32	s17, s0
 80085c2:	ed9d 0a0b 	vldr	s0, [sp, #44]	@ 0x2c
 80085c6:	f00a fb5d 	bl	8012c84 <fmaxf>
 80085ca:	eeb0 ca40 	vmov.f32	s24, s0
 80085ce:	eeb0 0a68 	vmov.f32	s0, s17
 80085d2:	f00a f95b 	bl	801288c <log10f>
 80085d6:	eef0 8a40 	vmov.f32	s17, s0
 80085da:	eeb0 0a4b 	vmov.f32	s0, s22
 80085de:	f00a f955 	bl	801288c <log10f>
 80085e2:	4648      	mov	r0, r9
 80085e4:	eeb0 ba40 	vmov.f32	s22, s0
 80085e8:	f003 fdf6 	bl	800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>
 80085ec:	eef0 ba40 	vmov.f32	s23, s0
 80085f0:	eeb0 0a4c 	vmov.f32	s0, s24
 80085f4:	f00a f94a 	bl	801288c <log10f>
 80085f8:	eef0 6a40 	vmov.f32	s13, s0
 80085fc:	eeb0 0a48 	vmov.f32	s0, s16
 8008600:	eeb0 8a66 	vmov.f32	s16, s13
 8008604:	f00a f942 	bl	801288c <log10f>
 8008608:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800860c:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8008610:	ee68 6a06 	vmul.f32	s13, s16, s12
 8008614:	ee68 8a86 	vmul.f32	s17, s17, s12
 8008618:	ee2b ba20 	vmul.f32	s22, s22, s1
 800861c:	ee36 8aab 	vadd.f32	s16, s13, s23
 8008620:	ee78 8a8b 	vadd.f32	s17, s17, s22
 8008624:	ee6a 6a06 	vmul.f32	s13, s20, s12
 8008628:	ee78 7a88 	vadd.f32	s15, s17, s16
 800862c:	ee26 7a80 	vmul.f32	s14, s13, s0
 8008630:	eeb0 0a46 	vmov.f32	s0, s12
 8008634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008638:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800863c:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8008640:	f00a f952 	bl	80128e8 <powf>
 8008644:	eef0 7a40 	vmov.f32	s15, s0
 8008648:	e709      	b.n	800845e <acc_detector_distance_processor_process+0x1d2>
 800864a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800864c:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 8008650:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8008654:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8008656:	f9b4 9034 	ldrsh.w	r9, [r4, #52]	@ 0x34
 800865a:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
 800865e:	9107      	str	r1, [sp, #28]
 8008660:	2001      	movs	r0, #1
 8008662:	9206      	str	r2, [sp, #24]
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	f001 fe8d 	bl	800a384 <acc_processing_points_to_meter>
 800866a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800866c:	9907      	ldr	r1, [sp, #28]
 800866e:	689e      	ldr	r6, [r3, #8]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8cd 9000 	str.w	r9, [sp]
 8008676:	e9cd a301 	strd	sl, r3, [sp, #4]
 800867a:	4628      	mov	r0, r5
 800867c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8008680:	9603      	str	r6, [sp, #12]
 8008682:	f7fe fc73 	bl	8006f6c <acc_detector_distance_alg_interpolate_peaks>
 8008686:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800868a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800868c:	8093      	strh	r3, [r2, #4]
 800868e:	8193      	strh	r3, [r2, #12]
 8008690:	8293      	strh	r3, [r2, #20]
 8008692:	b383      	cbz	r3, 80086f6 <acc_detector_distance_processor_process+0x46a>
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	ed5f 9a48 	vldr	s19, [pc, #-288]	@ 8008578 <acc_detector_distance_processor_process+0x2ec>
 800869a:	2600      	movs	r6, #0
 800869c:	f10d 092c 	add.w	r9, sp, #44	@ 0x2c
 80086a0:	eeb3 aa04 	vmov.f32	s20, #52	@ 0x41a00000  20.0
 80086a4:	46b8      	mov	r8, r7
 80086a6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80086a8:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	690f      	ldr	r7, [r1, #16]
 80086ae:	b2b5      	uxth	r5, r6
 80086b0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80086b4:	ed92 8a00 	vldr	s16, [r2]
 80086b8:	7962      	ldrb	r2, [r4, #5]
 80086ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80086be:	edd3 8a00 	vldr	s17, [r3]
 80086c2:	f8cd 9000 	str.w	r9, [sp]
 80086c6:	eeb0 0a48 	vmov.f32	s0, s16
 80086ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80086cc:	4641      	mov	r1, r8
 80086ce:	4620      	mov	r0, r4
 80086d0:	00ad      	lsls	r5, r5, #2
 80086d2:	f7ff f98b 	bl	80079ec <get_radar_equation_parameters_for_distance>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d14b      	bne.n	8008772 <acc_detector_distance_processor_process+0x4e6>
 80086da:	7fa0      	ldrb	r0, [r4, #30]
 80086dc:	eeb0 0a49 	vmov.f32	s0, s18
 80086e0:	f7fe fdf4 	bl	80072cc <acc_detector_distance_alg_get_loopback_peak_offset>
 80086e4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	441d      	add	r5, r3
 80086ea:	edd5 7a00 	vldr	s15, [r5]
 80086ee:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80086f2:	ed85 0a00 	vstr	s0, [r5]
 80086f6:	7923      	ldrb	r3, [r4, #4]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	f000 80c6 	beq.w	800888a <acc_detector_distance_processor_process+0x5fe>
 80086fe:	2100      	movs	r1, #0
 8008700:	4608      	mov	r0, r1
 8008702:	460a      	mov	r2, r1
 8008704:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	2b05      	cmp	r3, #5
 800870a:	d974      	bls.n	80087f6 <acc_detector_distance_processor_process+0x56a>
 800870c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008710:	0940      	lsrs	r0, r0, #5
 8008712:	f002 011f 	and.w	r1, r2, #31
 8008716:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800871a:	40cb      	lsrs	r3, r1
 800871c:	f013 0301 	ands.w	r3, r3, #1
 8008720:	d024      	beq.n	800876c <acc_detector_distance_processor_process+0x4e0>
 8008722:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008724:	ed1f 7a6c 	vldr	s14, [pc, #-432]	@ 8008578 <acc_detector_distance_processor_process+0x2ec>
 8008728:	f103 000c 	add.w	r0, r3, #12
 800872c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008730:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8008734:	0094      	lsls	r4, r2, #2
 8008736:	ecf1 7a01 	vldmia	r1!, {s15}
 800873a:	4288      	cmp	r0, r1
 800873c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008740:	d1f9      	bne.n	8008736 <acc_detector_distance_processor_process+0x4aa>
 8008742:	3203      	adds	r2, #3
 8008744:	f103 0118 	add.w	r1, r3, #24
 8008748:	ed5f 7a75 	vldr	s15, [pc, #-468]	@ 8008578 <acc_detector_distance_processor_process+0x2ec>
 800874c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008750:	190a      	adds	r2, r1, r4
 8008752:	ecf3 6a01 	vldmia	r3!, {s13}
 8008756:	429a      	cmp	r2, r3
 8008758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875c:	d1f9      	bne.n	8008752 <acc_detector_distance_processor_process+0x4c6>
 800875e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	bfac      	ite	ge
 8008768:	2301      	movge	r3, #1
 800876a:	2300      	movlt	r3, #0
 800876c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800876e:	7593      	strb	r3, [r2, #22]
 8008770:	e69c      	b.n	80084ac <acc_detector_distance_processor_process+0x220>
 8008772:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8008774:	79a0      	ldrb	r0, [r4, #6]
 8008776:	f894 a01e 	ldrb.w	sl, [r4, #30]
 800877a:	9105      	str	r1, [sp, #20]
 800877c:	f000 ffc6 	bl	800970c <acc_detector_distance_utils_reflector_shape_exponent_get>
 8008780:	9905      	ldr	r1, [sp, #20]
 8008782:	ed9d ba0b 	vldr	s22, [sp, #44]	@ 0x2c
 8008786:	4650      	mov	r0, sl
 8008788:	eef0 aa40 	vmov.f32	s21, s0
 800878c:	f7fe ff1c 	bl	80075c8 <acc_detector_distance_alg_calc_processing_gain>
 8008790:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008798:	dd0b      	ble.n	80087b2 <acc_detector_distance_processor_process+0x526>
 800879a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800879e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a2:	dd06      	ble.n	80087b2 <acc_detector_distance_processor_process+0x526>
 80087a4:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80087a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ac:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80087b0:	dc23      	bgt.n	80087fa <acc_detector_distance_processor_process+0x56e>
 80087b2:	eeb0 0a69 	vmov.f32	s0, s19
 80087b6:	442f      	add	r7, r5
 80087b8:	ed87 0a00 	vstr	s0, [r7]
 80087bc:	7fa0      	ldrb	r0, [r4, #30]
 80087be:	eeb0 0a49 	vmov.f32	s0, s18
 80087c2:	f7fe fd83 	bl	80072cc <acc_detector_distance_alg_get_loopback_peak_offset>
 80087c6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	8899      	ldrh	r1, [r3, #4]
 80087cc:	4415      	add	r5, r2
 80087ce:	edd5 7a00 	vldr	s15, [r5]
 80087d2:	3601      	adds	r6, #1
 80087d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80087d8:	b2b3      	uxth	r3, r6
 80087da:	4299      	cmp	r1, r3
 80087dc:	ed85 0a00 	vstr	s0, [r5]
 80087e0:	f63f af61 	bhi.w	80086a6 <acc_detector_distance_processor_process+0x41a>
 80087e4:	e787      	b.n	80086f6 <acc_detector_distance_processor_process+0x46a>
 80087e6:	eef0 6a69 	vmov.f32	s13, s19
 80087ea:	e603      	b.n	80083f4 <acc_detector_distance_processor_process+0x168>
 80087ec:	eef0 6a69 	vmov.f32	s13, s19
 80087f0:	eeb0 7a69 	vmov.f32	s14, s19
 80087f4:	e5fe      	b.n	80083f4 <acc_detector_distance_processor_process+0x168>
 80087f6:	2300      	movs	r3, #0
 80087f8:	e7b8      	b.n	800876c <acc_detector_distance_processor_process+0x4e0>
 80087fa:	f00a fa43 	bl	8012c84 <fmaxf>
 80087fe:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8008802:	eef0 ba40 	vmov.f32	s23, s0
 8008806:	ed9d 0a0c 	vldr	s0, [sp, #48]	@ 0x30
 800880a:	f00a fa3b 	bl	8012c84 <fmaxf>
 800880e:	eef0 ca40 	vmov.f32	s25, s0
 8008812:	eeb0 0a6b 	vmov.f32	s0, s23
 8008816:	f00a f839 	bl	801288c <log10f>
 800881a:	eef0 ba40 	vmov.f32	s23, s0
 800881e:	eeb0 0a68 	vmov.f32	s0, s17
 8008822:	f00a f833 	bl	801288c <log10f>
 8008826:	eef0 8a40 	vmov.f32	s17, s0
 800882a:	eeb0 0a4b 	vmov.f32	s0, s22
 800882e:	f00a f82d 	bl	801288c <log10f>
 8008832:	4650      	mov	r0, sl
 8008834:	eeb0 ba40 	vmov.f32	s22, s0
 8008838:	f003 fcce 	bl	800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800883c:	eeb0 ca40 	vmov.f32	s24, s0
 8008840:	eeb0 0a6c 	vmov.f32	s0, s25
 8008844:	f00a f822 	bl	801288c <log10f>
 8008848:	eef0 7a40 	vmov.f32	s15, s0
 800884c:	eeb0 0a48 	vmov.f32	s0, s16
 8008850:	eeb0 8a67 	vmov.f32	s16, s15
 8008854:	f00a f81a 	bl	801288c <log10f>
 8008858:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800885c:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8008860:	ee2b ba0a 	vmul.f32	s22, s22, s20
 8008864:	ee28 8a26 	vmul.f32	s16, s16, s13
 8008868:	ee77 7acb 	vsub.f32	s15, s15, s22
 800886c:	ee38 7a0c 	vadd.f32	s14, s16, s24
 8008870:	ee6a aaa6 	vmul.f32	s21, s21, s13
 8008874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008878:	ee6a aa80 	vmul.f32	s21, s21, s0
 800887c:	ee2b 0aa6 	vmul.f32	s0, s23, s13
 8008880:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8008884:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008888:	e795      	b.n	80087b6 <acc_detector_distance_processor_process+0x52a>
 800888a:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 800888e:	4610      	mov	r0, r2
 8008890:	0051      	lsls	r1, r2, #1
 8008892:	e737      	b.n	8008704 <acc_detector_distance_processor_process+0x478>
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <acc_detector_distance_processor_process+0x628>)
 8008896:	4a08      	ldr	r2, [pc, #32]	@ (80088b8 <acc_detector_distance_processor_process+0x62c>)
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	4908      	ldr	r1, [pc, #32]	@ (80088bc <acc_detector_distance_processor_process+0x630>)
 800889c:	2000      	movs	r0, #0
 800889e:	4798      	blx	r3
 80088a0:	b2b3      	uxth	r3, r6
 80088a2:	2200      	movs	r2, #0
 80088a4:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 80088a6:	9206      	str	r2, [sp, #24]
 80088a8:	eef0 7a69 	vmov.f32	s15, s19
 80088ac:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80088b0:	e5d9      	b.n	8008466 <acc_detector_distance_processor_process+0x1da>
 80088b2:	bf00      	nop
 80088b4:	20000610 	.word	0x20000610
 80088b8:	08014fcc 	.word	0x08014fcc
 80088bc:	08014ec0 	.word	0x08014ec0

080088c0 <acc_detector_distance_processor_measurement_type_get>:
 80088c0:	b508      	push	{r3, lr}
 80088c2:	b118      	cbz	r0, 80088cc <acc_detector_distance_processor_measurement_type_get+0xc>
 80088c4:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <acc_detector_distance_processor_measurement_type_get+0x20>)
 80088c6:	6802      	ldr	r2, [r0, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d007      	beq.n	80088dc <acc_detector_distance_processor_measurement_type_get+0x1c>
 80088cc:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <acc_detector_distance_processor_measurement_type_get+0x24>)
 80088ce:	4a06      	ldr	r2, [pc, #24]	@ (80088e8 <acc_detector_distance_processor_measurement_type_get+0x28>)
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	4906      	ldr	r1, [pc, #24]	@ (80088ec <acc_detector_distance_processor_measurement_type_get+0x2c>)
 80088d4:	2000      	movs	r0, #0
 80088d6:	4798      	blx	r3
 80088d8:	2000      	movs	r0, #0
 80088da:	bd08      	pop	{r3, pc}
 80088dc:	7940      	ldrb	r0, [r0, #5]
 80088de:	bd08      	pop	{r3, pc}
 80088e0:	0fa1afe1 	.word	0x0fa1afe1
 80088e4:	20000610 	.word	0x20000610
 80088e8:	08014edc 	.word	0x08014edc
 80088ec:	08014ec0 	.word	0x08014ec0

080088f0 <acc_detector_distance_processor_profile_get>:
 80088f0:	b508      	push	{r3, lr}
 80088f2:	b118      	cbz	r0, 80088fc <acc_detector_distance_processor_profile_get+0xc>
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <acc_detector_distance_processor_profile_get+0x20>)
 80088f6:	6802      	ldr	r2, [r0, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d007      	beq.n	800890c <acc_detector_distance_processor_profile_get+0x1c>
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <acc_detector_distance_processor_profile_get+0x24>)
 80088fe:	4a06      	ldr	r2, [pc, #24]	@ (8008918 <acc_detector_distance_processor_profile_get+0x28>)
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	4906      	ldr	r1, [pc, #24]	@ (800891c <acc_detector_distance_processor_profile_get+0x2c>)
 8008904:	2000      	movs	r0, #0
 8008906:	4798      	blx	r3
 8008908:	2001      	movs	r0, #1
 800890a:	bd08      	pop	{r3, pc}
 800890c:	7f80      	ldrb	r0, [r0, #30]
 800890e:	bd08      	pop	{r3, pc}
 8008910:	0fa1afe1 	.word	0x0fa1afe1
 8008914:	20000610 	.word	0x20000610
 8008918:	08014edc 	.word	0x08014edc
 800891c:	08014ec0 	.word	0x08014ec0

08008920 <validate_distance_settings>:
 8008920:	edd0 7a01 	vldr	s15, [r0, #4]
 8008924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892c:	b510      	push	{r4, lr}
 800892e:	4604      	mov	r4, r0
 8008930:	d45c      	bmi.n	80089ec <validate_distance_settings+0xcc>
 8008932:	2001      	movs	r0, #1
 8008934:	edd4 7a02 	vldr	s15, [r4, #8]
 8008938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008940:	d508      	bpl.n	8008954 <validate_distance_settings+0x34>
 8008942:	4b2e      	ldr	r3, [pc, #184]	@ (80089fc <validate_distance_settings+0xdc>)
 8008944:	4a2e      	ldr	r2, [pc, #184]	@ (8008a00 <validate_distance_settings+0xe0>)
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	492e      	ldr	r1, [pc, #184]	@ (8008a04 <validate_distance_settings+0xe4>)
 800894a:	2000      	movs	r0, #0
 800894c:	4798      	blx	r3
 800894e:	edd4 7a02 	vldr	s15, [r4, #8]
 8008952:	2000      	movs	r0, #0
 8008954:	ed94 7a01 	vldr	s14, [r4, #4]
 8008958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800895c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008960:	dd08      	ble.n	8008974 <validate_distance_settings+0x54>
 8008962:	4b26      	ldr	r3, [pc, #152]	@ (80089fc <validate_distance_settings+0xdc>)
 8008964:	4a28      	ldr	r2, [pc, #160]	@ (8008a08 <validate_distance_settings+0xe8>)
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	4926      	ldr	r1, [pc, #152]	@ (8008a04 <validate_distance_settings+0xe4>)
 800896a:	2000      	movs	r0, #0
 800896c:	4798      	blx	r3
 800896e:	edd4 7a02 	vldr	s15, [r4, #8]
 8008972:	2000      	movs	r0, #0
 8008974:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8008978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800897c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008980:	dd06      	ble.n	8008990 <validate_distance_settings+0x70>
 8008982:	4b1e      	ldr	r3, [pc, #120]	@ (80089fc <validate_distance_settings+0xdc>)
 8008984:	4a21      	ldr	r2, [pc, #132]	@ (8008a0c <validate_distance_settings+0xec>)
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	491e      	ldr	r1, [pc, #120]	@ (8008a04 <validate_distance_settings+0xe4>)
 800898a:	2000      	movs	r0, #0
 800898c:	4798      	blx	r3
 800898e:	2000      	movs	r0, #0
 8008990:	edd4 7a04 	vldr	s15, [r4, #16]
 8008994:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8008998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800899c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a0:	d41c      	bmi.n	80089dc <validate_distance_settings+0xbc>
 80089a2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8008a10 <validate_distance_settings+0xf0>
 80089a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ae:	dc15      	bgt.n	80089dc <validate_distance_settings+0xbc>
 80089b0:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 80089b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	d406      	bmi.n	80089cc <validate_distance_settings+0xac>
 80089be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ca:	dd06      	ble.n	80089da <validate_distance_settings+0xba>
 80089cc:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <validate_distance_settings+0xdc>)
 80089ce:	4a11      	ldr	r2, [pc, #68]	@ (8008a14 <validate_distance_settings+0xf4>)
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	490c      	ldr	r1, [pc, #48]	@ (8008a04 <validate_distance_settings+0xe4>)
 80089d4:	2000      	movs	r0, #0
 80089d6:	4798      	blx	r3
 80089d8:	2000      	movs	r0, #0
 80089da:	bd10      	pop	{r4, pc}
 80089dc:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <validate_distance_settings+0xdc>)
 80089de:	4a0e      	ldr	r2, [pc, #56]	@ (8008a18 <validate_distance_settings+0xf8>)
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	4908      	ldr	r1, [pc, #32]	@ (8008a04 <validate_distance_settings+0xe4>)
 80089e4:	2000      	movs	r0, #0
 80089e6:	4798      	blx	r3
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7e1      	b.n	80089b0 <validate_distance_settings+0x90>
 80089ec:	4b03      	ldr	r3, [pc, #12]	@ (80089fc <validate_distance_settings+0xdc>)
 80089ee:	4a0b      	ldr	r2, [pc, #44]	@ (8008a1c <validate_distance_settings+0xfc>)
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	4904      	ldr	r1, [pc, #16]	@ (8008a04 <validate_distance_settings+0xe4>)
 80089f4:	2000      	movs	r0, #0
 80089f6:	4798      	blx	r3
 80089f8:	2000      	movs	r0, #0
 80089fa:	e79b      	b.n	8008934 <validate_distance_settings+0x14>
 80089fc:	20000610 	.word	0x20000610
 8008a00:	0801507c 	.word	0x0801507c
 8008a04:	08015058 	.word	0x08015058
 8008a08:	08015094 	.word	0x08015094
 8008a0c:	080150b0 	.word	0x080150b0
 8008a10:	420c0000 	.word	0x420c0000
 8008a14:	08015104 	.word	0x08015104
 8008a18:	080150d8 	.word	0x080150d8
 8008a1c:	0801503c 	.word	0x0801503c

08008a20 <select_prf>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	ee07 0a90 	vmov	s15, r0
 8008a26:	ed2d 8b02 	vpush	{d8}
 8008a2a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8008a2e:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8008ab0 <select_prf+0x90>
 8008a32:	2000      	movs	r0, #0
 8008a34:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008a38:	460c      	mov	r4, r1
 8008a3a:	f003 fbdd 	bl	800c1f8 <acc_detector_utils_max_measurable_dist>
 8008a3e:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	dd01      	ble.n	8008a4c <select_prf+0x2c>
 8008a48:	2c01      	cmp	r4, #1
 8008a4a:	d00b      	beq.n	8008a64 <select_prf+0x44>
 8008a4c:	2001      	movs	r0, #1
 8008a4e:	f003 fbd3 	bl	800c1f8 <acc_detector_utils_max_measurable_dist>
 8008a52:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5a:	dd07      	ble.n	8008a6c <select_prf+0x4c>
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	ecbd 8b02 	vpop	{d8}
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	ecbd 8b02 	vpop	{d8}
 8008a68:	2000      	movs	r0, #0
 8008a6a:	bd10      	pop	{r4, pc}
 8008a6c:	2002      	movs	r0, #2
 8008a6e:	f003 fbc3 	bl	800c1f8 <acc_detector_utils_max_measurable_dist>
 8008a72:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7a:	dd03      	ble.n	8008a84 <select_prf+0x64>
 8008a7c:	ecbd 8b02 	vpop	{d8}
 8008a80:	2002      	movs	r0, #2
 8008a82:	bd10      	pop	{r4, pc}
 8008a84:	2003      	movs	r0, #3
 8008a86:	f003 fbb7 	bl	800c1f8 <acc_detector_utils_max_measurable_dist>
 8008a8a:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	dc0a      	bgt.n	8008aaa <select_prf+0x8a>
 8008a94:	2004      	movs	r0, #4
 8008a96:	f003 fbaf 	bl	800c1f8 <acc_detector_utils_max_measurable_dist>
 8008a9a:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8008a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa2:	bfcc      	ite	gt
 8008aa4:	2004      	movgt	r0, #4
 8008aa6:	2005      	movle	r0, #5
 8008aa8:	e7d9      	b.n	8008a5e <select_prf+0x3e>
 8008aaa:	2003      	movs	r0, #3
 8008aac:	e7d7      	b.n	8008a5e <select_prf+0x3e>
 8008aae:	bf00      	nop
 8008ab0:	3b23d70a 	.word	0x3b23d70a

08008ab4 <sg_get_breakpoint_margin.constprop.0>:
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	460d      	mov	r5, r1
 8008aba:	4617      	mov	r7, r2
 8008abc:	461e      	mov	r6, r3
 8008abe:	4680      	mov	r8, r0
 8008ac0:	f7fe f878 	bl	8006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8008ac4:	fb15 f400 	smulbb	r4, r5, r0
 8008ac8:	b2a4      	uxth	r4, r4
 8008aca:	b10f      	cbz	r7, 8008ad0 <sg_get_breakpoint_margin.constprop.0+0x1c>
 8008acc:	0064      	lsls	r4, r4, #1
 8008ace:	b2a4      	uxth	r4, r4
 8008ad0:	2e03      	cmp	r6, #3
 8008ad2:	d002      	beq.n	8008ada <sg_get_breakpoint_margin.constprop.0+0x26>
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ada:	4640      	mov	r0, r8
 8008adc:	f003 fb6c 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f7fe f98f 	bl	8006e04 <acc_detector_distance_alg_cfar_margin>
 8008ae6:	fb15 4000 	smlabb	r0, r5, r0, r4
 8008aea:	b284      	uxth	r4, r0
 8008aec:	4620      	mov	r0, r4
 8008aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af2:	bf00      	nop

08008af4 <acc_detector_distance_translation_limit_step_length>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	460c      	mov	r4, r1
 8008af8:	f003 fb5e 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8008afc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008b64 <acc_detector_distance_translation_limit_step_length+0x70>
 8008b00:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8008b04:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8008b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b10:	ee17 3a90 	vmov	r3, s15
 8008b14:	b298      	uxth	r0, r3
 8008b16:	b114      	cbz	r4, 8008b1e <acc_detector_distance_translation_limit_step_length+0x2a>
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	bf28      	it	cs
 8008b1c:	4620      	movcs	r0, r4
 8008b1e:	2818      	cmp	r0, #24
 8008b20:	d817      	bhi.n	8008b52 <acc_detector_distance_translation_limit_step_length+0x5e>
 8008b22:	b1a0      	cbz	r0, 8008b4e <acc_detector_distance_translation_limit_step_length+0x5a>
 8008b24:	2218      	movs	r2, #24
 8008b26:	fbb2 f3f0 	udiv	r3, r2, r0
 8008b2a:	fb00 f303 	mul.w	r3, r0, r3
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	b943      	cbnz	r3, 8008b46 <acc_detector_distance_translation_limit_step_length+0x52>
 8008b34:	e00c      	b.n	8008b50 <acc_detector_distance_translation_limit_step_length+0x5c>
 8008b36:	fbb2 f3f0 	udiv	r3, r2, r0
 8008b3a:	fb00 f303 	mul.w	r3, r0, r3
 8008b3e:	f1c3 0318 	rsb	r3, r3, #24
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	b123      	cbz	r3, 8008b50 <acc_detector_distance_translation_limit_step_length+0x5c>
 8008b46:	3801      	subs	r0, #1
 8008b48:	b280      	uxth	r0, r0
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1f3      	bne.n	8008b36 <acc_detector_distance_translation_limit_step_length+0x42>
 8008b4e:	2001      	movs	r0, #1
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	4b05      	ldr	r3, [pc, #20]	@ (8008b68 <acc_detector_distance_translation_limit_step_length+0x74>)
 8008b54:	fba3 3000 	umull	r3, r0, r3, r0
 8008b58:	0900      	lsrs	r0, r0, #4
 8008b5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008b5e:	00c0      	lsls	r0, r0, #3
 8008b60:	b280      	uxth	r0, r0
 8008b62:	bd10      	pop	{r4, pc}
 8008b64:	3b23d70a 	.word	0x3b23d70a
 8008b68:	aaaaaaab 	.word	0xaaaaaaab

08008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	ed2d 8b02 	vpush	{d8}
 8008b72:	4614      	mov	r4, r2
 8008b74:	460e      	mov	r6, r1
 8008b76:	4605      	mov	r5, r0
 8008b78:	f003 fb4c 	bl	800c214 <acc_detector_utils_min_leakage_free_dist>
 8008b7c:	2c03      	cmp	r4, #3
 8008b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8008b82:	d004      	beq.n	8008b8e <acc_detector_distance_translation_calc_leakage_free_min_dist+0x22>
 8008b84:	eeb0 0a48 	vmov.f32	s0, s16
 8008b88:	ecbd 8b02 	vpop	{d8}
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	f7ff ffaf 	bl	8008af4 <acc_detector_distance_translation_limit_step_length>
 8008b96:	4604      	mov	r4, r0
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f003 fb0d 	bl	800c1b8 <acc_detector_utils_get_fwhm>
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7fe f930 	bl	8006e04 <acc_detector_distance_alg_cfar_margin>
 8008ba4:	ee07 4a90 	vmov	s15, r4
 8008ba8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008bd0 <acc_detector_distance_translation_calc_leakage_free_min_dist+0x64>
 8008bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb0:	ee07 0a10 	vmov	s14, r0
 8008bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008bb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bc0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008bc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008bc8:	ecbd 8b02 	vpop	{d8}
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	bf00      	nop
 8008bd0:	3b23d70a 	.word	0x3b23d70a

08008bd4 <will_have_transition>:
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	ed2d 8b02 	vpush	{d8}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	7d02      	ldrb	r2, [r0, #20]
 8008bde:	8981      	ldrh	r1, [r0, #12]
 8008be0:	7b80      	ldrb	r0, [r0, #14]
 8008be2:	f7ff ffc3 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008be6:	7d22      	ldrb	r2, [r4, #20]
 8008be8:	89a1      	ldrh	r1, [r4, #12]
 8008bea:	2001      	movs	r0, #1
 8008bec:	eeb0 8a40 	vmov.f32	s16, s0
 8008bf0:	f7ff ffbc 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008bf4:	edd4 7a02 	vldr	s15, [r4, #8]
 8008bf8:	eef4 7ac0 	vcmpe.f32	s15, s0
 8008bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c00:	dc02      	bgt.n	8008c08 <will_have_transition+0x34>
 8008c02:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008c06:	b95b      	cbnz	r3, 8008c20 <will_have_transition+0x4c>
 8008c08:	edd4 7a01 	vldr	s15, [r4, #4]
 8008c0c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008c10:	ecbd 8b02 	vpop	{d8}
 8008c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c18:	bf4c      	ite	mi
 8008c1a:	2001      	movmi	r0, #1
 8008c1c:	2000      	movpl	r0, #0
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	ecbd 8b02 	vpop	{d8}
 8008c24:	2000      	movs	r0, #0
 8008c26:	bd10      	pop	{r4, pc}

08008c28 <acc_detector_distance_translation_calculate_hwaas>:
 8008c28:	b500      	push	{lr}
 8008c2a:	ed2d 8b04 	vpush	{d8-d9}
 8008c2e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8008c32:	b083      	sub	sp, #12
 8008c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c38:	9001      	str	r0, [sp, #4]
 8008c3a:	d80b      	bhi.n	8008c54 <acc_detector_distance_translation_calculate_hwaas+0x2c>
 8008c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce8 <acc_detector_distance_translation_calculate_hwaas+0xc0>)
 8008c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8008cec <acc_detector_distance_translation_calculate_hwaas+0xc4>)
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	492b      	ldr	r1, [pc, #172]	@ (8008cf0 <acc_detector_distance_translation_calculate_hwaas+0xc8>)
 8008c44:	2000      	movs	r0, #0
 8008c46:	4798      	blx	r3
 8008c48:	2000      	movs	r0, #0
 8008c4a:	b003      	add	sp, #12
 8008c4c:	ecbd 8b04 	vpop	{d8-d9}
 8008c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c54:	4608      	mov	r0, r1
 8008c56:	eeb0 9a41 	vmov.f32	s18, s2
 8008c5a:	eef0 8a60 	vmov.f32	s17, s1
 8008c5e:	eef0 9a40 	vmov.f32	s19, s0
 8008c62:	f000 fd53 	bl	800970c <acc_detector_distance_utils_reflector_shape_exponent_get>
 8008c66:	eddd 7a01 	vldr	s15, [sp, #4]
 8008c6a:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8008cf4 <acc_detector_distance_translation_calculate_hwaas+0xcc>
 8008c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c72:	eeb0 8a40 	vmov.f32	s16, s0
 8008c76:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8008c7a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008c7e:	f00a f801 	bl	8012c84 <fmaxf>
 8008c82:	f009 fe03 	bl	801288c <log10f>
 8008c86:	eeb0 7a40 	vmov.f32	s14, s0
 8008c8a:	eeb0 0a68 	vmov.f32	s0, s17
 8008c8e:	eef0 8a47 	vmov.f32	s17, s14
 8008c92:	f009 fdfb 	bl	801288c <log10f>
 8008c96:	eeb0 1a40 	vmov.f32	s2, s0
 8008c9a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008c9e:	ee68 6a00 	vmul.f32	s13, s16, s0
 8008ca2:	ee26 7aa8 	vmul.f32	s14, s13, s17
 8008ca6:	ee77 7a29 	vadd.f32	s15, s14, s19
 8008caa:	ee37 8ac1 	vsub.f32	s16, s15, s2
 8008cae:	ee78 0a49 	vsub.f32	s1, s16, s18
 8008cb2:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8008cb6:	f009 fe17 	bl	80128e8 <powf>
 8008cba:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008cbe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008cc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008cc6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008cca:	ee10 2a10 	vmov	r2, s0
 8008cce:	b290      	uxth	r0, r2
 8008cd0:	2801      	cmp	r0, #1
 8008cd2:	bf38      	it	cc
 8008cd4:	2001      	movcc	r0, #1
 8008cd6:	4298      	cmp	r0, r3
 8008cd8:	bf28      	it	cs
 8008cda:	4618      	movcs	r0, r3
 8008cdc:	b003      	add	sp, #12
 8008cde:	ecbd 8b04 	vpop	{d8-d9}
 8008ce2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ce6:	bf00      	nop
 8008ce8:	20000610 	.word	0x20000610
 8008cec:	08015134 	.word	0x08015134
 8008cf0:	08015058 	.word	0x08015058
 8008cf4:	3b23d70a 	.word	0x3b23d70a

08008cf8 <create_group_plans>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	ed2d 8b08 	vpush	{d8-d11}
 8008d00:	4604      	mov	r4, r0
 8008d02:	ed90 8a01 	vldr	s16, [r0, #4]
 8008d06:	7d02      	ldrb	r2, [r0, #20]
 8008d08:	b08b      	sub	sp, #44	@ 0x2c
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	8981      	ldrh	r1, [r0, #12]
 8008d0e:	2001      	movs	r0, #1
 8008d10:	f7ff ff2c 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008d14:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	d523      	bpl.n	8008d66 <create_group_plans+0x6e>
 8008d1e:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8008d22:	f1bb 0f00 	cmp.w	fp, #0
 8008d26:	d134      	bne.n	8008d92 <create_group_plans+0x9a>
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7ff ff53 	bl	8008bd4 <will_have_transition>
 8008d2e:	f894 a00e 	ldrb.w	sl, [r4, #14]
 8008d32:	4606      	mov	r6, r0
 8008d34:	bb08      	cbnz	r0, 8008d7a <create_group_plans+0x82>
 8008d36:	4607      	mov	r7, r0
 8008d38:	7d22      	ldrb	r2, [r4, #20]
 8008d3a:	89a1      	ldrh	r1, [r4, #12]
 8008d3c:	4650      	mov	r0, sl
 8008d3e:	f7ff ff15 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008d42:	edd4 7a02 	vldr	s15, [r4, #8]
 8008d46:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4e:	f100 808c 	bmi.w	8008e6a <create_group_plans+0x172>
 8008d52:	f1bb 0f00 	cmp.w	fp, #0
 8008d56:	d000      	beq.n	8008d5a <create_group_plans+0x62>
 8008d58:	2601      	movs	r6, #1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	b00b      	add	sp, #44	@ 0x2c
 8008d5e:	ecbd 8b08 	vpop	{d8-d11}
 8008d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7ff ff34 	bl	8008bd4 <will_have_transition>
 8008d6c:	f04f 0b00 	mov.w	fp, #0
 8008d70:	f894 a00e 	ldrb.w	sl, [r4, #14]
 8008d74:	4606      	mov	r6, r0
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0dd      	beq.n	8008d36 <create_group_plans+0x3e>
 8008d7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	f200 8298 	bhi.w	80092b4 <create_group_plans+0x5bc>
 8008d84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008d88:	025d016e 	.word	0x025d016e
 8008d8c:	02520256 	.word	0x02520256
 8008d90:	0176      	.short	0x0176
 8008d92:	89a1      	ldrh	r1, [r4, #12]
 8008d94:	2001      	movs	r0, #1
 8008d96:	f7ff fead 	bl	8008af4 <acc_detector_distance_translation_limit_step_length>
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	2001      	movs	r0, #1
 8008da0:	f7fe fc12 	bl	80075c8 <acc_detector_distance_alg_calc_processing_gain>
 8008da4:	2001      	movs	r0, #1
 8008da6:	4680      	mov	r8, r0
 8008da8:	eeb0 8a40 	vmov.f32	s16, s0
 8008dac:	f003 fa14 	bl	800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>
 8008db0:	4631      	mov	r1, r6
 8008db2:	f885 8002 	strb.w	r8, [r5, #2]
 8008db6:	4640      	mov	r0, r8
 8008db8:	802e      	strh	r6, [r5, #0]
 8008dba:	eef0 8a40 	vmov.f32	s17, s0
 8008dbe:	f7fd fef9 	bl	8006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff ff05 	bl	8008bd4 <will_have_transition>
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4681      	mov	r9, r0
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7fd fef0 	bl	8006bb4 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 8008dd4:	fb16 f000 	smulbb	r0, r6, r0
 8008dd8:	fa1f f880 	uxth.w	r8, r0
 8008ddc:	f1b9 0f00 	cmp.w	r9, #0
 8008de0:	d003      	beq.n	8008dea <create_group_plans+0xf2>
 8008de2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8008de6:	fa1f f888 	uxth.w	r8, r8
 8008dea:	7d22      	ldrb	r2, [r4, #20]
 8008dec:	89a1      	ldrh	r1, [r4, #12]
 8008dee:	ed94 9a02 	vldr	s18, [r4, #8]
 8008df2:	2001      	movs	r0, #1
 8008df4:	f7ff feba 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008df8:	eef0 0a40 	vmov.f32	s1, s0
 8008dfc:	eeb0 0a49 	vmov.f32	s0, s18
 8008e00:	f009 ff5d 	bl	8012cbe <fminf>
 8008e04:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 80090a8 <create_group_plans+0x3b0>
 8008e08:	ed94 6a01 	vldr	s12, [r4, #4]
 8008e0c:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8008e10:	2302      	movs	r3, #2
 8008e12:	75ab      	strb	r3, [r5, #22]
 8008e14:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e20:	ee17 3a90 	vmov	r3, s15
 8008e24:	ee17 2a10 	vmov	r2, s14
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	fbb3 f3f6 	udiv	r3, r3, r6
 8008e2e:	fb13 f306 	smulbb	r3, r3, r6
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	b290      	uxth	r0, r2
 8008e36:	fbb0 f0f6 	udiv	r0, r0, r6
 8008e3a:	1bc7      	subs	r7, r0, r7
 8008e3c:	4498      	add	r8, r3
 8008e3e:	fb17 f606 	smulbb	r6, r7, r6
 8008e42:	f8a5 8006 	strh.w	r8, [r5, #6]
 8008e46:	80ae      	strh	r6, [r5, #4]
 8008e48:	b218      	sxth	r0, r3
 8008e4a:	7da1      	ldrb	r1, [r4, #22]
 8008e4c:	ed94 0a04 	vldr	s0, [r4, #16]
 8008e50:	eeb0 1a68 	vmov.f32	s2, s17
 8008e54:	eef0 0a48 	vmov.f32	s1, s16
 8008e58:	f7ff fee6 	bl	8008c28 <acc_detector_distance_translation_calculate_hwaas>
 8008e5c:	f895 30c0 	ldrb.w	r3, [r5, #192]	@ 0xc0
 8008e60:	81e8      	strh	r0, [r5, #14]
 8008e62:	3301      	adds	r3, #1
 8008e64:	f885 30c0 	strb.w	r3, [r5, #192]	@ 0xc0
 8008e68:	e75e      	b.n	8008d28 <create_group_plans+0x30>
 8008e6a:	7d22      	ldrb	r2, [r4, #20]
 8008e6c:	89a1      	ldrh	r1, [r4, #12]
 8008e6e:	7ba0      	ldrb	r0, [r4, #14]
 8008e70:	f7ff fe7c 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 8008e74:	eef0 0a40 	vmov.f32	s1, s0
 8008e78:	ed94 0a01 	vldr	s0, [r4, #4]
 8008e7c:	f009 ff02 	bl	8012c84 <fmaxf>
 8008e80:	edd4 6a02 	vldr	s13, [r4, #8]
 8008e84:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8008e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8c:	f300 80d5 	bgt.w	800903a <create_group_plans+0x342>
 8008e90:	f1c7 0a05 	rsb	sl, r7, #5
 8008e94:	fa5f fa8a 	uxtb.w	sl, sl
 8008e98:	f1ba 0f01 	cmp.w	sl, #1
 8008e9c:	f240 80cd 	bls.w	800903a <create_group_plans+0x342>
 8008ea0:	ee07 aa90 	vmov	s15, sl
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008eb0:	ee36 6ac0 	vsub.f32	s12, s13, s0
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8008eba:	4613      	mov	r3, r2
 8008ebc:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008ec0:	a80a      	add	r0, sp, #40	@ 0x28
 8008ec2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	3301      	adds	r3, #1
 8008ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008eda:	4299      	cmp	r1, r3
 8008edc:	ed42 7a05 	vstr	s15, [r2, #-20]	@ 0xffffffec
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	d8ed      	bhi.n	8008ec0 <create_group_plans+0x1c8>
 8008ee4:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 8008ee8:	ed43 6a06 	vstr	s13, [r3, #-24]	@ 0xffffffe8
 8008eec:	89a1      	ldrh	r1, [r4, #12]
 8008eee:	7ba0      	ldrb	r0, [r4, #14]
 8008ef0:	f7ff fe00 	bl	8008af4 <acc_detector_distance_translation_limit_step_length>
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	4680      	mov	r8, r0
 8008ef8:	7ba0      	ldrb	r0, [r4, #14]
 8008efa:	f7fe fb65 	bl	80075c8 <acc_detector_distance_alg_calc_processing_gain>
 8008efe:	7ba0      	ldrb	r0, [r4, #14]
 8008f00:	eef0 8a40 	vmov.f32	s17, s0
 8008f04:	f003 f968 	bl	800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>
 8008f08:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8008f0c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8008f10:	f894 900e 	ldrb.w	r9, [r4, #14]
 8008f14:	f883 9062 	strb.w	r9, [r3, #98]	@ 0x62
 8008f18:	f1c7 0204 	rsb	r2, r7, #4
 8008f1c:	f8a3 8060 	strh.w	r8, [r3, #96]	@ 0x60
 8008f20:	f883 a076 	strb.w	sl, [r3, #118]	@ 0x76
 8008f24:	f012 0fff 	tst.w	r2, #255	@ 0xff
 8008f28:	ea4f 0347 	mov.w	r3, r7, lsl #1
 8008f2c:	eeb0 9a40 	vmov.f32	s18, s0
 8008f30:	9301      	str	r3, [sp, #4]
 8008f32:	f000 818d 	beq.w	8009250 <create_group_plans+0x558>
 8008f36:	f1c7 0903 	rsb	r9, r7, #3
 8008f3a:	fa5f f989 	uxtb.w	r9, r9
 8008f3e:	f04f 0a18 	mov.w	sl, #24
 8008f42:	ab06      	add	r3, sp, #24
 8008f44:	fb0a 5a07 	mla	sl, sl, r7, r5
 8008f48:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008f4c:	ed9f 8a56 	vldr	s16, [pc, #344]	@ 80090a8 <create_group_plans+0x3b0>
 8008f50:	9502      	str	r5, [sp, #8]
 8008f52:	f10d 0914 	add.w	r9, sp, #20
 8008f56:	4625      	mov	r5, r4
 8008f58:	f10a 0a64 	add.w	sl, sl, #100	@ 0x64
 8008f5c:	464c      	mov	r4, r9
 8008f5e:	4699      	mov	r9, r3
 8008f60:	edd4 6a00 	vldr	s13, [r4]
 8008f64:	ed95 0a04 	vldr	s0, [r5, #16]
 8008f68:	ed94 7a01 	vldr	s14, [r4, #4]
 8008f6c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8008f70:	3404      	adds	r4, #4
 8008f72:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8008f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008f7e:	ee17 3a90 	vmov	r3, s15
 8008f82:	b298      	uxth	r0, r3
 8008f84:	ee17 3a10 	vmov	r3, s14
 8008f88:	fbb0 f0f8 	udiv	r0, r0, r8
 8008f8c:	fb10 f008 	smulbb	r0, r0, r8
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	b200      	sxth	r0, r0
 8008f94:	fbb2 f2f8 	udiv	r2, r2, r8
 8008f98:	fb12 f208 	smulbb	r2, r2, r8
 8008f9c:	f8aa 2000 	strh.w	r2, [sl]
 8008fa0:	f82a 0f02 	strh.w	r0, [sl, #2]!
 8008fa4:	eeb0 1a49 	vmov.f32	s2, s18
 8008fa8:	7da9      	ldrb	r1, [r5, #22]
 8008faa:	eef0 0a68 	vmov.f32	s1, s17
 8008fae:	f7ff fe3b 	bl	8008c28 <acc_detector_distance_translation_calculate_hwaas>
 8008fb2:	454c      	cmp	r4, r9
 8008fb4:	f8aa 0008 	strh.w	r0, [sl, #8]
 8008fb8:	d1d2      	bne.n	8008f60 <create_group_plans+0x268>
 8008fba:	462c      	mov	r4, r5
 8008fbc:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8008fc0:	19d8      	adds	r0, r3, r7
 8008fc2:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 8008fc6:	f894 900e 	ldrb.w	r9, [r4, #14]
 8008fca:	f89c 3076 	ldrb.w	r3, [ip, #118]	@ 0x76
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	f240 813e 	bls.w	8009250 <create_group_plans+0x558>
 8008fd4:	0080      	lsls	r0, r0, #2
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	e009      	b.n	8008fee <create_group_plans+0x2f6>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	f89c 3076 	ldrb.w	r3, [ip, #118]	@ 0x76
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	428b      	cmp	r3, r1
 8008fe4:	f240 8134 	bls.w	8009250 <create_group_plans+0x558>
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	f240 8131 	bls.w	8009250 <create_group_plans+0x558>
 8008fee:	1842      	adds	r2, r0, r1
 8008ff0:	eb05 0e42 	add.w	lr, r5, r2, lsl #1
 8008ff4:	4672      	mov	r2, lr
 8008ff6:	f9be e064 	ldrsh.w	lr, [lr, #100]	@ 0x64
 8008ffa:	f9b2 a062 	ldrsh.w	sl, [r2, #98]	@ 0x62
 8008ffe:	45d6      	cmp	lr, sl
 8009000:	460a      	mov	r2, r1
 8009002:	d1ea      	bne.n	8008fda <create_group_plans+0x2e2>
 8009004:	f103 3eff 	add.w	lr, r3, #4294967295
 8009008:	4571      	cmp	r1, lr
 800900a:	bf38      	it	cc
 800900c:	460b      	movcc	r3, r1
 800900e:	d20f      	bcs.n	8009030 <create_group_plans+0x338>
 8009010:	4402      	add	r2, r0
 8009012:	eb00 0a03 	add.w	sl, r0, r3
 8009016:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800901a:	3301      	adds	r3, #1
 800901c:	b29b      	uxth	r3, r3
 800901e:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 8009022:	f9b2 2066 	ldrsh.w	r2, [r2, #102]	@ 0x66
 8009026:	f8aa 2064 	strh.w	r2, [sl, #100]	@ 0x64
 800902a:	4573      	cmp	r3, lr
 800902c:	461a      	mov	r2, r3
 800902e:	d3ef      	bcc.n	8009010 <create_group_plans+0x318>
 8009030:	fa5f f38e 	uxtb.w	r3, lr
 8009034:	f88c 3076 	strb.w	r3, [ip, #118]	@ 0x76
 8009038:	e7d3      	b.n	8008fe2 <create_group_plans+0x2ea>
 800903a:	4b1c      	ldr	r3, [pc, #112]	@ (80090ac <create_group_plans+0x3b4>)
 800903c:	4a1c      	ldr	r2, [pc, #112]	@ (80090b0 <create_group_plans+0x3b8>)
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	491c      	ldr	r1, [pc, #112]	@ (80090b4 <create_group_plans+0x3bc>)
 8009042:	2000      	movs	r0, #0
 8009044:	4798      	blx	r3
 8009046:	2200      	movs	r2, #0
 8009048:	f895 30c1 	ldrb.w	r3, [r5, #193]	@ 0xc1
 800904c:	3301      	adds	r3, #1
 800904e:	f885 30c1 	strb.w	r3, [r5, #193]	@ 0xc1
 8009052:	f1bb 0f00 	cmp.w	fp, #0
 8009056:	f47f ae7f 	bne.w	8008d58 <create_group_plans+0x60>
 800905a:	2e00      	cmp	r6, #0
 800905c:	f47f ae7c 	bne.w	8008d58 <create_group_plans+0x60>
 8009060:	4616      	mov	r6, r2
 8009062:	e67a      	b.n	8008d5a <create_group_plans+0x62>
 8009064:	2600      	movs	r6, #0
 8009066:	4637      	mov	r7, r6
 8009068:	f895 30c1 	ldrb.w	r3, [r5, #193]	@ 0xc1
 800906c:	443b      	add	r3, r7
 800906e:	f885 30c1 	strb.w	r3, [r5, #193]	@ 0xc1
 8009072:	e661      	b.n	8008d38 <create_group_plans+0x40>
 8009074:	f240 3201 	movw	r2, #769	@ 0x301
 8009078:	2305      	movs	r3, #5
 800907a:	f88d 3016 	strb.w	r3, [sp, #22]
 800907e:	2302      	movs	r3, #2
 8009080:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009084:	f04f 0a03 	mov.w	sl, #3
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	f105 0360 	add.w	r3, r5, #96	@ 0x60
 800908e:	2700      	movs	r7, #0
 8009090:	f8cd b008 	str.w	fp, [sp, #8]
 8009094:	9503      	str	r5, [sp, #12]
 8009096:	eddf aa04 	vldr	s21, [pc, #16]	@ 80090a8 <create_group_plans+0x3b0>
 800909a:	46b9      	mov	r9, r7
 800909c:	f04f 0801 	mov.w	r8, #1
 80090a0:	469b      	mov	fp, r3
 80090a2:	4655      	mov	r5, sl
 80090a4:	e09e      	b.n	80091e4 <create_group_plans+0x4ec>
 80090a6:	bf00      	nop
 80090a8:	3b23d70a 	.word	0x3b23d70a
 80090ac:	20000610 	.word	0x20000610
 80090b0:	0801515c 	.word	0x0801515c
 80090b4:	08015058 	.word	0x08015058
 80090b8:	edd4 9a02 	vldr	s19, [r4, #8]
 80090bc:	eeb4 9ae9 	vcmpe.f32	s18, s19
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	f140 80a4 	bpl.w	8009210 <create_group_plans+0x518>
 80090c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80090cc:	b903      	cbnz	r3, 80090d0 <create_group_plans+0x3d8>
 80090ce:	b13f      	cbz	r7, 80090e0 <create_group_plans+0x3e8>
 80090d0:	eeb0 0a68 	vmov.f32	s0, s17
 80090d4:	eef0 0a49 	vmov.f32	s1, s18
 80090d8:	f009 fdd4 	bl	8012c84 <fmaxf>
 80090dc:	eef0 8a40 	vmov.f32	s17, s0
 80090e0:	eef0 0a48 	vmov.f32	s1, s16
 80090e4:	eeb0 0a69 	vmov.f32	s0, s19
 80090e8:	f009 fde9 	bl	8012cbe <fminf>
 80090ec:	89a1      	ldrh	r1, [r4, #12]
 80090ee:	4640      	mov	r0, r8
 80090f0:	eeb0 9a40 	vmov.f32	s18, s0
 80090f4:	f7ff fcfe 	bl	8008af4 <acc_detector_distance_translation_limit_step_length>
 80090f8:	4601      	mov	r1, r0
 80090fa:	4605      	mov	r5, r0
 80090fc:	4640      	mov	r0, r8
 80090fe:	f7fe fa63 	bl	80075c8 <acc_detector_distance_alg_calc_processing_gain>
 8009102:	4640      	mov	r0, r8
 8009104:	eef0 9a40 	vmov.f32	s19, s0
 8009108:	f003 f866 	bl	800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800910c:	7d22      	ldrb	r2, [r4, #20]
 800910e:	89a1      	ldrh	r1, [r4, #12]
 8009110:	ed94 ba01 	vldr	s22, [r4, #4]
 8009114:	2001      	movs	r0, #1
 8009116:	eeb0 aa40 	vmov.f32	s20, s0
 800911a:	f7ff fd27 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800911e:	eeb4 bac0 	vcmpe.f32	s22, s0
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	d502      	bpl.n	800912e <create_group_plans+0x436>
 8009128:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800912c:	b912      	cbnz	r2, 8009134 <create_group_plans+0x43c>
 800912e:	1e3a      	subs	r2, r7, #0
 8009130:	bf18      	it	ne
 8009132:	2201      	movne	r2, #1
 8009134:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8009138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800913c:	4629      	mov	r1, r5
 800913e:	7d23      	ldrb	r3, [r4, #20]
 8009140:	4640      	mov	r0, r8
 8009142:	bf4c      	ite	mi
 8009144:	2601      	movmi	r6, #1
 8009146:	2600      	movpl	r6, #0
 8009148:	f7ff fcb4 	bl	8008ab4 <sg_get_breakpoint_margin.constprop.0>
 800914c:	4632      	mov	r2, r6
 800914e:	4684      	mov	ip, r0
 8009150:	4629      	mov	r1, r5
 8009152:	7d23      	ldrb	r3, [r4, #20]
 8009154:	4640      	mov	r0, r8
 8009156:	4666      	mov	r6, ip
 8009158:	f7ff fcac 	bl	8008ab4 <sg_get_breakpoint_margin.constprop.0>
 800915c:	ee89 7a2a 	vdiv.f32	s14, s18, s21
 8009160:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8009164:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8009168:	f82b 5033 	strh.w	r5, [fp, r3, lsl #3]
 800916c:	f04f 0302 	mov.w	r3, #2
 8009170:	f88a 3016 	strb.w	r3, [sl, #22]
 8009174:	f88a 8002 	strb.w	r8, [sl, #2]
 8009178:	3701      	adds	r7, #1
 800917a:	b2ff      	uxtb	r7, r7
 800917c:	eec8 7aaa 	vdiv.f32	s15, s17, s21
 8009180:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009188:	ee17 3a10 	vmov	r3, s14
 800918c:	ee17 2a90 	vmov	r2, s15
 8009190:	b29b      	uxth	r3, r3
 8009192:	fbb3 f3f5 	udiv	r3, r3, r5
 8009196:	fb13 f305 	smulbb	r3, r3, r5
 800919a:	b29b      	uxth	r3, r3
 800919c:	b291      	uxth	r1, r2
 800919e:	fbb1 f1f5 	udiv	r1, r1, r5
 80091a2:	fb11 f505 	smulbb	r5, r1, r5
 80091a6:	4418      	add	r0, r3
 80091a8:	1bae      	subs	r6, r5, r6
 80091aa:	f8aa 0006 	strh.w	r0, [sl, #6]
 80091ae:	f8aa 6004 	strh.w	r6, [sl, #4]
 80091b2:	7da1      	ldrb	r1, [r4, #22]
 80091b4:	ed94 0a04 	vldr	s0, [r4, #16]
 80091b8:	b218      	sxth	r0, r3
 80091ba:	eeb0 1a4a 	vmov.f32	s2, s20
 80091be:	eef0 0a69 	vmov.f32	s1, s19
 80091c2:	f7ff fd31 	bl	8008c28 <acc_detector_distance_translation_calculate_hwaas>
 80091c6:	f8aa 000e 	strh.w	r0, [sl, #14]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	f109 0901 	add.w	r9, r9, #1
 80091d0:	fa1f f989 	uxth.w	r9, r9
 80091d4:	4599      	cmp	r9, r3
 80091d6:	d265      	bcs.n	80092a4 <create_group_plans+0x5ac>
 80091d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80091da:	444b      	add	r3, r9
 80091dc:	f813 8c14 	ldrb.w	r8, [r3, #-20]
 80091e0:	f813 5c13 	ldrb.w	r5, [r3, #-19]
 80091e4:	7d22      	ldrb	r2, [r4, #20]
 80091e6:	89a1      	ldrh	r1, [r4, #12]
 80091e8:	4640      	mov	r0, r8
 80091ea:	f7ff fcbf 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 80091ee:	7d22      	ldrb	r2, [r4, #20]
 80091f0:	89a1      	ldrh	r1, [r4, #12]
 80091f2:	4628      	mov	r0, r5
 80091f4:	eeb0 9a40 	vmov.f32	s18, s0
 80091f8:	f7ff fcb8 	bl	8008b6c <acc_detector_distance_translation_calc_leakage_free_min_dist>
 80091fc:	edd4 8a01 	vldr	s17, [r4, #4]
 8009200:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	eeb0 8a40 	vmov.f32	s16, s0
 800920c:	f73f af54 	bgt.w	80090b8 <create_group_plans+0x3c0>
 8009210:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1d8      	bne.n	80091ca <create_group_plans+0x4d2>
 8009218:	2f00      	cmp	r7, #0
 800921a:	d1d6      	bne.n	80091ca <create_group_plans+0x4d2>
 800921c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	ddd1      	ble.n	80091ca <create_group_plans+0x4d2>
 8009226:	edd4 9a02 	vldr	s19, [r4, #8]
 800922a:	e759      	b.n	80090e0 <create_group_plans+0x3e8>
 800922c:	f240 3201 	movw	r2, #769	@ 0x301
 8009230:	2304      	movs	r3, #4
 8009232:	e722      	b.n	800907a <create_group_plans+0x382>
 8009234:	f240 3301 	movw	r3, #769	@ 0x301
 8009238:	f8ad 3014 	strh.w	r3, [sp, #20]
 800923c:	2301      	movs	r3, #1
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	e723      	b.n	800908a <create_group_plans+0x392>
 8009242:	f240 2301 	movw	r3, #513	@ 0x201
 8009246:	f8ad 3014 	strh.w	r3, [sp, #20]
 800924a:	2301      	movs	r3, #1
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	e71c      	b.n	800908a <create_group_plans+0x392>
 8009250:	4620      	mov	r0, r4
 8009252:	f7ff fcbf 	bl	8008bd4 <will_have_transition>
 8009256:	7d23      	ldrb	r3, [r4, #20]
 8009258:	4602      	mov	r2, r0
 800925a:	4641      	mov	r1, r8
 800925c:	4648      	mov	r0, r9
 800925e:	f7ff fc29 	bl	8008ab4 <sg_get_breakpoint_margin.constprop.0>
 8009262:	7d23      	ldrb	r3, [r4, #20]
 8009264:	4684      	mov	ip, r0
 8009266:	4641      	mov	r1, r8
 8009268:	7ba0      	ldrb	r0, [r4, #14]
 800926a:	2200      	movs	r2, #0
 800926c:	4664      	mov	r4, ip
 800926e:	f7ff fc21 	bl	8008ab4 <sg_get_breakpoint_margin.constprop.0>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	443b      	add	r3, r7
 8009276:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800927a:	230c      	movs	r3, #12
 800927c:	f892 c076 	ldrb.w	ip, [r2, #118]	@ 0x76
 8009280:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 8009284:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009288:	fb13 c707 	smlabb	r7, r3, r7, ip
 800928c:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 8009290:	1b0c      	subs	r4, r1, r4
 8009292:	f8a2 4064 	strh.w	r4, [r2, #100]	@ 0x64
 8009296:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800929a:	4418      	add	r0, r3
 800929c:	f8a7 0064 	strh.w	r0, [r7, #100]	@ 0x64
 80092a0:	2201      	movs	r2, #1
 80092a2:	e6d1      	b.n	8009048 <create_group_plans+0x350>
 80092a4:	1e3e      	subs	r6, r7, #0
 80092a6:	e9dd b502 	ldrd	fp, r5, [sp, #8]
 80092aa:	f894 a00e 	ldrb.w	sl, [r4, #14]
 80092ae:	bf18      	it	ne
 80092b0:	2601      	movne	r6, #1
 80092b2:	e6d9      	b.n	8009068 <create_group_plans+0x370>
 80092b4:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <create_group_plans+0x5d4>)
 80092b6:	4a06      	ldr	r2, [pc, #24]	@ (80092d0 <create_group_plans+0x5d8>)
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	4906      	ldr	r1, [pc, #24]	@ (80092d4 <create_group_plans+0x5dc>)
 80092bc:	2000      	movs	r0, #0
 80092be:	4606      	mov	r6, r0
 80092c0:	4637      	mov	r7, r6
 80092c2:	4798      	blx	r3
 80092c4:	f894 a00e 	ldrb.w	sl, [r4, #14]
 80092c8:	e6ce      	b.n	8009068 <create_group_plans+0x370>
 80092ca:	bf00      	nop
 80092cc:	20000610 	.word	0x20000610
 80092d0:	0801514c 	.word	0x0801514c
 80092d4:	08015058 	.word	0x08015058

080092d8 <processor_specs_translate>:
 80092d8:	2a00      	cmp	r2, #0
 80092da:	d07a      	beq.n	80093d2 <processor_specs_translate+0xfa>
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	b0b3      	sub	sp, #204	@ 0xcc
 80092e2:	4617      	mov	r7, r2
 80092e4:	4606      	mov	r6, r0
 80092e6:	4688      	mov	r8, r1
 80092e8:	a801      	add	r0, sp, #4
 80092ea:	2100      	movs	r1, #0
 80092ec:	22c2      	movs	r2, #194	@ 0xc2
 80092ee:	f007 fbc5 	bl	8010a7c <memset>
 80092f2:	a901      	add	r1, sp, #4
 80092f4:	4638      	mov	r0, r7
 80092f6:	f7ff fcff 	bl	8008cf8 <create_group_plans>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d065      	beq.n	80093ca <processor_specs_translate+0xf2>
 80092fe:	f89d 00c4 	ldrb.w	r0, [sp, #196]	@ 0xc4
 8009302:	b1a0      	cbz	r0, 800932e <processor_specs_translate+0x56>
 8009304:	2e00      	cmp	r6, #0
 8009306:	d066      	beq.n	80093d6 <processor_specs_translate+0xfe>
 8009308:	4540      	cmp	r0, r8
 800930a:	d864      	bhi.n	80093d6 <processor_specs_translate+0xfe>
 800930c:	2302      	movs	r3, #2
 800930e:	8033      	strh	r3, [r6, #0]
 8009310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009312:	6072      	str	r2, [r6, #4]
 8009314:	7dba      	ldrb	r2, [r7, #22]
 8009316:	70b2      	strb	r2, [r6, #2]
 8009318:	69f9      	ldr	r1, [r7, #28]
 800931a:	6a3a      	ldr	r2, [r7, #32]
 800931c:	60b1      	str	r1, [r6, #8]
 800931e:	8b39      	ldrh	r1, [r7, #24]
 8009320:	60f2      	str	r2, [r6, #12]
 8009322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009326:	7633      	strb	r3, [r6, #24]
 8009328:	8231      	strh	r1, [r6, #16]
 800932a:	82b2      	strh	r2, [r6, #20]
 800932c:	2001      	movs	r0, #1
 800932e:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 8009332:	b1e3      	cbz	r3, 800936e <processor_specs_translate+0x96>
 8009334:	f103 3cff 	add.w	ip, r3, #4294967295
 8009338:	fa1f fc8c 	uxth.w	ip, ip
 800933c:	aa07      	add	r2, sp, #28
 800933e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8009342:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
 8009346:	ab01      	add	r3, sp, #4
 8009348:	2200      	movs	r2, #0
 800934a:	f04f 0e01 	mov.w	lr, #1
 800934e:	b10e      	cbz	r6, 8009354 <processor_specs_translate+0x7c>
 8009350:	4580      	cmp	r8, r0
 8009352:	d90c      	bls.n	800936e <processor_specs_translate+0x96>
 8009354:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
 8009358:	b131      	cbz	r1, 8009368 <processor_specs_translate+0x90>
 800935a:	1e4c      	subs	r4, r1, #1
 800935c:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 8009360:	d002      	beq.n	8009368 <processor_specs_translate+0x90>
 8009362:	b93e      	cbnz	r6, 8009374 <processor_specs_translate+0x9c>
 8009364:	3001      	adds	r0, #1
 8009366:	b280      	uxth	r0, r0
 8009368:	3318      	adds	r3, #24
 800936a:	459c      	cmp	ip, r3
 800936c:	d1ef      	bne.n	800934e <processor_specs_translate+0x76>
 800936e:	b033      	add	sp, #204	@ 0xcc
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	ebc0 0ac0 	rsb	sl, r0, r0, lsl #3
 8009378:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 800937c:	f102 39ff 	add.w	r9, r2, #4294967295
 8009380:	f884 e001 	strb.w	lr, [r4, #1]
 8009384:	f8d7 b024 	ldr.w	fp, [r7, #36]	@ 0x24
 8009388:	f8c4 b004 	str.w	fp, [r4, #4]
 800938c:	f897 b016 	ldrb.w	fp, [r7, #22]
 8009390:	f884 b002 	strb.w	fp, [r4, #2]
 8009394:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8009398:	edd7 7a07 	vldr	s15, [r7, #28]
 800939c:	f8c4 b00c 	str.w	fp, [r4, #12]
 80093a0:	f8b7 b018 	ldrh.w	fp, [r7, #24]
 80093a4:	edc4 7a02 	vstr	s15, [r4, #8]
 80093a8:	f8a4 b010 	strh.w	fp, [r4, #16]
 80093ac:	f897 b014 	ldrb.w	fp, [r7, #20]
 80093b0:	f806 b02a 	strb.w	fp, [r6, sl, lsl #2]
 80093b4:	4449      	add	r1, r9
 80093b6:	7625      	strb	r5, [r4, #24]
 80093b8:	b2c9      	uxtb	r1, r1
 80093ba:	3414      	adds	r4, #20
 80093bc:	1c55      	adds	r5, r2, #1
 80093be:	f804 2b01 	strb.w	r2, [r4], #1
 80093c2:	b2ea      	uxtb	r2, r5
 80093c4:	428a      	cmp	r2, r1
 80093c6:	d1f9      	bne.n	80093bc <processor_specs_translate+0xe4>
 80093c8:	e7cc      	b.n	8009364 <processor_specs_translate+0x8c>
 80093ca:	2000      	movs	r0, #0
 80093cc:	b033      	add	sp, #204	@ 0xcc
 80093ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d2:	2000      	movs	r0, #0
 80093d4:	4770      	bx	lr
 80093d6:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 80093da:	2001      	movs	r0, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1a9      	bne.n	8009334 <processor_specs_translate+0x5c>
 80093e0:	e7c5      	b.n	800936e <processor_specs_translate+0x96>
 80093e2:	bf00      	nop

080093e4 <acc_detector_distance_translation_get_num_processor_specifications>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	4604      	mov	r4, r0
 80093e8:	f7ff fa9a 	bl	8008920 <validate_distance_settings>
 80093ec:	b900      	cbnz	r0, 80093f0 <acc_detector_distance_translation_get_num_processor_specifications+0xc>
 80093ee:	bd10      	pop	{r4, pc}
 80093f0:	2100      	movs	r1, #0
 80093f2:	4622      	mov	r2, r4
 80093f4:	4608      	mov	r0, r1
 80093f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093fa:	f7ff bf6d 	b.w	80092d8 <processor_specs_translate>
 80093fe:	bf00      	nop

08009400 <acc_detector_distance_translation_get_processor_specifications>:
 8009400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009402:	460d      	mov	r5, r1
 8009404:	4616      	mov	r6, r2
 8009406:	4607      	mov	r7, r0
 8009408:	f7ff fa8a 	bl	8008920 <validate_distance_settings>
 800940c:	4604      	mov	r4, r0
 800940e:	b908      	cbnz	r0, 8009414 <acc_detector_distance_translation_get_processor_specifications+0x14>
 8009410:	4620      	mov	r0, r4
 8009412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009414:	463a      	mov	r2, r7
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	f7ff ff5d 	bl	80092d8 <processor_specs_translate>
 800941e:	4620      	mov	r0, r4
 8009420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009422:	bf00      	nop

08009424 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>:
 8009424:	2900      	cmp	r1, #0
 8009426:	d053      	beq.n	80094d0 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 8009428:	4603      	mov	r3, r0
 800942a:	2800      	cmp	r0, #0
 800942c:	d050      	beq.n	80094d0 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800942e:	f890 20c0 	ldrb.w	r2, [r0, #192]	@ 0xc0
 8009432:	2a00      	cmp	r2, #0
 8009434:	d04c      	beq.n	80094d0 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 8009436:	7d82      	ldrb	r2, [r0, #22]
 8009438:	2a01      	cmp	r2, #1
 800943a:	d949      	bls.n	80094d0 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009440:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8009444:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8009448:	42ae      	cmp	r6, r5
 800944a:	da3e      	bge.n	80094ca <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xa6>
 800944c:	460c      	mov	r4, r1
 800944e:	4620      	mov	r0, r4
 8009450:	210a      	movs	r1, #10
 8009452:	89df      	ldrh	r7, [r3, #14]
 8009454:	f8b3 9000 	ldrh.w	r9, [r3]
 8009458:	f893 8002 	ldrb.w	r8, [r3, #2]
 800945c:	f000 fdd8 	bl	800a010 <acc_config_sweeps_per_frame_set>
 8009460:	2102      	movs	r1, #2
 8009462:	4620      	mov	r0, r4
 8009464:	f000 fb86 	bl	8009b74 <acc_config_num_subsweeps_set>
 8009468:	2200      	movs	r2, #0
 800946a:	4611      	mov	r1, r2
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fbb1 	bl	8009bd4 <acc_config_subsweep_start_point_set>
 8009472:	2200      	movs	r2, #0
 8009474:	2101      	movs	r1, #1
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fbf0 	bl	8009c5c <acc_config_subsweep_num_points_set>
 800947c:	2200      	movs	r2, #0
 800947e:	2101      	movs	r1, #1
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fc2f 	bl	8009ce4 <acc_config_subsweep_step_length_set>
 8009486:	2200      	movs	r2, #0
 8009488:	2104      	movs	r1, #4
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fc6e 	bl	8009d6c <acc_config_subsweep_profile_set>
 8009490:	4639      	mov	r1, r7
 8009492:	2200      	movs	r2, #0
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fcad 	bl	8009df4 <acc_config_subsweep_hwaas_set>
 800949a:	2200      	movs	r2, #0
 800949c:	210f      	movs	r1, #15
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 fcec 	bl	8009e7c <acc_config_subsweep_receiver_gain_set>
 80094a4:	2200      	movs	r2, #0
 80094a6:	2101      	movs	r1, #1
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 fd4d 	bl	8009f48 <acc_config_subsweep_phase_enhancement_set>
 80094ae:	2200      	movs	r2, #0
 80094b0:	2101      	movs	r1, #1
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 fdf4 	bl	800a0a0 <acc_config_subsweep_enable_loopback_set>
 80094b8:	2102      	movs	r1, #2
 80094ba:	2200      	movs	r2, #0
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fe33 	bl	800a128 <acc_config_subsweep_prf_set>
 80094c2:	1bab      	subs	r3, r5, r6
 80094c4:	b299      	uxth	r1, r3
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	d504      	bpl.n	80094d4 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb0>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d0:	2000      	movs	r0, #0
 80094d2:	4770      	bx	lr
 80094d4:	4620      	mov	r0, r4
 80094d6:	fbb1 faf9 	udiv	sl, r1, r9
 80094da:	2201      	movs	r2, #1
 80094dc:	4631      	mov	r1, r6
 80094de:	f000 fb79 	bl	8009bd4 <acc_config_subsweep_start_point_set>
 80094e2:	4651      	mov	r1, sl
 80094e4:	4620      	mov	r0, r4
 80094e6:	2201      	movs	r2, #1
 80094e8:	f000 fbb8 	bl	8009c5c <acc_config_subsweep_num_points_set>
 80094ec:	4649      	mov	r1, r9
 80094ee:	4620      	mov	r0, r4
 80094f0:	2201      	movs	r2, #1
 80094f2:	f000 fbf7 	bl	8009ce4 <acc_config_subsweep_step_length_set>
 80094f6:	4641      	mov	r1, r8
 80094f8:	4620      	mov	r0, r4
 80094fa:	2201      	movs	r2, #1
 80094fc:	f000 fc36 	bl	8009d6c <acc_config_subsweep_profile_set>
 8009500:	4639      	mov	r1, r7
 8009502:	4620      	mov	r0, r4
 8009504:	2201      	movs	r2, #1
 8009506:	f000 fc75 	bl	8009df4 <acc_config_subsweep_hwaas_set>
 800950a:	4620      	mov	r0, r4
 800950c:	2201      	movs	r2, #1
 800950e:	2105      	movs	r1, #5
 8009510:	f000 fcb4 	bl	8009e7c <acc_config_subsweep_receiver_gain_set>
 8009514:	2201      	movs	r2, #1
 8009516:	4611      	mov	r1, r2
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fd15 	bl	8009f48 <acc_config_subsweep_phase_enhancement_set>
 800951e:	4641      	mov	r1, r8
 8009520:	4628      	mov	r0, r5
 8009522:	f7ff fa7d 	bl	8008a20 <select_prf>
 8009526:	2201      	movs	r2, #1
 8009528:	4601      	mov	r1, r0
 800952a:	4620      	mov	r0, r4
 800952c:	f000 fdfc 	bl	800a128 <acc_config_subsweep_prf_set>
 8009530:	2001      	movs	r0, #1
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009536:	bf00      	nop

08009538 <acc_detector_distance_translation_get_close_range_sensor_config>:
 8009538:	b530      	push	{r4, r5, lr}
 800953a:	b0b3      	sub	sp, #204	@ 0xcc
 800953c:	460d      	mov	r5, r1
 800953e:	4604      	mov	r4, r0
 8009540:	f7ff f9ee 	bl	8008920 <validate_distance_settings>
 8009544:	2300      	movs	r3, #0
 8009546:	f8ad 30c4 	strh.w	r3, [sp, #196]	@ 0xc4
 800954a:	b910      	cbnz	r0, 8009552 <acc_detector_distance_translation_get_close_range_sensor_config+0x1a>
 800954c:	2000      	movs	r0, #0
 800954e:	b033      	add	sp, #204	@ 0xcc
 8009550:	bd30      	pop	{r4, r5, pc}
 8009552:	4620      	mov	r0, r4
 8009554:	a901      	add	r1, sp, #4
 8009556:	f7ff fbcf 	bl	8008cf8 <create_group_plans>
 800955a:	2800      	cmp	r0, #0
 800955c:	d0f6      	beq.n	800954c <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 800955e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f2      	beq.n	800954c <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 8009566:	4629      	mov	r1, r5
 8009568:	a801      	add	r0, sp, #4
 800956a:	f7ff ff5b 	bl	8009424 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>
 800956e:	b033      	add	sp, #204	@ 0xcc
 8009570:	bd30      	pop	{r4, r5, pc}
 8009572:	bf00      	nop

08009574 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b08b      	sub	sp, #44	@ 0x2c
 800957a:	460d      	mov	r5, r1
 800957c:	9003      	str	r0, [sp, #12]
 800957e:	2800      	cmp	r0, #0
 8009580:	f000 80a0 	beq.w	80096c4 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x150>
 8009584:	2900      	cmp	r1, #0
 8009586:	d03c      	beq.n	8009602 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8e>
 8009588:	f890 40c1 	ldrb.w	r4, [r0, #193]	@ 0xc1
 800958c:	b384      	cbz	r4, 80095f0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 800958e:	2300      	movs	r3, #0
 8009590:	2101      	movs	r1, #1
 8009592:	4628      	mov	r0, r5
 8009594:	461c      	mov	r4, r3
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	f000 fd3a 	bl	800a010 <acc_config_sweeps_per_frame_set>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	f893 70c1 	ldrb.w	r7, [r3, #193]	@ 0xc1
 80095a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80095a6:	46b8      	mov	r8, r7
 80095a8:	4543      	cmp	r3, r8
 80095aa:	f080 8089 	bcs.w	80096c0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x14c>
 80095ae:	9f03      	ldr	r7, [sp, #12]
 80095b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80095b4:	eb07 0ec3 	add.w	lr, r7, r3, lsl #3
 80095b8:	00de      	lsls	r6, r3, #3
 80095ba:	f85e 0f60 	ldr.w	r0, [lr, #96]!
 80095be:	f8de 1004 	ldr.w	r1, [lr, #4]
 80095c2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80095c6:	f8de 300c 	ldr.w	r3, [lr, #12]
 80095ca:	f10d 0c10 	add.w	ip, sp, #16
 80095ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095d2:	3660      	adds	r6, #96	@ 0x60
 80095d4:	463a      	mov	r2, r7
 80095d6:	4432      	add	r2, r6
 80095d8:	f8de 0010 	ldr.w	r0, [lr, #16]
 80095dc:	f8de 1014 	ldr.w	r1, [lr, #20]
 80095e0:	7d93      	ldrb	r3, [r2, #22]
 80095e2:	f837 9006 	ldrh.w	r9, [r7, r6]
 80095e6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80095ea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80095ee:	b95b      	cbnz	r3, 8009608 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x94>
 80095f0:	2600      	movs	r6, #0
 80095f2:	4628      	mov	r0, r5
 80095f4:	4621      	mov	r1, r4
 80095f6:	f000 fabd 	bl	8009b74 <acc_config_num_subsweeps_set>
 80095fa:	4630      	mov	r0, r6
 80095fc:	b00b      	add	sp, #44	@ 0x2c
 80095fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009602:	460c      	mov	r4, r1
 8009604:	460e      	mov	r6, r1
 8009606:	e7f4      	b.n	80095f2 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 8009608:	3b01      	subs	r3, #1
 800960a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800960e:	fa5f fb83 	uxtb.w	fp, r3
 8009612:	d04d      	beq.n	80096b0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x13c>
 8009614:	2c03      	cmp	r4, #3
 8009616:	d8eb      	bhi.n	80095f0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 8009618:	f10b 3bff 	add.w	fp, fp, #4294967295
 800961c:	fa1f fb8b 	uxth.w	fp, fp
 8009620:	f10d 0316 	add.w	r3, sp, #22
 8009624:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	ae05      	add	r6, sp, #20
 800962c:	e001      	b.n	8009632 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xbe>
 800962e:	2c04      	cmp	r4, #4
 8009630:	d0de      	beq.n	80095f0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 8009632:	f9b6 b000 	ldrsh.w	fp, [r6]
 8009636:	f936 7f02 	ldrsh.w	r7, [r6, #2]!
 800963a:	eba7 030b 	sub.w	r3, r7, fp
 800963e:	b299      	uxth	r1, r3
 8009640:	041b      	lsls	r3, r3, #16
 8009642:	4622      	mov	r2, r4
 8009644:	4628      	mov	r0, r5
 8009646:	d4d3      	bmi.n	80095f0 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 8009648:	fbb1 f8f9 	udiv	r8, r1, r9
 800964c:	8931      	ldrh	r1, [r6, #8]
 800964e:	f000 fbd1 	bl	8009df4 <acc_config_subsweep_hwaas_set>
 8009652:	4622      	mov	r2, r4
 8009654:	4659      	mov	r1, fp
 8009656:	4628      	mov	r0, r5
 8009658:	f000 fabc 	bl	8009bd4 <acc_config_subsweep_start_point_set>
 800965c:	4622      	mov	r2, r4
 800965e:	4641      	mov	r1, r8
 8009660:	4628      	mov	r0, r5
 8009662:	f000 fafb 	bl	8009c5c <acc_config_subsweep_num_points_set>
 8009666:	4622      	mov	r2, r4
 8009668:	4649      	mov	r1, r9
 800966a:	4628      	mov	r0, r5
 800966c:	f000 fb3a 	bl	8009ce4 <acc_config_subsweep_step_length_set>
 8009670:	4622      	mov	r2, r4
 8009672:	4651      	mov	r1, sl
 8009674:	4628      	mov	r0, r5
 8009676:	f000 fb79 	bl	8009d6c <acc_config_subsweep_profile_set>
 800967a:	4622      	mov	r2, r4
 800967c:	210a      	movs	r1, #10
 800967e:	4628      	mov	r0, r5
 8009680:	f000 fbfc 	bl	8009e7c <acc_config_subsweep_receiver_gain_set>
 8009684:	4622      	mov	r2, r4
 8009686:	2101      	movs	r1, #1
 8009688:	4628      	mov	r0, r5
 800968a:	f000 fc5d 	bl	8009f48 <acc_config_subsweep_phase_enhancement_set>
 800968e:	4651      	mov	r1, sl
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff f9c5 	bl	8008a20 <select_prf>
 8009696:	4622      	mov	r2, r4
 8009698:	4601      	mov	r1, r0
 800969a:	4628      	mov	r0, r5
 800969c:	f000 fd44 	bl	800a128 <acc_config_subsweep_prf_set>
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	3401      	adds	r4, #1
 80096a4:	42b3      	cmp	r3, r6
 80096a6:	b2e4      	uxtb	r4, r4
 80096a8:	d1c1      	bne.n	800962e <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xba>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	f893 80c1 	ldrb.w	r8, [r3, #193]	@ 0xc1
 80096b0:	9b02      	ldr	r3, [sp, #8]
 80096b2:	3301      	adds	r3, #1
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80096ba:	4543      	cmp	r3, r8
 80096bc:	f4ff af77 	bcc.w	80095ae <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x3a>
 80096c0:	2601      	movs	r6, #1
 80096c2:	e796      	b.n	80095f2 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 80096c4:	9c03      	ldr	r4, [sp, #12]
 80096c6:	4626      	mov	r6, r4
 80096c8:	e793      	b.n	80095f2 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 80096ca:	bf00      	nop

080096cc <acc_detector_distance_translation_get_far_range_sensor_config>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	b0b2      	sub	sp, #200	@ 0xc8
 80096d0:	460e      	mov	r6, r1
 80096d2:	4605      	mov	r5, r0
 80096d4:	f7ff f924 	bl	8008920 <validate_distance_settings>
 80096d8:	22c2      	movs	r2, #194	@ 0xc2
 80096da:	4604      	mov	r4, r0
 80096dc:	2100      	movs	r1, #0
 80096de:	a801      	add	r0, sp, #4
 80096e0:	f007 f9cc 	bl	8010a7c <memset>
 80096e4:	b914      	cbnz	r4, 80096ec <acc_detector_distance_translation_get_far_range_sensor_config+0x20>
 80096e6:	2000      	movs	r0, #0
 80096e8:	b032      	add	sp, #200	@ 0xc8
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	4628      	mov	r0, r5
 80096ee:	a901      	add	r1, sp, #4
 80096f0:	f7ff fb02 	bl	8008cf8 <create_group_plans>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0f6      	beq.n	80096e6 <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 80096f8:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f2      	beq.n	80096e6 <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 8009700:	4631      	mov	r1, r6
 8009702:	a801      	add	r0, sp, #4
 8009704:	f7ff ff36 	bl	8009574 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>
 8009708:	b032      	add	sp, #200	@ 0xc8
 800970a:	bd70      	pop	{r4, r5, r6, pc}

0800970c <acc_detector_distance_utils_reflector_shape_exponent_get>:
 800970c:	b170      	cbz	r0, 800972c <acc_detector_distance_utils_reflector_shape_exponent_get+0x20>
 800970e:	2801      	cmp	r0, #1
 8009710:	d009      	beq.n	8009726 <acc_detector_distance_utils_reflector_shape_exponent_get+0x1a>
 8009712:	b508      	push	{r3, lr}
 8009714:	4b07      	ldr	r3, [pc, #28]	@ (8009734 <acc_detector_distance_utils_reflector_shape_exponent_get+0x28>)
 8009716:	4a08      	ldr	r2, [pc, #32]	@ (8009738 <acc_detector_distance_utils_reflector_shape_exponent_get+0x2c>)
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	4908      	ldr	r1, [pc, #32]	@ (800973c <acc_detector_distance_utils_reflector_shape_exponent_get+0x30>)
 800971c:	2000      	movs	r0, #0
 800971e:	4798      	blx	r3
 8009720:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009740 <acc_detector_distance_utils_reflector_shape_exponent_get+0x34>
 8009724:	bd08      	pop	{r3, pc}
 8009726:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800972a:	4770      	bx	lr
 800972c:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	20000610 	.word	0x20000610
 8009738:	08015180 	.word	0x08015180
 800973c:	08015198 	.word	0x08015198
 8009740:	00000000 	.word	0x00000000

08009744 <acc_rss_hal_register>:
 8009744:	b108      	cbz	r0, 800974a <acc_rss_hal_register+0x6>
 8009746:	f002 be17 	b.w	800c378 <acc_rss_integration_register_a121>
 800974a:	4770      	bx	lr

0800974c <acc_rss_get_buffer_size>:
 800974c:	b510      	push	{r4, lr}
 800974e:	460c      	mov	r4, r1
 8009750:	f000 fc8e 	bl	800a070 <acc_config_get_settings>
 8009754:	b158      	cbz	r0, 800976e <acc_rss_get_buffer_size+0x22>
 8009756:	b124      	cbz	r4, 8009762 <acc_rss_get_buffer_size+0x16>
 8009758:	4621      	mov	r1, r4
 800975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975e:	f002 beed 	b.w	800c53c <acc_pipeline_get_buffer_size>
 8009762:	4b04      	ldr	r3, [pc, #16]	@ (8009774 <acc_rss_get_buffer_size+0x28>)
 8009764:	4a04      	ldr	r2, [pc, #16]	@ (8009778 <acc_rss_get_buffer_size+0x2c>)
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	4904      	ldr	r1, [pc, #16]	@ (800977c <acc_rss_get_buffer_size+0x30>)
 800976a:	4620      	mov	r0, r4
 800976c:	4798      	blx	r3
 800976e:	2000      	movs	r0, #0
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	20000610 	.word	0x20000610
 8009778:	080151b0 	.word	0x080151b0
 800977c:	080151cc 	.word	0x080151cc

08009780 <acc_config_subsweep_validate.part.0>:
 8009780:	b508      	push	{r3, lr}
 8009782:	4b04      	ldr	r3, [pc, #16]	@ (8009794 <acc_config_subsweep_validate.part.0+0x14>)
 8009784:	4a04      	ldr	r2, [pc, #16]	@ (8009798 <acc_config_subsweep_validate.part.0+0x18>)
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	4904      	ldr	r1, [pc, #16]	@ (800979c <acc_config_subsweep_validate.part.0+0x1c>)
 800978a:	2000      	movs	r0, #0
 800978c:	4798      	blx	r3
 800978e:	2000      	movs	r0, #0
 8009790:	bd08      	pop	{r3, pc}
 8009792:	bf00      	nop
 8009794:	20000610 	.word	0x20000610
 8009798:	080151d8 	.word	0x080151d8
 800979c:	080151f0 	.word	0x080151f0

080097a0 <acc_config_log>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	b120      	cbz	r0, 80097b2 <acc_config_log+0x12>
 80097a8:	4bbf      	ldr	r3, [pc, #764]	@ (8009aa8 <acc_config_log+0x308>)
 80097aa:	6802      	ldr	r2, [r0, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	4604      	mov	r4, r0
 80097b0:	d008      	beq.n	80097c4 <acc_config_log+0x24>
 80097b2:	4bbe      	ldr	r3, [pc, #760]	@ (8009aac <acc_config_log+0x30c>)
 80097b4:	4abe      	ldr	r2, [pc, #760]	@ (8009ab0 <acc_config_log+0x310>)
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	49be      	ldr	r1, [pc, #760]	@ (8009ab4 <acc_config_log+0x314>)
 80097ba:	2000      	movs	r0, #0
 80097bc:	b002      	add	sp, #8
 80097be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c2:	4718      	bx	r3
 80097c4:	f002 fe94 	bl	800c4f0 <acc_rss_integration_log_level>
 80097c8:	2801      	cmp	r0, #1
 80097ca:	d935      	bls.n	8009838 <acc_config_log+0x98>
 80097cc:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 80097d0:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8009ab8 <acc_config_log+0x318>
 80097d4:	4bb5      	ldr	r3, [pc, #724]	@ (8009aac <acc_config_log+0x30c>)
 80097d6:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 8009ab8 <acc_config_log+0x318>
 80097da:	691d      	ldr	r5, [r3, #16]
 80097dc:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8009abc <acc_config_log+0x31c>
 80097e0:	49b4      	ldr	r1, [pc, #720]	@ (8009ab4 <acc_config_log+0x314>)
 80097e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	bf48      	it	mi
 80097ec:	eef1 7a67 	vnegmi.f32	s15, s15
 80097f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80097f4:	bf4c      	ite	mi
 80097f6:	4bb2      	ldrmi	r3, [pc, #712]	@ (8009ac0 <acc_config_log+0x320>)
 80097f8:	4bb2      	ldrpl	r3, [pc, #712]	@ (8009ac4 <acc_config_log+0x324>)
 80097fa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80097fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009806:	ee17 2a10 	vmov	r2, s14
 800980a:	bf4c      	ite	mi
 800980c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8009810:	eeb0 7a67 	vmovpl.f32	s14, s15
 8009814:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009818:	9200      	str	r2, [sp, #0]
 800981a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800981e:	4aaa      	ldr	r2, [pc, #680]	@ (8009ac8 <acc_config_log+0x328>)
 8009820:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009824:	2002      	movs	r0, #2
 8009826:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800982a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800982e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009832:	edcd 7a01 	vstr	s15, [sp, #4]
 8009836:	47a8      	blx	r5
 8009838:	f002 fe5a 	bl	800c4f0 <acc_rss_integration_log_level>
 800983c:	2801      	cmp	r0, #1
 800983e:	d935      	bls.n	80098ac <acc_config_log+0x10c>
 8009840:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 8009844:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8009ab8 <acc_config_log+0x318>
 8009848:	4b98      	ldr	r3, [pc, #608]	@ (8009aac <acc_config_log+0x30c>)
 800984a:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8009ab8 <acc_config_log+0x318>
 800984e:	691d      	ldr	r5, [r3, #16]
 8009850:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8009abc <acc_config_log+0x31c>
 8009854:	4997      	ldr	r1, [pc, #604]	@ (8009ab4 <acc_config_log+0x314>)
 8009856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	bf48      	it	mi
 8009860:	eef1 7a67 	vnegmi.f32	s15, s15
 8009864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009868:	bf4c      	ite	mi
 800986a:	4b95      	ldrmi	r3, [pc, #596]	@ (8009ac0 <acc_config_log+0x320>)
 800986c:	4b95      	ldrpl	r3, [pc, #596]	@ (8009ac4 <acc_config_log+0x324>)
 800986e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987a:	ee17 2a10 	vmov	r2, s14
 800987e:	bf4c      	ite	mi
 8009880:	eeb1 7a67 	vnegmi.f32	s14, s15
 8009884:	eeb0 7a67 	vmovpl.f32	s14, s15
 8009888:	ee37 7a06 	vadd.f32	s14, s14, s12
 800988c:	9200      	str	r2, [sp, #0]
 800988e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8009892:	4a8e      	ldr	r2, [pc, #568]	@ (8009acc <acc_config_log+0x32c>)
 8009894:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009898:	2002      	movs	r0, #2
 800989a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800989e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80098a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80098aa:	47a8      	blx	r5
 80098ac:	f002 fe20 	bl	800c4f0 <acc_rss_integration_log_level>
 80098b0:	2801      	cmp	r0, #1
 80098b2:	d907      	bls.n	80098c4 <acc_config_log+0x124>
 80098b4:	4a7d      	ldr	r2, [pc, #500]	@ (8009aac <acc_config_log+0x30c>)
 80098b6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 80098ba:	6915      	ldr	r5, [r2, #16]
 80098bc:	497d      	ldr	r1, [pc, #500]	@ (8009ab4 <acc_config_log+0x314>)
 80098be:	4a84      	ldr	r2, [pc, #528]	@ (8009ad0 <acc_config_log+0x330>)
 80098c0:	2002      	movs	r0, #2
 80098c2:	47a8      	blx	r5
 80098c4:	f002 fe14 	bl	800c4f0 <acc_rss_integration_log_level>
 80098c8:	2801      	cmp	r0, #1
 80098ca:	f200 80e0 	bhi.w	8009a8e <acc_config_log+0x2ee>
 80098ce:	f002 fe0f 	bl	800c4f0 <acc_rss_integration_log_level>
 80098d2:	2801      	cmp	r0, #1
 80098d4:	f200 80c3 	bhi.w	8009a5e <acc_config_log+0x2be>
 80098d8:	f002 fe0a 	bl	800c4f0 <acc_rss_integration_log_level>
 80098dc:	2801      	cmp	r0, #1
 80098de:	f200 80b2 	bhi.w	8009a46 <acc_config_log+0x2a6>
 80098e2:	f002 fe05 	bl	800c4f0 <acc_rss_integration_log_level>
 80098e6:	2801      	cmp	r0, #1
 80098e8:	f200 80c5 	bhi.w	8009a76 <acc_config_log+0x2d6>
 80098ec:	f002 fe00 	bl	800c4f0 <acc_rss_integration_log_level>
 80098f0:	2801      	cmp	r0, #1
 80098f2:	d907      	bls.n	8009904 <acc_config_log+0x164>
 80098f4:	4a6d      	ldr	r2, [pc, #436]	@ (8009aac <acc_config_log+0x30c>)
 80098f6:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 80098fa:	6915      	ldr	r5, [r2, #16]
 80098fc:	496d      	ldr	r1, [pc, #436]	@ (8009ab4 <acc_config_log+0x314>)
 80098fe:	4a75      	ldr	r2, [pc, #468]	@ (8009ad4 <acc_config_log+0x334>)
 8009900:	2002      	movs	r0, #2
 8009902:	47a8      	blx	r5
 8009904:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8099 	beq.w	8009a40 <acc_config_log+0x2a0>
 800990e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aac <acc_config_log+0x30c>
 8009912:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8009b10 <acc_config_log+0x370>
 8009916:	4e67      	ldr	r6, [pc, #412]	@ (8009ab4 <acc_config_log+0x314>)
 8009918:	4625      	mov	r5, r4
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	f002 fde7 	bl	800c4f0 <acc_rss_integration_log_level>
 8009922:	2801      	cmp	r0, #1
 8009924:	d906      	bls.n	8009934 <acc_config_log+0x194>
 8009926:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800992a:	464b      	mov	r3, r9
 800992c:	4652      	mov	r2, sl
 800992e:	4631      	mov	r1, r6
 8009930:	2002      	movs	r0, #2
 8009932:	47b8      	blx	r7
 8009934:	f002 fddc 	bl	800c4f0 <acc_rss_integration_log_level>
 8009938:	2801      	cmp	r0, #1
 800993a:	d906      	bls.n	800994a <acc_config_log+0x1aa>
 800993c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009940:	686b      	ldr	r3, [r5, #4]
 8009942:	4a65      	ldr	r2, [pc, #404]	@ (8009ad8 <acc_config_log+0x338>)
 8009944:	4631      	mov	r1, r6
 8009946:	2002      	movs	r0, #2
 8009948:	47b8      	blx	r7
 800994a:	f002 fdd1 	bl	800c4f0 <acc_rss_integration_log_level>
 800994e:	2801      	cmp	r0, #1
 8009950:	d906      	bls.n	8009960 <acc_config_log+0x1c0>
 8009952:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009956:	892b      	ldrh	r3, [r5, #8]
 8009958:	4a60      	ldr	r2, [pc, #384]	@ (8009adc <acc_config_log+0x33c>)
 800995a:	4631      	mov	r1, r6
 800995c:	2002      	movs	r0, #2
 800995e:	47b8      	blx	r7
 8009960:	f002 fdc6 	bl	800c4f0 <acc_rss_integration_log_level>
 8009964:	2801      	cmp	r0, #1
 8009966:	d906      	bls.n	8009976 <acc_config_log+0x1d6>
 8009968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800996c:	896b      	ldrh	r3, [r5, #10]
 800996e:	4a5c      	ldr	r2, [pc, #368]	@ (8009ae0 <acc_config_log+0x340>)
 8009970:	4631      	mov	r1, r6
 8009972:	2002      	movs	r0, #2
 8009974:	47b8      	blx	r7
 8009976:	f002 fdbb 	bl	800c4f0 <acc_rss_integration_log_level>
 800997a:	2801      	cmp	r0, #1
 800997c:	d906      	bls.n	800998c <acc_config_log+0x1ec>
 800997e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	4a57      	ldr	r2, [pc, #348]	@ (8009ae4 <acc_config_log+0x344>)
 8009986:	4631      	mov	r1, r6
 8009988:	2002      	movs	r0, #2
 800998a:	47b8      	blx	r7
 800998c:	f002 fdb0 	bl	800c4f0 <acc_rss_integration_log_level>
 8009990:	2801      	cmp	r0, #1
 8009992:	d906      	bls.n	80099a2 <acc_config_log+0x202>
 8009994:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009998:	7bab      	ldrb	r3, [r5, #14]
 800999a:	4a53      	ldr	r2, [pc, #332]	@ (8009ae8 <acc_config_log+0x348>)
 800999c:	4631      	mov	r1, r6
 800999e:	2002      	movs	r0, #2
 80099a0:	47b8      	blx	r7
 80099a2:	f002 fda5 	bl	800c4f0 <acc_rss_integration_log_level>
 80099a6:	2801      	cmp	r0, #1
 80099a8:	d909      	bls.n	80099be <acc_config_log+0x21e>
 80099aa:	7be8      	ldrb	r0, [r5, #15]
 80099ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099b0:	f004 fef6 	bl	800e7a0 <acc_utils_bool_to_str>
 80099b4:	4a4d      	ldr	r2, [pc, #308]	@ (8009aec <acc_config_log+0x34c>)
 80099b6:	4603      	mov	r3, r0
 80099b8:	4631      	mov	r1, r6
 80099ba:	2002      	movs	r0, #2
 80099bc:	47b8      	blx	r7
 80099be:	f002 fd97 	bl	800c4f0 <acc_rss_integration_log_level>
 80099c2:	2801      	cmp	r0, #1
 80099c4:	d909      	bls.n	80099da <acc_config_log+0x23a>
 80099c6:	7c28      	ldrb	r0, [r5, #16]
 80099c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099cc:	f004 fee8 	bl	800e7a0 <acc_utils_bool_to_str>
 80099d0:	4a47      	ldr	r2, [pc, #284]	@ (8009af0 <acc_config_log+0x350>)
 80099d2:	4603      	mov	r3, r0
 80099d4:	4631      	mov	r1, r6
 80099d6:	2002      	movs	r0, #2
 80099d8:	47b8      	blx	r7
 80099da:	f002 fd89 	bl	800c4f0 <acc_rss_integration_log_level>
 80099de:	2801      	cmp	r0, #1
 80099e0:	d909      	bls.n	80099f6 <acc_config_log+0x256>
 80099e2:	7c68      	ldrb	r0, [r5, #17]
 80099e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099e8:	f004 feda 	bl	800e7a0 <acc_utils_bool_to_str>
 80099ec:	4a41      	ldr	r2, [pc, #260]	@ (8009af4 <acc_config_log+0x354>)
 80099ee:	4603      	mov	r3, r0
 80099f0:	4631      	mov	r1, r6
 80099f2:	2002      	movs	r0, #2
 80099f4:	47b8      	blx	r7
 80099f6:	f002 fd7b 	bl	800c4f0 <acc_rss_integration_log_level>
 80099fa:	2801      	cmp	r0, #1
 80099fc:	d909      	bls.n	8009a12 <acc_config_log+0x272>
 80099fe:	7ce8      	ldrb	r0, [r5, #19]
 8009a00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a04:	f004 fee4 	bl	800e7d0 <acc_utils_profile_to_str>
 8009a08:	4a3b      	ldr	r2, [pc, #236]	@ (8009af8 <acc_config_log+0x358>)
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	2002      	movs	r0, #2
 8009a10:	47b8      	blx	r7
 8009a12:	f002 fd6d 	bl	800c4f0 <acc_rss_integration_log_level>
 8009a16:	2801      	cmp	r0, #1
 8009a18:	d909      	bls.n	8009a2e <acc_config_log+0x28e>
 8009a1a:	7ca8      	ldrb	r0, [r5, #18]
 8009a1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a20:	f004 fee4 	bl	800e7ec <acc_utils_prf_to_str>
 8009a24:	4a35      	ldr	r2, [pc, #212]	@ (8009afc <acc_config_log+0x35c>)
 8009a26:	4603      	mov	r3, r0
 8009a28:	4631      	mov	r1, r6
 8009a2a:	2002      	movs	r0, #2
 8009a2c:	47b8      	blx	r7
 8009a2e:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 8009a32:	f109 0901 	add.w	r9, r9, #1
 8009a36:	454b      	cmp	r3, r9
 8009a38:	f105 0510 	add.w	r5, r5, #16
 8009a3c:	f63f af6f 	bhi.w	800991e <acc_config_log+0x17e>
 8009a40:	b002      	add	sp, #8
 8009a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a46:	4b19      	ldr	r3, [pc, #100]	@ (8009aac <acc_config_log+0x30c>)
 8009a48:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 8009a4c:	691d      	ldr	r5, [r3, #16]
 8009a4e:	f004 feb3 	bl	800e7b8 <acc_utils_idle_state_to_str>
 8009a52:	4a2b      	ldr	r2, [pc, #172]	@ (8009b00 <acc_config_log+0x360>)
 8009a54:	4917      	ldr	r1, [pc, #92]	@ (8009ab4 <acc_config_log+0x314>)
 8009a56:	4603      	mov	r3, r0
 8009a58:	2002      	movs	r0, #2
 8009a5a:	47a8      	blx	r5
 8009a5c:	e741      	b.n	80098e2 <acc_config_log+0x142>
 8009a5e:	4b13      	ldr	r3, [pc, #76]	@ (8009aac <acc_config_log+0x30c>)
 8009a60:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 8009a64:	691d      	ldr	r5, [r3, #16]
 8009a66:	f004 fe9b 	bl	800e7a0 <acc_utils_bool_to_str>
 8009a6a:	4a26      	ldr	r2, [pc, #152]	@ (8009b04 <acc_config_log+0x364>)
 8009a6c:	4911      	ldr	r1, [pc, #68]	@ (8009ab4 <acc_config_log+0x314>)
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2002      	movs	r0, #2
 8009a72:	47a8      	blx	r5
 8009a74:	e730      	b.n	80098d8 <acc_config_log+0x138>
 8009a76:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <acc_config_log+0x30c>)
 8009a78:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 8009a7c:	691d      	ldr	r5, [r3, #16]
 8009a7e:	f004 fe9b 	bl	800e7b8 <acc_utils_idle_state_to_str>
 8009a82:	4a21      	ldr	r2, [pc, #132]	@ (8009b08 <acc_config_log+0x368>)
 8009a84:	490b      	ldr	r1, [pc, #44]	@ (8009ab4 <acc_config_log+0x314>)
 8009a86:	4603      	mov	r3, r0
 8009a88:	2002      	movs	r0, #2
 8009a8a:	47a8      	blx	r5
 8009a8c:	e72e      	b.n	80098ec <acc_config_log+0x14c>
 8009a8e:	4b07      	ldr	r3, [pc, #28]	@ (8009aac <acc_config_log+0x30c>)
 8009a90:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 8009a94:	691d      	ldr	r5, [r3, #16]
 8009a96:	f004 fe83 	bl	800e7a0 <acc_utils_bool_to_str>
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8009b0c <acc_config_log+0x36c>)
 8009a9c:	4905      	ldr	r1, [pc, #20]	@ (8009ab4 <acc_config_log+0x314>)
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2002      	movs	r0, #2
 8009aa2:	47a8      	blx	r5
 8009aa4:	e713      	b.n	80098ce <acc_config_log+0x12e>
 8009aa6:	bf00      	nop
 8009aa8:	1337b00f 	.word	0x1337b00f
 8009aac:	20000610 	.word	0x20000610
 8009ab0:	080151f8 	.word	0x080151f8
 8009ab4:	080151f0 	.word	0x080151f0
 8009ab8:	350637bd 	.word	0x350637bd
 8009abc:	49742400 	.word	0x49742400
 8009ac0:	08014b20 	.word	0x08014b20
 8009ac4:	08015d24 	.word	0x08015d24
 8009ac8:	08015210 	.word	0x08015210
 8009acc:	08015228 	.word	0x08015228
 8009ad0:	08015240 	.word	0x08015240
 8009ad4:	080152c4 	.word	0x080152c4
 8009ad8:	080152e8 	.word	0x080152e8
 8009adc:	08015304 	.word	0x08015304
 8009ae0:	08015320 	.word	0x08015320
 8009ae4:	0801533c 	.word	0x0801533c
 8009ae8:	08015358 	.word	0x08015358
 8009aec:	08015374 	.word	0x08015374
 8009af0:	08015390 	.word	0x08015390
 8009af4:	080153ac 	.word	0x080153ac
 8009af8:	080153c8 	.word	0x080153c8
 8009afc:	080153e4 	.word	0x080153e4
 8009b00:	0801528c 	.word	0x0801528c
 8009b04:	08015274 	.word	0x08015274
 8009b08:	080152a8 	.word	0x080152a8
 8009b0c:	08015258 	.word	0x08015258
 8009b10:	080152d8 	.word	0x080152d8

08009b14 <acc_config_create>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4a08      	ldr	r2, [pc, #32]	@ (8009b38 <acc_config_create+0x24>)
 8009b18:	2356      	movs	r3, #86	@ 0x56
 8009b1a:	215c      	movs	r1, #92	@ 0x5c
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f002 fcb7 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 8009b22:	4604      	mov	r4, r0
 8009b24:	b130      	cbz	r0, 8009b34 <acc_config_create+0x20>
 8009b26:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <acc_config_create+0x28>)
 8009b28:	f840 3b04 	str.w	r3, [r0], #4
 8009b2c:	4904      	ldr	r1, [pc, #16]	@ (8009b40 <acc_config_create+0x2c>)
 8009b2e:	2258      	movs	r2, #88	@ 0x58
 8009b30:	f007 f833 	bl	8010b9a <memcpy>
 8009b34:	4620      	mov	r0, r4
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	080151f0 	.word	0x080151f0
 8009b3c:	1337b00f 	.word	0x1337b00f
 8009b40:	08015400 	.word	0x08015400

08009b44 <acc_config_destroy>:
 8009b44:	b118      	cbz	r0, 8009b4e <acc_config_destroy+0xa>
 8009b46:	4a07      	ldr	r2, [pc, #28]	@ (8009b64 <acc_config_destroy+0x20>)
 8009b48:	6801      	ldr	r1, [r0, #0]
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	d005      	beq.n	8009b5a <acc_config_destroy+0x16>
 8009b4e:	4b06      	ldr	r3, [pc, #24]	@ (8009b68 <acc_config_destroy+0x24>)
 8009b50:	4a06      	ldr	r2, [pc, #24]	@ (8009b6c <acc_config_destroy+0x28>)
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	4906      	ldr	r1, [pc, #24]	@ (8009b70 <acc_config_destroy+0x2c>)
 8009b56:	2000      	movs	r0, #0
 8009b58:	4718      	bx	r3
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	6002      	str	r2, [r0, #0]
 8009b5e:	f002 bcb3 	b.w	800c4c8 <acc_rss_integration_mem_free>
 8009b62:	bf00      	nop
 8009b64:	1337b00f 	.word	0x1337b00f
 8009b68:	20000610 	.word	0x20000610
 8009b6c:	080151f8 	.word	0x080151f8
 8009b70:	080151f0 	.word	0x080151f0

08009b74 <acc_config_num_subsweeps_set>:
 8009b74:	b118      	cbz	r0, 8009b7e <acc_config_num_subsweeps_set+0xa>
 8009b76:	4b06      	ldr	r3, [pc, #24]	@ (8009b90 <acc_config_num_subsweeps_set+0x1c>)
 8009b78:	6802      	ldr	r2, [r0, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d005      	beq.n	8009b8a <acc_config_num_subsweeps_set+0x16>
 8009b7e:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <acc_config_num_subsweeps_set+0x20>)
 8009b80:	4a05      	ldr	r2, [pc, #20]	@ (8009b98 <acc_config_num_subsweeps_set+0x24>)
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	4905      	ldr	r1, [pc, #20]	@ (8009b9c <acc_config_num_subsweeps_set+0x28>)
 8009b86:	2000      	movs	r0, #0
 8009b88:	4718      	bx	r3
 8009b8a:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 8009b8e:	4770      	bx	lr
 8009b90:	1337b00f 	.word	0x1337b00f
 8009b94:	20000610 	.word	0x20000610
 8009b98:	080151f8 	.word	0x080151f8
 8009b9c:	080151f0 	.word	0x080151f0

08009ba0 <acc_config_num_subsweeps_get>:
 8009ba0:	b508      	push	{r3, lr}
 8009ba2:	b118      	cbz	r0, 8009bac <acc_config_num_subsweeps_get+0xc>
 8009ba4:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <acc_config_num_subsweeps_get+0x24>)
 8009ba6:	6802      	ldr	r2, [r0, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d007      	beq.n	8009bbc <acc_config_num_subsweeps_get+0x1c>
 8009bac:	4b06      	ldr	r3, [pc, #24]	@ (8009bc8 <acc_config_num_subsweeps_get+0x28>)
 8009bae:	4a07      	ldr	r2, [pc, #28]	@ (8009bcc <acc_config_num_subsweeps_get+0x2c>)
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	4907      	ldr	r1, [pc, #28]	@ (8009bd0 <acc_config_num_subsweeps_get+0x30>)
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	4798      	blx	r3
 8009bb8:	2001      	movs	r0, #1
 8009bba:	bd08      	pop	{r3, pc}
 8009bbc:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 8009bc0:	bd08      	pop	{r3, pc}
 8009bc2:	bf00      	nop
 8009bc4:	1337b00f 	.word	0x1337b00f
 8009bc8:	20000610 	.word	0x20000610
 8009bcc:	080151f8 	.word	0x080151f8
 8009bd0:	080151f0 	.word	0x080151f0

08009bd4 <acc_config_subsweep_start_point_set>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	b120      	cbz	r0, 8009be2 <acc_config_subsweep_start_point_set+0xe>
 8009bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c08 <acc_config_subsweep_start_point_set+0x34>)
 8009bda:	4604      	mov	r4, r0
 8009bdc:	6800      	ldr	r0, [r0, #0]
 8009bde:	4298      	cmp	r0, r3
 8009be0:	d007      	beq.n	8009bf2 <acc_config_subsweep_start_point_set+0x1e>
 8009be2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <acc_config_subsweep_start_point_set+0x38>)
 8009be4:	4a0a      	ldr	r2, [pc, #40]	@ (8009c10 <acc_config_subsweep_start_point_set+0x3c>)
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	490a      	ldr	r1, [pc, #40]	@ (8009c14 <acc_config_subsweep_start_point_set+0x40>)
 8009bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bee:	2000      	movs	r0, #0
 8009bf0:	4718      	bx	r3
 8009bf2:	2a03      	cmp	r2, #3
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	4616      	mov	r6, r2
 8009bf8:	d902      	bls.n	8009c00 <acc_config_subsweep_start_point_set+0x2c>
 8009bfa:	f7ff fdc1 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009bfe:	b110      	cbz	r0, 8009c06 <acc_config_subsweep_start_point_set+0x32>
 8009c00:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009c04:	6065      	str	r5, [r4, #4]
 8009c06:	bd70      	pop	{r4, r5, r6, pc}
 8009c08:	1337b00f 	.word	0x1337b00f
 8009c0c:	20000610 	.word	0x20000610
 8009c10:	080151f8 	.word	0x080151f8
 8009c14:	080151f0 	.word	0x080151f0

08009c18 <acc_config_subsweep_start_point_get>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	b120      	cbz	r0, 8009c26 <acc_config_subsweep_start_point_get+0xe>
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <acc_config_subsweep_start_point_get+0x34>)
 8009c1e:	6802      	ldr	r2, [r0, #0]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	4604      	mov	r4, r0
 8009c24:	d007      	beq.n	8009c36 <acc_config_subsweep_start_point_get+0x1e>
 8009c26:	4b0a      	ldr	r3, [pc, #40]	@ (8009c50 <acc_config_subsweep_start_point_get+0x38>)
 8009c28:	4a0a      	ldr	r2, [pc, #40]	@ (8009c54 <acc_config_subsweep_start_point_get+0x3c>)
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	490a      	ldr	r1, [pc, #40]	@ (8009c58 <acc_config_subsweep_start_point_get+0x40>)
 8009c2e:	2000      	movs	r0, #0
 8009c30:	4798      	blx	r3
 8009c32:	2000      	movs	r0, #0
 8009c34:	bd38      	pop	{r3, r4, r5, pc}
 8009c36:	2903      	cmp	r1, #3
 8009c38:	460d      	mov	r5, r1
 8009c3a:	d903      	bls.n	8009c44 <acc_config_subsweep_start_point_get+0x2c>
 8009c3c:	f7ff fda0 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0f7      	beq.n	8009c34 <acc_config_subsweep_start_point_get+0x1c>
 8009c44:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009c48:	6860      	ldr	r0, [r4, #4]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	1337b00f 	.word	0x1337b00f
 8009c50:	20000610 	.word	0x20000610
 8009c54:	080151f8 	.word	0x080151f8
 8009c58:	080151f0 	.word	0x080151f0

08009c5c <acc_config_subsweep_num_points_set>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	b120      	cbz	r0, 8009c6a <acc_config_subsweep_num_points_set+0xe>
 8009c60:	4b0b      	ldr	r3, [pc, #44]	@ (8009c90 <acc_config_subsweep_num_points_set+0x34>)
 8009c62:	4604      	mov	r4, r0
 8009c64:	6800      	ldr	r0, [r0, #0]
 8009c66:	4298      	cmp	r0, r3
 8009c68:	d007      	beq.n	8009c7a <acc_config_subsweep_num_points_set+0x1e>
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c94 <acc_config_subsweep_num_points_set+0x38>)
 8009c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c98 <acc_config_subsweep_num_points_set+0x3c>)
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	490a      	ldr	r1, [pc, #40]	@ (8009c9c <acc_config_subsweep_num_points_set+0x40>)
 8009c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c76:	2000      	movs	r0, #0
 8009c78:	4718      	bx	r3
 8009c7a:	2a03      	cmp	r2, #3
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	4616      	mov	r6, r2
 8009c80:	d902      	bls.n	8009c88 <acc_config_subsweep_num_points_set+0x2c>
 8009c82:	f7ff fd7d 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009c86:	b110      	cbz	r0, 8009c8e <acc_config_subsweep_num_points_set+0x32>
 8009c88:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009c8c:	8125      	strh	r5, [r4, #8]
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	1337b00f 	.word	0x1337b00f
 8009c94:	20000610 	.word	0x20000610
 8009c98:	080151f8 	.word	0x080151f8
 8009c9c:	080151f0 	.word	0x080151f0

08009ca0 <acc_config_subsweep_num_points_get>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	b120      	cbz	r0, 8009cae <acc_config_subsweep_num_points_get+0xe>
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <acc_config_subsweep_num_points_get+0x34>)
 8009ca6:	6802      	ldr	r2, [r0, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	4604      	mov	r4, r0
 8009cac:	d007      	beq.n	8009cbe <acc_config_subsweep_num_points_get+0x1e>
 8009cae:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd8 <acc_config_subsweep_num_points_get+0x38>)
 8009cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8009cdc <acc_config_subsweep_num_points_get+0x3c>)
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	490a      	ldr	r1, [pc, #40]	@ (8009ce0 <acc_config_subsweep_num_points_get+0x40>)
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4798      	blx	r3
 8009cba:	2000      	movs	r0, #0
 8009cbc:	bd38      	pop	{r3, r4, r5, pc}
 8009cbe:	2903      	cmp	r1, #3
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	d903      	bls.n	8009ccc <acc_config_subsweep_num_points_get+0x2c>
 8009cc4:	f7ff fd5c 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d0f7      	beq.n	8009cbc <acc_config_subsweep_num_points_get+0x1c>
 8009ccc:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009cd0:	8920      	ldrh	r0, [r4, #8]
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
 8009cd4:	1337b00f 	.word	0x1337b00f
 8009cd8:	20000610 	.word	0x20000610
 8009cdc:	080151f8 	.word	0x080151f8
 8009ce0:	080151f0 	.word	0x080151f0

08009ce4 <acc_config_subsweep_step_length_set>:
 8009ce4:	b570      	push	{r4, r5, r6, lr}
 8009ce6:	b120      	cbz	r0, 8009cf2 <acc_config_subsweep_step_length_set+0xe>
 8009ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d18 <acc_config_subsweep_step_length_set+0x34>)
 8009cea:	4604      	mov	r4, r0
 8009cec:	6800      	ldr	r0, [r0, #0]
 8009cee:	4298      	cmp	r0, r3
 8009cf0:	d007      	beq.n	8009d02 <acc_config_subsweep_step_length_set+0x1e>
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <acc_config_subsweep_step_length_set+0x38>)
 8009cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8009d20 <acc_config_subsweep_step_length_set+0x3c>)
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	490a      	ldr	r1, [pc, #40]	@ (8009d24 <acc_config_subsweep_step_length_set+0x40>)
 8009cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4718      	bx	r3
 8009d02:	2a03      	cmp	r2, #3
 8009d04:	460d      	mov	r5, r1
 8009d06:	4616      	mov	r6, r2
 8009d08:	d902      	bls.n	8009d10 <acc_config_subsweep_step_length_set+0x2c>
 8009d0a:	f7ff fd39 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009d0e:	b110      	cbz	r0, 8009d16 <acc_config_subsweep_step_length_set+0x32>
 8009d10:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009d14:	8165      	strh	r5, [r4, #10]
 8009d16:	bd70      	pop	{r4, r5, r6, pc}
 8009d18:	1337b00f 	.word	0x1337b00f
 8009d1c:	20000610 	.word	0x20000610
 8009d20:	080151f8 	.word	0x080151f8
 8009d24:	080151f0 	.word	0x080151f0

08009d28 <acc_config_subsweep_step_length_get>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	b120      	cbz	r0, 8009d36 <acc_config_subsweep_step_length_get+0xe>
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <acc_config_subsweep_step_length_get+0x34>)
 8009d2e:	6802      	ldr	r2, [r0, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	4604      	mov	r4, r0
 8009d34:	d007      	beq.n	8009d46 <acc_config_subsweep_step_length_get+0x1e>
 8009d36:	4b0a      	ldr	r3, [pc, #40]	@ (8009d60 <acc_config_subsweep_step_length_get+0x38>)
 8009d38:	4a0a      	ldr	r2, [pc, #40]	@ (8009d64 <acc_config_subsweep_step_length_get+0x3c>)
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	490a      	ldr	r1, [pc, #40]	@ (8009d68 <acc_config_subsweep_step_length_get+0x40>)
 8009d3e:	2000      	movs	r0, #0
 8009d40:	4798      	blx	r3
 8009d42:	2000      	movs	r0, #0
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	2903      	cmp	r1, #3
 8009d48:	460d      	mov	r5, r1
 8009d4a:	d903      	bls.n	8009d54 <acc_config_subsweep_step_length_get+0x2c>
 8009d4c:	f7ff fd18 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d0f7      	beq.n	8009d44 <acc_config_subsweep_step_length_get+0x1c>
 8009d54:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009d58:	8960      	ldrh	r0, [r4, #10]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	1337b00f 	.word	0x1337b00f
 8009d60:	20000610 	.word	0x20000610
 8009d64:	080151f8 	.word	0x080151f8
 8009d68:	080151f0 	.word	0x080151f0

08009d6c <acc_config_subsweep_profile_set>:
 8009d6c:	b570      	push	{r4, r5, r6, lr}
 8009d6e:	b120      	cbz	r0, 8009d7a <acc_config_subsweep_profile_set+0xe>
 8009d70:	4b0b      	ldr	r3, [pc, #44]	@ (8009da0 <acc_config_subsweep_profile_set+0x34>)
 8009d72:	4604      	mov	r4, r0
 8009d74:	6800      	ldr	r0, [r0, #0]
 8009d76:	4298      	cmp	r0, r3
 8009d78:	d007      	beq.n	8009d8a <acc_config_subsweep_profile_set+0x1e>
 8009d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009da4 <acc_config_subsweep_profile_set+0x38>)
 8009d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8009da8 <acc_config_subsweep_profile_set+0x3c>)
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	490a      	ldr	r1, [pc, #40]	@ (8009dac <acc_config_subsweep_profile_set+0x40>)
 8009d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d86:	2000      	movs	r0, #0
 8009d88:	4718      	bx	r3
 8009d8a:	2a03      	cmp	r2, #3
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	4616      	mov	r6, r2
 8009d90:	d902      	bls.n	8009d98 <acc_config_subsweep_profile_set+0x2c>
 8009d92:	f7ff fcf5 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009d96:	b110      	cbz	r0, 8009d9e <acc_config_subsweep_profile_set+0x32>
 8009d98:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009d9c:	74e5      	strb	r5, [r4, #19]
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	1337b00f 	.word	0x1337b00f
 8009da4:	20000610 	.word	0x20000610
 8009da8:	080151f8 	.word	0x080151f8
 8009dac:	080151f0 	.word	0x080151f0

08009db0 <acc_config_subsweep_profile_get>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	b120      	cbz	r0, 8009dbe <acc_config_subsweep_profile_get+0xe>
 8009db4:	4b0b      	ldr	r3, [pc, #44]	@ (8009de4 <acc_config_subsweep_profile_get+0x34>)
 8009db6:	6802      	ldr	r2, [r0, #0]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	4604      	mov	r4, r0
 8009dbc:	d007      	beq.n	8009dce <acc_config_subsweep_profile_get+0x1e>
 8009dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009de8 <acc_config_subsweep_profile_get+0x38>)
 8009dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dec <acc_config_subsweep_profile_get+0x3c>)
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	490a      	ldr	r1, [pc, #40]	@ (8009df0 <acc_config_subsweep_profile_get+0x40>)
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	4798      	blx	r3
 8009dca:	2002      	movs	r0, #2
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	2903      	cmp	r1, #3
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	d903      	bls.n	8009ddc <acc_config_subsweep_profile_get+0x2c>
 8009dd4:	f7ff fcd4 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0f6      	beq.n	8009dca <acc_config_subsweep_profile_get+0x1a>
 8009ddc:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009de0:	7ce0      	ldrb	r0, [r4, #19]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	1337b00f 	.word	0x1337b00f
 8009de8:	20000610 	.word	0x20000610
 8009dec:	080151f8 	.word	0x080151f8
 8009df0:	080151f0 	.word	0x080151f0

08009df4 <acc_config_subsweep_hwaas_set>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	b120      	cbz	r0, 8009e02 <acc_config_subsweep_hwaas_set+0xe>
 8009df8:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <acc_config_subsweep_hwaas_set+0x34>)
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	d007      	beq.n	8009e12 <acc_config_subsweep_hwaas_set+0x1e>
 8009e02:	4b0a      	ldr	r3, [pc, #40]	@ (8009e2c <acc_config_subsweep_hwaas_set+0x38>)
 8009e04:	4a0a      	ldr	r2, [pc, #40]	@ (8009e30 <acc_config_subsweep_hwaas_set+0x3c>)
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	490a      	ldr	r1, [pc, #40]	@ (8009e34 <acc_config_subsweep_hwaas_set+0x40>)
 8009e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e0e:	2000      	movs	r0, #0
 8009e10:	4718      	bx	r3
 8009e12:	2a03      	cmp	r2, #3
 8009e14:	460d      	mov	r5, r1
 8009e16:	4616      	mov	r6, r2
 8009e18:	d902      	bls.n	8009e20 <acc_config_subsweep_hwaas_set+0x2c>
 8009e1a:	f7ff fcb1 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009e1e:	b110      	cbz	r0, 8009e26 <acc_config_subsweep_hwaas_set+0x32>
 8009e20:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009e24:	81a5      	strh	r5, [r4, #12]
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	1337b00f 	.word	0x1337b00f
 8009e2c:	20000610 	.word	0x20000610
 8009e30:	080151f8 	.word	0x080151f8
 8009e34:	080151f0 	.word	0x080151f0

08009e38 <acc_config_subsweep_hwaas_get>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	b120      	cbz	r0, 8009e46 <acc_config_subsweep_hwaas_get+0xe>
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e6c <acc_config_subsweep_hwaas_get+0x34>)
 8009e3e:	6802      	ldr	r2, [r0, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	4604      	mov	r4, r0
 8009e44:	d007      	beq.n	8009e56 <acc_config_subsweep_hwaas_get+0x1e>
 8009e46:	4b0a      	ldr	r3, [pc, #40]	@ (8009e70 <acc_config_subsweep_hwaas_get+0x38>)
 8009e48:	4a0a      	ldr	r2, [pc, #40]	@ (8009e74 <acc_config_subsweep_hwaas_get+0x3c>)
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	490a      	ldr	r1, [pc, #40]	@ (8009e78 <acc_config_subsweep_hwaas_get+0x40>)
 8009e4e:	2000      	movs	r0, #0
 8009e50:	4798      	blx	r3
 8009e52:	2000      	movs	r0, #0
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	2903      	cmp	r1, #3
 8009e58:	460d      	mov	r5, r1
 8009e5a:	d903      	bls.n	8009e64 <acc_config_subsweep_hwaas_get+0x2c>
 8009e5c:	f7ff fc90 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0f7      	beq.n	8009e54 <acc_config_subsweep_hwaas_get+0x1c>
 8009e64:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009e68:	89a0      	ldrh	r0, [r4, #12]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	1337b00f 	.word	0x1337b00f
 8009e70:	20000610 	.word	0x20000610
 8009e74:	080151f8 	.word	0x080151f8
 8009e78:	080151f0 	.word	0x080151f0

08009e7c <acc_config_subsweep_receiver_gain_set>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	b120      	cbz	r0, 8009e8a <acc_config_subsweep_receiver_gain_set+0xe>
 8009e80:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb0 <acc_config_subsweep_receiver_gain_set+0x34>)
 8009e82:	4604      	mov	r4, r0
 8009e84:	6800      	ldr	r0, [r0, #0]
 8009e86:	4298      	cmp	r0, r3
 8009e88:	d007      	beq.n	8009e9a <acc_config_subsweep_receiver_gain_set+0x1e>
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb4 <acc_config_subsweep_receiver_gain_set+0x38>)
 8009e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb8 <acc_config_subsweep_receiver_gain_set+0x3c>)
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	490a      	ldr	r1, [pc, #40]	@ (8009ebc <acc_config_subsweep_receiver_gain_set+0x40>)
 8009e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e96:	2000      	movs	r0, #0
 8009e98:	4718      	bx	r3
 8009e9a:	2a03      	cmp	r2, #3
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4616      	mov	r6, r2
 8009ea0:	d902      	bls.n	8009ea8 <acc_config_subsweep_receiver_gain_set+0x2c>
 8009ea2:	f7ff fc6d 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009ea6:	b110      	cbz	r0, 8009eae <acc_config_subsweep_receiver_gain_set+0x32>
 8009ea8:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009eac:	73a5      	strb	r5, [r4, #14]
 8009eae:	bd70      	pop	{r4, r5, r6, pc}
 8009eb0:	1337b00f 	.word	0x1337b00f
 8009eb4:	20000610 	.word	0x20000610
 8009eb8:	080151f8 	.word	0x080151f8
 8009ebc:	080151f0 	.word	0x080151f0

08009ec0 <acc_config_subsweep_receiver_gain_get>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	b120      	cbz	r0, 8009ece <acc_config_subsweep_receiver_gain_get+0xe>
 8009ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef4 <acc_config_subsweep_receiver_gain_get+0x34>)
 8009ec6:	6802      	ldr	r2, [r0, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	4604      	mov	r4, r0
 8009ecc:	d007      	beq.n	8009ede <acc_config_subsweep_receiver_gain_get+0x1e>
 8009ece:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef8 <acc_config_subsweep_receiver_gain_get+0x38>)
 8009ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8009efc <acc_config_subsweep_receiver_gain_get+0x3c>)
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	490a      	ldr	r1, [pc, #40]	@ (8009f00 <acc_config_subsweep_receiver_gain_get+0x40>)
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	4798      	blx	r3
 8009eda:	2000      	movs	r0, #0
 8009edc:	bd38      	pop	{r3, r4, r5, pc}
 8009ede:	2903      	cmp	r1, #3
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	d903      	bls.n	8009eec <acc_config_subsweep_receiver_gain_get+0x2c>
 8009ee4:	f7ff fc4c 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d0f7      	beq.n	8009edc <acc_config_subsweep_receiver_gain_get+0x1c>
 8009eec:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009ef0:	7ba0      	ldrb	r0, [r4, #14]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	1337b00f 	.word	0x1337b00f
 8009ef8:	20000610 	.word	0x20000610
 8009efc:	080151f8 	.word	0x080151f8
 8009f00:	080151f0 	.word	0x080151f0

08009f04 <acc_config_subsweep_enable_tx_set>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	b120      	cbz	r0, 8009f12 <acc_config_subsweep_enable_tx_set+0xe>
 8009f08:	4b0b      	ldr	r3, [pc, #44]	@ (8009f38 <acc_config_subsweep_enable_tx_set+0x34>)
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	4298      	cmp	r0, r3
 8009f10:	d007      	beq.n	8009f22 <acc_config_subsweep_enable_tx_set+0x1e>
 8009f12:	4b0a      	ldr	r3, [pc, #40]	@ (8009f3c <acc_config_subsweep_enable_tx_set+0x38>)
 8009f14:	4a0a      	ldr	r2, [pc, #40]	@ (8009f40 <acc_config_subsweep_enable_tx_set+0x3c>)
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	490a      	ldr	r1, [pc, #40]	@ (8009f44 <acc_config_subsweep_enable_tx_set+0x40>)
 8009f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4718      	bx	r3
 8009f22:	2a03      	cmp	r2, #3
 8009f24:	460d      	mov	r5, r1
 8009f26:	4616      	mov	r6, r2
 8009f28:	d902      	bls.n	8009f30 <acc_config_subsweep_enable_tx_set+0x2c>
 8009f2a:	f7ff fc29 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009f2e:	b110      	cbz	r0, 8009f36 <acc_config_subsweep_enable_tx_set+0x32>
 8009f30:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009f34:	73e5      	strb	r5, [r4, #15]
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	1337b00f 	.word	0x1337b00f
 8009f3c:	20000610 	.word	0x20000610
 8009f40:	080151f8 	.word	0x080151f8
 8009f44:	080151f0 	.word	0x080151f0

08009f48 <acc_config_subsweep_phase_enhancement_set>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	b120      	cbz	r0, 8009f56 <acc_config_subsweep_phase_enhancement_set+0xe>
 8009f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f7c <acc_config_subsweep_phase_enhancement_set+0x34>)
 8009f4e:	4604      	mov	r4, r0
 8009f50:	6800      	ldr	r0, [r0, #0]
 8009f52:	4298      	cmp	r0, r3
 8009f54:	d007      	beq.n	8009f66 <acc_config_subsweep_phase_enhancement_set+0x1e>
 8009f56:	4b0a      	ldr	r3, [pc, #40]	@ (8009f80 <acc_config_subsweep_phase_enhancement_set+0x38>)
 8009f58:	4a0a      	ldr	r2, [pc, #40]	@ (8009f84 <acc_config_subsweep_phase_enhancement_set+0x3c>)
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	490a      	ldr	r1, [pc, #40]	@ (8009f88 <acc_config_subsweep_phase_enhancement_set+0x40>)
 8009f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f62:	2000      	movs	r0, #0
 8009f64:	4718      	bx	r3
 8009f66:	2a03      	cmp	r2, #3
 8009f68:	460d      	mov	r5, r1
 8009f6a:	4616      	mov	r6, r2
 8009f6c:	d902      	bls.n	8009f74 <acc_config_subsweep_phase_enhancement_set+0x2c>
 8009f6e:	f7ff fc07 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009f72:	b110      	cbz	r0, 8009f7a <acc_config_subsweep_phase_enhancement_set+0x32>
 8009f74:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009f78:	7425      	strb	r5, [r4, #16]
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	1337b00f 	.word	0x1337b00f
 8009f80:	20000610 	.word	0x20000610
 8009f84:	080151f8 	.word	0x080151f8
 8009f88:	080151f0 	.word	0x080151f0

08009f8c <acc_config_subsweep_phase_enhancement_get>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	b120      	cbz	r0, 8009f9a <acc_config_subsweep_phase_enhancement_get+0xe>
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <acc_config_subsweep_phase_enhancement_get+0x34>)
 8009f92:	6802      	ldr	r2, [r0, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	4604      	mov	r4, r0
 8009f98:	d007      	beq.n	8009faa <acc_config_subsweep_phase_enhancement_get+0x1e>
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc4 <acc_config_subsweep_phase_enhancement_get+0x38>)
 8009f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8009fc8 <acc_config_subsweep_phase_enhancement_get+0x3c>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	490a      	ldr	r1, [pc, #40]	@ (8009fcc <acc_config_subsweep_phase_enhancement_get+0x40>)
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	4798      	blx	r3
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	2903      	cmp	r1, #3
 8009fac:	460d      	mov	r5, r1
 8009fae:	d903      	bls.n	8009fb8 <acc_config_subsweep_phase_enhancement_get+0x2c>
 8009fb0:	f7ff fbe6 	bl	8009780 <acc_config_subsweep_validate.part.0>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d0f7      	beq.n	8009fa8 <acc_config_subsweep_phase_enhancement_get+0x1c>
 8009fb8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009fbc:	7c20      	ldrb	r0, [r4, #16]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	1337b00f 	.word	0x1337b00f
 8009fc4:	20000610 	.word	0x20000610
 8009fc8:	080151f8 	.word	0x080151f8
 8009fcc:	080151f0 	.word	0x080151f0

08009fd0 <acc_config_start_point_set>:
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7ff bdff 	b.w	8009bd4 <acc_config_subsweep_start_point_set>
 8009fd6:	bf00      	nop

08009fd8 <acc_config_num_points_set>:
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f7ff be3f 	b.w	8009c5c <acc_config_subsweep_num_points_set>
 8009fde:	bf00      	nop

08009fe0 <acc_config_step_length_set>:
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f7ff be7f 	b.w	8009ce4 <acc_config_subsweep_step_length_set>
 8009fe6:	bf00      	nop

08009fe8 <acc_config_profile_set>:
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7ff bebf 	b.w	8009d6c <acc_config_subsweep_profile_set>
 8009fee:	bf00      	nop

08009ff0 <acc_config_hwaas_set>:
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7ff beff 	b.w	8009df4 <acc_config_subsweep_hwaas_set>
 8009ff6:	bf00      	nop

08009ff8 <acc_config_receiver_gain_set>:
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f7ff bf3f 	b.w	8009e7c <acc_config_subsweep_receiver_gain_set>
 8009ffe:	bf00      	nop

0800a000 <acc_config_enable_tx_set>:
 800a000:	2200      	movs	r2, #0
 800a002:	f7ff bf7f 	b.w	8009f04 <acc_config_subsweep_enable_tx_set>
 800a006:	bf00      	nop

0800a008 <acc_config_phase_enhancement_set>:
 800a008:	2200      	movs	r2, #0
 800a00a:	f7ff bf9d 	b.w	8009f48 <acc_config_subsweep_phase_enhancement_set>
 800a00e:	bf00      	nop

0800a010 <acc_config_sweeps_per_frame_set>:
 800a010:	b118      	cbz	r0, 800a01a <acc_config_sweeps_per_frame_set+0xa>
 800a012:	4b06      	ldr	r3, [pc, #24]	@ (800a02c <acc_config_sweeps_per_frame_set+0x1c>)
 800a014:	6802      	ldr	r2, [r0, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d005      	beq.n	800a026 <acc_config_sweeps_per_frame_set+0x16>
 800a01a:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <acc_config_sweeps_per_frame_set+0x20>)
 800a01c:	4a05      	ldr	r2, [pc, #20]	@ (800a034 <acc_config_sweeps_per_frame_set+0x24>)
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	4905      	ldr	r1, [pc, #20]	@ (800a038 <acc_config_sweeps_per_frame_set+0x28>)
 800a022:	2000      	movs	r0, #0
 800a024:	4718      	bx	r3
 800a026:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 800a02a:	4770      	bx	lr
 800a02c:	1337b00f 	.word	0x1337b00f
 800a030:	20000610 	.word	0x20000610
 800a034:	080151f8 	.word	0x080151f8
 800a038:	080151f0 	.word	0x080151f0

0800a03c <acc_config_sweeps_per_frame_get>:
 800a03c:	b508      	push	{r3, lr}
 800a03e:	b118      	cbz	r0, 800a048 <acc_config_sweeps_per_frame_get+0xc>
 800a040:	4b07      	ldr	r3, [pc, #28]	@ (800a060 <acc_config_sweeps_per_frame_get+0x24>)
 800a042:	6802      	ldr	r2, [r0, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d007      	beq.n	800a058 <acc_config_sweeps_per_frame_get+0x1c>
 800a048:	4b06      	ldr	r3, [pc, #24]	@ (800a064 <acc_config_sweeps_per_frame_get+0x28>)
 800a04a:	4a07      	ldr	r2, [pc, #28]	@ (800a068 <acc_config_sweeps_per_frame_get+0x2c>)
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	4907      	ldr	r1, [pc, #28]	@ (800a06c <acc_config_sweeps_per_frame_get+0x30>)
 800a050:	2000      	movs	r0, #0
 800a052:	4798      	blx	r3
 800a054:	2000      	movs	r0, #0
 800a056:	bd08      	pop	{r3, pc}
 800a058:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
 800a05c:	bd08      	pop	{r3, pc}
 800a05e:	bf00      	nop
 800a060:	1337b00f 	.word	0x1337b00f
 800a064:	20000610 	.word	0x20000610
 800a068:	080151f8 	.word	0x080151f8
 800a06c:	080151f0 	.word	0x080151f0

0800a070 <acc_config_get_settings>:
 800a070:	b508      	push	{r3, lr}
 800a072:	b118      	cbz	r0, 800a07c <acc_config_get_settings+0xc>
 800a074:	4b06      	ldr	r3, [pc, #24]	@ (800a090 <acc_config_get_settings+0x20>)
 800a076:	6802      	ldr	r2, [r0, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d007      	beq.n	800a08c <acc_config_get_settings+0x1c>
 800a07c:	4b05      	ldr	r3, [pc, #20]	@ (800a094 <acc_config_get_settings+0x24>)
 800a07e:	4a06      	ldr	r2, [pc, #24]	@ (800a098 <acc_config_get_settings+0x28>)
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	4906      	ldr	r1, [pc, #24]	@ (800a09c <acc_config_get_settings+0x2c>)
 800a084:	2000      	movs	r0, #0
 800a086:	4798      	blx	r3
 800a088:	2000      	movs	r0, #0
 800a08a:	bd08      	pop	{r3, pc}
 800a08c:	3004      	adds	r0, #4
 800a08e:	bd08      	pop	{r3, pc}
 800a090:	1337b00f 	.word	0x1337b00f
 800a094:	20000610 	.word	0x20000610
 800a098:	080151f8 	.word	0x080151f8
 800a09c:	080151f0 	.word	0x080151f0

0800a0a0 <acc_config_subsweep_enable_loopback_set>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	b120      	cbz	r0, 800a0ae <acc_config_subsweep_enable_loopback_set+0xe>
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <acc_config_subsweep_enable_loopback_set+0x34>)
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	6800      	ldr	r0, [r0, #0]
 800a0aa:	4298      	cmp	r0, r3
 800a0ac:	d007      	beq.n	800a0be <acc_config_subsweep_enable_loopback_set+0x1e>
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <acc_config_subsweep_enable_loopback_set+0x38>)
 800a0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0dc <acc_config_subsweep_enable_loopback_set+0x3c>)
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	490a      	ldr	r1, [pc, #40]	@ (800a0e0 <acc_config_subsweep_enable_loopback_set+0x40>)
 800a0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4718      	bx	r3
 800a0be:	2a03      	cmp	r2, #3
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	4616      	mov	r6, r2
 800a0c4:	d902      	bls.n	800a0cc <acc_config_subsweep_enable_loopback_set+0x2c>
 800a0c6:	f7ff fb5b 	bl	8009780 <acc_config_subsweep_validate.part.0>
 800a0ca:	b110      	cbz	r0, 800a0d2 <acc_config_subsweep_enable_loopback_set+0x32>
 800a0cc:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800a0d0:	7465      	strb	r5, [r4, #17]
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	1337b00f 	.word	0x1337b00f
 800a0d8:	20000610 	.word	0x20000610
 800a0dc:	080151f8 	.word	0x080151f8
 800a0e0:	080151f0 	.word	0x080151f0

0800a0e4 <acc_config_subsweep_enable_loopback_get>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	b120      	cbz	r0, 800a0f2 <acc_config_subsweep_enable_loopback_get+0xe>
 800a0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <acc_config_subsweep_enable_loopback_get+0x34>)
 800a0ea:	6802      	ldr	r2, [r0, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	d007      	beq.n	800a102 <acc_config_subsweep_enable_loopback_get+0x1e>
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <acc_config_subsweep_enable_loopback_get+0x38>)
 800a0f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a120 <acc_config_subsweep_enable_loopback_get+0x3c>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	490a      	ldr	r1, [pc, #40]	@ (800a124 <acc_config_subsweep_enable_loopback_get+0x40>)
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4798      	blx	r3
 800a0fe:	2000      	movs	r0, #0
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	2903      	cmp	r1, #3
 800a104:	460d      	mov	r5, r1
 800a106:	d903      	bls.n	800a110 <acc_config_subsweep_enable_loopback_get+0x2c>
 800a108:	f7ff fb3a 	bl	8009780 <acc_config_subsweep_validate.part.0>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d0f7      	beq.n	800a100 <acc_config_subsweep_enable_loopback_get+0x1c>
 800a110:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800a114:	7c60      	ldrb	r0, [r4, #17]
 800a116:	bd38      	pop	{r3, r4, r5, pc}
 800a118:	1337b00f 	.word	0x1337b00f
 800a11c:	20000610 	.word	0x20000610
 800a120:	080151f8 	.word	0x080151f8
 800a124:	080151f0 	.word	0x080151f0

0800a128 <acc_config_subsweep_prf_set>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	b120      	cbz	r0, 800a136 <acc_config_subsweep_prf_set+0xe>
 800a12c:	4b0b      	ldr	r3, [pc, #44]	@ (800a15c <acc_config_subsweep_prf_set+0x34>)
 800a12e:	4604      	mov	r4, r0
 800a130:	6800      	ldr	r0, [r0, #0]
 800a132:	4298      	cmp	r0, r3
 800a134:	d007      	beq.n	800a146 <acc_config_subsweep_prf_set+0x1e>
 800a136:	4b0a      	ldr	r3, [pc, #40]	@ (800a160 <acc_config_subsweep_prf_set+0x38>)
 800a138:	4a0a      	ldr	r2, [pc, #40]	@ (800a164 <acc_config_subsweep_prf_set+0x3c>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	490a      	ldr	r1, [pc, #40]	@ (800a168 <acc_config_subsweep_prf_set+0x40>)
 800a13e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a142:	2000      	movs	r0, #0
 800a144:	4718      	bx	r3
 800a146:	2a03      	cmp	r2, #3
 800a148:	460d      	mov	r5, r1
 800a14a:	4616      	mov	r6, r2
 800a14c:	d902      	bls.n	800a154 <acc_config_subsweep_prf_set+0x2c>
 800a14e:	f7ff fb17 	bl	8009780 <acc_config_subsweep_validate.part.0>
 800a152:	b110      	cbz	r0, 800a15a <acc_config_subsweep_prf_set+0x32>
 800a154:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800a158:	74a5      	strb	r5, [r4, #18]
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	1337b00f 	.word	0x1337b00f
 800a160:	20000610 	.word	0x20000610
 800a164:	080151f8 	.word	0x080151f8
 800a168:	080151f0 	.word	0x080151f0

0800a16c <acc_config_prf_set>:
 800a16c:	2200      	movs	r2, #0
 800a16e:	f7ff bfdb 	b.w	800a128 <acc_config_subsweep_prf_set>
 800a172:	bf00      	nop

0800a174 <acc_config_subsweep_prf_get>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	b120      	cbz	r0, 800a182 <acc_config_subsweep_prf_get+0xe>
 800a178:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a8 <acc_config_subsweep_prf_get+0x34>)
 800a17a:	6802      	ldr	r2, [r0, #0]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	4604      	mov	r4, r0
 800a180:	d007      	beq.n	800a192 <acc_config_subsweep_prf_get+0x1e>
 800a182:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ac <acc_config_subsweep_prf_get+0x38>)
 800a184:	4a0a      	ldr	r2, [pc, #40]	@ (800a1b0 <acc_config_subsweep_prf_get+0x3c>)
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	490a      	ldr	r1, [pc, #40]	@ (800a1b4 <acc_config_subsweep_prf_get+0x40>)
 800a18a:	2000      	movs	r0, #0
 800a18c:	4798      	blx	r3
 800a18e:	2000      	movs	r0, #0
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	2903      	cmp	r1, #3
 800a194:	460d      	mov	r5, r1
 800a196:	d903      	bls.n	800a1a0 <acc_config_subsweep_prf_get+0x2c>
 800a198:	f7ff faf2 	bl	8009780 <acc_config_subsweep_validate.part.0>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d0f7      	beq.n	800a190 <acc_config_subsweep_prf_get+0x1c>
 800a1a0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800a1a4:	7ca0      	ldrb	r0, [r4, #18]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	1337b00f 	.word	0x1337b00f
 800a1ac:	20000610 	.word	0x20000610
 800a1b0:	080151f8 	.word	0x080151f8
 800a1b4:	080151f0 	.word	0x080151f0

0800a1b8 <acc_config_enable_loopback_set>:
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7ff bf71 	b.w	800a0a0 <acc_config_subsweep_enable_loopback_set>
 800a1be:	bf00      	nop

0800a1c0 <data_callback>:
 800a1c0:	b470      	push	{r4, r5, r6}
 800a1c2:	888c      	ldrh	r4, [r1, #4]
 800a1c4:	6893      	ldr	r3, [r2, #8]
 800a1c6:	890e      	ldrh	r6, [r1, #8]
 800a1c8:	798d      	ldrb	r5, [r1, #6]
 800a1ca:	79ca      	ldrb	r2, [r1, #7]
 800a1cc:	709a      	strb	r2, [r3, #2]
 800a1ce:	3c00      	subs	r4, #0
 800a1d0:	bf18      	it	ne
 800a1d2:	2401      	movne	r4, #1
 800a1d4:	809e      	strh	r6, [r3, #4]
 800a1d6:	701c      	strb	r4, [r3, #0]
 800a1d8:	705d      	strb	r5, [r3, #1]
 800a1da:	6098      	str	r0, [r3, #8]
 800a1dc:	bc70      	pop	{r4, r5, r6}
 800a1de:	4770      	bx	lr

0800a1e0 <acc_processing_execute>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4615      	mov	r5, r2
 800a1e4:	460e      	mov	r6, r1
 800a1e6:	b120      	cbz	r0, 800a1f2 <acc_processing_execute+0x12>
 800a1e8:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <acc_processing_execute+0x60>)
 800a1ea:	6802      	ldr	r2, [r0, #0]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	d008      	beq.n	800a204 <acc_processing_execute+0x24>
 800a1f2:	4c14      	ldr	r4, [pc, #80]	@ (800a244 <acc_processing_execute+0x64>)
 800a1f4:	4a14      	ldr	r2, [pc, #80]	@ (800a248 <acc_processing_execute+0x68>)
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	4914      	ldr	r1, [pc, #80]	@ (800a24c <acc_processing_execute+0x6c>)
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	4798      	blx	r3
 800a1fe:	b176      	cbz	r6, 800a21e <acc_processing_execute+0x3e>
 800a200:	b1a5      	cbz	r5, 800a22c <acc_processing_execute+0x4c>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	b151      	cbz	r1, 800a21c <acc_processing_execute+0x3c>
 800a206:	b1c5      	cbz	r5, 800a23a <acc_processing_execute+0x5a>
 800a208:	6085      	str	r5, [r0, #8]
 800a20a:	6840      	ldr	r0, [r0, #4]
 800a20c:	f002 fb08 	bl	800c820 <acc_pipeline_a121_prepare_memory>
 800a210:	6863      	ldr	r3, [r4, #4]
 800a212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a216:	e9d3 0200 	ldrd	r0, r2, [r3]
 800a21a:	4710      	bx	r2
 800a21c:	4c09      	ldr	r4, [pc, #36]	@ (800a244 <acc_processing_execute+0x64>)
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	4a0b      	ldr	r2, [pc, #44]	@ (800a250 <acc_processing_execute+0x70>)
 800a222:	490a      	ldr	r1, [pc, #40]	@ (800a24c <acc_processing_execute+0x6c>)
 800a224:	2000      	movs	r0, #0
 800a226:	4798      	blx	r3
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d1ea      	bne.n	800a202 <acc_processing_execute+0x22>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	4a09      	ldr	r2, [pc, #36]	@ (800a254 <acc_processing_execute+0x74>)
 800a230:	4906      	ldr	r1, [pc, #24]	@ (800a24c <acc_processing_execute+0x6c>)
 800a232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a236:	2000      	movs	r0, #0
 800a238:	4718      	bx	r3
 800a23a:	4c02      	ldr	r4, [pc, #8]	@ (800a244 <acc_processing_execute+0x64>)
 800a23c:	e7f6      	b.n	800a22c <acc_processing_execute+0x4c>
 800a23e:	bf00      	nop
 800a240:	1337b00d 	.word	0x1337b00d
 800a244:	20000610 	.word	0x20000610
 800a248:	0801547c 	.word	0x0801547c
 800a24c:	08015470 	.word	0x08015470
 800a250:	08015498 	.word	0x08015498
 800a254:	08015458 	.word	0x08015458

0800a258 <acc_processing_destroy>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	b120      	cbz	r0, 800a266 <acc_processing_destroy+0xe>
 800a25c:	4b0c      	ldr	r3, [pc, #48]	@ (800a290 <acc_processing_destroy+0x38>)
 800a25e:	6802      	ldr	r2, [r0, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	4604      	mov	r4, r0
 800a264:	d007      	beq.n	800a276 <acc_processing_destroy+0x1e>
 800a266:	4b0b      	ldr	r3, [pc, #44]	@ (800a294 <acc_processing_destroy+0x3c>)
 800a268:	4a0b      	ldr	r2, [pc, #44]	@ (800a298 <acc_processing_destroy+0x40>)
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	490b      	ldr	r1, [pc, #44]	@ (800a29c <acc_processing_destroy+0x44>)
 800a26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a272:	2000      	movs	r0, #0
 800a274:	4718      	bx	r3
 800a276:	6840      	ldr	r0, [r0, #4]
 800a278:	b118      	cbz	r0, 800a282 <acc_processing_destroy+0x2a>
 800a27a:	68c3      	ldr	r3, [r0, #12]
 800a27c:	4798      	blx	r3
 800a27e:	2300      	movs	r3, #0
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	2300      	movs	r3, #0
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	4620      	mov	r0, r4
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28c:	f002 b91c 	b.w	800c4c8 <acc_rss_integration_mem_free>
 800a290:	1337b00d 	.word	0x1337b00d
 800a294:	20000610 	.word	0x20000610
 800a298:	0801547c 	.word	0x0801547c
 800a29c:	08015470 	.word	0x08015470

0800a2a0 <acc_processing_create>:
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	b088      	sub	sp, #32
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	f7ff fee2 	bl	800a070 <acc_config_get_settings>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d050      	beq.n	800a352 <acc_processing_create+0xb2>
 800a2b0:	2c00      	cmp	r4, #0
 800a2b2:	d043      	beq.n	800a33c <acc_processing_create+0x9c>
 800a2b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a370 <acc_processing_create+0xd0>)
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	2366      	movs	r3, #102	@ 0x66
 800a2ba:	2110      	movs	r1, #16
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f002 f8e7 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d044      	beq.n	800a352 <acc_processing_create+0xb2>
 800a2c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a374 <acc_processing_create+0xd4>)
 800a2ca:	6003      	str	r3, [r0, #0]
 800a2cc:	f10d 080c 	add.w	r8, sp, #12
 800a2d0:	4b29      	ldr	r3, [pc, #164]	@ (800a378 <acc_processing_create+0xd8>)
 800a2d2:	9600      	str	r6, [sp, #0]
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	4668      	mov	r0, sp
 800a2d8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800a2dc:	f002 f93a 	bl	800c554 <acc_pipeline_a121_assemble>
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	6068      	str	r0, [r5, #4]
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d03e      	beq.n	800a366 <acc_processing_create+0xc6>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	8063      	strh	r3, [r4, #2]
 800a2ec:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	469c      	mov	ip, r3
 800a2f4:	1d20      	adds	r0, r4, #4
 800a2f6:	b2df      	uxtb	r7, r3
 800a2f8:	42b9      	cmp	r1, r7
 800a2fa:	d92f      	bls.n	800a35c <acc_processing_create+0xbc>
 800a2fc:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 800a300:	8002      	strh	r2, [r0, #0]
 800a302:	443a      	add	r2, r7
 800a304:	b292      	uxth	r2, r2
 800a306:	8062      	strh	r2, [r4, #2]
 800a308:	8107      	strh	r7, [r0, #8]
 800a30a:	3301      	adds	r3, #1
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	f100 0002 	add.w	r0, r0, #2
 800a312:	d1f0      	bne.n	800a2f6 <acc_processing_create+0x56>
 800a314:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800a318:	9905      	ldr	r1, [sp, #20]
 800a31a:	6161      	str	r1, [r4, #20]
 800a31c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a320:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800a324:	7620      	strb	r0, [r4, #24]
 800a326:	fb13 f202 	smulbb	r2, r3, r2
 800a32a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a32e:	8022      	strh	r2, [r4, #0]
 800a330:	81a9      	strh	r1, [r5, #12]
 800a332:	81eb      	strh	r3, [r5, #14]
 800a334:	4628      	mov	r0, r5
 800a336:	b008      	add	sp, #32
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	4b0f      	ldr	r3, [pc, #60]	@ (800a37c <acc_processing_create+0xdc>)
 800a33e:	4a10      	ldr	r2, [pc, #64]	@ (800a380 <acc_processing_create+0xe0>)
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	490b      	ldr	r1, [pc, #44]	@ (800a370 <acc_processing_create+0xd0>)
 800a344:	4620      	mov	r0, r4
 800a346:	4798      	blx	r3
 800a348:	4625      	mov	r5, r4
 800a34a:	4628      	mov	r0, r5
 800a34c:	b008      	add	sp, #32
 800a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a352:	2500      	movs	r5, #0
 800a354:	4628      	mov	r0, r5
 800a356:	b008      	add	sp, #32
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	f8a0 c000 	strh.w	ip, [r0]
 800a360:	f8a0 c008 	strh.w	ip, [r0, #8]
 800a364:	e7d1      	b.n	800a30a <acc_processing_create+0x6a>
 800a366:	4628      	mov	r0, r5
 800a368:	f7ff ff76 	bl	800a258 <acc_processing_destroy>
 800a36c:	463d      	mov	r5, r7
 800a36e:	e7e1      	b.n	800a334 <acc_processing_create+0x94>
 800a370:	08015470 	.word	0x08015470
 800a374:	1337b00d 	.word	0x1337b00d
 800a378:	0800a1c1 	.word	0x0800a1c1
 800a37c:	20000610 	.word	0x20000610
 800a380:	080154b0 	.word	0x080154b0

0800a384 <acc_processing_points_to_meter>:
 800a384:	f002 bcd8 	b.w	800cd38 <acc_radar_engine_a121_points_to_meter>

0800a388 <acc_sensor_destroy>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	b120      	cbz	r0, 800a396 <acc_sensor_destroy+0xe>
 800a38c:	4b0b      	ldr	r3, [pc, #44]	@ (800a3bc <acc_sensor_destroy+0x34>)
 800a38e:	6802      	ldr	r2, [r0, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	4604      	mov	r4, r0
 800a394:	d007      	beq.n	800a3a6 <acc_sensor_destroy+0x1e>
 800a396:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c0 <acc_sensor_destroy+0x38>)
 800a398:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c4 <acc_sensor_destroy+0x3c>)
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	490a      	ldr	r1, [pc, #40]	@ (800a3c8 <acc_sensor_destroy+0x40>)
 800a39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4718      	bx	r3
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	6900      	ldr	r0, [r0, #16]
 800a3ac:	f002 fa70 	bl	800c890 <acc_radar_engine_a121_context_destroy>
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b6:	f002 b887 	b.w	800c4c8 <acc_rss_integration_mem_free>
 800a3ba:	bf00      	nop
 800a3bc:	1337b00e 	.word	0x1337b00e
 800a3c0:	20000610 	.word	0x20000610
 800a3c4:	080154c8 	.word	0x080154c8
 800a3c8:	080154e0 	.word	0x080154e0

0800a3cc <acc_sensor_create>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	4a20      	ldr	r2, [pc, #128]	@ (800a450 <acc_sensor_create+0x84>)
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	233b      	movs	r3, #59	@ 0x3b
 800a3d4:	2114      	movs	r1, #20
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	f002 f85a 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800a3dc:	b378      	cbz	r0, 800a43e <acc_sensor_create+0x72>
 800a3de:	4604      	mov	r4, r0
 800a3e0:	f002 fa44 	bl	800c86c <acc_radar_engine_a121_context_create>
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	6120      	str	r0, [r4, #16]
 800a3e8:	b360      	cbz	r0, 800a444 <acc_sensor_create+0x78>
 800a3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a454 <acc_sensor_create+0x88>)
 800a3ec:	60a6      	str	r6, [r4, #8]
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	e9c4 3100 	strd	r3, r1, [r4]
 800a3f4:	7361      	strb	r1, [r4, #13]
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f002 faf4 	bl	800c9e4 <acc_radar_engine_a121_check_asic_id>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	b168      	cbz	r0, 800a41c <acc_sensor_create+0x50>
 800a400:	4630      	mov	r0, r6
 800a402:	f002 faf1 	bl	800c9e8 <acc_radar_engine_a121_is_sensor_running>
 800a406:	4605      	mov	r5, r0
 800a408:	b980      	cbnz	r0, 800a42c <acc_sensor_create+0x60>
 800a40a:	68a0      	ldr	r0, [r4, #8]
 800a40c:	f002 fc96 	bl	800cd3c <acc_radar_engine_a121_init_interrupts>
 800a410:	68a0      	ldr	r0, [r4, #8]
 800a412:	4629      	mov	r1, r5
 800a414:	f002 fc94 	bl	800cd40 <acc_radar_engine_a121_hibernate_off>
 800a418:	4620      	mov	r0, r4
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7ff ffb3 	bl	800a388 <acc_sensor_destroy>
 800a422:	4630      	mov	r0, r6
 800a424:	f002 fae0 	bl	800c9e8 <acc_radar_engine_a121_is_sensor_running>
 800a428:	b148      	cbz	r0, 800a43e <acc_sensor_create+0x72>
 800a42a:	462c      	mov	r4, r5
 800a42c:	4b0a      	ldr	r3, [pc, #40]	@ (800a458 <acc_sensor_create+0x8c>)
 800a42e:	4a0b      	ldr	r2, [pc, #44]	@ (800a45c <acc_sensor_create+0x90>)
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	4907      	ldr	r1, [pc, #28]	@ (800a450 <acc_sensor_create+0x84>)
 800a434:	2000      	movs	r0, #0
 800a436:	4798      	blx	r3
 800a438:	4620      	mov	r0, r4
 800a43a:	f7ff ffa5 	bl	800a388 <acc_sensor_destroy>
 800a43e:	2400      	movs	r4, #0
 800a440:	4620      	mov	r0, r4
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	4620      	mov	r0, r4
 800a446:	f002 f83f 	bl	800c4c8 <acc_rss_integration_mem_free>
 800a44a:	462c      	mov	r4, r5
 800a44c:	e7f8      	b.n	800a440 <acc_sensor_create+0x74>
 800a44e:	bf00      	nop
 800a450:	080154e0 	.word	0x080154e0
 800a454:	1337b00e 	.word	0x1337b00e
 800a458:	20000610 	.word	0x20000610
 800a45c:	080154e8 	.word	0x080154e8

0800a460 <acc_sensor_calibrate>:
 800a460:	b530      	push	{r4, r5, lr}
 800a462:	b083      	sub	sp, #12
 800a464:	b128      	cbz	r0, 800a472 <acc_sensor_calibrate+0x12>
 800a466:	460d      	mov	r5, r1
 800a468:	4604      	mov	r4, r0
 800a46a:	4912      	ldr	r1, [pc, #72]	@ (800a4b4 <acc_sensor_calibrate+0x54>)
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	4288      	cmp	r0, r1
 800a470:	d008      	beq.n	800a484 <acc_sensor_calibrate+0x24>
 800a472:	4b11      	ldr	r3, [pc, #68]	@ (800a4b8 <acc_sensor_calibrate+0x58>)
 800a474:	4a11      	ldr	r2, [pc, #68]	@ (800a4bc <acc_sensor_calibrate+0x5c>)
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	4911      	ldr	r1, [pc, #68]	@ (800a4c0 <acc_sensor_calibrate+0x60>)
 800a47a:	2000      	movs	r0, #0
 800a47c:	4798      	blx	r3
 800a47e:	2000      	movs	r0, #0
 800a480:	b003      	add	sp, #12
 800a482:	bd30      	pop	{r4, r5, pc}
 800a484:	2d00      	cmp	r5, #0
 800a486:	d0fa      	beq.n	800a47e <acc_sensor_calibrate+0x1e>
 800a488:	2a00      	cmp	r2, #0
 800a48a:	d0f8      	beq.n	800a47e <acc_sensor_calibrate+0x1e>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0f6      	beq.n	800a47e <acc_sensor_calibrate+0x1e>
 800a490:	9200      	str	r2, [sp, #0]
 800a492:	4619      	mov	r1, r3
 800a494:	9a06      	ldr	r2, [sp, #24]
 800a496:	68a0      	ldr	r0, [r4, #8]
 800a498:	f104 030d 	add.w	r3, r4, #13
 800a49c:	f000 f8d0 	bl	800a640 <acc_calibration_a121_calibrate>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d0ec      	beq.n	800a47e <acc_sensor_calibrate+0x1e>
 800a4a4:	7b63      	ldrb	r3, [r4, #13]
 800a4a6:	2b0a      	cmp	r3, #10
 800a4a8:	bf0c      	ite	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	2300      	movne	r3, #0
 800a4ae:	702b      	strb	r3, [r5, #0]
 800a4b0:	e7e6      	b.n	800a480 <acc_sensor_calibrate+0x20>
 800a4b2:	bf00      	nop
 800a4b4:	1337b00e 	.word	0x1337b00e
 800a4b8:	20000610 	.word	0x20000610
 800a4bc:	080154c8 	.word	0x080154c8
 800a4c0:	080154e0 	.word	0x080154e0

0800a4c4 <acc_sensor_prepare>:
 800a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	b130      	cbz	r0, 800a4d8 <acc_sensor_prepare+0x14>
 800a4ca:	4616      	mov	r6, r2
 800a4cc:	461f      	mov	r7, r3
 800a4ce:	6802      	ldr	r2, [r0, #0]
 800a4d0:	4b22      	ldr	r3, [pc, #136]	@ (800a55c <acc_sensor_prepare+0x98>)
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	d008      	beq.n	800a4ea <acc_sensor_prepare+0x26>
 800a4d8:	4b21      	ldr	r3, [pc, #132]	@ (800a560 <acc_sensor_prepare+0x9c>)
 800a4da:	4a22      	ldr	r2, [pc, #136]	@ (800a564 <acc_sensor_prepare+0xa0>)
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	4922      	ldr	r1, [pc, #136]	@ (800a568 <acc_sensor_prepare+0xa4>)
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	4798      	blx	r3
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	b005      	add	sp, #20
 800a4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ea:	b1f6      	cbz	r6, 800a52a <acc_sensor_prepare+0x66>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	f000 fc36 	bl	800ad60 <acc_calibration_a121_validate_calibration>
 800a4f4:	b1c8      	cbz	r0, 800a52a <acc_sensor_prepare+0x66>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7ff fdba 	bl	800a070 <acc_config_get_settings>
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0f1      	beq.n	800a4e6 <acc_sensor_prepare+0x22>
 800a502:	68a0      	ldr	r0, [r4, #8]
 800a504:	f002 fa70 	bl	800c9e8 <acc_radar_engine_a121_is_sensor_running>
 800a508:	7320      	strb	r0, [r4, #12]
 800a50a:	b188      	cbz	r0, 800a530 <acc_sensor_prepare+0x6c>
 800a50c:	9700      	str	r7, [sp, #0]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	1d20      	adds	r0, r4, #4
 800a512:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800a516:	1da2      	adds	r2, r4, #6
 800a518:	9203      	str	r2, [sp, #12]
 800a51a:	68a0      	ldr	r0, [r4, #8]
 800a51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a51e:	4632      	mov	r2, r6
 800a520:	4629      	mov	r1, r5
 800a522:	f002 fb4f 	bl	800cbc4 <acc_radar_engine_a121_reconfigure>
 800a526:	b005      	add	sp, #20
 800a528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a52a:	4b0d      	ldr	r3, [pc, #52]	@ (800a560 <acc_sensor_prepare+0x9c>)
 800a52c:	4a0f      	ldr	r2, [pc, #60]	@ (800a56c <acc_sensor_prepare+0xa8>)
 800a52e:	e7d5      	b.n	800a4dc <acc_sensor_prepare+0x18>
 800a530:	68a0      	ldr	r0, [r4, #8]
 800a532:	f002 fc07 	bl	800cd44 <acc_radar_engine_a121_is_hibernate>
 800a536:	7b23      	ldrb	r3, [r4, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e7      	bne.n	800a50c <acc_sensor_prepare+0x48>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d1e5      	bne.n	800a50c <acc_sensor_prepare+0x48>
 800a540:	9700      	str	r7, [sp, #0]
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	1d20      	adds	r0, r4, #4
 800a546:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800a54a:	1da2      	adds	r2, r4, #6
 800a54c:	9203      	str	r2, [sp, #12]
 800a54e:	68a0      	ldr	r0, [r4, #8]
 800a550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a552:	4632      	mov	r2, r6
 800a554:	4629      	mov	r1, r5
 800a556:	f002 fa95 	bl	800ca84 <acc_radar_engine_a121_prepare>
 800a55a:	e7c4      	b.n	800a4e6 <acc_sensor_prepare+0x22>
 800a55c:	1337b00e 	.word	0x1337b00e
 800a560:	20000610 	.word	0x20000610
 800a564:	080154c8 	.word	0x080154c8
 800a568:	080154e0 	.word	0x080154e0
 800a56c:	08015504 	.word	0x08015504

0800a570 <acc_sensor_measure>:
 800a570:	b510      	push	{r4, lr}
 800a572:	b120      	cbz	r0, 800a57e <acc_sensor_measure+0xe>
 800a574:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b0 <acc_sensor_measure+0x40>)
 800a576:	6802      	ldr	r2, [r0, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	4604      	mov	r4, r0
 800a57c:	d007      	beq.n	800a58e <acc_sensor_measure+0x1e>
 800a57e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b4 <acc_sensor_measure+0x44>)
 800a580:	4a0d      	ldr	r2, [pc, #52]	@ (800a5b8 <acc_sensor_measure+0x48>)
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	490d      	ldr	r1, [pc, #52]	@ (800a5bc <acc_sensor_measure+0x4c>)
 800a586:	2000      	movs	r0, #0
 800a588:	4798      	blx	r3
 800a58a:	2000      	movs	r0, #0
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	7b03      	ldrb	r3, [r0, #12]
 800a590:	b93b      	cbnz	r3, 800a5a2 <acc_sensor_measure+0x32>
 800a592:	6880      	ldr	r0, [r0, #8]
 800a594:	f002 f980 	bl	800c898 <acc_radar_engine_a121_run_program>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d0f7      	beq.n	800a58c <acc_sensor_measure+0x1c>
 800a59c:	2301      	movs	r3, #1
 800a59e:	7323      	strb	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	6901      	ldr	r1, [r0, #16]
 800a5a4:	6880      	ldr	r0, [r0, #8]
 800a5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5aa:	f002 b977 	b.w	800c89c <acc_radar_engine_a121_measure>
 800a5ae:	bf00      	nop
 800a5b0:	1337b00e 	.word	0x1337b00e
 800a5b4:	20000610 	.word	0x20000610
 800a5b8:	080154c8 	.word	0x080154c8
 800a5bc:	080154e0 	.word	0x080154e0

0800a5c0 <acc_sensor_read>:
 800a5c0:	b530      	push	{r4, r5, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	b128      	cbz	r0, 800a5d2 <acc_sensor_read+0x12>
 800a5c6:	4b19      	ldr	r3, [pc, #100]	@ (800a62c <acc_sensor_read+0x6c>)
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	6801      	ldr	r1, [r0, #0]
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	d008      	beq.n	800a5e4 <acc_sensor_read+0x24>
 800a5d2:	4b17      	ldr	r3, [pc, #92]	@ (800a630 <acc_sensor_read+0x70>)
 800a5d4:	4a17      	ldr	r2, [pc, #92]	@ (800a634 <acc_sensor_read+0x74>)
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	4917      	ldr	r1, [pc, #92]	@ (800a638 <acc_sensor_read+0x78>)
 800a5da:	2000      	movs	r0, #0
 800a5dc:	4798      	blx	r3
 800a5de:	2000      	movs	r0, #0
 800a5e0:	b005      	add	sp, #20
 800a5e2:	bd30      	pop	{r4, r5, pc}
 800a5e4:	8883      	ldrh	r3, [r0, #4]
 800a5e6:	88c1      	ldrh	r1, [r0, #6]
 800a5e8:	440b      	add	r3, r1
 800a5ea:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a5ee:	d319      	bcc.n	800a624 <acc_sensor_read+0x64>
 800a5f0:	6901      	ldr	r1, [r0, #16]
 800a5f2:	6880      	ldr	r0, [r0, #8]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f10d 020f 	add.w	r2, sp, #15
 800a5fa:	f88d 300f 	strb.w	r3, [sp, #15]
 800a5fe:	f002 f987 	bl	800c910 <acc_radar_engine_a121_verify_radar_data_ready>
 800a602:	2800      	cmp	r0, #0
 800a604:	d0ec      	beq.n	800a5e0 <acc_sensor_read+0x20>
 800a606:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800a60a:	6920      	ldr	r0, [r4, #16]
 800a60c:	462a      	mov	r2, r5
 800a60e:	f002 f9bf 	bl	800c990 <acc_radar_engine_a121_update_buffer_header>
 800a612:	9500      	str	r5, [sp, #0]
 800a614:	88e3      	ldrh	r3, [r4, #6]
 800a616:	88a2      	ldrh	r2, [r4, #4]
 800a618:	6921      	ldr	r1, [r4, #16]
 800a61a:	68a0      	ldr	r0, [r4, #8]
 800a61c:	f002 f956 	bl	800c8cc <acc_radar_engine_a121_transfer_data>
 800a620:	b005      	add	sp, #20
 800a622:	bd30      	pop	{r4, r5, pc}
 800a624:	4b02      	ldr	r3, [pc, #8]	@ (800a630 <acc_sensor_read+0x70>)
 800a626:	4a05      	ldr	r2, [pc, #20]	@ (800a63c <acc_sensor_read+0x7c>)
 800a628:	e7d5      	b.n	800a5d6 <acc_sensor_read+0x16>
 800a62a:	bf00      	nop
 800a62c:	1337b00e 	.word	0x1337b00e
 800a630:	20000610 	.word	0x20000610
 800a634:	080154c8 	.word	0x080154c8
 800a638:	080154e0 	.word	0x080154e0
 800a63c:	08015518 	.word	0x08015518

0800a640 <acc_calibration_a121_calibrate>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	461c      	mov	r4, r3
 800a646:	b091      	sub	sp, #68	@ 0x44
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800a64c:	4605      	mov	r5, r0
 800a64e:	4688      	mov	r8, r1
 800a650:	4616      	mov	r6, r2
 800a652:	2b0a      	cmp	r3, #10
 800a654:	d859      	bhi.n	800a70a <acc_calibration_a121_calibrate+0xca>
 800a656:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a65a:	0065      	.short	0x0065
 800a65c:	00e8009d 	.word	0x00e8009d
 800a660:	000b0153 	.word	0x000b0153
 800a664:	01fb01c7 	.word	0x01fb01c7
 800a668:	028f025a 	.word	0x028f025a
 800a66c:	006502c5 	.word	0x006502c5
 800a670:	f001 fd1e 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800a674:	2800      	cmp	r0, #0
 800a676:	f000 808b 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800a67a:	aa08      	add	r2, sp, #32
 800a67c:	4641      	mov	r1, r8
 800a67e:	4628      	mov	r0, r5
 800a680:	f001 fd68 	bl	800c154 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800a684:	48b8      	ldr	r0, [pc, #736]	@ (800a968 <acc_calibration_a121_calibrate+0x328>)
 800a686:	f8df b2ec 	ldr.w	fp, [pc, #748]	@ 800a974 <acc_calibration_a121_calibrate+0x334>
 800a68a:	4629      	mov	r1, r5
 800a68c:	f004 fc52 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a690:	49b6      	ldr	r1, [pc, #728]	@ (800a96c <acc_calibration_a121_calibrate+0x32c>)
 800a692:	48b7      	ldr	r0, [pc, #732]	@ (800a970 <acc_calibration_a121_calibrate+0x330>)
 800a694:	f004 fc46 	bl	800ef24 <acc_diagnostic_log_array>
 800a698:	9808      	ldr	r0, [sp, #32]
 800a69a:	2150      	movs	r1, #80	@ 0x50
 800a69c:	f004 fc5a 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800a6a0:	f107 0a0a 	add.w	sl, r7, #10
 800a6a4:	f04f 0900 	mov.w	r9, #0
 800a6a8:	9808      	ldr	r0, [sp, #32]
 800a6aa:	a905      	add	r1, sp, #20
 800a6ac:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800a6b0:	f000 fd82 	bl	800b1b8 <acc_cal_algorithms_bba_cal_ctrl>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800a6ba:	48ae      	ldr	r0, [pc, #696]	@ (800a974 <acc_calibration_a121_calibrate+0x334>)
 800a6bc:	f109 0901 	add.w	r9, r9, #1
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d065      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a6c4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a6c8:	f88b 200d 	strb.w	r2, [fp, #13]
 800a6cc:	f004 fc32 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a6d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a6d4:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800a6d8:	f1b9 0f0a 	cmp.w	r9, #10
 800a6dc:	d1e4      	bne.n	800a6a8 <acc_calibration_a121_calibrate+0x68>
 800a6de:	48a6      	ldr	r0, [pc, #664]	@ (800a978 <acc_calibration_a121_calibrate+0x338>)
 800a6e0:	f004 fc18 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a6e4:	4ba5      	ldr	r3, [pc, #660]	@ (800a97c <acc_calibration_a121_calibrate+0x33c>)
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	2260      	movs	r2, #96	@ 0x60
 800a6ea:	9201      	str	r2, [sp, #4]
 800a6ec:	4641      	mov	r1, r8
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f002 fcd8 	bl	800d0a8 <acc_sensor_protocol_a121_load_lut>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f040 82eb 	bne.w	800acd4 <acc_calibration_a121_calibrate+0x694>
 800a6fe:	4ba0      	ldr	r3, [pc, #640]	@ (800a980 <acc_calibration_a121_calibrate+0x340>)
 800a700:	4aa0      	ldr	r2, [pc, #640]	@ (800a984 <acc_calibration_a121_calibrate+0x344>)
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	49a0      	ldr	r1, [pc, #640]	@ (800a988 <acc_calibration_a121_calibrate+0x348>)
 800a706:	4798      	blx	r3
 800a708:	7823      	ldrb	r3, [r4, #0]
 800a70a:	499d      	ldr	r1, [pc, #628]	@ (800a980 <acc_calibration_a121_calibrate+0x340>)
 800a70c:	4a9f      	ldr	r2, [pc, #636]	@ (800a98c <acc_calibration_a121_calibrate+0x34c>)
 800a70e:	690e      	ldr	r6, [r1, #16]
 800a710:	499d      	ldr	r1, [pc, #628]	@ (800a988 <acc_calibration_a121_calibrate+0x348>)
 800a712:	2000      	movs	r0, #0
 800a714:	4605      	mov	r5, r0
 800a716:	47b0      	blx	r6
 800a718:	462b      	mov	r3, r5
 800a71a:	4628      	mov	r0, r5
 800a71c:	7023      	strb	r3, [r4, #0]
 800a71e:	b011      	add	sp, #68	@ 0x44
 800a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a724:	2288      	movs	r2, #136	@ 0x88
 800a726:	2100      	movs	r1, #0
 800a728:	4638      	mov	r0, r7
 800a72a:	f006 f9a7 	bl	8010a7c <memset>
 800a72e:	f001 fe59 	bl	800c3e4 <acc_rss_integration_get_sensor_reference_frequency>
 800a732:	ee07 0a90 	vmov	s15, r0
 800a736:	f107 0a7c 	add.w	sl, r7, #124	@ 0x7c
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	4651      	mov	r1, sl
 800a740:	a808      	add	r0, sp, #32
 800a742:	edcd 7a08 	vstr	s15, [sp, #32]
 800a746:	f004 faa7 	bl	800ec98 <acc_cpd_pll_divisors_calculate>
 800a74a:	4681      	mov	r9, r0
 800a74c:	4890      	ldr	r0, [pc, #576]	@ (800a990 <acc_calibration_a121_calibrate+0x350>)
 800a74e:	f004 fbe1 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a752:	4885      	ldr	r0, [pc, #532]	@ (800a968 <acc_calibration_a121_calibrate+0x328>)
 800a754:	4629      	mov	r1, r5
 800a756:	f004 fbed 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a75a:	f8b7 107e 	ldrh.w	r1, [r7, #126]	@ 0x7e
 800a75e:	488d      	ldr	r0, [pc, #564]	@ (800a994 <acc_calibration_a121_calibrate+0x354>)
 800a760:	f004 fbe8 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a764:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800a768:	488b      	ldr	r0, [pc, #556]	@ (800a998 <acc_calibration_a121_calibrate+0x358>)
 800a76a:	f004 fbe3 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a76e:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800a772:	488a      	ldr	r0, [pc, #552]	@ (800a99c <acc_calibration_a121_calibrate+0x35c>)
 800a774:	f004 fbde 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a778:	4889      	ldr	r0, [pc, #548]	@ (800a9a0 <acc_calibration_a121_calibrate+0x360>)
 800a77a:	f8b7 107c 	ldrh.w	r1, [r7, #124]	@ 0x7c
 800a77e:	f004 fbd9 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a782:	4888      	ldr	r0, [pc, #544]	@ (800a9a4 <acc_calibration_a121_calibrate+0x364>)
 800a784:	f004 fbc6 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a788:	f1b9 0f00 	cmp.w	r9, #0
 800a78c:	f040 8296 	bne.w	800acbc <acc_calibration_a121_calibrate+0x67c>
 800a790:	7823      	ldrb	r3, [r4, #0]
 800a792:	e7ba      	b.n	800a70a <acc_calibration_a121_calibrate+0xca>
 800a794:	f001 fc8c 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0f9      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a79c:	aa08      	add	r2, sp, #32
 800a79e:	ab05      	add	r3, sp, #20
 800a7a0:	e9cd 3200 	strd	r3, r2, [sp]
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	f10d 020e 	add.w	r2, sp, #14
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f001 fca1 	bl	800c0f4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800a7b2:	486d      	ldr	r0, [pc, #436]	@ (800a968 <acc_calibration_a121_calibrate+0x328>)
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f004 fbbd 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a7ba:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a7be:	487a      	ldr	r0, [pc, #488]	@ (800a9a8 <acc_calibration_a121_calibrate+0x368>)
 800a7c0:	f004 fbb8 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a7c4:	4969      	ldr	r1, [pc, #420]	@ (800a96c <acc_calibration_a121_calibrate+0x32c>)
 800a7c6:	4879      	ldr	r0, [pc, #484]	@ (800a9ac <acc_calibration_a121_calibrate+0x36c>)
 800a7c8:	f004 fbac 	bl	800ef24 <acc_diagnostic_log_array>
 800a7cc:	9808      	ldr	r0, [sp, #32]
 800a7ce:	2110      	movs	r1, #16
 800a7d0:	f004 fbb8 	bl	800ef44 <acc_diagnostic_log_data_u16>
 800a7d4:	9a08      	ldr	r2, [sp, #32]
 800a7d6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a7da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800a7de:	ab04      	add	r3, sp, #16
 800a7e0:	f000 fb8c 	bl	800aefc <acc_cal_algorithms_pll_cbank>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0d3      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a7e8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a7ec:	4870      	ldr	r0, [pc, #448]	@ (800a9b0 <acc_calibration_a121_calibrate+0x370>)
 800a7ee:	f004 fba1 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a7f2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a7f6:	486f      	ldr	r0, [pc, #444]	@ (800a9b4 <acc_calibration_a121_calibrate+0x374>)
 800a7f8:	f004 fb9c 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a7fc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a800:	486d      	ldr	r0, [pc, #436]	@ (800a9b8 <acc_calibration_a121_calibrate+0x378>)
 800a802:	f004 fb97 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a806:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a80a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a80e:	803b      	strh	r3, [r7, #0]
 800a810:	4628      	mov	r0, r5
 800a812:	8079      	strh	r1, [r7, #2]
 800a814:	f001 fabc 	bl	800bd90 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800a818:	4605      	mov	r5, r0
 800a81a:	2302      	movs	r3, #2
 800a81c:	2d00      	cmp	r5, #0
 800a81e:	d0b7      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a820:	4628      	mov	r0, r5
 800a822:	7023      	strb	r3, [r4, #0]
 800a824:	b011      	add	sp, #68	@ 0x44
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	f001 fc41 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d0ae      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a832:	ab08      	add	r3, sp, #32
 800a834:	aa05      	add	r2, sp, #20
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	4641      	mov	r1, r8
 800a83a:	ab04      	add	r3, sp, #16
 800a83c:	4628      	mov	r0, r5
 800a83e:	f001 fc71 	bl	800c124 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800a842:	494a      	ldr	r1, [pc, #296]	@ (800a96c <acc_calibration_a121_calibrate+0x32c>)
 800a844:	485d      	ldr	r0, [pc, #372]	@ (800a9bc <acc_calibration_a121_calibrate+0x37c>)
 800a846:	f004 fb6d 	bl	800ef24 <acc_diagnostic_log_array>
 800a84a:	9805      	ldr	r0, [sp, #20]
 800a84c:	2110      	movs	r1, #16
 800a84e:	f004 fb81 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800a852:	9805      	ldr	r0, [sp, #20]
 800a854:	a903      	add	r1, sp, #12
 800a856:	f000 fb8b 	bl	800af70 <acc_cal_algorithms_pll_ibias>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d098      	beq.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a85e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a862:	4857      	ldr	r0, [pc, #348]	@ (800a9c0 <acc_calibration_a121_calibrate+0x380>)
 800a864:	f004 fb66 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a868:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a86c:	80bb      	strh	r3, [r7, #4]
 800a86e:	4855      	ldr	r0, [pc, #340]	@ (800a9c4 <acc_calibration_a121_calibrate+0x384>)
 800a870:	f004 fb50 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a874:	483c      	ldr	r0, [pc, #240]	@ (800a968 <acc_calibration_a121_calibrate+0x328>)
 800a876:	4629      	mov	r1, r5
 800a878:	f004 fb5c 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a87c:	493b      	ldr	r1, [pc, #236]	@ (800a96c <acc_calibration_a121_calibrate+0x32c>)
 800a87e:	4852      	ldr	r0, [pc, #328]	@ (800a9c8 <acc_calibration_a121_calibrate+0x388>)
 800a880:	f004 fb50 	bl	800ef24 <acc_diagnostic_log_array>
 800a884:	9808      	ldr	r0, [sp, #32]
 800a886:	2130      	movs	r1, #48	@ 0x30
 800a888:	f004 fb5c 	bl	800ef44 <acc_diagnostic_log_data_u16>
 800a88c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a890:	484e      	ldr	r0, [pc, #312]	@ (800a9cc <acc_calibration_a121_calibrate+0x38c>)
 800a892:	f004 fb4f 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a896:	9908      	ldr	r1, [sp, #32]
 800a898:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800a89c:	f10d 020e 	add.w	r2, sp, #14
 800a8a0:	f000 fbb4 	bl	800b00c <acc_cal_algorithms_vfast2_ldo>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f43f af73 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800a8aa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a8ae:	4848      	ldr	r0, [pc, #288]	@ (800a9d0 <acc_calibration_a121_calibrate+0x390>)
 800a8b0:	f004 fb40 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a8b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a8b8:	4846      	ldr	r0, [pc, #280]	@ (800a9d4 <acc_calibration_a121_calibrate+0x394>)
 800a8ba:	817b      	strh	r3, [r7, #10]
 800a8bc:	f004 fb2a 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	ab02      	add	r3, sp, #8
 800a8c4:	e9cd 3000 	strd	r3, r0, [sp]
 800a8c8:	4632      	mov	r2, r6
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f8ad 6008 	strh.w	r6, [sp, #8]
 800a8d8:	f002 fbe6 	bl	800d0a8 <acc_sensor_protocol_a121_load_lut>
 800a8dc:	b920      	cbnz	r0, 800a8e8 <acc_calibration_a121_calibrate+0x2a8>
 800a8de:	4b28      	ldr	r3, [pc, #160]	@ (800a980 <acc_calibration_a121_calibrate+0x340>)
 800a8e0:	4a3d      	ldr	r2, [pc, #244]	@ (800a9d8 <acc_calibration_a121_calibrate+0x398>)
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	4928      	ldr	r1, [pc, #160]	@ (800a988 <acc_calibration_a121_calibrate+0x348>)
 800a8e6:	4798      	blx	r3
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a8ee:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a8f2:	f001 fa6b 	bl	800bdcc <acc_a121_cal_session_start_3_delay_cbank_program>
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	2d00      	cmp	r5, #0
 800a8fc:	d190      	bne.n	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800a8fe:	e747      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a900:	2300      	movs	r3, #0
 800a902:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a906:	f001 fbd3 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f43f af40 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800a910:	aa08      	add	r2, sp, #32
 800a912:	4641      	mov	r1, r8
 800a914:	4628      	mov	r0, r5
 800a916:	f001 fc15 	bl	800c144 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800a91a:	4813      	ldr	r0, [pc, #76]	@ (800a968 <acc_calibration_a121_calibrate+0x328>)
 800a91c:	4629      	mov	r1, r5
 800a91e:	f004 fb09 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a922:	4912      	ldr	r1, [pc, #72]	@ (800a96c <acc_calibration_a121_calibrate+0x32c>)
 800a924:	482d      	ldr	r0, [pc, #180]	@ (800a9dc <acc_calibration_a121_calibrate+0x39c>)
 800a926:	f004 fafd 	bl	800ef24 <acc_diagnostic_log_array>
 800a92a:	9808      	ldr	r0, [sp, #32]
 800a92c:	2120      	movs	r1, #32
 800a92e:	f004 fb11 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800a932:	9808      	ldr	r0, [sp, #32]
 800a934:	a905      	add	r1, sp, #20
 800a936:	f000 fbb5 	bl	800b0a4 <acc_cal_algorithms_delay_cbank>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	f43f af28 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800a940:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a944:	4826      	ldr	r0, [pc, #152]	@ (800a9e0 <acc_calibration_a121_calibrate+0x3a0>)
 800a946:	f004 faf5 	bl	800ef34 <acc_diagnostic_log_scalar>
 800a94a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a94e:	80fb      	strh	r3, [r7, #6]
 800a950:	4824      	ldr	r0, [pc, #144]	@ (800a9e4 <acc_calibration_a121_calibrate+0x3a4>)
 800a952:	f004 fadf 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800a956:	4628      	mov	r0, r5
 800a958:	f001 fa66 	bl	800be28 <acc_a121_cal_session_start_4_bba_vga_program>
 800a95c:	4605      	mov	r5, r0
 800a95e:	2304      	movs	r3, #4
 800a960:	2d00      	cmp	r5, #0
 800a962:	f47f af5d 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800a966:	e713      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800a968:	08015530 	.word	0x08015530
 800a96c:	08015d24 	.word	0x08015d24
 800a970:	080156d0 	.word	0x080156d0
 800a974:	2000000c 	.word	0x2000000c
 800a978:	080156e8 	.word	0x080156e8
 800a97c:	08017ca8 	.word	0x08017ca8
 800a980:	20000610 	.word	0x20000610
 800a984:	08015700 	.word	0x08015700
 800a988:	08015678 	.word	0x08015678
 800a98c:	080159a0 	.word	0x080159a0
 800a990:	080163e0 	.word	0x080163e0
 800a994:	0801553c 	.word	0x0801553c
 800a998:	0801554c 	.word	0x0801554c
 800a99c:	08015558 	.word	0x08015558
 800a9a0:	08015564 	.word	0x08015564
 800a9a4:	08015574 	.word	0x08015574
 800a9a8:	08015584 	.word	0x08015584
 800a9ac:	08015590 	.word	0x08015590
 800a9b0:	080155ac 	.word	0x080155ac
 800a9b4:	080155b8 	.word	0x080155b8
 800a9b8:	080155c0 	.word	0x080155c0
 800a9bc:	080155cc 	.word	0x080155cc
 800a9c0:	080155ec 	.word	0x080155ec
 800a9c4:	080155f8 	.word	0x080155f8
 800a9c8:	08015610 	.word	0x08015610
 800a9cc:	08015624 	.word	0x08015624
 800a9d0:	08015630 	.word	0x08015630
 800a9d4:	0801563c 	.word	0x0801563c
 800a9d8:	08015654 	.word	0x08015654
 800a9dc:	0801568c 	.word	0x0801568c
 800a9e0:	080156b0 	.word	0x080156b0
 800a9e4:	080156bc 	.word	0x080156bc
 800a9e8:	f001 fb62 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	f43f aecf 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800a9f2:	aa08      	add	r2, sp, #32
 800a9f4:	4641      	mov	r1, r8
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f001 fbb4 	bl	800c164 <acc_a121_cal_session_get_5_area_index_program_data>
 800a9fc:	49bb      	ldr	r1, [pc, #748]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800a9fe:	48bc      	ldr	r0, [pc, #752]	@ (800acf0 <acc_calibration_a121_calibrate+0x6b0>)
 800aa00:	f004 fa90 	bl	800ef24 <acc_diagnostic_log_array>
 800aa04:	9808      	ldr	r0, [sp, #32]
 800aa06:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800aa0a:	f004 faa3 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800aa0e:	9808      	ldr	r0, [sp, #32]
 800aa10:	a905      	add	r1, sp, #20
 800aa12:	f000 fd9d 	bl	800b550 <acc_cal_algorithms_area_index>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	f43f aeba 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800aa1c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800aa20:	48b4      	ldr	r0, [pc, #720]	@ (800acf4 <acc_calibration_a121_calibrate+0x6b4>)
 800aa22:	f004 fa87 	bl	800ef34 <acc_diagnostic_log_scalar>
 800aa26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800aa2a:	813b      	strh	r3, [r7, #8]
 800aa2c:	48b2      	ldr	r0, [pc, #712]	@ (800acf8 <acc_calibration_a121_calibrate+0x6b8>)
 800aa2e:	f004 fa71 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800aa32:	8938      	ldrh	r0, [r7, #8]
 800aa34:	aa08      	add	r2, sp, #32
 800aa36:	2160      	movs	r1, #96	@ 0x60
 800aa38:	f004 fa14 	bl	800ee64 <acc_dll_calculate_area_settings>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	a908      	add	r1, sp, #32
 800aa40:	f001 fa46 	bl	800bed0 <acc_a121_cal_session_start_6_tx_freq_program>
 800aa44:	4605      	mov	r5, r0
 800aa46:	2306      	movs	r3, #6
 800aa48:	2d00      	cmp	r5, #0
 800aa4a:	f47f aee9 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800aa4e:	e69f      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800aa50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa54:	f8ad 3010 	strh.w	r3, [sp, #16]
 800aa58:	f001 fb2a 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f ae97 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800aa62:	f001 fcbf 	bl	800c3e4 <acc_rss_integration_get_sensor_reference_frequency>
 800aa66:	4ea5      	ldr	r6, [pc, #660]	@ (800acfc <acc_calibration_a121_calibrate+0x6bc>)
 800aa68:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800aa6c:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800ad5c <acc_calibration_a121_calibrate+0x71c>
 800aa70:	fba6 2600 	umull	r2, r6, r6, r0
 800aa74:	4641      	mov	r1, r8
 800aa76:	aa05      	add	r2, sp, #20
 800aa78:	4628      	mov	r0, r5
 800aa7a:	09b6      	lsrs	r6, r6, #6
 800aa7c:	fb06 f603 	mul.w	r6, r6, r3
 800aa80:	f001 fb7a 	bl	800c178 <acc_a121_cal_session_get_6_tx_freq_program_data>
 800aa84:	4999      	ldr	r1, [pc, #612]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800aa86:	489e      	ldr	r0, [pc, #632]	@ (800ad00 <acc_calibration_a121_calibrate+0x6c0>)
 800aa88:	f004 fa4c 	bl	800ef24 <acc_diagnostic_log_array>
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800aa92:	f004 fa5f 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800aa96:	ab04      	add	r3, sp, #16
 800aa98:	4630      	mov	r0, r6
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	4a99      	ldr	r2, [pc, #612]	@ (800ad04 <acc_calibration_a121_calibrate+0x6c4>)
 800aa9e:	9905      	ldr	r1, [sp, #20]
 800aaa0:	ab08      	add	r3, sp, #32
 800aaa2:	f000 fe4b 	bl	800b73c <acc_cal_algorithms_tx_freq_ctrl>
 800aaa6:	46cb      	mov	fp, r9
 800aaa8:	4682      	mov	sl, r0
 800aaaa:	f10d 081c 	add.w	r8, sp, #28
 800aaae:	2630      	movs	r6, #48	@ 0x30
 800aab0:	f889 600c 	strb.w	r6, [r9, #12]
 800aab4:	3601      	adds	r6, #1
 800aab6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800aaba:	4658      	mov	r0, fp
 800aabc:	b2f6      	uxtb	r6, r6
 800aabe:	f004 fa39 	bl	800ef34 <acc_diagnostic_log_scalar>
 800aac2:	2e38      	cmp	r6, #56	@ 0x38
 800aac4:	d1f4      	bne.n	800aab0 <acc_calibration_a121_calibrate+0x470>
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	f43f ae61 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800aace:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800aad2:	488d      	ldr	r0, [pc, #564]	@ (800ad08 <acc_calibration_a121_calibrate+0x6c8>)
 800aad4:	f004 fa2e 	bl	800ef34 <acc_diagnostic_log_scalar>
 800aad8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800aadc:	488b      	ldr	r0, [pc, #556]	@ (800ad0c <acc_calibration_a121_calibrate+0x6cc>)
 800aade:	847b      	strh	r3, [r7, #34]	@ 0x22
 800aae0:	f004 fa18 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800aae4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800aae8:	4628      	mov	r0, r5
 800aaea:	f001 fa81 	bl	800bff0 <acc_a121_cal_session_start_7_rx_freq_program>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f43f ae4e 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800aaf4:	f107 0356 	add.w	r3, r7, #86	@ 0x56
 800aaf8:	9805      	ldr	r0, [sp, #20]
 800aafa:	2201      	movs	r2, #1
 800aafc:	2100      	movs	r1, #0
 800aafe:	f000 fbcb 	bl	800b298 <acc_cal_algorithms_iq_imbalance>
 800ab02:	4605      	mov	r5, r0
 800ab04:	2307      	movs	r3, #7
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	f47f ae8a 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800ab0c:	e640      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800ab0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab12:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab16:	f001 facb 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f43f ae38 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800ab20:	aa08      	add	r2, sp, #32
 800ab22:	4641      	mov	r1, r8
 800ab24:	4628      	mov	r0, r5
 800ab26:	f001 fb29 	bl	800c17c <acc_a121_cal_session_get_7_rx_freq_program_data>
 800ab2a:	4970      	ldr	r1, [pc, #448]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800ab2c:	4878      	ldr	r0, [pc, #480]	@ (800ad10 <acc_calibration_a121_calibrate+0x6d0>)
 800ab2e:	f004 f9f9 	bl	800ef24 <acc_diagnostic_log_array>
 800ab32:	9808      	ldr	r0, [sp, #32]
 800ab34:	2110      	movs	r1, #16
 800ab36:	f004 fa0d 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800ab3a:	9808      	ldr	r0, [sp, #32]
 800ab3c:	aa05      	add	r2, sp, #20
 800ab3e:	f107 0156 	add.w	r1, r7, #86	@ 0x56
 800ab42:	f000 fc53 	bl	800b3ec <acc_cal_algorithms_rx_freq_ctrl>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f43f ae22 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800ab4c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ab50:	4870      	ldr	r0, [pc, #448]	@ (800ad14 <acc_calibration_a121_calibrate+0x6d4>)
 800ab52:	f004 f9ef 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ab56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800ab5a:	843b      	strh	r3, [r7, #32]
 800ab5c:	486e      	ldr	r0, [pc, #440]	@ (800ad18 <acc_calibration_a121_calibrate+0x6d8>)
 800ab5e:	f004 f9d9 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800ab62:	4628      	mov	r0, r5
 800ab64:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800ab68:	f001 fa60 	bl	800c02c <acc_a121_cal_session_start_8_phase_enhancement_program>
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	2308      	movs	r3, #8
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	f47f ae55 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800ab76:	e60b      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800ab78:	f001 fa9a 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f ae07 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800ab82:	aa08      	add	r2, sp, #32
 800ab84:	4641      	mov	r1, r8
 800ab86:	4628      	mov	r0, r5
 800ab88:	f001 fb00 	bl	800c18c <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800ab8c:	4957      	ldr	r1, [pc, #348]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800ab8e:	4863      	ldr	r0, [pc, #396]	@ (800ad1c <acc_calibration_a121_calibrate+0x6dc>)
 800ab90:	f004 f9c8 	bl	800ef24 <acc_diagnostic_log_array>
 800ab94:	f107 0624 	add.w	r6, r7, #36	@ 0x24
 800ab98:	9808      	ldr	r0, [sp, #32]
 800ab9a:	2160      	movs	r1, #96	@ 0x60
 800ab9c:	f004 f9da 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800aba0:	9808      	ldr	r0, [sp, #32]
 800aba2:	4631      	mov	r1, r6
 800aba4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800aba8:	f000 fe58 	bl	800b85c <acc_cal_algorithms_phase_enhancement>
 800abac:	2800      	cmp	r0, #0
 800abae:	f43f adef 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800abb2:	494e      	ldr	r1, [pc, #312]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800abb4:	485a      	ldr	r0, [pc, #360]	@ (800ad20 <acc_calibration_a121_calibrate+0x6e0>)
 800abb6:	f004 f9b5 	bl	800ef24 <acc_diagnostic_log_array>
 800abba:	4630      	mov	r0, r6
 800abbc:	2118      	movs	r1, #24
 800abbe:	f004 f9c9 	bl	800ef54 <acc_diagnostic_log_data_i16>
 800abc2:	f9b7 1054 	ldrsh.w	r1, [r7, #84]	@ 0x54
 800abc6:	4857      	ldr	r0, [pc, #348]	@ (800ad24 <acc_calibration_a121_calibrate+0x6e4>)
 800abc8:	f004 f9b4 	bl	800ef34 <acc_diagnostic_log_scalar>
 800abcc:	4856      	ldr	r0, [pc, #344]	@ (800ad28 <acc_calibration_a121_calibrate+0x6e8>)
 800abce:	f004 f9a1 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800abd2:	4628      	mov	r0, r5
 800abd4:	f001 fa68 	bl	800c0a8 <acc_a121_cal_session_start_9_pulseshaper_program>
 800abd8:	4605      	mov	r5, r0
 800abda:	2309      	movs	r3, #9
 800abdc:	2d00      	cmp	r5, #0
 800abde:	f47f ae1f 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800abe2:	e5d5      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800abe4:	f001 fa64 	bl	800c0b0 <acc_a121_cal_session_ack_program>
 800abe8:	2800      	cmp	r0, #0
 800abea:	f43f add1 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800abee:	aa08      	add	r2, sp, #32
 800abf0:	ab04      	add	r3, sp, #16
 800abf2:	4641      	mov	r1, r8
 800abf4:	4628      	mov	r0, r5
 800abf6:	f001 fad1 	bl	800c19c <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800abfa:	493c      	ldr	r1, [pc, #240]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800abfc:	484b      	ldr	r0, [pc, #300]	@ (800ad2c <acc_calibration_a121_calibrate+0x6ec>)
 800abfe:	f004 f991 	bl	800ef24 <acc_diagnostic_log_array>
 800ac02:	9808      	ldr	r0, [sp, #32]
 800ac04:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800ac08:	f004 f99c 	bl	800ef44 <acc_diagnostic_log_data_u16>
 800ac0c:	9808      	ldr	r0, [sp, #32]
 800ac0e:	a905      	add	r1, sp, #20
 800ac10:	f000 ff7a 	bl	800bb08 <acc_cal_algorithms_pulseshaper_wavelet>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f adbb 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800ac1a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800ac1e:	9b07      	ldr	r3, [sp, #28]
 800ac20:	663b      	str	r3, [r7, #96]	@ 0x60
 800ac22:	e9c7 2116 	strd	r2, r1, [r7, #88]	@ 0x58
 800ac26:	4842      	ldr	r0, [pc, #264]	@ (800ad30 <acc_calibration_a121_calibrate+0x6f0>)
 800ac28:	f004 f984 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ac2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ac2e:	4841      	ldr	r0, [pc, #260]	@ (800ad34 <acc_calibration_a121_calibrate+0x6f4>)
 800ac30:	f004 f980 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ac34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ac36:	4840      	ldr	r0, [pc, #256]	@ (800ad38 <acc_calibration_a121_calibrate+0x6f8>)
 800ac38:	f004 f97c 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ac3c:	483f      	ldr	r0, [pc, #252]	@ (800ad3c <acc_calibration_a121_calibrate+0x6fc>)
 800ac3e:	f004 f969 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800ac42:	492a      	ldr	r1, [pc, #168]	@ (800acec <acc_calibration_a121_calibrate+0x6ac>)
 800ac44:	483e      	ldr	r0, [pc, #248]	@ (800ad40 <acc_calibration_a121_calibrate+0x700>)
 800ac46:	f004 f96d 	bl	800ef24 <acc_diagnostic_log_array>
 800ac4a:	9804      	ldr	r0, [sp, #16]
 800ac4c:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800ac50:	f004 f978 	bl	800ef44 <acc_diagnostic_log_data_u16>
 800ac54:	9804      	ldr	r0, [sp, #16]
 800ac56:	a908      	add	r1, sp, #32
 800ac58:	f000 ff9e 	bl	800bb98 <acc_cal_algorithms_pulseshaper_supply>
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f ad96 	beq.w	800a790 <acc_calibration_a121_calibrate+0x150>
 800ac64:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ac68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac6a:	6679      	str	r1, [r7, #100]	@ 0x64
 800ac6c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ac6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ac74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac76:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac78:	e9c7 121c 	strd	r1, r2, [r7, #112]	@ 0x70
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	2188      	movs	r1, #136	@ 0x88
 800ac80:	f003 fdc4 	bl	800e80c <acc_alg_basic_util_crc32>
 800ac84:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ac86:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 800ac8a:	482e      	ldr	r0, [pc, #184]	@ (800ad44 <acc_calibration_a121_calibrate+0x704>)
 800ac8c:	f004 f952 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ac90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ac92:	482d      	ldr	r0, [pc, #180]	@ (800ad48 <acc_calibration_a121_calibrate+0x708>)
 800ac94:	f004 f94e 	bl	800ef34 <acc_diagnostic_log_scalar>
 800ac98:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ac9a:	482c      	ldr	r0, [pc, #176]	@ (800ad4c <acc_calibration_a121_calibrate+0x70c>)
 800ac9c:	f004 f94a 	bl	800ef34 <acc_diagnostic_log_scalar>
 800aca0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800aca2:	482b      	ldr	r0, [pc, #172]	@ (800ad50 <acc_calibration_a121_calibrate+0x710>)
 800aca4:	f004 f946 	bl	800ef34 <acc_diagnostic_log_scalar>
 800aca8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800acaa:	482a      	ldr	r0, [pc, #168]	@ (800ad54 <acc_calibration_a121_calibrate+0x714>)
 800acac:	f004 f942 	bl	800ef34 <acc_diagnostic_log_scalar>
 800acb0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800acb2:	4829      	ldr	r0, [pc, #164]	@ (800ad58 <acc_calibration_a121_calibrate+0x718>)
 800acb4:	f004 f93e 	bl	800ef34 <acc_diagnostic_log_scalar>
 800acb8:	230a      	movs	r3, #10
 800acba:	e52e      	b.n	800a71a <acc_calibration_a121_calibrate+0xda>
 800acbc:	4653      	mov	r3, sl
 800acbe:	4628      	mov	r0, r5
 800acc0:	4632      	mov	r2, r6
 800acc2:	4641      	mov	r1, r8
 800acc4:	f000 ffec 	bl	800bca0 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800acc8:	4605      	mov	r5, r0
 800acca:	2301      	movs	r3, #1
 800accc:	2d00      	cmp	r5, #0
 800acce:	f47f ada7 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800acd2:	e55d      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800acd4:	4628      	mov	r0, r5
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	f107 010c 	add.w	r1, r7, #12
 800acdc:	f001 f8a8 	bl	800be30 <acc_a121_cal_session_start_5_area_index_program>
 800ace0:	4605      	mov	r5, r0
 800ace2:	2305      	movs	r3, #5
 800ace4:	2d00      	cmp	r5, #0
 800ace6:	f47f ad9b 	bne.w	800a820 <acc_calibration_a121_calibrate+0x1e0>
 800acea:	e551      	b.n	800a790 <acc_calibration_a121_calibrate+0x150>
 800acec:	08015d24 	.word	0x08015d24
 800acf0:	0801572c 	.word	0x0801572c
 800acf4:	08015750 	.word	0x08015750
 800acf8:	0801575c 	.word	0x0801575c
 800acfc:	10624dd3 	.word	0x10624dd3
 800ad00:	08015778 	.word	0x08015778
 800ad04:	039b2820 	.word	0x039b2820
 800ad08:	0801579c 	.word	0x0801579c
 800ad0c:	080157ac 	.word	0x080157ac
 800ad10:	080157c8 	.word	0x080157c8
 800ad14:	080157ec 	.word	0x080157ec
 800ad18:	080157fc 	.word	0x080157fc
 800ad1c:	0801581c 	.word	0x0801581c
 800ad20:	08015848 	.word	0x08015848
 800ad24:	08015874 	.word	0x08015874
 800ad28:	08015890 	.word	0x08015890
 800ad2c:	080158a8 	.word	0x080158a8
 800ad30:	080158bc 	.word	0x080158bc
 800ad34:	080158d0 	.word	0x080158d0
 800ad38:	080158e4 	.word	0x080158e4
 800ad3c:	080158f4 	.word	0x080158f4
 800ad40:	0801590c 	.word	0x0801590c
 800ad44:	08015920 	.word	0x08015920
 800ad48:	08015934 	.word	0x08015934
 800ad4c:	08015948 	.word	0x08015948
 800ad50:	0801595c 	.word	0x0801595c
 800ad54:	08015970 	.word	0x08015970
 800ad58:	08015988 	.word	0x08015988
 800ad5c:	2000001c 	.word	0x2000001c

0800ad60 <acc_calibration_a121_validate_calibration>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	2188      	movs	r1, #136	@ 0x88
 800ad64:	4604      	mov	r4, r0
 800ad66:	f003 fd51 	bl	800e80c <acc_alg_basic_util_crc32>
 800ad6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800ad6e:	1a18      	subs	r0, r3, r0
 800ad70:	fab0 f080 	clz	r0, r0
 800ad74:	0940      	lsrs	r0, r0, #5
 800ad76:	bd10      	pop	{r4, pc}

0800ad78 <least_sqr_fit>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800ad80:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800ad84:	b08d      	sub	sp, #52	@ 0x34
 800ad86:	2600      	movs	r6, #0
 800ad88:	4683      	mov	fp, r0
 800ad8a:	4682      	mov	sl, r0
 800ad8c:	4680      	mov	r8, r0
 800ad8e:	4667      	mov	r7, ip
 800ad90:	46b1      	mov	r9, r6
 800ad92:	a803      	add	r0, sp, #12
 800ad94:	ea4f 0589 	mov.w	r5, r9, lsl #2
 800ad98:	4686      	mov	lr, r0
 800ad9a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800aef8 <least_sqr_fit+0x180>
 800ad9e:	4643      	mov	r3, r8
 800ada0:	b16a      	cbz	r2, 800adbe <least_sqr_fit+0x46>
 800ada2:	199c      	adds	r4, r3, r6
 800ada4:	442c      	add	r4, r5
 800ada6:	edd4 7a00 	vldr	s15, [r4]
 800adaa:	461c      	mov	r4, r3
 800adac:	edd4 6a00 	vldr	s13, [r4]
 800adb0:	330c      	adds	r3, #12
 800adb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adb6:	42bb      	cmp	r3, r7
 800adb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800adbc:	d1f1      	bne.n	800ada2 <least_sqr_fit+0x2a>
 800adbe:	3504      	adds	r5, #4
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	ecae 7a01 	vstmia	lr!, {s14}
 800adc6:	d1e8      	bne.n	800ad9a <least_sqr_fit+0x22>
 800adc8:	f109 0901 	add.w	r9, r9, #1
 800adcc:	f1b9 0f03 	cmp.w	r9, #3
 800add0:	f100 0010 	add.w	r0, r0, #16
 800add4:	f108 0804 	add.w	r8, r8, #4
 800add8:	f1a6 0604 	sub.w	r6, r6, #4
 800addc:	f107 0704 	add.w	r7, r7, #4
 800ade0:	d1d8      	bne.n	800ad94 <least_sqr_fit+0x1c>
 800ade2:	ed9d 6a04 	vldr	s12, [sp, #16]
 800ade6:	eddd 5a05 	vldr	s11, [sp, #20]
 800adea:	eddd 6a08 	vldr	s13, [sp, #32]
 800adee:	4668      	mov	r0, sp
 800adf0:	f10b 040c 	add.w	r4, fp, #12
 800adf4:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800aef8 <least_sqr_fit+0x180>
 800adf8:	4653      	mov	r3, sl
 800adfa:	b13a      	cbz	r2, 800ae0c <least_sqr_fit+0x94>
 800adfc:	461d      	mov	r5, r3
 800adfe:	ed95 7a00 	vldr	s14, [r5]
 800ae02:	330c      	adds	r3, #12
 800ae04:	4563      	cmp	r3, ip
 800ae06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae0a:	d1f7      	bne.n	800adfc <least_sqr_fit+0x84>
 800ae0c:	f10a 0a04 	add.w	sl, sl, #4
 800ae10:	45a2      	cmp	sl, r4
 800ae12:	ece0 7a01 	vstmia	r0!, {s15}
 800ae16:	f10c 0c04 	add.w	ip, ip, #4
 800ae1a:	d1eb      	bne.n	800adf4 <least_sqr_fit+0x7c>
 800ae1c:	eddd 7a03 	vldr	s15, [sp, #12]
 800ae20:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae28:	d010      	beq.n	800ae4c <least_sqr_fit+0xd4>
 800ae2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae2e:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800ae32:	eddd 7a07 	vldr	s15, [sp, #28]
 800ae36:	ee66 4a04 	vmul.f32	s9, s12, s8
 800ae3a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ae3e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ae42:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4a:	d106      	bne.n	800ae5a <least_sqr_fit+0xe2>
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8cb 3000 	str.w	r3, [fp]
 800ae54:	b00d      	add	sp, #52	@ 0x34
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5a:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800ae5e:	ee65 3a84 	vmul.f32	s7, s11, s8
 800ae62:	ee25 7aa4 	vmul.f32	s14, s11, s9
 800ae66:	ee66 7a23 	vmul.f32	s15, s12, s7
 800ae6a:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 800ae6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ae72:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae76:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800ae7a:	ee65 6aa3 	vmul.f32	s13, s11, s7
 800ae7e:	ee75 6a66 	vsub.f32	s13, s10, s13
 800ae82:	ee27 5a27 	vmul.f32	s10, s14, s15
 800ae86:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800ae8a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ae8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae92:	d0db      	beq.n	800ae4c <least_sqr_fit+0xd4>
 800ae94:	ed9d 5a00 	vldr	s10, [sp]
 800ae98:	ed9d 3a01 	vldr	s6, [sp, #4]
 800ae9c:	ed9d 2a02 	vldr	s4, [sp, #8]
 800aea0:	ee64 4a85 	vmul.f32	s9, s9, s10
 800aea4:	ee63 3a85 	vmul.f32	s7, s7, s10
 800aea8:	ee73 4a64 	vsub.f32	s9, s6, s9
 800aeac:	2001      	movs	r0, #1
 800aeae:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800aeb8:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800aebc:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 800aec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec4:	edc1 7a02 	vstr	s15, [r1, #8]
 800aec8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800aecc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800aed0:	ee67 7a22 	vmul.f32	s15, s14, s5
 800aed4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800aed8:	edc1 7a01 	vstr	s15, [r1, #4]
 800aedc:	ee35 6a46 	vsub.f32	s12, s10, s12
 800aee0:	ee76 5a65 	vsub.f32	s11, s12, s11
 800aee4:	ee25 4a84 	vmul.f32	s8, s11, s8
 800aee8:	ed81 4a00 	vstr	s8, [r1]
 800aeec:	f8cb 3000 	str.w	r3, [fp]
 800aef0:	b00d      	add	sp, #52	@ 0x34
 800aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef6:	bf00      	nop
 800aef8:	00000000 	.word	0x00000000

0800aefc <acc_cal_algorithms_pll_cbank>:
 800aefc:	b4f0      	push	{r4, r5, r6, r7}
 800aefe:	2400      	movs	r4, #0
 800af00:	46a4      	mov	ip, r4
 800af02:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800af06:	fa40 f504 	asr.w	r5, r0, r4
 800af0a:	07ed      	lsls	r5, r5, #31
 800af0c:	b2a6      	uxth	r6, r4
 800af0e:	d50a      	bpl.n	800af26 <acc_cal_algorithms_pll_cbank+0x2a>
 800af10:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800af14:	1a6d      	subs	r5, r5, r1
 800af16:	2d00      	cmp	r5, #0
 800af18:	bfb8      	it	lt
 800af1a:	426d      	neglt	r5, r5
 800af1c:	b2ad      	uxth	r5, r5
 800af1e:	42bd      	cmp	r5, r7
 800af20:	bf3c      	itt	cc
 800af22:	462f      	movcc	r7, r5
 800af24:	46b4      	movcc	ip, r6
 800af26:	3401      	adds	r4, #1
 800af28:	2c10      	cmp	r4, #16
 800af2a:	d1ec      	bne.n	800af06 <acc_cal_algorithms_pll_cbank+0xa>
 800af2c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800af30:	290d      	cmp	r1, #13
 800af32:	d80c      	bhi.n	800af4e <acc_cal_algorithms_pll_cbank+0x52>
 800af34:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800af38:	3901      	subs	r1, #1
 800af3a:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800af3e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800af42:	8869      	ldrh	r1, [r5, #2]
 800af44:	f241 3487 	movw	r4, #4999	@ 0x1387
 800af48:	1a52      	subs	r2, r2, r1
 800af4a:	42a2      	cmp	r2, r4
 800af4c:	dc02      	bgt.n	800af54 <acc_cal_algorithms_pll_cbank+0x58>
 800af4e:	2000      	movs	r0, #0
 800af50:	bcf0      	pop	{r4, r5, r6, r7}
 800af52:	4770      	bx	lr
 800af54:	88aa      	ldrh	r2, [r5, #4]
 800af56:	1a89      	subs	r1, r1, r2
 800af58:	42a1      	cmp	r1, r4
 800af5a:	ddf8      	ble.n	800af4e <acc_cal_algorithms_pll_cbank+0x52>
 800af5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af60:	4290      	cmp	r0, r2
 800af62:	d0f4      	beq.n	800af4e <acc_cal_algorithms_pll_cbank+0x52>
 800af64:	2001      	movs	r0, #1
 800af66:	bcf0      	pop	{r4, r5, r6, r7}
 800af68:	f8a3 c000 	strh.w	ip, [r3]
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop

0800af70 <acc_cal_algorithms_pll_ibias>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	2400      	movs	r4, #0
 800af76:	f1a0 0e02 	sub.w	lr, r0, #2
 800af7a:	4625      	mov	r5, r4
 800af7c:	46a4      	mov	ip, r4
 800af7e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800af82:	f241 7770 	movw	r7, #6000	@ 0x1770
 800af86:	e01c      	b.n	800afc2 <acc_cal_algorithms_pll_ibias+0x52>
 800af88:	f930 9014 	ldrsh.w	r9, [r0, r4, lsl #1]
 800af8c:	f93e b014 	ldrsh.w	fp, [lr, r4, lsl #1]
 800af90:	eb09 0207 	add.w	r2, r9, r7
 800af94:	eba9 090b 	sub.w	r9, r9, fp
 800af98:	4599      	cmp	r9, r3
 800af9a:	db32      	blt.n	800b002 <acc_cal_algorithms_pll_ibias+0x92>
 800af9c:	45d1      	cmp	r9, sl
 800af9e:	dc30      	bgt.n	800b002 <acc_cal_algorithms_pll_ibias+0x92>
 800afa0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800afa4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	42b3      	cmp	r3, r6
 800afac:	d205      	bcs.n	800afba <acc_cal_algorithms_pll_ibias+0x4a>
 800afae:	ea4f 0588 	mov.w	r5, r8, lsl #2
 800afb2:	461e      	mov	r6, r3
 800afb4:	b2ad      	uxth	r5, r5
 800afb6:	f04f 0c01 	mov.w	ip, #1
 800afba:	f1b8 0f0f 	cmp.w	r8, #15
 800afbe:	d017      	beq.n	800aff0 <acc_cal_algorithms_pll_ibias+0x80>
 800afc0:	3401      	adds	r4, #1
 800afc2:	1e63      	subs	r3, r4, #1
 800afc4:	fb03 f303 	mul.w	r3, r3, r3
 800afc8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800afcc:	005a      	lsls	r2, r3, #1
 800afce:	f502 7a16 	add.w	sl, r2, #600	@ 0x258
 800afd2:	3bc8      	subs	r3, #200	@ 0xc8
 800afd4:	fa1f f884 	uxth.w	r8, r4
 800afd8:	2c00      	cmp	r4, #0
 800afda:	d1d5      	bne.n	800af88 <acc_cal_algorithms_pll_ibias+0x18>
 800afdc:	f9b0 3000 	ldrsh.w	r3, [r0]
 800afe0:	443b      	add	r3, r7
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bfb8      	it	lt
 800afe6:	425b      	neglt	r3, r3
 800afe8:	b29b      	uxth	r3, r3
 800afea:	42b3      	cmp	r3, r6
 800afec:	d3df      	bcc.n	800afae <acc_cal_algorithms_pll_ibias+0x3e>
 800afee:	e7e7      	b.n	800afc0 <acc_cal_algorithms_pll_ibias+0x50>
 800aff0:	f1bc 0f00 	cmp.w	ip, #0
 800aff4:	d002      	beq.n	800affc <acc_cal_algorithms_pll_ibias+0x8c>
 800aff6:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800affa:	800d      	strh	r5, [r1, #0]
 800affc:	4660      	mov	r0, ip
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	f04f 0c00 	mov.w	ip, #0
 800b006:	4660      	mov	r0, ip
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b00c <acc_cal_algorithms_vfast2_ldo>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800b014:	880c      	ldrh	r4, [r1, #0]
 800b016:	b083      	sub	sp, #12
 800b018:	1b1b      	subs	r3, r3, r4
 800b01a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b01e:	9201      	str	r2, [sp, #4]
 800b020:	db3a      	blt.n	800b098 <acc_cal_algorithms_vfast2_ldo+0x8c>
 800b022:	4a1f      	ldr	r2, [pc, #124]	@ (800b0a0 <acc_cal_algorithms_vfast2_ldo+0x94>)
 800b024:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800b028:	fba2 3808 	umull	r3, r8, r2, r8
 800b02c:	2500      	movs	r5, #0
 800b02e:	4681      	mov	r9, r0
 800b030:	460e      	mov	r6, r1
 800b032:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800b036:	46ab      	mov	fp, r5
 800b038:	46a2      	mov	sl, r4
 800b03a:	2210      	movs	r2, #16
 800b03c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800b040:	2001      	movs	r0, #1
 800b042:	e009      	b.n	800b058 <acc_cal_algorithms_vfast2_ldo+0x4c>
 800b044:	3201      	adds	r2, #1
 800b046:	b292      	uxth	r2, r2
 800b048:	458e      	cmp	lr, r1
 800b04a:	bf38      	it	cc
 800b04c:	2000      	movcc	r0, #0
 800b04e:	2a40      	cmp	r2, #64	@ 0x40
 800b050:	4445      	add	r5, r8
 800b052:	d01a      	beq.n	800b08a <acc_cal_algorithms_vfast2_ldo+0x7e>
 800b054:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800b058:	eba4 0309 	sub.w	r3, r4, r9
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bfb8      	it	lt
 800b060:	425b      	neglt	r3, r3
 800b062:	b29b      	uxth	r3, r3
 800b064:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800b068:	4563      	cmp	r3, ip
 800b06a:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800b06e:	bf3c      	itt	cc
 800b070:	469c      	movcc	ip, r3
 800b072:	4693      	movcc	fp, r2
 800b074:	42bc      	cmp	r4, r7
 800b076:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800b07a:	d9e3      	bls.n	800b044 <acc_cal_algorithms_vfast2_ldo+0x38>
 800b07c:	3201      	adds	r2, #1
 800b07e:	b292      	uxth	r2, r2
 800b080:	2a40      	cmp	r2, #64	@ 0x40
 800b082:	f04f 0000 	mov.w	r0, #0
 800b086:	4445      	add	r5, r8
 800b088:	d1e4      	bne.n	800b054 <acc_cal_algorithms_vfast2_ldo+0x48>
 800b08a:	b130      	cbz	r0, 800b09a <acc_cal_algorithms_vfast2_ldo+0x8e>
 800b08c:	9b01      	ldr	r3, [sp, #4]
 800b08e:	f8a3 b000 	strh.w	fp, [r3]
 800b092:	b003      	add	sp, #12
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	2000      	movs	r0, #0
 800b09a:	b003      	add	sp, #12
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	aaaaaaab 	.word	0xaaaaaaab

0800b0a4 <acc_cal_algorithms_delay_cbank>:
 800b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a6:	f9b0 2000 	ldrsh.w	r2, [r0]
 800b0aa:	460e      	mov	r6, r1
 800b0ac:	b0b1      	sub	sp, #196	@ 0xc4
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	2401      	movs	r4, #1
 800b0b4:	2700      	movs	r7, #0
 800b0b6:	e008      	b.n	800b0ca <acc_cal_algorithms_delay_cbank+0x26>
 800b0b8:	428a      	cmp	r2, r1
 800b0ba:	bfa8      	it	ge
 800b0bc:	4627      	movge	r7, r4
 800b0be:	f104 0401 	add.w	r4, r4, #1
 800b0c2:	bfa8      	it	ge
 800b0c4:	4611      	movge	r1, r2
 800b0c6:	2c20      	cmp	r4, #32
 800b0c8:	d00c      	beq.n	800b0e4 <acc_cal_algorithms_delay_cbank+0x40>
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800b0d0:	f5c3 7316 	rsb	r3, r3, #600	@ 0x258
 800b0d4:	4413      	add	r3, r2
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800b0dc:	d9ec      	bls.n	800b0b8 <acc_cal_algorithms_delay_cbank+0x14>
 800b0de:	2000      	movs	r0, #0
 800b0e0:	b031      	add	sp, #196	@ 0xc4
 800b0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e4:	2f07      	cmp	r7, #7
 800b0e6:	d85f      	bhi.n	800b1a8 <acc_cal_algorithms_delay_cbank+0x104>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f107 0208 	add.w	r2, r7, #8
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	af03      	add	r7, sp, #12
 800b0f2:	b30a      	cbz	r2, 800b138 <acc_cal_algorithms_delay_cbank+0x94>
 800b0f4:	18d5      	adds	r5, r2, r3
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800b0fc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800b100:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800b104:	ee07 0a10 	vmov	s14, r0
 800b108:	fb03 f003 	mul.w	r0, r3, r3
 800b10c:	ee06 3a90 	vmov	s13, r3
 800b110:	ee07 0a90 	vmov	s15, r0
 800b114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800b120:	42a5      	cmp	r5, r4
 800b122:	ed81 7a00 	vstr	s14, [r1]
 800b126:	edc1 7a01 	vstr	s15, [r1, #4]
 800b12a:	edc1 6a02 	vstr	s13, [r1, #8]
 800b12e:	f103 0301 	add.w	r3, r3, #1
 800b132:	f101 010c 	add.w	r1, r1, #12
 800b136:	d1e3      	bne.n	800b100 <acc_cal_algorithms_delay_cbank+0x5c>
 800b138:	4638      	mov	r0, r7
 800b13a:	4669      	mov	r1, sp
 800b13c:	f7ff fe1c 	bl	800ad78 <least_sqr_fit>
 800b140:	2800      	cmp	r0, #0
 800b142:	d0cc      	beq.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b144:	ed9d 6a00 	vldr	s12, [sp]
 800b148:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b150:	d0c5      	beq.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b152:	eddd 6a01 	vldr	s13, [sp, #4]
 800b156:	eef5 6a40 	vcmp.f32	s13, #0.0
 800b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15e:	d0be      	beq.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b160:	eddd 7a02 	vldr	s15, [sp, #8]
 800b164:	eef1 7a67 	vneg.f32	s15, s15
 800b168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b16c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b174:	dbb3      	blt.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b176:	eef1 6a66 	vneg.f32	s13, s13
 800b17a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800b17e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b186:	d5aa      	bpl.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b188:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b18c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b194:	ee17 3a90 	vmov	r3, s15
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b19c:	d89f      	bhi.n	800b0de <acc_cal_algorithms_delay_cbank+0x3a>
 800b19e:	085b      	lsrs	r3, r3, #1
 800b1a0:	f083 0310 	eor.w	r3, r3, #16
 800b1a4:	8033      	strh	r3, [r6, #0]
 800b1a6:	e79b      	b.n	800b0e0 <acc_cal_algorithms_delay_cbank+0x3c>
 800b1a8:	1ffb      	subs	r3, r7, #7
 800b1aa:	2f17      	cmp	r7, #23
 800b1ac:	bf88      	it	hi
 800b1ae:	f1c3 0220 	rsbhi	r2, r3, #32
 800b1b2:	d89d      	bhi.n	800b0f0 <acc_cal_algorithms_delay_cbank+0x4c>
 800b1b4:	e799      	b.n	800b0ea <acc_cal_algorithms_delay_cbank+0x46>
 800b1b6:	bf00      	nop

0800b1b8 <acc_cal_algorithms_bba_cal_ctrl>:
 800b1b8:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800b294 <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 800b1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c0:	f04f 0e00 	mov.w	lr, #0
 800b1c4:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800b1c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b1cc:	4665      	mov	r5, ip
 800b1ce:	46f0      	mov	r8, lr
 800b1d0:	463e      	mov	r6, r7
 800b1d2:	f06f 021b 	mvn.w	r2, #27
 800b1d6:	e014      	b.n	800b202 <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 800b1d8:	42a7      	cmp	r7, r4
 800b1da:	bfc4      	itt	gt
 800b1dc:	4627      	movgt	r7, r4
 800b1de:	4696      	movgt	lr, r2
 800b1e0:	2a1c      	cmp	r2, #28
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	d016      	beq.n	800b214 <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 800b1ec:	1ae3      	subs	r3, r4, r3
 800b1ee:	b21b      	sxth	r3, r3
 800b1f0:	429e      	cmp	r6, r3
 800b1f2:	f102 0208 	add.w	r2, r2, #8
 800b1f6:	bfa8      	it	ge
 800b1f8:	461e      	movge	r6, r3
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	b212      	sxth	r2, r2
 800b1fe:	bfb8      	it	lt
 800b200:	461d      	movlt	r5, r3
 800b202:	2c00      	cmp	r4, #0
 800b204:	dae8      	bge.n	800b1d8 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 800b206:	45a4      	cmp	ip, r4
 800b208:	daea      	bge.n	800b1e0 <acc_cal_algorithms_bba_cal_ctrl+0x28>
 800b20a:	2a1c      	cmp	r2, #28
 800b20c:	46a4      	mov	ip, r4
 800b20e:	4690      	mov	r8, r2
 800b210:	4603      	mov	r3, r0
 800b212:	d1e8      	bne.n	800b1e6 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800b214:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 800b218:	3d10      	subs	r5, #16
 800b21a:	b2ad      	uxth	r5, r5
 800b21c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b220:	429d      	cmp	r5, r3
 800b222:	d800      	bhi.n	800b226 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800b224:	b116      	cbz	r6, 800b22c <acc_cal_algorithms_bba_cal_ctrl+0x74>
 800b226:	2000      	movs	r0, #0
 800b228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b22c:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800b230:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800b234:	d011      	beq.n	800b25a <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 800b236:	429f      	cmp	r7, r3
 800b238:	d029      	beq.n	800b28e <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 800b23a:	ebae 0e08 	sub.w	lr, lr, r8
 800b23e:	f1be 0f08 	cmp.w	lr, #8
 800b242:	d1f0      	bne.n	800b226 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800b244:	eba7 070c 	sub.w	r7, r7, ip
 800b248:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800b24c:	fb9c f7f7 	sdiv	r7, ip, r7
 800b250:	eba8 0e07 	sub.w	lr, r8, r7
 800b254:	fa0f fe8e 	sxth.w	lr, lr
 800b258:	e001      	b.n	800b25e <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800b25a:	429f      	cmp	r7, r3
 800b25c:	d0e3      	beq.n	800b226 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800b25e:	f1be 0f00 	cmp.w	lr, #0
 800b262:	db07      	blt.n	800b274 <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 800b264:	f1be 0f1f 	cmp.w	lr, #31
 800b268:	dcdd      	bgt.n	800b226 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800b26a:	f8a1 e000 	strh.w	lr, [r1]
 800b26e:	2001      	movs	r0, #1
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	f1ce 0e00 	rsb	lr, lr, #0
 800b278:	fa1f fe8e 	uxth.w	lr, lr
 800b27c:	f1be 0f1f 	cmp.w	lr, #31
 800b280:	d8d1      	bhi.n	800b226 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800b282:	f04e 0e20 	orr.w	lr, lr, #32
 800b286:	f8a1 e000 	strh.w	lr, [r1]
 800b28a:	2001      	movs	r0, #1
 800b28c:	e7cc      	b.n	800b228 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 800b28e:	46c6      	mov	lr, r8
 800b290:	e7e5      	b.n	800b25e <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800b292:	bf00      	nop
 800b294:	ffff8000 	.word	0xffff8000

0800b298 <acc_cal_algorithms_iq_imbalance>:
 800b298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b29c:	ed2d 8b02 	vpush	{d8}
 800b2a0:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800b3e8 <acc_cal_algorithms_iq_imbalance+0x150>
 800b2a4:	b0bd      	sub	sp, #244	@ 0xf4
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	4689      	mov	r9, r1
 800b2aa:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800b2ae:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800b2b2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b2b6:	a804      	add	r0, sp, #16
 800b2b8:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800b2bc:	2700      	movs	r7, #0
 800b2be:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800b2c2:	f9b4 5000 	ldrsh.w	r5, [r4]
 800b2c6:	fb06 f606 	mul.w	r6, r6, r6
 800b2ca:	3404      	adds	r4, #4
 800b2cc:	fb05 6505 	mla	r5, r5, r5, r6
 800b2d0:	42a1      	cmp	r1, r4
 800b2d2:	442f      	add	r7, r5
 800b2d4:	d1f3      	bne.n	800b2be <acc_cal_algorithms_iq_imbalance+0x26>
 800b2d6:	ee07 7a90 	vmov	s15, r7
 800b2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2de:	31c0      	adds	r1, #192	@ 0xc0
 800b2e0:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800b2e4:	458c      	cmp	ip, r1
 800b2e6:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800b2ea:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800b2ee:	ece0 7a01 	vstmia	r0!, {s15}
 800b2f2:	d1e1      	bne.n	800b2b8 <acc_cal_algorithms_iq_imbalance+0x20>
 800b2f4:	2a00      	cmp	r2, #0
 800b2f6:	d070      	beq.n	800b3da <acc_cal_algorithms_iq_imbalance+0x142>
 800b2f8:	461c      	mov	r4, r3
 800b2fa:	eb02 0509 	add.w	r5, r2, r9
 800b2fe:	ae24      	add	r6, sp, #144	@ 0x90
 800b300:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800b304:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800b308:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800b30c:	ab0c      	add	r3, sp, #48	@ 0x30
 800b30e:	a904      	add	r1, sp, #16
 800b310:	f9b2 0000 	ldrsh.w	r0, [r2]
 800b314:	ecf1 5a01 	vldmia	r1!, {s11}
 800b318:	ee06 0a10 	vmov	s12, r0
 800b31c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800b320:	ee06 0a90 	vmov	s13, r0
 800b324:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800b328:	ee07 0a10 	vmov	s14, r0
 800b32c:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800b330:	ee07 0a90 	vmov	s15, r0
 800b334:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800b338:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b33c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b344:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b348:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b34c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b350:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b354:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b358:	ee67 5a07 	vmul.f32	s11, s14, s14
 800b35c:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b360:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b364:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b368:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b36c:	ed83 5a00 	vstr	s10, [r3]
 800b370:	ed83 6a01 	vstr	s12, [r3, #4]
 800b374:	edc3 6a02 	vstr	s13, [r3, #8]
 800b378:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800b37c:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800b380:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800b384:	330c      	adds	r3, #12
 800b386:	429e      	cmp	r6, r3
 800b388:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800b38c:	d1c0      	bne.n	800b310 <acc_cal_algorithms_iq_imbalance+0x78>
 800b38e:	2210      	movs	r2, #16
 800b390:	a901      	add	r1, sp, #4
 800b392:	a80c      	add	r0, sp, #48	@ 0x30
 800b394:	f7ff fcf0 	bl	800ad78 <least_sqr_fit>
 800b398:	b300      	cbz	r0, 800b3dc <acc_cal_algorithms_iq_imbalance+0x144>
 800b39a:	eddd 7a01 	vldr	s15, [sp, #4]
 800b39e:	ed9d 7a03 	vldr	s14, [sp, #12]
 800b3a2:	eddd 0a02 	vldr	s1, [sp, #8]
 800b3a6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f109 0901 	add.w	r9, r9, #1
 800b3b0:	3402      	adds	r4, #2
 800b3b2:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b3b6:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800b3ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3be:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800b3c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3c6:	ee67 0a20 	vmul.f32	s1, s14, s1
 800b3ca:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800b3ce:	ee27 1a01 	vmul.f32	s2, s14, s2
 800b3d2:	f003 fdf3 	bl	800efbc <acc_alg_iq_imb_comp_to_fix_point>
 800b3d6:	454d      	cmp	r5, r9
 800b3d8:	d196      	bne.n	800b308 <acc_cal_algorithms_iq_imbalance+0x70>
 800b3da:	2001      	movs	r0, #1
 800b3dc:	b03d      	add	sp, #244	@ 0xf4
 800b3de:	ecbd 8b02 	vpop	{d8}
 800b3e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3e6:	bf00      	nop
 800b3e8:	42400000 	.word	0x42400000

0800b3ec <acc_cal_algorithms_rx_freq_ctrl>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	b087      	sub	sp, #28
 800b3f2:	2400      	movs	r4, #0
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	468b      	mov	fp, r1
 800b3f8:	9203      	str	r2, [sp, #12]
 800b3fa:	f100 0902 	add.w	r9, r0, #2
 800b3fe:	9402      	str	r4, [sp, #8]
 800b400:	4625      	mov	r5, r4
 800b402:	46a0      	mov	r8, r4
 800b404:	46a2      	mov	sl, r4
 800b406:	f10d 0716 	add.w	r7, sp, #22
 800b40a:	e006      	b.n	800b41a <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800b40c:	4553      	cmp	r3, sl
 800b40e:	d82a      	bhi.n	800b466 <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800b410:	4645      	mov	r5, r8
 800b412:	4698      	mov	r8, r3
 800b414:	3401      	adds	r4, #1
 800b416:	2c08      	cmp	r4, #8
 800b418:	d019      	beq.n	800b44e <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800b41a:	9700      	str	r7, [sp, #0]
 800b41c:	ab05      	add	r3, sp, #20
 800b41e:	465a      	mov	r2, fp
 800b420:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800b424:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800b428:	f003 fda4 	bl	800ef74 <acc_alg_comp_iq_imb>
 800b42c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800b430:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b434:	fb02 f202 	mul.w	r2, r2, r2
 800b438:	fb03 2303 	mla	r3, r3, r3, r2
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	b2a2      	uxth	r2, r4
 800b440:	d9e8      	bls.n	800b414 <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800b442:	4543      	cmp	r3, r8
 800b444:	d8e2      	bhi.n	800b40c <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800b446:	3401      	adds	r4, #1
 800b448:	2c08      	cmp	r4, #8
 800b44a:	461d      	mov	r5, r3
 800b44c:	d1e5      	bne.n	800b41a <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800b44e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b452:	45aa      	cmp	sl, r5
 800b454:	bf85      	ittet	hi
 800b456:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800b45a:	2001      	movhi	r0, #1
 800b45c:	2000      	movls	r0, #0
 800b45e:	801a      	strhhi	r2, [r3, #0]
 800b460:	b007      	add	sp, #28
 800b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b466:	4645      	mov	r5, r8
 800b468:	9202      	str	r2, [sp, #8]
 800b46a:	46d0      	mov	r8, sl
 800b46c:	469a      	mov	sl, r3
 800b46e:	e7d1      	b.n	800b414 <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800b470 <acc_cal_algorithms_atan2_q16>:
 800b470:	2800      	cmp	r0, #0
 800b472:	bfb8      	it	lt
 800b474:	4240      	neglt	r0, r0
 800b476:	b4f0      	push	{r4, r5, r6, r7}
 800b478:	bfba      	itte	lt
 800b47a:	b200      	sxthlt	r0, r0
 800b47c:	2401      	movlt	r4, #1
 800b47e:	2400      	movge	r4, #0
 800b480:	2900      	cmp	r1, #0
 800b482:	db3f      	blt.n	800b504 <acc_cal_algorithms_atan2_q16+0x94>
 800b484:	4288      	cmp	r0, r1
 800b486:	db38      	blt.n	800b4fa <acc_cal_algorithms_atan2_q16+0x8a>
 800b488:	2200      	movs	r2, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	b368      	cbz	r0, 800b4ea <acc_cal_algorithms_atan2_q16+0x7a>
 800b48e:	4608      	mov	r0, r1
 800b490:	2600      	movs	r6, #0
 800b492:	f643 4528 	movw	r5, #15400	@ 0x3c28
 800b496:	0400      	lsls	r0, r0, #16
 800b498:	fbb0 f1f3 	udiv	r1, r0, r3
 800b49c:	42a9      	cmp	r1, r5
 800b49e:	d948      	bls.n	800b532 <acc_cal_algorithms_atan2_q16+0xc2>
 800b4a0:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 800b4a4:	4299      	cmp	r1, r3
 800b4a6:	d936      	bls.n	800b516 <acc_cal_algorithms_atan2_q16+0xa6>
 800b4a8:	f648 0372 	movw	r3, #34930	@ 0x8872
 800b4ac:	4299      	cmp	r1, r3
 800b4ae:	d942      	bls.n	800b536 <acc_cal_algorithms_atan2_q16+0xc6>
 800b4b0:	f64a 4349 	movw	r3, #44105	@ 0xac49
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	d940      	bls.n	800b53a <acc_cal_algorithms_atan2_q16+0xca>
 800b4b8:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d93e      	bls.n	800b53e <acc_cal_algorithms_atan2_q16+0xce>
 800b4c0:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	bf98      	it	ls
 800b4c8:	2705      	movls	r7, #5
 800b4ca:	d925      	bls.n	800b518 <acc_cal_algorithms_atan2_q16+0xa8>
 800b4cc:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 800b4d0:	f248 2333 	movw	r3, #33331	@ 0x8233
 800b4d4:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 800b4d8:	1b49      	subs	r1, r1, r5
 800b4da:	fb03 f101 	mul.w	r1, r3, r1
 800b4de:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800b4e2:	b116      	cbz	r6, 800b4ea <acc_cal_algorithms_atan2_q16+0x7a>
 800b4e4:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 800b4e8:	301f      	adds	r0, #31
 800b4ea:	b114      	cbz	r4, 800b4f2 <acc_cal_algorithms_atan2_q16+0x82>
 800b4ec:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 800b4f0:	303f      	adds	r0, #63	@ 0x3f
 800b4f2:	b102      	cbz	r2, 800b4f6 <acc_cal_algorithms_atan2_q16+0x86>
 800b4f4:	4240      	negs	r0, r0
 800b4f6:	bcf0      	pop	{r4, r5, r6, r7}
 800b4f8:	4770      	bx	lr
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	b9b1      	cbnz	r1, 800b52c <acc_cal_algorithms_atan2_q16+0xbc>
 800b4fe:	4811      	ldr	r0, [pc, #68]	@ (800b544 <acc_cal_algorithms_atan2_q16+0xd4>)
 800b500:	460a      	mov	r2, r1
 800b502:	e7f2      	b.n	800b4ea <acc_cal_algorithms_atan2_q16+0x7a>
 800b504:	4249      	negs	r1, r1
 800b506:	b209      	sxth	r1, r1
 800b508:	4288      	cmp	r0, r1
 800b50a:	f04f 0201 	mov.w	r2, #1
 800b50e:	dabc      	bge.n	800b48a <acc_cal_algorithms_atan2_q16+0x1a>
 800b510:	460b      	mov	r3, r1
 800b512:	4616      	mov	r6, r2
 800b514:	e7bd      	b.n	800b492 <acc_cal_algorithms_atan2_q16+0x22>
 800b516:	2701      	movs	r7, #1
 800b518:	480b      	ldr	r0, [pc, #44]	@ (800b548 <acc_cal_algorithms_atan2_q16+0xd8>)
 800b51a:	4b0c      	ldr	r3, [pc, #48]	@ (800b54c <acc_cal_algorithms_atan2_q16+0xdc>)
 800b51c:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 800b520:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b524:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800b528:	6840      	ldr	r0, [r0, #4]
 800b52a:	e7d5      	b.n	800b4d8 <acc_cal_algorithms_atan2_q16+0x68>
 800b52c:	2200      	movs	r2, #0
 800b52e:	2601      	movs	r6, #1
 800b530:	e7af      	b.n	800b492 <acc_cal_algorithms_atan2_q16+0x22>
 800b532:	2700      	movs	r7, #0
 800b534:	e7f0      	b.n	800b518 <acc_cal_algorithms_atan2_q16+0xa8>
 800b536:	2702      	movs	r7, #2
 800b538:	e7ee      	b.n	800b518 <acc_cal_algorithms_atan2_q16+0xa8>
 800b53a:	2703      	movs	r7, #3
 800b53c:	e7ec      	b.n	800b518 <acc_cal_algorithms_atan2_q16+0xa8>
 800b53e:	2704      	movs	r7, #4
 800b540:	e7ea      	b.n	800b518 <acc_cal_algorithms_atan2_q16+0xa8>
 800b542:	bf00      	nop
 800b544:	0001921f 	.word	0x0001921f
 800b548:	080159c4 	.word	0x080159c4
 800b54c:	080159fc 	.word	0x080159fc

0800b550 <acc_cal_algorithms_area_index>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800b558:	ab05      	add	r3, sp, #20
 800b55a:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 800b55e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	4c5c      	ldr	r4, [pc, #368]	@ (800b6d8 <acc_cal_algorithms_area_index+0x188>)
 800b566:	4d5d      	ldr	r5, [pc, #372]	@ (800b6dc <acc_cal_algorithms_area_index+0x18c>)
 800b568:	9105      	str	r1, [sp, #20]
 800b56a:	2300      	movs	r3, #0
 800b56c:	4681      	mov	r9, r0
 800b56e:	9301      	str	r3, [sp, #4]
 800b570:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 800b574:	af3d      	add	r7, sp, #244	@ 0xf4
 800b576:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800b57a:	464e      	mov	r6, r9
 800b57c:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800b580:	f936 0b04 	ldrsh.w	r0, [r6], #4
 800b584:	f7ff ff74 	bl	800b470 <acc_cal_algorithms_atan2_q16>
 800b588:	f84a 0b04 	str.w	r0, [sl], #4
 800b58c:	45d0      	cmp	r8, sl
 800b58e:	d1f5      	bne.n	800b57c <acc_cal_algorithms_area_index+0x2c>
 800b590:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800b594:	46da      	mov	sl, fp
 800b596:	464e      	mov	r6, r9
 800b598:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 800b59c:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 800b5a0:	f7ff ff66 	bl	800b470 <acc_cal_algorithms_atan2_q16>
 800b5a4:	f84a 0f04 	str.w	r0, [sl, #4]!
 800b5a8:	4557      	cmp	r7, sl
 800b5aa:	f106 0604 	add.w	r6, r6, #4
 800b5ae:	d1f3      	bne.n	800b598 <acc_cal_algorithms_area_index+0x48>
 800b5b0:	9a01      	ldr	r2, [sp, #4]
 800b5b2:	ab3e      	add	r3, sp, #248	@ 0xf8
 800b5b4:	ae0d      	add	r6, sp, #52	@ 0x34
 800b5b6:	1898      	adds	r0, r3, r2
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800b5be:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	42a3      	cmp	r3, r4
 800b5c6:	dd61      	ble.n	800b68c <acc_cal_algorithms_area_index+0x13c>
 800b5c8:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800b5cc:	3b7e      	subs	r3, #126	@ 0x7e
 800b5ce:	42a3      	cmp	r3, r4
 800b5d0:	dcfa      	bgt.n	800b5c8 <acc_cal_algorithms_area_index+0x78>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	bfb8      	it	lt
 800b5d6:	425b      	neglt	r3, r3
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	bfb8      	it	lt
 800b5dc:	4619      	movlt	r1, r3
 800b5de:	455f      	cmp	r7, fp
 800b5e0:	f840 3b04 	str.w	r3, [r0], #4
 800b5e4:	d1e9      	bne.n	800b5ba <acc_cal_algorithms_area_index+0x6a>
 800b5e6:	9b02      	ldr	r3, [sp, #8]
 800b5e8:	1049      	asrs	r1, r1, #1
 800b5ea:	f843 1f04 	str.w	r1, [r3, #4]!
 800b5ee:	9302      	str	r3, [sp, #8]
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	3360      	adds	r3, #96	@ 0x60
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 800b5fc:	4599      	cmp	r9, r3
 800b5fe:	d1ba      	bne.n	800b576 <acc_cal_algorithms_area_index+0x26>
 800b600:	2300      	movs	r3, #0
 800b602:	9c04      	ldr	r4, [sp, #16]
 800b604:	4618      	mov	r0, r3
 800b606:	4619      	mov	r1, r3
 800b608:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800b60c:	428a      	cmp	r2, r1
 800b60e:	bfc8      	it	gt
 800b610:	4618      	movgt	r0, r3
 800b612:	f103 0301 	add.w	r3, r3, #1
 800b616:	bfc8      	it	gt
 800b618:	4611      	movgt	r1, r2
 800b61a:	2b08      	cmp	r3, #8
 800b61c:	d1f4      	bne.n	800b608 <acc_cal_algorithms_area_index+0xb8>
 800b61e:	ab06      	add	r3, sp, #24
 800b620:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800b624:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800b628:	ab3e      	add	r3, sp, #248	@ 0xf8
 800b62a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800b62e:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800b632:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800b636:	f851 3b04 	ldr.w	r3, [r1], #4
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	bfac      	ite	ge
 800b63e:	2300      	movge	r3, #0
 800b640:	2301      	movlt	r3, #1
 800b642:	f802 3f01 	strb.w	r3, [r2, #1]!
 800b646:	4290      	cmp	r0, r2
 800b648:	7613      	strb	r3, [r2, #24]
 800b64a:	d1f4      	bne.n	800b636 <acc_cal_algorithms_area_index+0xe6>
 800b64c:	2200      	movs	r2, #0
 800b64e:	4611      	mov	r1, r2
 800b650:	2301      	movs	r3, #1
 800b652:	b321      	cbz	r1, 800b69e <acc_cal_algorithms_area_index+0x14e>
 800b654:	f818 0003 	ldrb.w	r0, [r8, r3]
 800b658:	b1d8      	cbz	r0, 800b692 <acc_cal_algorithms_area_index+0x142>
 800b65a:	3201      	adds	r2, #1
 800b65c:	3301      	adds	r3, #1
 800b65e:	2b30      	cmp	r3, #48	@ 0x30
 800b660:	d1f7      	bne.n	800b652 <acc_cal_algorithms_area_index+0x102>
 800b662:	f1a2 030c 	sub.w	r3, r2, #12
 800b666:	2b08      	cmp	r3, #8
 800b668:	d82e      	bhi.n	800b6c8 <acc_cal_algorithms_area_index+0x178>
 800b66a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800b66e:	2a17      	cmp	r2, #23
 800b670:	d902      	bls.n	800b678 <acc_cal_algorithms_area_index+0x128>
 800b672:	3a18      	subs	r2, #24
 800b674:	2a17      	cmp	r2, #23
 800b676:	d8fc      	bhi.n	800b672 <acc_cal_algorithms_area_index+0x122>
 800b678:	9b05      	ldr	r3, [sp, #20]
 800b67a:	2001      	movs	r0, #1
 800b67c:	801a      	strh	r2, [r3, #0]
 800b67e:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800b68a:	337e      	adds	r3, #126	@ 0x7e
 800b68c:	42ab      	cmp	r3, r5
 800b68e:	dbfa      	blt.n	800b686 <acc_cal_algorithms_area_index+0x136>
 800b690:	e79f      	b.n	800b5d2 <acc_cal_algorithms_area_index+0x82>
 800b692:	2a0b      	cmp	r2, #11
 800b694:	d8e5      	bhi.n	800b662 <acc_cal_algorithms_area_index+0x112>
 800b696:	3301      	adds	r3, #1
 800b698:	2b30      	cmp	r3, #48	@ 0x30
 800b69a:	d0f0      	beq.n	800b67e <acc_cal_algorithms_area_index+0x12e>
 800b69c:	4602      	mov	r2, r0
 800b69e:	1e58      	subs	r0, r3, #1
 800b6a0:	4440      	add	r0, r8
 800b6a2:	1c59      	adds	r1, r3, #1
 800b6a4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800b6a8:	1e4b      	subs	r3, r1, #1
 800b6aa:	b12c      	cbz	r4, 800b6b8 <acc_cal_algorithms_area_index+0x168>
 800b6ac:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800b6b0:	b914      	cbnz	r4, 800b6b8 <acc_cal_algorithms_area_index+0x168>
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	e7d1      	b.n	800b65c <acc_cal_algorithms_area_index+0x10c>
 800b6b8:	2930      	cmp	r1, #48	@ 0x30
 800b6ba:	d001      	beq.n	800b6c0 <acc_cal_algorithms_area_index+0x170>
 800b6bc:	3101      	adds	r1, #1
 800b6be:	e7f1      	b.n	800b6a4 <acc_cal_algorithms_area_index+0x154>
 800b6c0:	f1a2 030c 	sub.w	r3, r2, #12
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	d904      	bls.n	800b6d2 <acc_cal_algorithms_area_index+0x182>
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800b6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d2:	0852      	lsrs	r2, r2, #1
 800b6d4:	e7d0      	b.n	800b678 <acc_cal_algorithms_area_index+0x128>
 800b6d6:	bf00      	nop
 800b6d8:	0003243f 	.word	0x0003243f
 800b6dc:	fffcdbc1 	.word	0xfffcdbc1

0800b6e0 <acc_cal_algorithms_phase_unwrap>:
 800b6e0:	2901      	cmp	r1, #1
 800b6e2:	d926      	bls.n	800b732 <acc_cal_algorithms_phase_unwrap+0x52>
 800b6e4:	b470      	push	{r4, r5, r6}
 800b6e6:	1f03      	subs	r3, r0, #4
 800b6e8:	4e12      	ldr	r6, [pc, #72]	@ (800b734 <acc_cal_algorithms_phase_unwrap+0x54>)
 800b6ea:	4d13      	ldr	r5, [pc, #76]	@ (800b738 <acc_cal_algorithms_phase_unwrap+0x58>)
 800b6ec:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	6843      	ldr	r3, [r0, #4]
 800b6f4:	440b      	add	r3, r1
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6fc:	6812      	ldr	r2, [r2, #0]
 800b6fe:	1a9a      	subs	r2, r3, r2
 800b700:	42b2      	cmp	r2, r6
 800b702:	dd09      	ble.n	800b718 <acc_cal_algorithms_phase_unwrap+0x38>
 800b704:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b708:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800b70c:	3b7e      	subs	r3, #126	@ 0x7e
 800b70e:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800b712:	6003      	str	r3, [r0, #0]
 800b714:	397e      	subs	r1, #126	@ 0x7e
 800b716:	1a9a      	subs	r2, r3, r2
 800b718:	42aa      	cmp	r2, r5
 800b71a:	da06      	bge.n	800b72a <acc_cal_algorithms_phase_unwrap+0x4a>
 800b71c:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800b720:	337e      	adds	r3, #126	@ 0x7e
 800b722:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800b726:	6003      	str	r3, [r0, #0]
 800b728:	317e      	adds	r1, #126	@ 0x7e
 800b72a:	4284      	cmp	r4, r0
 800b72c:	d1e1      	bne.n	800b6f2 <acc_cal_algorithms_phase_unwrap+0x12>
 800b72e:	bc70      	pop	{r4, r5, r6}
 800b730:	4770      	bx	lr
 800b732:	4770      	bx	lr
 800b734:	0003243f 	.word	0x0003243f
 800b738:	fffcdbc1 	.word	0xfffcdbc1

0800b73c <acc_cal_algorithms_tx_freq_ctrl>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800b744:	4606      	mov	r6, r0
 800b746:	1c8c      	adds	r4, r1, #2
 800b748:	4690      	mov	r8, r2
 800b74a:	4699      	mov	r9, r3
 800b74c:	ad01      	add	r5, sp, #4
 800b74e:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800b752:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b756:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800b75a:	f7ff fe89 	bl	800b470 <acc_cal_algorithms_atan2_q16>
 800b75e:	f845 0f04 	str.w	r0, [r5, #4]!
 800b762:	42af      	cmp	r7, r5
 800b764:	f104 0404 	add.w	r4, r4, #4
 800b768:	d1f3      	bne.n	800b752 <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800b76a:	46ca      	mov	sl, r9
 800b76c:	f1a9 0304 	sub.w	r3, r9, #4
 800b770:	f109 001c 	add.w	r0, r9, #28
 800b774:	2100      	movs	r1, #0
 800b776:	f843 1f04 	str.w	r1, [r3, #4]!
 800b77a:	4283      	cmp	r3, r0
 800b77c:	d1fb      	bne.n	800b776 <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800b77e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800b782:	f04f 0b00 	mov.w	fp, #0
 800b786:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b78a:	4f33      	ldr	r7, [pc, #204]	@ (800b858 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800b78c:	f8cd b000 	str.w	fp, [sp]
 800b790:	ac19      	add	r4, sp, #100	@ 0x64
 800b792:	00ed      	lsls	r5, r5, #3
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	f640 5994 	movw	r9, #3476	@ 0xd94
 800b79a:	2130      	movs	r1, #48	@ 0x30
 800b79c:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800b7a0:	f7ff ff9e 	bl	800b6e0 <acc_cal_algorithms_phase_unwrap>
 800b7a4:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800b7a8:	f04f 0c00 	mov.w	ip, #0
 800b7ac:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b7b0:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800b7b2:	428c      	cmp	r4, r1
 800b7b4:	eba3 0000 	sub.w	r0, r3, r0
 800b7b8:	4484      	add	ip, r0
 800b7ba:	d1f7      	bne.n	800b7ac <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800b7bc:	f1bc 0f00 	cmp.w	ip, #0
 800b7c0:	db35      	blt.n	800b82e <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800b7c2:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800b7c6:	fb09 f101 	mul.w	r1, r9, r1
 800b7ca:	0d49      	lsrs	r1, r1, #21
 800b7cc:	fb06 f101 	mul.w	r1, r6, r1
 800b7d0:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800b7d4:	f8ca 1000 	str.w	r1, [sl]
 800b7d8:	f1bb 0f00 	cmp.w	fp, #0
 800b7dc:	d003      	beq.n	800b7e6 <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800b7de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b7e2:	4288      	cmp	r0, r1
 800b7e4:	d930      	bls.n	800b848 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800b7e6:	f8da 1000 	ldr.w	r1, [sl]
 800b7ea:	eba1 0108 	sub.w	r1, r1, r8
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	bfb8      	it	lt
 800b7f2:	4249      	neglt	r1, r1
 800b7f4:	42b9      	cmp	r1, r7
 800b7f6:	d204      	bcs.n	800b802 <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	460f      	mov	r7, r1
 800b7fc:	f8cd b004 	str.w	fp, [sp, #4]
 800b800:	9300      	str	r3, [sp, #0]
 800b802:	f10b 0301 	add.w	r3, fp, #1
 800b806:	fa1f fb83 	uxth.w	fp, r3
 800b80a:	f1bb 0f08 	cmp.w	fp, #8
 800b80e:	f10a 0a04 	add.w	sl, sl, #4
 800b812:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800b816:	d1c0      	bne.n	800b79a <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800b818:	9b00      	ldr	r3, [sp, #0]
 800b81a:	b11b      	cbz	r3, 800b824 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800b81c:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800b820:	9a01      	ldr	r2, [sp, #4]
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	9800      	ldr	r0, [sp, #0]
 800b826:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800b82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82e:	f1cc 0100 	rsb	r1, ip, #0
 800b832:	0989      	lsrs	r1, r1, #6
 800b834:	fb09 f101 	mul.w	r1, r9, r1
 800b838:	0d49      	lsrs	r1, r1, #21
 800b83a:	fb06 f101 	mul.w	r1, r6, r1
 800b83e:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800b842:	f8ca 1000 	str.w	r1, [sl]
 800b846:	e7c7      	b.n	800b7d8 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800b848:	2300      	movs	r3, #0
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	9800      	ldr	r0, [sp, #0]
 800b84e:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b856:	bf00      	nop
 800b858:	000f4240 	.word	0x000f4240

0800b85c <acc_cal_algorithms_phase_enhancement>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	b0bc      	sub	sp, #240	@ 0xf0
 800b862:	4606      	mov	r6, r0
 800b864:	460d      	mov	r5, r1
 800b866:	4617      	mov	r7, r2
 800b868:	f100 0902 	add.w	r9, r0, #2
 800b86c:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800b870:	2400      	movs	r4, #0
 800b872:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800b876:	e005      	b.n	800b884 <acc_cal_algorithms_phase_enhancement+0x28>
 800b878:	f7ff fdfa 	bl	800b470 <acc_cal_algorithms_atan2_q16>
 800b87c:	2c30      	cmp	r4, #48	@ 0x30
 800b87e:	f84a 0b04 	str.w	r0, [sl], #4
 800b882:	d00f      	beq.n	800b8a4 <acc_cal_algorithms_phase_enhancement+0x48>
 800b884:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800b888:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800b88c:	fb01 f301 	mul.w	r3, r1, r1
 800b890:	fb00 3300 	mla	r3, r0, r0, r3
 800b894:	4543      	cmp	r3, r8
 800b896:	f104 0401 	add.w	r4, r4, #1
 800b89a:	dced      	bgt.n	800b878 <acc_cal_algorithms_phase_enhancement+0x1c>
 800b89c:	2000      	movs	r0, #0
 800b89e:	b03c      	add	sp, #240	@ 0xf0
 800b8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a4:	ac0b      	add	r4, sp, #44	@ 0x2c
 800b8a6:	f1ad 0602 	sub.w	r6, sp, #2
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800b8b2:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	bfb8      	it	lt
 800b8ba:	330f      	addlt	r3, #15
 800b8bc:	3202      	adds	r2, #2
 800b8be:	111b      	asrs	r3, r3, #4
 800b8c0:	4541      	cmp	r1, r8
 800b8c2:	8013      	strh	r3, [r2, #0]
 800b8c4:	d1f5      	bne.n	800b8b2 <acc_cal_algorithms_phase_enhancement+0x56>
 800b8c6:	a80c      	add	r0, sp, #48	@ 0x30
 800b8c8:	2130      	movs	r1, #48	@ 0x30
 800b8ca:	f7ff ff09 	bl	800b6e0 <acc_cal_algorithms_phase_unwrap>
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800b8d4:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b8d6:	4544      	cmp	r4, r8
 800b8d8:	eba3 0301 	sub.w	r3, r3, r1
 800b8dc:	441a      	add	r2, r3
 800b8de:	d1f7      	bne.n	800b8d0 <acc_cal_algorithms_phase_enhancement+0x74>
 800b8e0:	490d      	ldr	r1, [pc, #52]	@ (800b918 <acc_cal_algorithms_phase_enhancement+0xbc>)
 800b8e2:	17d3      	asrs	r3, r2, #31
 800b8e4:	fb81 1202 	smull	r1, r2, r1, r2
 800b8e8:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800b8ec:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800b8f0:	3330      	adds	r3, #48	@ 0x30
 800b8f2:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800b8f6:	428b      	cmp	r3, r1
 800b8f8:	d8d0      	bhi.n	800b89c <acc_cal_algorithms_phase_enhancement+0x40>
 800b8fa:	3d02      	subs	r5, #2
 800b8fc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800b900:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800b904:	f825 3f02 	strh.w	r3, [r5, #2]!
 800b908:	42b1      	cmp	r1, r6
 800b90a:	d1f9      	bne.n	800b900 <acc_cal_algorithms_phase_enhancement+0xa4>
 800b90c:	2001      	movs	r0, #1
 800b90e:	803a      	strh	r2, [r7, #0]
 800b910:	b03c      	add	sp, #240	@ 0xf0
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	bf00      	nop
 800b918:	2aaaaaab 	.word	0x2aaaaaab

0800b91c <acc_cal_algorithms_calc_pulse_params>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	b085      	sub	sp, #20
 800b922:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800b926:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b92a:	9203      	str	r2, [sp, #12]
 800b92c:	d349      	bcc.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b92e:	9b02      	ldr	r3, [sp, #8]
 800b930:	2b08      	cmp	r3, #8
 800b932:	d046      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b934:	9a01      	ldr	r2, [sp, #4]
 800b936:	9c03      	ldr	r4, [sp, #12]
 800b938:	f1a2 0c12 	sub.w	ip, r2, #18
 800b93c:	2000      	movs	r0, #0
 800b93e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800b942:	f8cd c000 	str.w	ip, [sp]
 800b946:	4680      	mov	r8, r0
 800b948:	4681      	mov	r9, r0
 800b94a:	4682      	mov	sl, r0
 800b94c:	3a02      	subs	r2, #2
 800b94e:	2701      	movs	r7, #1
 800b950:	f240 2bee 	movw	fp, #750	@ 0x2ee
 800b954:	4684      	mov	ip, r0
 800b956:	e014      	b.n	800b982 <acc_cal_algorithms_calc_pulse_params+0x66>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d136      	bne.n	800b9ca <acc_cal_algorithms_calc_pulse_params+0xae>
 800b95c:	459a      	cmp	sl, r3
 800b95e:	da3a      	bge.n	800b9d6 <acc_cal_algorithms_calc_pulse_params+0xba>
 800b960:	469a      	mov	sl, r3
 800b962:	f04f 0801 	mov.w	r8, #1
 800b966:	f1cc 0600 	rsb	r6, ip, #0
 800b96a:	429e      	cmp	r6, r3
 800b96c:	9b00      	ldr	r3, [sp, #0]
 800b96e:	bfc8      	it	gt
 800b970:	ebae 0c05 	subgt.w	ip, lr, r5
 800b974:	4589      	cmp	r9, r1
 800b976:	bf38      	it	cc
 800b978:	4689      	movcc	r9, r1
 800b97a:	4293      	cmp	r3, r2
 800b97c:	f104 0402 	add.w	r4, r4, #2
 800b980:	d01c      	beq.n	800b9bc <acc_cal_algorithms_calc_pulse_params+0xa0>
 800b982:	8a55      	ldrh	r5, [r2, #18]
 800b984:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800b988:	1a6b      	subs	r3, r5, r1
 800b98a:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800b98e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800b992:	bf38      	it	cc
 800b994:	8023      	strhcc	r3, [r4, #0]
 800b996:	468e      	mov	lr, r1
 800b998:	bf2c      	ite	cs
 800b99a:	2700      	movcs	r7, #0
 800b99c:	8811      	ldrhcc	r1, [r2, #0]
 800b99e:	455b      	cmp	r3, fp
 800b9a0:	dcda      	bgt.n	800b958 <acc_cal_algorithms_calc_pulse_params+0x3c>
 800b9a2:	4e57      	ldr	r6, [pc, #348]	@ (800bb00 <acc_cal_algorithms_calc_pulse_params+0x1e4>)
 800b9a4:	459a      	cmp	sl, r3
 800b9a6:	bfb8      	it	lt
 800b9a8:	469a      	movlt	sl, r3
 800b9aa:	42b3      	cmp	r3, r6
 800b9ac:	dadb      	bge.n	800b966 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b9ae:	f1b8 0f00 	cmp.w	r8, #0
 800b9b2:	bf0a      	itet	eq
 800b9b4:	2700      	moveq	r7, #0
 800b9b6:	4640      	movne	r0, r8
 800b9b8:	2001      	moveq	r0, #1
 800b9ba:	e7d4      	b.n	800b966 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b9bc:	f8cd c000 	str.w	ip, [sp]
 800b9c0:	b977      	cbnz	r7, 800b9e0 <acc_cal_algorithms_calc_pulse_params+0xc4>
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	b005      	add	sp, #20
 800b9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ca:	459a      	cmp	sl, r3
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	da05      	bge.n	800b9dc <acc_cal_algorithms_calc_pulse_params+0xc0>
 800b9d0:	469a      	mov	sl, r3
 800b9d2:	2700      	movs	r7, #0
 800b9d4:	e7c7      	b.n	800b966 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b9d6:	f04f 0801 	mov.w	r8, #1
 800b9da:	e7c4      	b.n	800b966 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b9dc:	2700      	movs	r7, #0
 800b9de:	e7c2      	b.n	800b966 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b9e0:	f1b8 0f00 	cmp.w	r8, #0
 800b9e4:	d0ed      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0eb      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b9ea:	9b02      	ldr	r3, [sp, #8]
 800b9ec:	f1b3 081c 	subs.w	r8, r3, #28
 800b9f0:	d0e7      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b9f2:	9f03      	ldr	r7, [sp, #12]
 800b9f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	9003      	str	r0, [sp, #12]
 800b9fc:	3712      	adds	r7, #18
 800b9fe:	46b6      	mov	lr, r6
 800ba00:	46b4      	mov	ip, r6
 800ba02:	46b1      	mov	r9, r6
 800ba04:	4630      	mov	r0, r6
 800ba06:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800ba0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800ba0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ba12:	463c      	mov	r4, r7
 800ba14:	4639      	mov	r1, r7
 800ba16:	220a      	movs	r2, #10
 800ba18:	f931 bd02 	ldrsh.w	fp, [r1, #-2]!
 800ba1c:	f934 5f02 	ldrsh.w	r5, [r4, #2]!
 800ba20:	fb02 330b 	mla	r3, r2, fp, r3
 800ba24:	f1a2 0b02 	sub.w	fp, r2, #2
 800ba28:	3a01      	subs	r2, #1
 800ba2a:	fb0b 3305 	mla	r3, fp, r5, r3
 800ba2e:	d1f3      	bne.n	800ba18 <acc_cal_algorithms_calc_pulse_params+0xfc>
 800ba30:	4563      	cmp	r3, ip
 800ba32:	dc61      	bgt.n	800baf8 <acc_cal_algorithms_calc_pulse_params+0x1dc>
 800ba34:	4573      	cmp	r3, lr
 800ba36:	bfa8      	it	ge
 800ba38:	4663      	movge	r3, ip
 800ba3a:	da5e      	bge.n	800bafa <acc_cal_algorithms_calc_pulse_params+0x1de>
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	46b1      	mov	r9, r6
 800ba40:	3601      	adds	r6, #1
 800ba42:	4546      	cmp	r6, r8
 800ba44:	d1df      	bne.n	800ba06 <acc_cal_algorithms_calc_pulse_params+0xea>
 800ba46:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800ba4a:	459c      	cmp	ip, r3
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	464e      	mov	r6, r9
 800ba50:	e9dd 9002 	ldrd	r9, r0, [sp, #8]
 800ba54:	ddb5      	ble.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800ba56:	4b2b      	ldr	r3, [pc, #172]	@ (800bb04 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800ba58:	459e      	cmp	lr, r3
 800ba5a:	dab2      	bge.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800ba5c:	f1ba 0f00 	cmp.w	sl, #0
 800ba60:	d0af      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800ba62:	9b00      	ldr	r3, [sp, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0ac      	beq.n	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800ba68:	9b01      	ldr	r3, [sp, #4]
 800ba6a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	b144      	cbz	r4, 800ba88 <acc_cal_algorithms_calc_pulse_params+0x16c>
 800ba76:	428b      	cmp	r3, r1
 800ba78:	d204      	bcs.n	800ba84 <acc_cal_algorithms_calc_pulse_params+0x168>
 800ba7a:	43da      	mvns	r2, r3
 800ba7c:	4452      	add	r2, sl
 800ba7e:	440a      	add	r2, r1
 800ba80:	fbb2 f2fa 	udiv	r2, r2, sl
 800ba84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800ba86:	6022      	str	r2, [r4, #0]
 800ba88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ba8a:	2a00      	cmp	r2, #0
 800ba8c:	d09a      	beq.n	800b9c4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800ba8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	d097      	beq.n	800b9c4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800ba94:	462a      	mov	r2, r5
 800ba96:	9c01      	ldr	r4, [sp, #4]
 800ba98:	320e      	adds	r2, #14
 800ba9a:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
 800ba9e:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800baa2:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800baa6:	d205      	bcs.n	800bab4 <acc_cal_algorithms_calc_pulse_params+0x198>
 800baa8:	43db      	mvns	r3, r3
 800baaa:	4453      	add	r3, sl
 800baac:	442b      	add	r3, r5
 800baae:	fbb3 f3fa 	udiv	r3, r3, sl
 800bab2:	1ad2      	subs	r2, r2, r3
 800bab4:	4635      	mov	r5, r6
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	350e      	adds	r5, #14
 800baba:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800babe:	ebb1 0fc3 	cmp.w	r1, r3, lsl #3
 800bac2:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800bac6:	d906      	bls.n	800bad6 <acc_cal_algorithms_calc_pulse_params+0x1ba>
 800bac8:	9e00      	ldr	r6, [sp, #0]
 800baca:	1e73      	subs	r3, r6, #1
 800bacc:	440b      	add	r3, r1
 800bace:	1b1b      	subs	r3, r3, r4
 800bad0:	fbb3 f3f6 	udiv	r3, r3, r6
 800bad4:	1aed      	subs	r5, r5, r3
 800bad6:	2a00      	cmp	r2, #0
 800bad8:	f6ff af73 	blt.w	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800badc:	2d00      	cmp	r5, #0
 800bade:	f6ff af70 	blt.w	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800bae2:	42aa      	cmp	r2, r5
 800bae4:	f73f af6d 	bgt.w	800b9c2 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800bae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baea:	eba5 0a02 	sub.w	sl, r5, r2
 800baee:	f8c3 a000 	str.w	sl, [r3]
 800baf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baf4:	601a      	str	r2, [r3, #0]
 800baf6:	e765      	b.n	800b9c4 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800baf8:	4630      	mov	r0, r6
 800bafa:	469c      	mov	ip, r3
 800bafc:	e7a0      	b.n	800ba40 <acc_cal_algorithms_calc_pulse_params+0x124>
 800bafe:	bf00      	nop
 800bb00:	fffffd12 	.word	0xfffffd12
 800bb04:	ffff3cb0 	.word	0xffff3cb0

0800bb08 <acc_cal_algorithms_pulseshaper_wavelet>:
 800bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb0c:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800bb10:	ae04      	add	r6, sp, #16
 800bb12:	af05      	add	r7, sp, #20
 800bb14:	2400      	movs	r4, #0
 800bb16:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800bb1a:	9600      	str	r6, [sp, #0]
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	aa08      	add	r2, sp, #32
 800bb20:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800bb24:	2190      	movs	r1, #144	@ 0x90
 800bb26:	6034      	str	r4, [r6, #0]
 800bb28:	603c      	str	r4, [r7, #0]
 800bb2a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800bb2e:	4680      	mov	r8, r0
 800bb30:	f7ff fef4 	bl	800b91c <acc_cal_algorithms_calc_pulse_params>
 800bb34:	b920      	cbnz	r0, 800bb40 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800bb36:	2000      	movs	r0, #0
 800bb38:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	ab07      	add	r3, sp, #28
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	ab06      	add	r3, sp, #24
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	9402      	str	r4, [sp, #8]
 800bb4a:	aa08      	add	r2, sp, #32
 800bb4c:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800bb50:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800bb54:	21f0      	movs	r1, #240	@ 0xf0
 800bb56:	f7ff fee1 	bl	800b91c <acc_cal_algorithms_calc_pulse_params>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d0eb      	beq.n	800bb36 <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800bb5e:	683f      	ldr	r7, [r7, #0]
 800bb60:	9c07      	ldr	r4, [sp, #28]
 800bb62:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800bb64:	490b      	ldr	r1, [pc, #44]	@ (800bb94 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800bb66:	6832      	ldr	r2, [r6, #0]
 800bb68:	1be4      	subs	r4, r4, r7
 800bb6a:	fb03 f304 	mul.w	r3, r3, r4
 800bb6e:	fb01 f707 	mul.w	r7, r1, r7
 800bb72:	fb01 f202 	mul.w	r2, r1, r2
 800bb76:	0c1b      	lsrs	r3, r3, #16
 800bb78:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800bb7c:	fb01 f104 	mul.w	r1, r1, r4
 800bb80:	0b52      	lsrs	r2, r2, #13
 800bb82:	e9c5 3100 	strd	r3, r1, [r5]
 800bb86:	60aa      	str	r2, [r5, #8]
 800bb88:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800bb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb90:	00042aa8 	.word	0x00042aa8
 800bb94:	00010aaa 	.word	0x00010aaa

0800bb98 <acc_cal_algorithms_pulseshaper_supply>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800bba0:	2600      	movs	r6, #0
 800bba2:	af06      	add	r7, sp, #24
 800bba4:	f10d 0814 	add.w	r8, sp, #20
 800bba8:	4605      	mov	r5, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800bbb0:	3002      	adds	r0, #2
 800bbb2:	aa0a      	add	r2, sp, #40	@ 0x28
 800bbb4:	f8cd 8000 	str.w	r8, [sp]
 800bbb8:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800bbbc:	f240 111f 	movw	r1, #287	@ 0x11f
 800bbc0:	f7ff feac 	bl	800b91c <acc_cal_algorithms_calc_pulse_params>
 800bbc4:	b920      	cbnz	r0, 800bbd0 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800bbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd0:	ab08      	add	r3, sp, #32
 800bbd2:	f10d 0a1c 	add.w	sl, sp, #28
 800bbd6:	f10d 0b10 	add.w	fp, sp, #16
 800bbda:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bbde:	f8cd b000 	str.w	fp, [sp]
 800bbe2:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800bbe6:	aa0a      	add	r2, sp, #40	@ 0x28
 800bbe8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800bbec:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800bbf0:	f7ff fe94 	bl	800b91c <acc_cal_algorithms_calc_pulse_params>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0e6      	beq.n	800bbc6 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800bbf8:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800bbfc:	e9cd 6600 	strd	r6, r6, [sp]
 800bc00:	aa0a      	add	r2, sp, #40	@ 0x28
 800bc02:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800bc06:	f8cd 9008 	str.w	r9, [sp, #8]
 800bc0a:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800bc0e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800bc12:	f7ff fe83 	bl	800b91c <acc_cal_algorithms_calc_pulse_params>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0d5      	beq.n	800bbc6 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800bc1a:	f8db c000 	ldr.w	ip, [fp]
 800bc1e:	f8d8 6000 	ldr.w	r6, [r8]
 800bc22:	f8dd e020 	ldr.w	lr, [sp, #32]
 800bc26:	f8d7 8000 	ldr.w	r8, [r7]
 800bc2a:	f8da 2000 	ldr.w	r2, [sl]
 800bc2e:	f8d9 9000 	ldr.w	r9, [r9]
 800bc32:	4f17      	ldr	r7, [pc, #92]	@ (800bc90 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800bc34:	4d17      	ldr	r5, [pc, #92]	@ (800bc94 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800bc36:	4918      	ldr	r1, [pc, #96]	@ (800bc98 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800bc38:	4b18      	ldr	r3, [pc, #96]	@ (800bc9c <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800bc3a:	eba9 090e 	sub.w	r9, r9, lr
 800bc3e:	eba6 060c 	sub.w	r6, r6, ip
 800bc42:	eba2 0208 	sub.w	r2, r2, r8
 800bc46:	fb07 f706 	mul.w	r7, r7, r6
 800bc4a:	fb05 f502 	mul.w	r5, r5, r2
 800bc4e:	fb01 f109 	mul.w	r1, r1, r9
 800bc52:	fb03 fc0c 	mul.w	ip, r3, ip
 800bc56:	fb03 f808 	mul.w	r8, r3, r8
 800bc5a:	fb03 fe0e 	mul.w	lr, r3, lr
 800bc5e:	0c3f      	lsrs	r7, r7, #16
 800bc60:	0c2d      	lsrs	r5, r5, #16
 800bc62:	0c09      	lsrs	r1, r1, #16
 800bc64:	fb03 f606 	mul.w	r6, r3, r6
 800bc68:	fb03 f202 	mul.w	r2, r3, r2
 800bc6c:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800bc70:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800bc74:	fb03 f309 	mul.w	r3, r3, r9
 800bc78:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800bc7c:	e9c4 7600 	strd	r7, r6, [r4]
 800bc80:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800bc84:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800bc88:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	00021554 	.word	0x00021554
 800bc94:	00074aa6 	.word	0x00074aa6
 800bc98:	000b754e 	.word	0x000b754e
 800bc9c:	00010aaa 	.word	0x00010aaa

0800bca0 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	468a      	mov	sl, r1
 800bca6:	b085      	sub	sp, #20
 800bca8:	4681      	mov	r9, r0
 800bcaa:	4611      	mov	r1, r2
 800bcac:	4650      	mov	r0, sl
 800bcae:	461f      	mov	r7, r3
 800bcb0:	2500      	movs	r5, #0
 800bcb2:	ab03      	add	r3, sp, #12
 800bcb4:	aa02      	add	r2, sp, #8
 800bcb6:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800bcba:	f001 f8b7 	bl	800ce2c <acc_sensor_a121_prepare_load_confmem>
 800bcbe:	4648      	mov	r0, r9
 800bcc0:	f001 f95e 	bl	800cf80 <acc_sensor_protocol_a121_prepare_load>
 800bcc4:	b300      	cbz	r0, 800bd08 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800bccc:	ebab 0405 	sub.w	r4, fp, r5
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	bf2c      	ite	cs
 800bcd4:	b29c      	uxthcs	r4, r3
 800bcd6:	b2a4      	uxthcc	r4, r4
 800bcd8:	9e02      	ldr	r6, [sp, #8]
 800bcda:	f003 f943 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bcde:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800bce2:	0862      	lsrs	r2, r4, #1
 800bce4:	4631      	mov	r1, r6
 800bce6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800bcea:	f002 ff0b 	bl	800eb04 <acc_confprogram_copy>
 800bcee:	f003 f93d 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bcf2:	887a      	ldrh	r2, [r7, #2]
 800bcf4:	211c      	movs	r1, #28
 800bcf6:	e9cd 1200 	strd	r1, r2, [sp]
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4629      	mov	r1, r5
 800bd00:	4630      	mov	r0, r6
 800bd02:	f002 fe35 	bl	800e970 <acc_confprogram_patch_offset>
 800bd06:	b918      	cbnz	r0, 800bd10 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800bd08:	2000      	movs	r0, #0
 800bd0a:	b005      	add	sp, #20
 800bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	f003 f92c 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bd14:	88ba      	ldrh	r2, [r7, #4]
 800bd16:	211a      	movs	r1, #26
 800bd18:	e9cd 1200 	strd	r1, r2, [sp]
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	4622      	mov	r2, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	4630      	mov	r0, r6
 800bd24:	f002 fe24 	bl	800e970 <acc_confprogram_patch_offset>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0ed      	beq.n	800bd08 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800bd2c:	f003 f91e 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bd30:	88fa      	ldrh	r2, [r7, #6]
 800bd32:	9201      	str	r2, [sp, #4]
 800bd34:	221b      	movs	r2, #27
 800bd36:	4603      	mov	r3, r0
 800bd38:	9200      	str	r2, [sp, #0]
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f002 fe16 	bl	800e970 <acc_confprogram_patch_offset>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0df      	beq.n	800bd08 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800bd48:	f003 f910 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bd4c:	893a      	ldrh	r2, [r7, #8]
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	2219      	movs	r2, #25
 800bd52:	4603      	mov	r3, r0
 800bd54:	9200      	str	r2, [sp, #0]
 800bd56:	4630      	mov	r0, r6
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f002 fe08 	bl	800e970 <acc_confprogram_patch_offset>
 800bd60:	4606      	mov	r6, r0
 800bd62:	4623      	mov	r3, r4
 800bd64:	4652      	mov	r2, sl
 800bd66:	4641      	mov	r1, r8
 800bd68:	4648      	mov	r0, r9
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0cc      	beq.n	800bd08 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800bd6e:	f001 f875 	bl	800ce5c <acc_sensor_a121_load_confmem>
 800bd72:	9b03      	ldr	r3, [sp, #12]
 800bd74:	441d      	add	r5, r3
 800bd76:	b2ad      	uxth	r5, r5
 800bd78:	f640 3249 	movw	r2, #2889	@ 0xb49
 800bd7c:	4295      	cmp	r5, r2
 800bd7e:	d9a5      	bls.n	800bccc <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800bd80:	4648      	mov	r0, r9
 800bd82:	f240 115b 	movw	r1, #347	@ 0x15b
 800bd86:	f001 f951 	bl	800d02c <acc_sensor_protocol_a121_run_program>
 800bd8a:	b005      	add	sp, #20
 800bd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd90 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800bd90:	b570      	push	{r4, r5, r6, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	460d      	mov	r5, r1
 800bd96:	4604      	mov	r4, r0
 800bd98:	f003 f8e4 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bd9c:	9005      	str	r0, [sp, #20]
 800bd9e:	f003 f8e5 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bda2:	4e09      	ldr	r6, [pc, #36]	@ (800bdc8 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800bda4:	9905      	ldr	r1, [sp, #20]
 800bda6:	9501      	str	r5, [sp, #4]
 800bda8:	2225      	movs	r2, #37	@ 0x25
 800bdaa:	4603      	mov	r3, r0
 800bdac:	9200      	str	r2, [sp, #0]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	9602      	str	r6, [sp, #8]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f002 fe3e 	bl	800ea34 <acc_confprogram_live_patch>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f240 2132 	movw	r1, #562	@ 0x232
 800bdbe:	b006      	add	sp, #24
 800bdc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdc4:	f001 b932 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800bdc8:	0800cdf9 	.word	0x0800cdf9

0800bdcc <acc_a121_cal_session_start_3_delay_cbank_program>:
 800bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	460e      	mov	r6, r1
 800bdd4:	4615      	mov	r5, r2
 800bdd6:	f003 f8c5 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bdda:	9005      	str	r0, [sp, #20]
 800bddc:	f003 f8c6 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bde0:	4f10      	ldr	r7, [pc, #64]	@ (800be24 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800bde2:	9905      	ldr	r1, [sp, #20]
 800bde4:	9601      	str	r6, [sp, #4]
 800bde6:	2226      	movs	r2, #38	@ 0x26
 800bde8:	4603      	mov	r3, r0
 800bdea:	9200      	str	r2, [sp, #0]
 800bdec:	4620      	mov	r0, r4
 800bdee:	2200      	movs	r2, #0
 800bdf0:	9702      	str	r7, [sp, #8]
 800bdf2:	f002 fe1f 	bl	800ea34 <acc_confprogram_live_patch>
 800bdf6:	f003 f8b5 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bdfa:	9005      	str	r0, [sp, #20]
 800bdfc:	f003 f8b6 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800be00:	2224      	movs	r2, #36	@ 0x24
 800be02:	9905      	ldr	r1, [sp, #20]
 800be04:	9200      	str	r2, [sp, #0]
 800be06:	4603      	mov	r3, r0
 800be08:	9501      	str	r5, [sp, #4]
 800be0a:	9702      	str	r7, [sp, #8]
 800be0c:	4620      	mov	r0, r4
 800be0e:	2200      	movs	r2, #0
 800be10:	f002 fe10 	bl	800ea34 <acc_confprogram_live_patch>
 800be14:	4620      	mov	r0, r4
 800be16:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800be1a:	b007      	add	sp, #28
 800be1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800be20:	f001 b904 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800be24:	0800cdf9 	.word	0x0800cdf9

0800be28 <acc_a121_cal_session_start_4_bba_vga_program>:
 800be28:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800be2c:	f001 b8fe 	b.w	800d02c <acc_sensor_protocol_a121_run_program>

0800be30 <acc_a121_cal_session_start_5_area_index_program>:
 800be30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be32:	b087      	sub	sp, #28
 800be34:	4604      	mov	r4, r0
 800be36:	460f      	mov	r7, r1
 800be38:	4616      	mov	r6, r2
 800be3a:	f003 f893 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800be3e:	9005      	str	r0, [sp, #20]
 800be40:	f003 f894 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800be44:	883a      	ldrh	r2, [r7, #0]
 800be46:	4d21      	ldr	r5, [pc, #132]	@ (800becc <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800be48:	9201      	str	r2, [sp, #4]
 800be4a:	2207      	movs	r2, #7
 800be4c:	9905      	ldr	r1, [sp, #20]
 800be4e:	9200      	str	r2, [sp, #0]
 800be50:	4603      	mov	r3, r0
 800be52:	2200      	movs	r2, #0
 800be54:	4620      	mov	r0, r4
 800be56:	9502      	str	r5, [sp, #8]
 800be58:	f002 fdec 	bl	800ea34 <acc_confprogram_live_patch>
 800be5c:	f003 f882 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800be60:	9005      	str	r0, [sp, #20]
 800be62:	f003 f883 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800be66:	2208      	movs	r2, #8
 800be68:	9905      	ldr	r1, [sp, #20]
 800be6a:	9601      	str	r6, [sp, #4]
 800be6c:	4603      	mov	r3, r0
 800be6e:	9200      	str	r2, [sp, #0]
 800be70:	9502      	str	r5, [sp, #8]
 800be72:	2200      	movs	r2, #0
 800be74:	4620      	mov	r0, r4
 800be76:	f002 fddd 	bl	800ea34 <acc_confprogram_live_patch>
 800be7a:	f003 f873 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800be7e:	9005      	str	r0, [sp, #20]
 800be80:	f003 f874 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800be84:	2603      	movs	r6, #3
 800be86:	2209      	movs	r2, #9
 800be88:	9905      	ldr	r1, [sp, #20]
 800be8a:	9502      	str	r5, [sp, #8]
 800be8c:	4603      	mov	r3, r0
 800be8e:	e9cd 2600 	strd	r2, r6, [sp]
 800be92:	4620      	mov	r0, r4
 800be94:	2200      	movs	r2, #0
 800be96:	f002 fdcd 	bl	800ea34 <acc_confprogram_live_patch>
 800be9a:	f003 f863 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800be9e:	9005      	str	r0, [sp, #20]
 800bea0:	f003 f864 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bea4:	2606      	movs	r6, #6
 800bea6:	220a      	movs	r2, #10
 800bea8:	e9cd 2600 	strd	r2, r6, [sp]
 800beac:	9905      	ldr	r1, [sp, #20]
 800beae:	9502      	str	r5, [sp, #8]
 800beb0:	4603      	mov	r3, r0
 800beb2:	2200      	movs	r2, #0
 800beb4:	4620      	mov	r0, r4
 800beb6:	f002 fdbd 	bl	800ea34 <acc_confprogram_live_patch>
 800beba:	4620      	mov	r0, r4
 800bebc:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800bec0:	b007      	add	sp, #28
 800bec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bec6:	f001 b8b1 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800beca:	bf00      	nop
 800becc:	0800cdf9 	.word	0x0800cdf9

0800bed0 <acc_a121_cal_session_start_6_tx_freq_program>:
 800bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed2:	b087      	sub	sp, #28
 800bed4:	460d      	mov	r5, r1
 800bed6:	4604      	mov	r4, r0
 800bed8:	f003 f844 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bedc:	9005      	str	r0, [sp, #20]
 800bede:	f003 f845 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bee2:	882a      	ldrh	r2, [r5, #0]
 800bee4:	4e41      	ldr	r6, [pc, #260]	@ (800bfec <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800bee6:	9201      	str	r2, [sp, #4]
 800bee8:	2221      	movs	r2, #33	@ 0x21
 800beea:	9905      	ldr	r1, [sp, #20]
 800beec:	9200      	str	r2, [sp, #0]
 800beee:	4603      	mov	r3, r0
 800bef0:	2200      	movs	r2, #0
 800bef2:	4620      	mov	r0, r4
 800bef4:	9602      	str	r6, [sp, #8]
 800bef6:	f002 fd9d 	bl	800ea34 <acc_confprogram_live_patch>
 800befa:	f003 f833 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800befe:	9005      	str	r0, [sp, #20]
 800bf00:	f003 f834 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bf04:	886f      	ldrh	r7, [r5, #2]
 800bf06:	9905      	ldr	r1, [sp, #20]
 800bf08:	9701      	str	r7, [sp, #4]
 800bf0a:	2222      	movs	r2, #34	@ 0x22
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	9200      	str	r2, [sp, #0]
 800bf10:	9602      	str	r6, [sp, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	4620      	mov	r0, r4
 800bf16:	f002 fd8d 	bl	800ea34 <acc_confprogram_live_patch>
 800bf1a:	f003 f823 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bf1e:	9005      	str	r0, [sp, #20]
 800bf20:	f003 f824 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bf24:	88ef      	ldrh	r7, [r5, #6]
 800bf26:	9905      	ldr	r1, [sp, #20]
 800bf28:	9701      	str	r7, [sp, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	9200      	str	r2, [sp, #0]
 800bf30:	9602      	str	r6, [sp, #8]
 800bf32:	2200      	movs	r2, #0
 800bf34:	4620      	mov	r0, r4
 800bf36:	f002 fd7d 	bl	800ea34 <acc_confprogram_live_patch>
 800bf3a:	f003 f813 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bf3e:	9005      	str	r0, [sp, #20]
 800bf40:	f003 f814 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bf44:	892f      	ldrh	r7, [r5, #8]
 800bf46:	9905      	ldr	r1, [sp, #20]
 800bf48:	9701      	str	r7, [sp, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	9200      	str	r2, [sp, #0]
 800bf50:	9602      	str	r6, [sp, #8]
 800bf52:	2200      	movs	r2, #0
 800bf54:	4620      	mov	r0, r4
 800bf56:	f002 fd6d 	bl	800ea34 <acc_confprogram_live_patch>
 800bf5a:	f003 f803 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bf5e:	9005      	str	r0, [sp, #20]
 800bf60:	f003 f804 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bf64:	89af      	ldrh	r7, [r5, #12]
 800bf66:	9905      	ldr	r1, [sp, #20]
 800bf68:	9701      	str	r7, [sp, #4]
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	9200      	str	r2, [sp, #0]
 800bf70:	9602      	str	r6, [sp, #8]
 800bf72:	2200      	movs	r2, #0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f002 fd5d 	bl	800ea34 <acc_confprogram_live_patch>
 800bf7a:	f002 fff3 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bf7e:	9005      	str	r0, [sp, #20]
 800bf80:	f002 fff4 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bf84:	89ef      	ldrh	r7, [r5, #14]
 800bf86:	9905      	ldr	r1, [sp, #20]
 800bf88:	9701      	str	r7, [sp, #4]
 800bf8a:	2204      	movs	r2, #4
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	9200      	str	r2, [sp, #0]
 800bf90:	9602      	str	r6, [sp, #8]
 800bf92:	2200      	movs	r2, #0
 800bf94:	4620      	mov	r0, r4
 800bf96:	f002 fd4d 	bl	800ea34 <acc_confprogram_live_patch>
 800bf9a:	f002 ffe3 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bf9e:	9005      	str	r0, [sp, #20]
 800bfa0:	f002 ffe4 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bfa4:	8a6f      	ldrh	r7, [r5, #18]
 800bfa6:	9905      	ldr	r1, [sp, #20]
 800bfa8:	9602      	str	r6, [sp, #8]
 800bfaa:	2205      	movs	r2, #5
 800bfac:	4603      	mov	r3, r0
 800bfae:	9200      	str	r2, [sp, #0]
 800bfb0:	9701      	str	r7, [sp, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f002 fd3d 	bl	800ea34 <acc_confprogram_live_patch>
 800bfba:	f002 ffd3 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bfbe:	9005      	str	r0, [sp, #20]
 800bfc0:	f002 ffd4 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800bfc4:	2206      	movs	r2, #6
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	8aa8      	ldrh	r0, [r5, #20]
 800bfca:	9905      	ldr	r1, [sp, #20]
 800bfcc:	9001      	str	r0, [sp, #4]
 800bfce:	9200      	str	r2, [sp, #0]
 800bfd0:	9602      	str	r6, [sp, #8]
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f002 fd2d 	bl	800ea34 <acc_confprogram_live_patch>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800bfe0:	b007      	add	sp, #28
 800bfe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bfe6:	f001 b821 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800bfea:	bf00      	nop
 800bfec:	0800cdf9 	.word	0x0800cdf9

0800bff0 <acc_a121_cal_session_start_7_rx_freq_program>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	460d      	mov	r5, r1
 800bff6:	4604      	mov	r4, r0
 800bff8:	f002 ffb4 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800bffc:	9005      	str	r0, [sp, #20]
 800bffe:	f002 ffb5 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800c002:	4e09      	ldr	r6, [pc, #36]	@ (800c028 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800c004:	9905      	ldr	r1, [sp, #20]
 800c006:	9501      	str	r5, [sp, #4]
 800c008:	220c      	movs	r2, #12
 800c00a:	4603      	mov	r3, r0
 800c00c:	9200      	str	r2, [sp, #0]
 800c00e:	4620      	mov	r0, r4
 800c010:	9602      	str	r6, [sp, #8]
 800c012:	2200      	movs	r2, #0
 800c014:	f002 fd0e 	bl	800ea34 <acc_confprogram_live_patch>
 800c018:	4620      	mov	r0, r4
 800c01a:	f240 4116 	movw	r1, #1046	@ 0x416
 800c01e:	b006      	add	sp, #24
 800c020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c024:	f001 b802 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800c028:	0800cdf9 	.word	0x0800cdf9

0800c02c <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800c02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02e:	b087      	sub	sp, #28
 800c030:	4604      	mov	r4, r0
 800c032:	460e      	mov	r6, r1
 800c034:	f002 ff96 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800c038:	9005      	str	r0, [sp, #20]
 800c03a:	f002 ff97 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800c03e:	4d19      	ldr	r5, [pc, #100]	@ (800c0a4 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800c040:	9905      	ldr	r1, [sp, #20]
 800c042:	9601      	str	r6, [sp, #4]
 800c044:	220b      	movs	r2, #11
 800c046:	4603      	mov	r3, r0
 800c048:	9200      	str	r2, [sp, #0]
 800c04a:	4620      	mov	r0, r4
 800c04c:	2200      	movs	r2, #0
 800c04e:	9502      	str	r5, [sp, #8]
 800c050:	f002 fcf0 	bl	800ea34 <acc_confprogram_live_patch>
 800c054:	f002 ff86 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800c058:	9005      	str	r0, [sp, #20]
 800c05a:	f002 ff87 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800c05e:	2609      	movs	r6, #9
 800c060:	2200      	movs	r2, #0
 800c062:	e9cd 6200 	strd	r6, r2, [sp]
 800c066:	9905      	ldr	r1, [sp, #20]
 800c068:	9502      	str	r5, [sp, #8]
 800c06a:	4603      	mov	r3, r0
 800c06c:	4620      	mov	r0, r4
 800c06e:	f002 fce1 	bl	800ea34 <acc_confprogram_live_patch>
 800c072:	f002 ff77 	bl	800ef64 <acc_image_a121_r1a_cal_session_get>
 800c076:	9005      	str	r0, [sp, #20]
 800c078:	f002 ff78 	bl	800ef6c <acc_image_a121_r1a_cal_session_param_table_get>
 800c07c:	277e      	movs	r7, #126	@ 0x7e
 800c07e:	260a      	movs	r6, #10
 800c080:	9905      	ldr	r1, [sp, #20]
 800c082:	9502      	str	r5, [sp, #8]
 800c084:	4603      	mov	r3, r0
 800c086:	e9cd 6700 	strd	r6, r7, [sp]
 800c08a:	2200      	movs	r2, #0
 800c08c:	4620      	mov	r0, r4
 800c08e:	f002 fcd1 	bl	800ea34 <acc_confprogram_live_patch>
 800c092:	4620      	mov	r0, r4
 800c094:	f240 4152 	movw	r1, #1106	@ 0x452
 800c098:	b007      	add	sp, #28
 800c09a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c09e:	f000 bfc5 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800c0a2:	bf00      	nop
 800c0a4:	0800cdf9 	.word	0x0800cdf9

0800c0a8 <acc_a121_cal_session_start_9_pulseshaper_program>:
 800c0a8:	f240 417b 	movw	r1, #1147	@ 0x47b
 800c0ac:	f000 bfbe 	b.w	800d02c <acc_sensor_protocol_a121_run_program>

0800c0b0 <acc_a121_cal_session_ack_program>:
 800c0b0:	b530      	push	{r4, r5, lr}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	aa01      	add	r2, sp, #4
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	f001 f881 	bl	800d1c0 <acc_sensor_protocol_a121_get_event>
 800c0be:	4620      	mov	r0, r4
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	f001 f834 	bl	800d130 <acc_sensor_protocol_a121_ack_event>
 800c0c8:	a801      	add	r0, sp, #4
 800c0ca:	f001 f8eb 	bl	800d2a4 <acc_sensor_protocol_a121_is_done>
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	b930      	cbnz	r0, 800c0e0 <acc_a121_cal_session_ack_program+0x30>
 800c0d2:	4a05      	ldr	r2, [pc, #20]	@ (800c0e8 <acc_a121_cal_session_ack_program+0x38>)
 800c0d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c0d8:	6915      	ldr	r5, [r2, #16]
 800c0da:	4904      	ldr	r1, [pc, #16]	@ (800c0ec <acc_a121_cal_session_ack_program+0x3c>)
 800c0dc:	4a04      	ldr	r2, [pc, #16]	@ (800c0f0 <acc_a121_cal_session_ack_program+0x40>)
 800c0de:	47a8      	blx	r5
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	b003      	add	sp, #12
 800c0e4:	bd30      	pop	{r4, r5, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20000610 	.word	0x20000610
 800c0ec:	08015a60 	.word	0x08015a60
 800c0f0:	08015a18 	.word	0x08015a18

0800c0f4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	4688      	mov	r8, r1
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	2132      	movs	r1, #50	@ 0x32
 800c0fe:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800c102:	461e      	mov	r6, r3
 800c104:	f002 fd58 	bl	800ebb8 <acc_sensor_reg_read>
 800c108:	2312      	movs	r3, #18
 800c10a:	2200      	movs	r2, #0
 800c10c:	4641      	mov	r1, r8
 800c10e:	4638      	mov	r0, r7
 800c110:	f000 fece 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c114:	8802      	ldrh	r2, [r0, #0]
 800c116:	8032      	strh	r2, [r6, #0]
 800c118:	8842      	ldrh	r2, [r0, #2]
 800c11a:	802a      	strh	r2, [r5, #0]
 800c11c:	1d03      	adds	r3, r0, #4
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c124 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4616      	mov	r6, r2
 800c128:	461c      	mov	r4, r3
 800c12a:	2200      	movs	r2, #0
 800c12c:	2341      	movs	r3, #65	@ 0x41
 800c12e:	9d04      	ldr	r5, [sp, #16]
 800c130:	f000 febe 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c134:	8c02      	ldrh	r2, [r0, #32]
 800c136:	6030      	str	r0, [r6, #0]
 800c138:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800c13c:	8022      	strh	r2, [r4, #0]
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	bd70      	pop	{r4, r5, r6, pc}
 800c142:	bf00      	nop

0800c144 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800c144:	b510      	push	{r4, lr}
 800c146:	2320      	movs	r3, #32
 800c148:	4614      	mov	r4, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	f000 feb0 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c150:	6020      	str	r0, [r4, #0]
 800c152:	bd10      	pop	{r4, pc}

0800c154 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800c154:	b510      	push	{r4, lr}
 800c156:	2350      	movs	r3, #80	@ 0x50
 800c158:	4614      	mov	r4, r2
 800c15a:	2200      	movs	r2, #0
 800c15c:	f000 fea8 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c160:	6020      	str	r0, [r4, #0]
 800c162:	bd10      	pop	{r4, pc}

0800c164 <acc_a121_cal_session_get_5_area_index_program_data>:
 800c164:	b510      	push	{r4, lr}
 800c166:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c16a:	4614      	mov	r4, r2
 800c16c:	2200      	movs	r2, #0
 800c16e:	f000 fe9f 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c172:	6020      	str	r0, [r4, #0]
 800c174:	bd10      	pop	{r4, pc}
 800c176:	bf00      	nop

0800c178 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800c178:	f7ff bff4 	b.w	800c164 <acc_a121_cal_session_get_5_area_index_program_data>

0800c17c <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800c17c:	b510      	push	{r4, lr}
 800c17e:	2310      	movs	r3, #16
 800c180:	4614      	mov	r4, r2
 800c182:	2200      	movs	r2, #0
 800c184:	f000 fe94 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c188:	6020      	str	r0, [r4, #0]
 800c18a:	bd10      	pop	{r4, pc}

0800c18c <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	2360      	movs	r3, #96	@ 0x60
 800c190:	4614      	mov	r4, r2
 800c192:	2200      	movs	r2, #0
 800c194:	f000 fe8c 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c198:	6020      	str	r0, [r4, #0]
 800c19a:	bd10      	pop	{r4, pc}

0800c19c <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4615      	mov	r5, r2
 800c1a0:	461c      	mov	r4, r3
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800c1a8:	f000 fe82 	bl	800ceb0 <acc_sensor_a121_buffer_processed_read>
 800c1ac:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800c1b0:	6028      	str	r0, [r5, #0]
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	bd38      	pop	{r3, r4, r5, pc}
 800c1b6:	bf00      	nop

0800c1b8 <acc_detector_utils_get_fwhm>:
 800c1b8:	3801      	subs	r0, #1
 800c1ba:	b2c0      	uxtb	r0, r0
 800c1bc:	2804      	cmp	r0, #4
 800c1be:	bf9d      	ittte	ls
 800c1c0:	4b03      	ldrls	r3, [pc, #12]	@ (800c1d0 <acc_detector_utils_get_fwhm+0x18>)
 800c1c2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800c1c6:	ed90 0a00 	vldrls	s0, [r0]
 800c1ca:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800c1d4 <acc_detector_utils_get_fwhm+0x1c>
 800c1ce:	4770      	bx	lr
 800c1d0:	08015a94 	.word	0x08015a94
 800c1d4:	00000000 	.word	0x00000000

0800c1d8 <acc_detector_utils_radar_loop_gain_per_hwaas>:
 800c1d8:	3801      	subs	r0, #1
 800c1da:	b2c0      	uxtb	r0, r0
 800c1dc:	2804      	cmp	r0, #4
 800c1de:	bf9d      	ittte	ls
 800c1e0:	4b03      	ldrls	r3, [pc, #12]	@ (800c1f0 <acc_detector_utils_radar_loop_gain_per_hwaas+0x18>)
 800c1e2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800c1e6:	ed90 0a00 	vldrls	s0, [r0]
 800c1ea:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800c1f4 <acc_detector_utils_radar_loop_gain_per_hwaas+0x1c>
 800c1ee:	4770      	bx	lr
 800c1f0:	08015aa8 	.word	0x08015aa8
 800c1f4:	00000000 	.word	0x00000000

0800c1f8 <acc_detector_utils_max_measurable_dist>:
 800c1f8:	2805      	cmp	r0, #5
 800c1fa:	bf9d      	ittte	ls
 800c1fc:	4b03      	ldrls	r3, [pc, #12]	@ (800c20c <acc_detector_utils_max_measurable_dist+0x14>)
 800c1fe:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800c202:	ed90 0a00 	vldrls	s0, [r0]
 800c206:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800c210 <acc_detector_utils_max_measurable_dist+0x18>
 800c20a:	4770      	bx	lr
 800c20c:	08015abc 	.word	0x08015abc
 800c210:	00000000 	.word	0x00000000

0800c214 <acc_detector_utils_min_leakage_free_dist>:
 800c214:	3801      	subs	r0, #1
 800c216:	b2c0      	uxtb	r0, r0
 800c218:	2804      	cmp	r0, #4
 800c21a:	bf9d      	ittte	ls
 800c21c:	4b03      	ldrls	r3, [pc, #12]	@ (800c22c <acc_detector_utils_min_leakage_free_dist+0x18>)
 800c21e:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800c222:	ed90 0a00 	vldrls	s0, [r0]
 800c226:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800c230 <acc_detector_utils_min_leakage_free_dist+0x1c>
 800c22a:	4770      	bx	lr
 800c22c:	08015ad4 	.word	0x08015ad4
 800c230:	00000000 	.word	0x00000000

0800c234 <acc_detector_utils_get_abs_sweep>:
 800c234:	b1ab      	cbz	r3, 800c262 <acc_detector_utils_get_abs_sweep+0x2e>
 800c236:	3b01      	subs	r3, #1
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	1d16      	adds	r6, r2, #4
 800c23e:	4615      	mov	r5, r2
 800c240:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800c244:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800c248:	ed94 0a00 	vldr	s0, [r4]
 800c24c:	edd4 0a01 	vldr	s1, [r4, #4]
 800c250:	f006 fd6e 	bl	8012d30 <cabsf>
 800c254:	eca5 0a01 	vstmia	r5!, {s0}
 800c258:	42b5      	cmp	r5, r6
 800c25a:	f104 0408 	add.w	r4, r4, #8
 800c25e:	d1f3      	bne.n	800c248 <acc_detector_utils_get_abs_sweep+0x14>
 800c260:	bd70      	pop	{r4, r5, r6, pc}
 800c262:	4770      	bx	lr

0800c264 <acc_detector_utils_get_temperature_adjustment_factors>:
 800c264:	b500      	push	{lr}
 800c266:	3901      	subs	r1, #1
 800c268:	b2c9      	uxtb	r1, r1
 800c26a:	2904      	cmp	r1, #4
 800c26c:	bf94      	ite	ls
 800c26e:	4b11      	ldrls	r3, [pc, #68]	@ (800c2b4 <acc_detector_utils_get_temperature_adjustment_factors+0x50>)
 800c270:	eddf 0a11 	vldrhi	s1, [pc, #68]	@ 800c2b8 <acc_detector_utils_get_temperature_adjustment_factors+0x54>
 800c274:	ed2d 8b02 	vpush	{d8}
 800c278:	ee08 0a10 	vmov	s16, r0
 800c27c:	bf9c      	itt	ls
 800c27e:	eb03 0181 	addls.w	r1, r3, r1, lsl #2
 800c282:	edd1 0a00 	vldrls	s1, [r1]
 800c286:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800c28a:	b085      	sub	sp, #20
 800c28c:	eec8 0a20 	vdiv.f32	s1, s16, s1
 800c290:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800c294:	f006 fb28 	bl	80128e8 <powf>
 800c298:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c2bc <acc_detector_utils_get_temperature_adjustment_factors+0x58>
 800c29c:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800c2c0 <acc_detector_utils_get_temperature_adjustment_factors+0x5c>
 800c2a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c2a4:	ee78 0a20 	vadd.f32	s1, s16, s1
 800c2a8:	b005      	add	sp, #20
 800c2aa:	ecbd 8b02 	vpop	{d8}
 800c2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2b2:	bf00      	nop
 800c2b4:	08015a80 	.word	0x08015a80
 800c2b8:	42ac0000 	.word	0x42ac0000
 800c2bc:	bb343958 	.word	0xbb343958
 800c2c0:	3f7c408e 	.word	0x3f7c408e

0800c2c4 <acc_detector_utils_get_complex_angle>:
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	d04c      	beq.n	800c362 <acc_detector_utils_get_complex_angle+0x9e>
 800c2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	3a01      	subs	r2, #1
 800c2ce:	b292      	uxth	r2, r2
 800c2d0:	f100 0804 	add.w	r8, r0, #4
 800c2d4:	ed2d 8b02 	vpush	{d8}
 800c2d8:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 800c368 <acc_detector_utils_get_complex_angle+0xa4>
 800c2dc:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 800c364 <acc_detector_utils_get_complex_angle+0xa0>
 800c2e0:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800c36c <acc_detector_utils_get_complex_angle+0xa8>
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	f04f 0900 	mov.w	r9, #0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 800c2f0:	e008      	b.n	800c304 <acc_detector_utils_get_complex_angle+0x40>
 800c2f2:	2f00      	cmp	r7, #0
 800c2f4:	d125      	bne.n	800c342 <acc_detector_utils_get_complex_angle+0x7e>
 800c2f6:	f8c5 9000 	str.w	r9, [r5]
 800c2fa:	3404      	adds	r4, #4
 800c2fc:	45a0      	cmp	r8, r4
 800c2fe:	f105 0504 	add.w	r5, r5, #4
 800c302:	d01a      	beq.n	800c33a <acc_detector_utils_get_complex_angle+0x76>
 800c304:	f9b4 6000 	ldrsh.w	r6, [r4]
 800c308:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	d0f0      	beq.n	800c2f2 <acc_detector_utils_get_complex_angle+0x2e>
 800c310:	ee07 6a90 	vmov	s15, r6
 800c314:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c318:	ee07 7a90 	vmov	s15, r7
 800c31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c320:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c324:	f006 fb38 	bl	8012998 <atanf>
 800c328:	2e00      	cmp	r6, #0
 800c32a:	db10      	blt.n	800c34e <acc_detector_utils_get_complex_angle+0x8a>
 800c32c:	3404      	adds	r4, #4
 800c32e:	45a0      	cmp	r8, r4
 800c330:	f105 0504 	add.w	r5, r5, #4
 800c334:	ed05 0a01 	vstr	s0, [r5, #-4]
 800c338:	d1e4      	bne.n	800c304 <acc_detector_utils_get_complex_angle+0x40>
 800c33a:	ecbd 8b02 	vpop	{d8}
 800c33e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c342:	bfcc      	ite	gt
 800c344:	f8c5 a000 	strgt.w	sl, [r5]
 800c348:	f8c5 b000 	strle.w	fp, [r5]
 800c34c:	e7d5      	b.n	800c2fa <acc_detector_utils_get_complex_angle+0x36>
 800c34e:	2f00      	cmp	r7, #0
 800c350:	db02      	blt.n	800c358 <acc_detector_utils_get_complex_angle+0x94>
 800c352:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c356:	e7e9      	b.n	800c32c <acc_detector_utils_get_complex_angle+0x68>
 800c358:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c35c:	ed85 0a00 	vstr	s0, [r5]
 800c360:	e7cb      	b.n	800c2fa <acc_detector_utils_get_complex_angle+0x36>
 800c362:	4770      	bx	lr
 800c364:	40490fdb 	.word	0x40490fdb
 800c368:	bfc90fdb 	.word	0xbfc90fdb
 800c36c:	3fc90fdb 	.word	0x3fc90fdb

0800c370 <acc_detector_utils_align_size_32bit>:
 800c370:	3003      	adds	r0, #3
 800c372:	f020 0003 	bic.w	r0, r0, #3
 800c376:	4770      	bx	lr

0800c378 <acc_rss_integration_register_a121>:
 800c378:	68c3      	ldr	r3, [r0, #12]
 800c37a:	b570      	push	{r4, r5, r6, lr}
 800c37c:	b1c3      	cbz	r3, 800c3b0 <acc_rss_integration_register_a121+0x38>
 800c37e:	6843      	ldr	r3, [r0, #4]
 800c380:	b1cb      	cbz	r3, 800c3b6 <acc_rss_integration_register_a121+0x3e>
 800c382:	6883      	ldr	r3, [r0, #8]
 800c384:	b1bb      	cbz	r3, 800c3b6 <acc_rss_integration_register_a121+0x3e>
 800c386:	6903      	ldr	r3, [r0, #16]
 800c388:	b1eb      	cbz	r3, 800c3c6 <acc_rss_integration_register_a121+0x4e>
 800c38a:	8802      	ldrh	r2, [r0, #0]
 800c38c:	2a0f      	cmp	r2, #15
 800c38e:	d914      	bls.n	800c3ba <acc_rss_integration_register_a121+0x42>
 800c390:	4604      	mov	r4, r0
 800c392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c394:	4d0d      	ldr	r5, [pc, #52]	@ (800c3cc <acc_rss_integration_register_a121+0x54>)
 800c396:	4e0e      	ldr	r6, [pc, #56]	@ (800c3d0 <acc_rss_integration_register_a121+0x58>)
 800c398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c39a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d4 <acc_rss_integration_register_a121+0x5c>)
 800c39c:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d8 <acc_rss_integration_register_a121+0x60>)
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e885 0003 	stmia.w	r5, {r0, r1}
 800c3aa:	7033      	strb	r3, [r6, #0]
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	6943      	ldr	r3, [r0, #20]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1e3      	bne.n	800c37e <acc_rss_integration_register_a121+0x6>
 800c3b6:	6903      	ldr	r3, [r0, #16]
 800c3b8:	b12b      	cbz	r3, 800c3c6 <acc_rss_integration_register_a121+0x4e>
 800c3ba:	4a08      	ldr	r2, [pc, #32]	@ (800c3dc <acc_rss_integration_register_a121+0x64>)
 800c3bc:	4908      	ldr	r1, [pc, #32]	@ (800c3e0 <acc_rss_integration_register_a121+0x68>)
 800c3be:	2000      	movs	r0, #0
 800c3c0:	4798      	blx	r3
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20000610 	.word	0x20000610
 800c3d0:	200004b8 	.word	0x200004b8
 800c3d4:	200004bc 	.word	0x200004bc
 800c3d8:	016e3600 	.word	0x016e3600
 800c3dc:	08015ae8 	.word	0x08015ae8
 800c3e0:	08015afc 	.word	0x08015afc

0800c3e4 <acc_rss_integration_get_sensor_reference_frequency>:
 800c3e4:	4b01      	ldr	r3, [pc, #4]	@ (800c3ec <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	200004bc 	.word	0x200004bc

0800c3f0 <acc_rss_integration_get_max_spi_transfer_size>:
 800c3f0:	4b01      	ldr	r3, [pc, #4]	@ (800c3f8 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800c3f2:	8818      	ldrh	r0, [r3, #0]
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20000610 	.word	0x20000610

0800c3fc <acc_rss_integration_sensor_device_transfer>:
 800c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c400:	4f10      	ldr	r7, [pc, #64]	@ (800c444 <acc_rss_integration_sensor_device_transfer+0x48>)
 800c402:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800c406:	f1be 0f00 	cmp.w	lr, #0
 800c40a:	d003      	beq.n	800c414 <acc_rss_integration_sensor_device_transfer+0x18>
 800c40c:	4673      	mov	r3, lr
 800c40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	4718      	bx	r3
 800c414:	460c      	mov	r4, r1
 800c416:	4606      	mov	r6, r0
 800c418:	4611      	mov	r1, r2
 800c41a:	4615      	mov	r5, r2
 800c41c:	4620      	mov	r0, r4
 800c41e:	4698      	mov	r8, r3
 800c420:	f002 fd4c 	bl	800eebc <acc_utils_swap16_array>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	4630      	mov	r0, r6
 800c428:	006a      	lsls	r2, r5, #1
 800c42a:	4621      	mov	r1, r4
 800c42c:	4798      	blx	r3
 800c42e:	f1b8 0f00 	cmp.w	r8, #0
 800c432:	d101      	bne.n	800c438 <acc_rss_integration_sensor_device_transfer+0x3c>
 800c434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c438:	4629      	mov	r1, r5
 800c43a:	4620      	mov	r0, r4
 800c43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c440:	f002 bd3c 	b.w	800eebc <acc_utils_swap16_array>
 800c444:	20000610 	.word	0x20000610

0800c448 <acc_rss_integration_mem_alloc_debug>:
 800c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44c:	4f0c      	ldr	r7, [pc, #48]	@ (800c480 <acc_rss_integration_mem_alloc_debug+0x38>)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4688      	mov	r8, r1
 800c452:	4616      	mov	r6, r2
 800c454:	4605      	mov	r5, r0
 800c456:	4798      	blx	r3
 800c458:	4604      	mov	r4, r0
 800c45a:	b150      	cbz	r0, 800c472 <acc_rss_integration_mem_alloc_debug+0x2a>
 800c45c:	4b09      	ldr	r3, [pc, #36]	@ (800c484 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	b123      	cbz	r3, 800c46c <acc_rss_integration_mem_alloc_debug+0x24>
 800c462:	689f      	ldr	r7, [r3, #8]
 800c464:	4642      	mov	r2, r8
 800c466:	4633      	mov	r3, r6
 800c468:	4629      	mov	r1, r5
 800c46a:	47b8      	blx	r7
 800c46c:	4620      	mov	r0, r4
 800c46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	4a04      	ldr	r2, [pc, #16]	@ (800c488 <acc_rss_integration_mem_alloc_debug+0x40>)
 800c476:	4905      	ldr	r1, [pc, #20]	@ (800c48c <acc_rss_integration_mem_alloc_debug+0x44>)
 800c478:	4798      	blx	r3
 800c47a:	4620      	mov	r0, r4
 800c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c480:	20000610 	.word	0x20000610
 800c484:	200004b4 	.word	0x200004b4
 800c488:	08015b0c 	.word	0x08015b0c
 800c48c:	08015afc 	.word	0x08015afc

0800c490 <acc_rss_integration_mem_calloc_debug>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	b1a8      	cbz	r0, 800c4c0 <acc_rss_integration_mem_calloc_debug+0x30>
 800c494:	4614      	mov	r4, r2
 800c496:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800c49a:	fbb2 f2f0 	udiv	r2, r2, r0
 800c49e:	428a      	cmp	r2, r1
 800c4a0:	d90e      	bls.n	800c4c0 <acc_rss_integration_mem_calloc_debug+0x30>
 800c4a2:	fb01 f500 	mul.w	r5, r1, r0
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f7ff ffcc 	bl	800c448 <acc_rss_integration_mem_alloc_debug>
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	b130      	cbz	r0, 800c4c2 <acc_rss_integration_mem_calloc_debug+0x32>
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	f004 fae0 	bl	8010a7c <memset>
 800c4bc:	4620      	mov	r0, r4
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	2400      	movs	r4, #0
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	bd38      	pop	{r3, r4, r5, pc}
 800c4c6:	bf00      	nop

0800c4c8 <acc_rss_integration_mem_free>:
 800c4c8:	4b07      	ldr	r3, [pc, #28]	@ (800c4e8 <acc_rss_integration_mem_free+0x20>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	b10b      	cbz	r3, 800c4d6 <acc_rss_integration_mem_free+0xe>
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	4798      	blx	r3
 800c4d6:	b12c      	cbz	r4, 800c4e4 <acc_rss_integration_mem_free+0x1c>
 800c4d8:	4b04      	ldr	r3, [pc, #16]	@ (800c4ec <acc_rss_integration_mem_free+0x24>)
 800c4da:	4620      	mov	r0, r4
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4e2:	4718      	bx	r3
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	bf00      	nop
 800c4e8:	200004b4 	.word	0x200004b4
 800c4ec:	20000610 	.word	0x20000610

0800c4f0 <acc_rss_integration_log_level>:
 800c4f0:	4b01      	ldr	r3, [pc, #4]	@ (800c4f8 <acc_rss_integration_log_level+0x8>)
 800c4f2:	7818      	ldrb	r0, [r3, #0]
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	200004b8 	.word	0x200004b8

0800c4fc <pipeline_a121_produce>:
 800c4fc:	6803      	ldr	r3, [r0, #0]
 800c4fe:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800c502:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	4618      	mov	r0, r3
 800c50a:	4710      	bx	r2

0800c50c <pipeline_a121_disassemble>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	6805      	ldr	r5, [r0, #0]
 800c510:	4604      	mov	r4, r0
 800c512:	b175      	cbz	r5, 800c532 <pipeline_a121_disassemble+0x26>
 800c514:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800c518:	f002 feb8 	bl	800f28c <acc_element_frame_release>
 800c51c:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800c520:	f002 ff38 	bl	800f394 <acc_element_frame_aux_release>
 800c524:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800c528:	f7ff ffce 	bl	800c4c8 <acc_rss_integration_mem_free>
 800c52c:	4628      	mov	r0, r5
 800c52e:	f7ff ffcb 	bl	800c4c8 <acc_rss_integration_mem_free>
 800c532:	4620      	mov	r0, r4
 800c534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c538:	f7ff bfc6 	b.w	800c4c8 <acc_rss_integration_mem_free>

0800c53c <acc_pipeline_get_buffer_size>:
 800c53c:	b510      	push	{r4, lr}
 800c53e:	b08e      	sub	sp, #56	@ 0x38
 800c540:	460c      	mov	r4, r1
 800c542:	4669      	mov	r1, sp
 800c544:	f000 fbda 	bl	800ccfc <acc_radar_engine_a121_get_metadata>
 800c548:	b110      	cbz	r0, 800c550 <acc_pipeline_get_buffer_size+0x14>
 800c54a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c54e:	6023      	str	r3, [r4, #0]
 800c550:	b00e      	add	sp, #56	@ 0x38
 800c552:	bd10      	pop	{r4, pc}

0800c554 <acc_pipeline_a121_assemble>:
 800c554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c558:	6803      	ldr	r3, [r0, #0]
 800c55a:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800c55e:	b09b      	sub	sp, #108	@ 0x6c
 800c560:	4606      	mov	r6, r0
 800c562:	460f      	mov	r7, r1
 800c564:	b122      	cbz	r2, 800c570 <acc_pipeline_a121_assemble+0x1c>
 800c566:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f040 810d 	bne.w	800c78a <acc_pipeline_a121_assemble+0x236>
 800c570:	4aa5      	ldr	r2, [pc, #660]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c572:	233d      	movs	r3, #61	@ 0x3d
 800c574:	2110      	movs	r1, #16
 800c576:	2001      	movs	r0, #1
 800c578:	f7ff ff8a 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c57c:	4aa2      	ldr	r2, [pc, #648]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c57e:	4605      	mov	r5, r0
 800c580:	233e      	movs	r3, #62	@ 0x3e
 800c582:	21fc      	movs	r1, #252	@ 0xfc
 800c584:	2001      	movs	r0, #1
 800c586:	f7ff ff83 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c58a:	4604      	mov	r4, r0
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	f000 8134 	beq.w	800c7fa <acc_pipeline_a121_assemble+0x2a6>
 800c592:	2c00      	cmp	r4, #0
 800c594:	f000 812f 	beq.w	800c7f6 <acc_pipeline_a121_assemble+0x2a2>
 800c598:	f04f 0800 	mov.w	r8, #0
 800c59c:	f8d6 9000 	ldr.w	r9, [r6]
 800c5a0:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800c5a4:	4648      	mov	r0, r9
 800c5a6:	602c      	str	r4, [r5, #0]
 800c5a8:	a90c      	add	r1, sp, #48	@ 0x30
 800c5aa:	f000 fba7 	bl	800ccfc <acc_radar_engine_a121_get_metadata>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f000 80de 	beq.w	800c770 <acc_pipeline_a121_assemble+0x21c>
 800c5b4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800c5b8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800c5bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800c5c0:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800c5c4:	8723      	strh	r3, [r4, #56]	@ 0x38
 800c5c6:	0049      	lsls	r1, r1, #1
 800c5c8:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800c5d2:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800c5d6:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c5da:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800c5de:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800c5e2:	4403      	add	r3, r0
 800c5e4:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800c5e8:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800c5ec:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800c5f6:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800c5fa:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800c5fe:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800c602:	6260      	str	r0, [r4, #36]	@ 0x24
 800c604:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800c608:	b13a      	cbz	r2, 800c61a <acc_pipeline_a121_assemble+0xc6>
 800c60a:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800c60e:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800c612:	6250      	str	r0, [r2, #36]	@ 0x24
 800c614:	f8c2 e018 	str.w	lr, [r2, #24]
 800c618:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800c61a:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800c61e:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800c622:	2008      	movs	r0, #8
 800c624:	f002 faa2 	bl	800eb6c <acc_element_sizeof>
 800c628:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800c62c:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800c630:	b183      	cbz	r3, 800c654 <acc_pipeline_a121_assemble+0x100>
 800c632:	f103 3cff 	add.w	ip, r3, #4294967295
 800c636:	fa5f fc8c 	uxtb.w	ip, ip
 800c63a:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800c63e:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800c642:	1eba      	subs	r2, r7, #2
 800c644:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c648:	fbb3 f3f0 	udiv	r3, r3, r0
 800c64c:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c650:	4562      	cmp	r2, ip
 800c652:	d1f7      	bne.n	800c644 <acc_pipeline_a121_assemble+0xf0>
 800c654:	f8d6 8000 	ldr.w	r8, [r6]
 800c658:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800c65c:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800c660:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800c664:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800c666:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800c66a:	60b8      	str	r0, [r7, #8]
 800c66c:	441a      	add	r2, r3
 800c66e:	81fa      	strh	r2, [r7, #14]
 800c670:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800c674:	7339      	strb	r1, [r7, #12]
 800c676:	823a      	strh	r2, [r7, #16]
 800c678:	f1b9 0f00 	cmp.w	r9, #0
 800c67c:	d003      	beq.n	800c686 <acc_pipeline_a121_assemble+0x132>
 800c67e:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800c682:	fbb2 f9f9 	udiv	r9, r2, r9
 800c686:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800c68a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800c68e:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800c692:	f8ad 0000 	strh.w	r0, [sp]
 800c696:	441a      	add	r2, r3
 800c698:	440b      	add	r3, r1
 800c69a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c69e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c6a2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800c6a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c6aa:	f8ad 2002 	strh.w	r2, [sp, #2]
 800c6ae:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800c6b2:	220f      	movs	r2, #15
 800c6b4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	2303      	movs	r3, #3
 800c6bc:	4669      	mov	r1, sp
 800c6be:	f8ad 200a 	strh.w	r2, [sp, #10]
 800c6c2:	f88d 300c 	strb.w	r3, [sp, #12]
 800c6c6:	f002 fe43 	bl	800f350 <acc_element_frame_aux_init>
 800c6ca:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800c6ce:	b370      	cbz	r0, 800c72e <acc_pipeline_a121_assemble+0x1da>
 800c6d0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800c6d4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800c6d8:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800c6dc:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4419      	add	r1, r3
 800c6e4:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800c6e8:	9205      	str	r2, [sp, #20]
 800c6ea:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800c6ee:	9207      	str	r2, [sp, #28]
 800c6f0:	920a      	str	r2, [sp, #40]	@ 0x28
 800c6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6f4:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800c6f8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c6fc:	f88d 3016 	strb.w	r3, [sp, #22]
 800c700:	f8ad c018 	strh.w	ip, [sp, #24]
 800c704:	9204      	str	r2, [sp, #16]
 800c706:	b17b      	cbz	r3, 800c728 <acc_pipeline_a121_assemble+0x1d4>
 800c708:	3b01      	subs	r3, #1
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	aa14      	add	r2, sp, #80	@ 0x50
 800c70e:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800c712:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800c716:	aa07      	add	r2, sp, #28
 800c718:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c71c:	f822 1b02 	strh.w	r1, [r2], #2
 800c720:	459c      	cmp	ip, r3
 800c722:	88d9      	ldrh	r1, [r3, #6]
 800c724:	80d1      	strh	r1, [r2, #6]
 800c726:	d1f7      	bne.n	800c718 <acc_pipeline_a121_assemble+0x1c4>
 800c728:	a904      	add	r1, sp, #16
 800c72a:	f002 fd37 	bl	800f19c <acc_element_frame_init>
 800c72e:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800c732:	6871      	ldr	r1, [r6, #4]
 800c734:	4640      	mov	r0, r8
 800c736:	f002 fe5f 	bl	800f3f8 <acc_element_sink_a121_callback_init>
 800c73a:	4639      	mov	r1, r7
 800c73c:	4620      	mov	r0, r4
 800c73e:	f002 fa21 	bl	800eb84 <acc_element_connect>
 800c742:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800c746:	2900      	cmp	r1, #0
 800c748:	d059      	beq.n	800c7fe <acc_pipeline_a121_assemble+0x2aa>
 800c74a:	4638      	mov	r0, r7
 800c74c:	f002 fa1a 	bl	800eb84 <acc_element_connect>
 800c750:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800c754:	4641      	mov	r1, r8
 800c756:	f002 fa15 	bl	800eb84 <acc_element_connect>
 800c75a:	6820      	ldr	r0, [r4, #0]
 800c75c:	6883      	ldr	r3, [r0, #8]
 800c75e:	4798      	blx	r3
 800c760:	2800      	cmp	r0, #0
 800c762:	d13b      	bne.n	800c7dc <acc_pipeline_a121_assemble+0x288>
 800c764:	4b29      	ldr	r3, [pc, #164]	@ (800c80c <acc_pipeline_a121_assemble+0x2b8>)
 800c766:	4a2a      	ldr	r2, [pc, #168]	@ (800c810 <acc_pipeline_a121_assemble+0x2bc>)
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	4927      	ldr	r1, [pc, #156]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c76c:	4798      	blx	r3
 800c76e:	e004      	b.n	800c77a <acc_pipeline_a121_assemble+0x226>
 800c770:	4b26      	ldr	r3, [pc, #152]	@ (800c80c <acc_pipeline_a121_assemble+0x2b8>)
 800c772:	4a28      	ldr	r2, [pc, #160]	@ (800c814 <acc_pipeline_a121_assemble+0x2c0>)
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	4924      	ldr	r1, [pc, #144]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c778:	4798      	blx	r3
 800c77a:	4628      	mov	r0, r5
 800c77c:	f7ff fec6 	bl	800c50c <pipeline_a121_disassemble>
 800c780:	2500      	movs	r5, #0
 800c782:	4628      	mov	r0, r5
 800c784:	b01b      	add	sp, #108	@ 0x6c
 800c786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c78a:	4a1f      	ldr	r2, [pc, #124]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c78c:	233d      	movs	r3, #61	@ 0x3d
 800c78e:	2110      	movs	r1, #16
 800c790:	2001      	movs	r0, #1
 800c792:	f7ff fe7d 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c796:	4a1c      	ldr	r2, [pc, #112]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c798:	233e      	movs	r3, #62	@ 0x3e
 800c79a:	21fc      	movs	r1, #252	@ 0xfc
 800c79c:	4605      	mov	r5, r0
 800c79e:	2001      	movs	r0, #1
 800c7a0:	f7ff fe76 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c7a4:	4a18      	ldr	r2, [pc, #96]	@ (800c808 <acc_pipeline_a121_assemble+0x2b4>)
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	2343      	movs	r3, #67	@ 0x43
 800c7aa:	2160      	movs	r1, #96	@ 0x60
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	f7ff fe6f 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	b125      	cbz	r5, 800c7c0 <acc_pipeline_a121_assemble+0x26c>
 800c7b6:	b11c      	cbz	r4, 800c7c0 <acc_pipeline_a121_assemble+0x26c>
 800c7b8:	f1b8 0f00 	cmp.w	r8, #0
 800c7bc:	f47f aeee 	bne.w	800c59c <acc_pipeline_a121_assemble+0x48>
 800c7c0:	4628      	mov	r0, r5
 800c7c2:	f7ff fe81 	bl	800c4c8 <acc_rss_integration_mem_free>
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7ff fe7e 	bl	800c4c8 <acc_rss_integration_mem_free>
 800c7cc:	4640      	mov	r0, r8
 800c7ce:	f7ff fe7b 	bl	800c4c8 <acc_rss_integration_mem_free>
 800c7d2:	2500      	movs	r5, #0
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	b01b      	add	sp, #108	@ 0x6c
 800c7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7dc:	6820      	ldr	r0, [r4, #0]
 800c7de:	68c3      	ldr	r3, [r0, #12]
 800c7e0:	4798      	blx	r3
 800c7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c818 <acc_pipeline_a121_assemble+0x2c4>)
 800c7e4:	4a0d      	ldr	r2, [pc, #52]	@ (800c81c <acc_pipeline_a121_assemble+0x2c8>)
 800c7e6:	606b      	str	r3, [r5, #4]
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800c7f0:	b01b      	add	sp, #108	@ 0x6c
 800c7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7f6:	46a0      	mov	r8, r4
 800c7f8:	e7e2      	b.n	800c7c0 <acc_pipeline_a121_assemble+0x26c>
 800c7fa:	46a8      	mov	r8, r5
 800c7fc:	e7e0      	b.n	800c7c0 <acc_pipeline_a121_assemble+0x26c>
 800c7fe:	4641      	mov	r1, r8
 800c800:	4638      	mov	r0, r7
 800c802:	f002 f9bf 	bl	800eb84 <acc_element_connect>
 800c806:	e7a8      	b.n	800c75a <acc_pipeline_a121_assemble+0x206>
 800c808:	08015b40 	.word	0x08015b40
 800c80c:	20000610 	.word	0x20000610
 800c810:	08015b50 	.word	0x08015b50
 800c814:	08015b1c 	.word	0x08015b1c
 800c818:	0800c4fd 	.word	0x0800c4fd
 800c81c:	0800c50d 	.word	0x0800c50d

0800c820 <acc_pipeline_a121_prepare_memory>:
 800c820:	6803      	ldr	r3, [r0, #0]
 800c822:	b430      	push	{r4, r5}
 800c824:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800c828:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800c82a:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800c82e:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800c832:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800c836:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800c83a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c83e:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800c842:	615c      	str	r4, [r3, #20]
 800c844:	b14d      	cbz	r5, 800c85a <acc_pipeline_a121_prepare_memory+0x3a>
 800c846:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800c84a:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800c84e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800c852:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c856:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800c85a:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800c85e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c862:	bc30      	pop	{r4, r5}
 800c864:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop

0800c86c <acc_radar_engine_a121_context_create>:
 800c86c:	b508      	push	{r3, lr}
 800c86e:	4a07      	ldr	r2, [pc, #28]	@ (800c88c <acc_radar_engine_a121_context_create+0x20>)
 800c870:	2373      	movs	r3, #115	@ 0x73
 800c872:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800c876:	2001      	movs	r0, #1
 800c878:	f7ff fe0a 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800c87c:	b120      	cbz	r0, 800c888 <acc_radar_engine_a121_context_create+0x1c>
 800c87e:	2301      	movs	r3, #1
 800c880:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800c884:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800c888:	bd08      	pop	{r3, pc}
 800c88a:	bf00      	nop
 800c88c:	08015b70 	.word	0x08015b70

0800c890 <acc_radar_engine_a121_context_destroy>:
 800c890:	b108      	cbz	r0, 800c896 <acc_radar_engine_a121_context_destroy+0x6>
 800c892:	f7ff be19 	b.w	800c4c8 <acc_rss_integration_mem_free>
 800c896:	4770      	bx	lr

0800c898 <acc_radar_engine_a121_run_program>:
 800c898:	f002 be60 	b.w	800f55c <acc_cpd_a121_meas_session_run_program>

0800c89c <acc_radar_engine_a121_measure>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	460c      	mov	r4, r1
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c8a6:	f000 fc43 	bl	800d130 <acc_sensor_protocol_a121_ack_event>
 800c8aa:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800c8ae:	b143      	cbz	r3, 800c8c2 <acc_radar_engine_a121_measure+0x26>
 800c8b0:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	bf0c      	ite	eq
 800c8b8:	2301      	moveq	r3, #1
 800c8ba:	2302      	movne	r3, #2
 800c8bc:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	bf00      	nop

0800c8cc <acc_radar_engine_a121_transfer_data>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c8d2:	9c04      	ldr	r4, [sp, #16]
 800c8d4:	2901      	cmp	r1, #1
 800c8d6:	bf14      	ite	ne
 800c8d8:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800c8dc:	2100      	moveq	r1, #0
 800c8de:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800c8e2:	461d      	mov	r5, r3
 800c8e4:	f002 feb2 	bl	800f64c <acc_cpd_a121_meas_session_transfer_data>
 800c8e8:	b118      	cbz	r0, 800c8f2 <acc_radar_engine_a121_transfer_data+0x26>
 800c8ea:	1e28      	subs	r0, r5, #0
 800c8ec:	bf18      	it	ne
 800c8ee:	2001      	movne	r0, #1
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	4b04      	ldr	r3, [pc, #16]	@ (800c904 <acc_radar_engine_a121_transfer_data+0x38>)
 800c8f4:	4a04      	ldr	r2, [pc, #16]	@ (800c908 <acc_radar_engine_a121_transfer_data+0x3c>)
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	4904      	ldr	r1, [pc, #16]	@ (800c90c <acc_radar_engine_a121_transfer_data+0x40>)
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4798      	blx	r3
 800c8fe:	4620      	mov	r0, r4
 800c900:	bd38      	pop	{r3, r4, r5, pc}
 800c902:	bf00      	nop
 800c904:	20000610 	.word	0x20000610
 800c908:	08015b84 	.word	0x08015b84
 800c90c:	08015b70 	.word	0x08015b70

0800c910 <acc_radar_engine_a121_verify_radar_data_ready>:
 800c910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	460d      	mov	r5, r1
 800c918:	2400      	movs	r4, #0
 800c91a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c91e:	9403      	str	r4, [sp, #12]
 800c920:	4690      	mov	r8, r2
 800c922:	4607      	mov	r7, r0
 800c924:	f000 fbe8 	bl	800d0f8 <acc_sensor_protocol_a121_is_event_pending>
 800c928:	b980      	cbnz	r0, 800c94c <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800c92a:	4b15      	ldr	r3, [pc, #84]	@ (800c980 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800c92c:	4a15      	ldr	r2, [pc, #84]	@ (800c984 <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800c92e:	691d      	ldr	r5, [r3, #16]
 800c930:	4915      	ldr	r1, [pc, #84]	@ (800c988 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800c932:	463b      	mov	r3, r7
 800c934:	4604      	mov	r4, r0
 800c936:	47a8      	blx	r5
 800c938:	ae03      	add	r6, sp, #12
 800c93a:	4630      	mov	r0, r6
 800c93c:	f000 fcba 	bl	800d2b4 <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800c940:	f888 0000 	strb.w	r0, [r8]
 800c944:	4620      	mov	r0, r4
 800c946:	b004      	add	sp, #16
 800c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c94c:	ae03      	add	r6, sp, #12
 800c94e:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800c952:	4632      	mov	r2, r6
 800c954:	4638      	mov	r0, r7
 800c956:	f000 fc33 	bl	800d1c0 <acc_sensor_protocol_a121_get_event>
 800c95a:	4604      	mov	r4, r0
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d0ec      	beq.n	800c93a <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c960:	4630      	mov	r0, r6
 800c962:	f000 fc97 	bl	800d294 <acc_sensor_protocol_a121_is_handshake>
 800c966:	4604      	mov	r4, r0
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1e6      	bne.n	800c93a <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c96c:	4a04      	ldr	r2, [pc, #16]	@ (800c980 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800c96e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c972:	6915      	ldr	r5, [r2, #16]
 800c974:	4904      	ldr	r1, [pc, #16]	@ (800c988 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	4a04      	ldr	r2, [pc, #16]	@ (800c98c <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800c97a:	463b      	mov	r3, r7
 800c97c:	47a8      	blx	r5
 800c97e:	e7dc      	b.n	800c93a <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c980:	20000610 	.word	0x20000610
 800c984:	08015bb0 	.word	0x08015bb0
 800c988:	08015b70 	.word	0x08015b70
 800c98c:	08015bd0 	.word	0x08015bd0

0800c990 <acc_radar_engine_a121_update_buffer_header>:
 800c990:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800c994:	8011      	strh	r1, [r2, #0]
 800c996:	b4f0      	push	{r4, r5, r6, r7}
 800c998:	b133      	cbz	r3, 800c9a8 <acc_radar_engine_a121_update_buffer_header+0x18>
 800c99a:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800c99e:	f1a3 0301 	sub.w	r3, r3, #1
 800c9a2:	fab3 f383 	clz	r3, r3
 800c9a6:	095b      	lsrs	r3, r3, #5
 800c9a8:	8053      	strh	r3, [r2, #2]
 800c9aa:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800c9ae:	8093      	strh	r3, [r2, #4]
 800c9b0:	1d91      	adds	r1, r2, #6
 800c9b2:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800c9b6:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800c9ba:	681f      	ldr	r7, [r3, #0]
 800c9bc:	685e      	ldr	r6, [r3, #4]
 800c9be:	689d      	ldr	r5, [r3, #8]
 800c9c0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c9c4:	f8c1 c00c 	str.w	ip, [r1, #12]
 800c9c8:	3310      	adds	r3, #16
 800c9ca:	42a3      	cmp	r3, r4
 800c9cc:	600f      	str	r7, [r1, #0]
 800c9ce:	604e      	str	r6, [r1, #4]
 800c9d0:	608d      	str	r5, [r1, #8]
 800c9d2:	f101 0110 	add.w	r1, r1, #16
 800c9d6:	d1f0      	bne.n	800c9ba <acc_radar_engine_a121_update_buffer_header+0x2a>
 800c9d8:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800c9dc:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800c9de:	bcf0      	pop	{r4, r5, r6, r7}
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop

0800c9e4 <acc_radar_engine_a121_check_asic_id>:
 800c9e4:	f000 bc6a 	b.w	800d2bc <acc_sensor_protocol_a121_check_asic_id>

0800c9e8 <acc_radar_engine_a121_is_sensor_running>:
 800c9e8:	f000 bb74 	b.w	800d0d4 <acc_sensor_protocol_a121_is_sensor_running>

0800c9ec <acc_radar_engine_121_populate_metadata>:
 800c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f0:	8804      	ldrh	r4, [r0, #0]
 800c9f2:	2a00      	cmp	r2, #0
 800c9f4:	bf14      	ite	ne
 800c9f6:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800c9fa:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800c9fe:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800ca02:	bf38      	it	cc
 800ca04:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800ca08:	42a2      	cmp	r2, r4
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	4688      	mov	r8, r1
 800ca0e:	461d      	mov	r5, r3
 800ca10:	d22b      	bcs.n	800ca6a <acc_radar_engine_121_populate_metadata+0x7e>
 800ca12:	4b17      	ldr	r3, [pc, #92]	@ (800ca70 <acc_radar_engine_121_populate_metadata+0x84>)
 800ca14:	4a17      	ldr	r2, [pc, #92]	@ (800ca74 <acc_radar_engine_121_populate_metadata+0x88>)
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	4917      	ldr	r1, [pc, #92]	@ (800ca78 <acc_radar_engine_121_populate_metadata+0x8c>)
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	4798      	blx	r3
 800ca1e:	2700      	movs	r7, #0
 800ca20:	4916      	ldr	r1, [pc, #88]	@ (800ca7c <acc_radar_engine_121_populate_metadata+0x90>)
 800ca22:	4a17      	ldr	r2, [pc, #92]	@ (800ca80 <acc_radar_engine_121_populate_metadata+0x94>)
 800ca24:	2300      	movs	r3, #0
 800ca26:	806b      	strh	r3, [r5, #2]
 800ca28:	231c      	movs	r3, #28
 800ca2a:	81ab      	strh	r3, [r5, #12]
 800ca2c:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800ca30:	f000 f9e0 	bl	800cdf4 <acc_sensor_a121_get_max_header_length>
 800ca34:	301c      	adds	r0, #28
 800ca36:	b280      	uxth	r0, r0
 800ca38:	1903      	adds	r3, r0, r4
 800ca3a:	462c      	mov	r4, r5
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	81e8      	strh	r0, [r5, #14]
 800ca40:	6871      	ldr	r1, [r6, #4]
 800ca42:	6830      	ldr	r0, [r6, #0]
 800ca44:	68b2      	ldr	r2, [r6, #8]
 800ca46:	f824 3b10 	strh.w	r3, [r4], #16
 800ca4a:	68f3      	ldr	r3, [r6, #12]
 800ca4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca4e:	6930      	ldr	r0, [r6, #16]
 800ca50:	6971      	ldr	r1, [r6, #20]
 800ca52:	69b2      	ldr	r2, [r6, #24]
 800ca54:	c407      	stmia	r4!, {r0, r1, r2}
 800ca56:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ca5a:	8bb3      	ldrh	r3, [r6, #28]
 800ca5c:	8023      	strh	r3, [r4, #0]
 800ca5e:	3530      	adds	r5, #48	@ 0x30
 800ca60:	e885 0003 	stmia.w	r5, {r0, r1}
 800ca64:	4638      	mov	r0, r7
 800ca66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca6a:	2701      	movs	r7, #1
 800ca6c:	e7d8      	b.n	800ca20 <acc_radar_engine_121_populate_metadata+0x34>
 800ca6e:	bf00      	nop
 800ca70:	20000610 	.word	0x20000610
 800ca74:	08015bfc 	.word	0x08015bfc
 800ca78:	08015b70 	.word	0x08015b70
 800ca7c:	00020001 	.word	0x00020001
 800ca80:	001b0003 	.word	0x001b0003

0800ca84 <acc_radar_engine_a121_prepare>:
 800ca84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca88:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800ca8c:	460c      	mov	r4, r1
 800ca8e:	4615      	mov	r5, r2
 800ca90:	2100      	movs	r1, #0
 800ca92:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800ca96:	4606      	mov	r6, r0
 800ca98:	a81b      	add	r0, sp, #108	@ 0x6c
 800ca9a:	4699      	mov	r9, r3
 800ca9c:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800ca9e:	f10d 080c 	add.w	r8, sp, #12
 800caa2:	f003 ffeb 	bl	8010a7c <memset>
 800caa6:	2238      	movs	r2, #56	@ 0x38
 800caa8:	2100      	movs	r1, #0
 800caaa:	a80d      	add	r0, sp, #52	@ 0x34
 800caac:	f003 ffe6 	bl	8010a7c <memset>
 800cab0:	4629      	mov	r1, r5
 800cab2:	4620      	mov	r0, r4
 800cab4:	aa1b      	add	r2, sp, #108	@ 0x6c
 800cab6:	ab05      	add	r3, sp, #20
 800cab8:	f8cd 8000 	str.w	r8, [sp]
 800cabc:	f001 f9d0 	bl	800de60 <acc_translation_a121_translate>
 800cac0:	b930      	cbnz	r0, 800cad0 <acc_radar_engine_a121_prepare+0x4c>
 800cac2:	f04f 0800 	mov.w	r8, #0
 800cac6:	4640      	mov	r0, r8
 800cac8:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800cacc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad0:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800cad4:	4641      	mov	r1, r8
 800cad6:	a805      	add	r0, sp, #20
 800cad8:	ab0d      	add	r3, sp, #52	@ 0x34
 800cada:	f7ff ff87 	bl	800c9ec <acc_radar_engine_121_populate_metadata>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d0ef      	beq.n	800cac2 <acc_radar_engine_a121_prepare+0x3e>
 800cae2:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800cae4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800cae8:	800b      	strh	r3, [r1, #0]
 800caea:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800caec:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800caf0:	800a      	strh	r2, [r1, #0]
 800caf2:	2304      	movs	r3, #4
 800caf4:	aa1b      	add	r2, sp, #108	@ 0x6c
 800caf6:	4631      	mov	r1, r6
 800caf8:	2014      	movs	r0, #20
 800cafa:	f002 f845 	bl	800eb88 <acc_probes_execute_struct>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d0df      	beq.n	800cac2 <acc_radar_engine_a121_prepare+0x3e>
 800cb02:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800cb04:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb06:	464a      	mov	r2, r9
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f002 fcf3 	bl	800f4f4 <acc_cpd_a121_meas_session_load_program>
 800cb0e:	4680      	mov	r8, r0
 800cb10:	b928      	cbnz	r0, 800cb1e <acc_radar_engine_a121_prepare+0x9a>
 800cb12:	4b27      	ldr	r3, [pc, #156]	@ (800cbb0 <acc_radar_engine_a121_prepare+0x12c>)
 800cb14:	4a27      	ldr	r2, [pc, #156]	@ (800cbb4 <acc_radar_engine_a121_prepare+0x130>)
 800cb16:	691b      	ldr	r3, [r3, #16]
 800cb18:	4927      	ldr	r1, [pc, #156]	@ (800cbb8 <acc_radar_engine_a121_prepare+0x134>)
 800cb1a:	4798      	blx	r3
 800cb1c:	e7d3      	b.n	800cac6 <acc_radar_engine_a121_prepare+0x42>
 800cb1e:	4b27      	ldr	r3, [pc, #156]	@ (800cbbc <acc_radar_engine_a121_prepare+0x138>)
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	2260      	movs	r2, #96	@ 0x60
 800cb24:	9201      	str	r2, [sp, #4]
 800cb26:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800cb28:	464a      	mov	r2, r9
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f000 fabb 	bl	800d0a8 <acc_sensor_protocol_a121_load_lut>
 800cb32:	4680      	mov	r8, r0
 800cb34:	b3a8      	cbz	r0, 800cba2 <acc_radar_engine_a121_prepare+0x11e>
 800cb36:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800cb3a:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f004 f82c 	bl	8010b9a <memcpy>
 800cb42:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800cb46:	b122      	cbz	r2, 800cb52 <acc_radar_engine_a121_prepare+0xce>
 800cb48:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800cb4c:	1e1a      	subs	r2, r3, #0
 800cb4e:	bf18      	it	ne
 800cb50:	2201      	movne	r2, #1
 800cb52:	2101      	movs	r1, #1
 800cb54:	462b      	mov	r3, r5
 800cb56:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800cb5a:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800cb5e:	f833 1b24 	ldrh.w	r1, [r3], #36
 800cb62:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800cb66:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800cb6a:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800cb6e:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800cb72:	f105 0c54 	add.w	ip, r5, #84	@ 0x54
 800cb76:	681c      	ldr	r4, [r3, #0]
 800cb78:	6858      	ldr	r0, [r3, #4]
 800cb7a:	689a      	ldr	r2, [r3, #8]
 800cb7c:	68de      	ldr	r6, [r3, #12]
 800cb7e:	60ce      	str	r6, [r1, #12]
 800cb80:	3310      	adds	r3, #16
 800cb82:	4563      	cmp	r3, ip
 800cb84:	600c      	str	r4, [r1, #0]
 800cb86:	6048      	str	r0, [r1, #4]
 800cb88:	608a      	str	r2, [r1, #8]
 800cb8a:	f101 0110 	add.w	r1, r1, #16
 800cb8e:	d1f2      	bne.n	800cb76 <acc_radar_engine_a121_prepare+0xf2>
 800cb90:	f8b5 3054 	ldrh.w	r3, [r5, #84]	@ 0x54
 800cb94:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800cb98:	4640      	mov	r0, r8
 800cb9a:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800cb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cba2:	4b03      	ldr	r3, [pc, #12]	@ (800cbb0 <acc_radar_engine_a121_prepare+0x12c>)
 800cba4:	4a06      	ldr	r2, [pc, #24]	@ (800cbc0 <acc_radar_engine_a121_prepare+0x13c>)
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	4903      	ldr	r1, [pc, #12]	@ (800cbb8 <acc_radar_engine_a121_prepare+0x134>)
 800cbaa:	4798      	blx	r3
 800cbac:	e78b      	b.n	800cac6 <acc_radar_engine_a121_prepare+0x42>
 800cbae:	bf00      	nop
 800cbb0:	20000610 	.word	0x20000610
 800cbb4:	08015c1c 	.word	0x08015c1c
 800cbb8:	08015b70 	.word	0x08015b70
 800cbbc:	08017ca8 	.word	0x08017ca8
 800cbc0:	08015c30 	.word	0x08015c30

0800cbc4 <acc_radar_engine_a121_reconfigure>:
 800cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc8:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800cbcc:	4607      	mov	r7, r0
 800cbce:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	4616      	mov	r6, r2
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800cbda:	a81b      	add	r0, sp, #108	@ 0x6c
 800cbdc:	4699      	mov	r9, r3
 800cbde:	f003 ff4d 	bl	8010a7c <memset>
 800cbe2:	a80d      	add	r0, sp, #52	@ 0x34
 800cbe4:	2238      	movs	r2, #56	@ 0x38
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	f003 ff48 	bl	8010a7c <memset>
 800cbec:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800cbf0:	f1ba 0f00 	cmp.w	sl, #0
 800cbf4:	d00c      	beq.n	800cc10 <acc_radar_engine_a121_reconfigure+0x4c>
 800cbf6:	4b3e      	ldr	r3, [pc, #248]	@ (800ccf0 <acc_radar_engine_a121_reconfigure+0x12c>)
 800cbf8:	4a3e      	ldr	r2, [pc, #248]	@ (800ccf4 <acc_radar_engine_a121_reconfigure+0x130>)
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	493e      	ldr	r1, [pc, #248]	@ (800ccf8 <acc_radar_engine_a121_reconfigure+0x134>)
 800cbfe:	2000      	movs	r0, #0
 800cc00:	4798      	blx	r3
 800cc02:	f04f 0800 	mov.w	r8, #0
 800cc06:	4640      	mov	r0, r8
 800cc08:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800cc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc10:	f10d 080c 	add.w	r8, sp, #12
 800cc14:	ab05      	add	r3, sp, #20
 800cc16:	f8cd 8000 	str.w	r8, [sp]
 800cc1a:	aa1b      	add	r2, sp, #108	@ 0x6c
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f001 f91e 	bl	800de60 <acc_translation_a121_translate>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d0ec      	beq.n	800cc02 <acc_radar_engine_a121_reconfigure+0x3e>
 800cc28:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	a805      	add	r0, sp, #20
 800cc30:	ab0d      	add	r3, sp, #52	@ 0x34
 800cc32:	f7ff fedb 	bl	800c9ec <acc_radar_engine_121_populate_metadata>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d0e3      	beq.n	800cc02 <acc_radar_engine_a121_reconfigure+0x3e>
 800cc3a:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800cc3c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800cc40:	800b      	strh	r3, [r1, #0]
 800cc42:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800cc44:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800cc48:	800a      	strh	r2, [r1, #0]
 800cc4a:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800cc4e:	aa1b      	add	r2, sp, #108	@ 0x6c
 800cc50:	4639      	mov	r1, r7
 800cc52:	2014      	movs	r0, #20
 800cc54:	f001 ff98 	bl	800eb88 <acc_probes_execute_struct>
 800cc58:	4680      	mov	r8, r0
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0d1      	beq.n	800cc02 <acc_radar_engine_a121_reconfigure+0x3e>
 800cc5e:	a91b      	add	r1, sp, #108	@ 0x6c
 800cc60:	4620      	mov	r0, r4
 800cc62:	f002 fc7f 	bl	800f564 <acc_cpd_a121_meas_session_is_patch_needed>
 800cc66:	bbc0      	cbnz	r0, 800ccda <acc_radar_engine_a121_reconfigure+0x116>
 800cc68:	a91b      	add	r1, sp, #108	@ 0x6c
 800cc6a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f003 ff93 	bl	8010b9a <memcpy>
 800cc74:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800cc78:	bb3b      	cbnz	r3, 800ccca <acc_radar_engine_a121_reconfigure+0x106>
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	4633      	mov	r3, r6
 800cc7e:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800cc82:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800cc86:	f833 2b24 	ldrh.w	r2, [r3], #36
 800cc8a:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800cc8e:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800cc92:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800cc96:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800cc9a:	f106 0c54 	add.w	ip, r6, #84	@ 0x54
 800cc9e:	681d      	ldr	r5, [r3, #0]
 800cca0:	6858      	ldr	r0, [r3, #4]
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	68df      	ldr	r7, [r3, #12]
 800cca6:	60cf      	str	r7, [r1, #12]
 800cca8:	3310      	adds	r3, #16
 800ccaa:	4563      	cmp	r3, ip
 800ccac:	600d      	str	r5, [r1, #0]
 800ccae:	6048      	str	r0, [r1, #4]
 800ccb0:	608a      	str	r2, [r1, #8]
 800ccb2:	f101 0110 	add.w	r1, r1, #16
 800ccb6:	d1f2      	bne.n	800cc9e <acc_radar_engine_a121_reconfigure+0xda>
 800ccb8:	f8b6 3054 	ldrh.w	r3, [r6, #84]	@ 0x54
 800ccbc:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800ccc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccca:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800ccce:	f1ba 0a00 	subs.w	sl, sl, #0
 800ccd2:	bf18      	it	ne
 800ccd4:	f04f 0a01 	movne.w	sl, #1
 800ccd8:	e7cf      	b.n	800cc7a <acc_radar_engine_a121_reconfigure+0xb6>
 800ccda:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800cce0:	464a      	mov	r2, r9
 800cce2:	4638      	mov	r0, r7
 800cce4:	4623      	mov	r3, r4
 800cce6:	f002 fc4f 	bl	800f588 <acc_cpd_a121_meas_session_update_program>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d089      	beq.n	800cc02 <acc_radar_engine_a121_reconfigure+0x3e>
 800ccee:	e7bb      	b.n	800cc68 <acc_radar_engine_a121_reconfigure+0xa4>
 800ccf0:	20000610 	.word	0x20000610
 800ccf4:	08015c40 	.word	0x08015c40
 800ccf8:	08015b70 	.word	0x08015b70

0800ccfc <acc_radar_engine_a121_get_metadata>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	b0fe      	sub	sp, #504	@ 0x1f8
 800cd00:	4604      	mov	r4, r0
 800cd02:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800cd06:	460d      	mov	r5, r1
 800cd08:	a80d      	add	r0, sp, #52	@ 0x34
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	ae03      	add	r6, sp, #12
 800cd0e:	f003 feb5 	bl	8010a7c <memset>
 800cd12:	aa0d      	add	r2, sp, #52	@ 0x34
 800cd14:	4620      	mov	r0, r4
 800cd16:	ab05      	add	r3, sp, #20
 800cd18:	9600      	str	r6, [sp, #0]
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	f001 f8a0 	bl	800de60 <acc_translation_a121_translate>
 800cd20:	b908      	cbnz	r0, 800cd26 <acc_radar_engine_a121_get_metadata+0x2a>
 800cd22:	b07e      	add	sp, #504	@ 0x1f8
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800cd2a:	462b      	mov	r3, r5
 800cd2c:	4631      	mov	r1, r6
 800cd2e:	a805      	add	r0, sp, #20
 800cd30:	f7ff fe5c 	bl	800c9ec <acc_radar_engine_121_populate_metadata>
 800cd34:	b07e      	add	sp, #504	@ 0x1f8
 800cd36:	bd70      	pop	{r4, r5, r6, pc}

0800cd38 <acc_radar_engine_a121_points_to_meter>:
 800cd38:	f000 bb60 	b.w	800d3fc <acc_translation_a121_points_to_meter>

0800cd3c <acc_radar_engine_a121_init_interrupts>:
 800cd3c:	f000 b906 	b.w	800cf4c <acc_sensor_protocol_a121_init_interrupts>

0800cd40 <acc_radar_engine_a121_hibernate_off>:
 800cd40:	f000 baf2 	b.w	800d328 <acc_sensor_protocol_a121_hibernate_off>

0800cd44 <acc_radar_engine_a121_is_hibernate>:
 800cd44:	f000 bb2a 	b.w	800d39c <acc_sensor_protocol_a121_is_hibernate>

0800cd48 <internal_buffer_processed_read.part.0>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	469a      	mov	sl, r3
 800cd50:	2600      	movs	r6, #0
 800cd52:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800cd56:	9200      	str	r2, [sp, #0]
 800cd58:	4683      	mov	fp, r0
 800cd5a:	4689      	mov	r9, r1
 800cd5c:	f7ff fb48 	bl	800c3f0 <acc_rss_integration_get_max_spi_transfer_size>
 800cd60:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800cd64:	f1ba 0f00 	cmp.w	sl, #0
 800cd68:	d03e      	beq.n	800cde8 <internal_buffer_processed_read.part.0+0xa0>
 800cd6a:	42b4      	cmp	r4, r6
 800cd6c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800cd70:	bf14      	ite	ne
 800cd72:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800cd76:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800cd7a:	f1a0 0804 	sub.w	r8, r0, #4
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	464d      	mov	r5, r9
 800cd82:	4657      	mov	r7, sl
 800cd84:	e025      	b.n	800cdd2 <internal_buffer_processed_read.part.0+0x8a>
 800cd86:	9b00      	ldr	r3, [sp, #0]
 800cd88:	9901      	ldr	r1, [sp, #4]
 800cd8a:	8029      	strh	r1, [r5, #0]
 800cd8c:	199a      	adds	r2, r3, r6
 800cd8e:	f04f 0100 	mov.w	r1, #0
 800cd92:	1e63      	subs	r3, r4, #1
 800cd94:	80e9      	strh	r1, [r5, #6]
 800cd96:	806a      	strh	r2, [r5, #2]
 800cd98:	80ab      	strh	r3, [r5, #4]
 800cd9a:	0062      	lsls	r2, r4, #1
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	f105 0008 	add.w	r0, r5, #8
 800cda2:	f003 fe6b 	bl	8010a7c <memset>
 800cda6:	4629      	mov	r1, r5
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4658      	mov	r0, fp
 800cdac:	1d22      	adds	r2, r4, #4
 800cdae:	f7ff fb25 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800cdb2:	ab02      	add	r3, sp, #8
 800cdb4:	cb03      	ldmia	r3!, {r0, r1}
 800cdb6:	4426      	add	r6, r4
 800cdb8:	6069      	str	r1, [r5, #4]
 800cdba:	6028      	str	r0, [r5, #0]
 800cdbc:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800cdc0:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800cdc4:	6869      	ldr	r1, [r5, #4]
 800cdc6:	ab02      	add	r3, sp, #8
 800cdc8:	4556      	cmp	r6, sl
 800cdca:	c303      	stmia	r3!, {r0, r1}
 800cdcc:	eba7 0704 	sub.w	r7, r7, r4
 800cdd0:	d20a      	bcs.n	800cde8 <internal_buffer_processed_read.part.0+0xa0>
 800cdd2:	45b8      	cmp	r8, r7
 800cdd4:	4644      	mov	r4, r8
 800cdd6:	bf28      	it	cs
 800cdd8:	463c      	movcs	r4, r7
 800cdda:	45b8      	cmp	r8, r7
 800cddc:	d2d3      	bcs.n	800cd86 <internal_buffer_processed_read.part.0+0x3e>
 800cdde:	e000      	b.n	800cde2 <internal_buffer_processed_read.part.0+0x9a>
 800cde0:	3c01      	subs	r4, #1
 800cde2:	07e3      	lsls	r3, r4, #31
 800cde4:	d4fc      	bmi.n	800cde0 <internal_buffer_processed_read.part.0+0x98>
 800cde6:	e7ce      	b.n	800cd86 <internal_buffer_processed_read.part.0+0x3e>
 800cde8:	f109 0008 	add.w	r0, r9, #8
 800cdec:	b005      	add	sp, #20
 800cdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf2:	bf00      	nop

0800cdf4 <acc_sensor_a121_get_max_header_length>:
 800cdf4:	2004      	movs	r0, #4
 800cdf6:	4770      	bx	lr

0800cdf8 <acc_sensor_a121_conf_write_instr>:
 800cdf8:	b570      	push	{r4, r5, r6, lr}
 800cdfa:	2501      	movs	r5, #1
 800cdfc:	b084      	sub	sp, #16
 800cdfe:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800ce02:	4604      	mov	r4, r0
 800ce04:	4616      	mov	r6, r2
 800ce06:	a903      	add	r1, sp, #12
 800ce08:	462a      	mov	r2, r5
 800ce0a:	a801      	add	r0, sp, #4
 800ce0c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ce10:	9601      	str	r6, [sp, #4]
 800ce12:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ce16:	f002 f85d 	bl	800eed4 <acc_utils_uint32_to_transfer_buffer>
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	a902      	add	r1, sp, #8
 800ce1e:	2300      	movs	r3, #0
 800ce20:	2204      	movs	r2, #4
 800ce22:	f7ff faeb 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ce26:	b004      	add	sp, #16
 800ce28:	bd70      	pop	{r4, r5, r6, pc}
 800ce2a:	bf00      	nop

0800ce2c <acc_sensor_a121_prepare_load_confmem>:
 800ce2c:	0849      	lsrs	r1, r1, #1
 800ce2e:	b570      	push	{r4, r5, r6, lr}
 800ce30:	6019      	str	r1, [r3, #0]
 800ce32:	461c      	mov	r4, r3
 800ce34:	4605      	mov	r5, r0
 800ce36:	4616      	mov	r6, r2
 800ce38:	f7ff fada 	bl	800c3f0 <acc_rss_integration_get_max_spi_transfer_size>
 800ce3c:	6821      	ldr	r1, [r4, #0]
 800ce3e:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800ce42:	d806      	bhi.n	800ce52 <acc_sensor_a121_prepare_load_confmem+0x26>
 800ce44:	3902      	subs	r1, #2
 800ce46:	f021 0101 	bic.w	r1, r1, #1
 800ce4a:	3504      	adds	r5, #4
 800ce4c:	6035      	str	r5, [r6, #0]
 800ce4e:	6021      	str	r1, [r4, #0]
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
 800ce52:	f7ff facd 	bl	800c3f0 <acc_rss_integration_get_max_spi_transfer_size>
 800ce56:	0841      	lsrs	r1, r0, #1
 800ce58:	e7f4      	b.n	800ce44 <acc_sensor_a121_prepare_load_confmem+0x18>
 800ce5a:	bf00      	nop

0800ce5c <acc_sensor_a121_load_confmem>:
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	f103 0802 	add.w	r8, r3, #2
 800ce64:	461c      	mov	r4, r3
 800ce66:	4607      	mov	r7, r0
 800ce68:	460e      	mov	r6, r1
 800ce6a:	4615      	mov	r5, r2
 800ce6c:	f7ff fac0 	bl	800c3f0 <acc_rss_integration_get_max_spi_transfer_size>
 800ce70:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800ce74:	d207      	bcs.n	800ce86 <acc_sensor_a121_load_confmem+0x2a>
 800ce76:	4b0b      	ldr	r3, [pc, #44]	@ (800cea4 <acc_sensor_a121_load_confmem+0x48>)
 800ce78:	4a0b      	ldr	r2, [pc, #44]	@ (800cea8 <acc_sensor_a121_load_confmem+0x4c>)
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	490b      	ldr	r1, [pc, #44]	@ (800ceac <acc_sensor_a121_load_confmem+0x50>)
 800ce7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce82:	2000      	movs	r0, #0
 800ce84:	4718      	bx	r3
 800ce86:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800ce8a:	3c01      	subs	r4, #1
 800ce8c:	8029      	strh	r1, [r5, #0]
 800ce8e:	806c      	strh	r4, [r5, #2]
 800ce90:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800ce94:	4629      	mov	r1, r5
 800ce96:	4638      	mov	r0, r7
 800ce98:	2300      	movs	r3, #0
 800ce9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	f7ff baad 	b.w	800c3fc <acc_rss_integration_sensor_device_transfer>
 800cea2:	bf00      	nop
 800cea4:	20000610 	.word	0x20000610
 800cea8:	08015cac 	.word	0x08015cac
 800ceac:	08015c98 	.word	0x08015c98

0800ceb0 <acc_sensor_a121_buffer_processed_read>:
 800ceb0:	b510      	push	{r4, lr}
 800ceb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	d805      	bhi.n	800cec6 <acc_sensor_a121_buffer_processed_read+0x16>
 800ceba:	2400      	movs	r4, #0
 800cebc:	9400      	str	r4, [sp, #0]
 800cebe:	f7ff ff43 	bl	800cd48 <internal_buffer_processed_read.part.0>
 800cec2:	b002      	add	sp, #8
 800cec4:	bd10      	pop	{r4, pc}
 800cec6:	4b04      	ldr	r3, [pc, #16]	@ (800ced8 <acc_sensor_a121_buffer_processed_read+0x28>)
 800cec8:	4a04      	ldr	r2, [pc, #16]	@ (800cedc <acc_sensor_a121_buffer_processed_read+0x2c>)
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	4904      	ldr	r1, [pc, #16]	@ (800cee0 <acc_sensor_a121_buffer_processed_read+0x30>)
 800cece:	2000      	movs	r0, #0
 800ced0:	4798      	blx	r3
 800ced2:	2000      	movs	r0, #0
 800ced4:	b002      	add	sp, #8
 800ced6:	bd10      	pop	{r4, pc}
 800ced8:	20000610 	.word	0x20000610
 800cedc:	08015ccc 	.word	0x08015ccc
 800cee0:	08015c98 	.word	0x08015c98

0800cee4 <acc_sensor_a121_lut_buffer_write>:
 800cee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ceea:	460d      	mov	r5, r1
 800ceec:	4614      	mov	r4, r2
 800ceee:	4681      	mov	r9, r0
 800cef0:	4698      	mov	r8, r3
 800cef2:	f7ff fa7d 	bl	800c3f0 <acc_rss_integration_get_max_spi_transfer_size>
 800cef6:	3c04      	subs	r4, #4
 800cef8:	1f07      	subs	r7, r0, #4
 800cefa:	0864      	lsrs	r4, r4, #1
 800cefc:	087f      	lsrs	r7, r7, #1
 800cefe:	42a7      	cmp	r7, r4
 800cf00:	bf28      	it	cs
 800cf02:	4627      	movcs	r7, r4
 800cf04:	f105 0a04 	add.w	sl, r5, #4
 800cf08:	2400      	movs	r4, #0
 800cf0a:	1b33      	subs	r3, r6, r4
 800cf0c:	42bb      	cmp	r3, r7
 800cf0e:	bf28      	it	cs
 800cf10:	463b      	movcs	r3, r7
 800cf12:	1e5a      	subs	r2, r3, #1
 800cf14:	eb08 0104 	add.w	r1, r8, r4
 800cf18:	469b      	mov	fp, r3
 800cf1a:	806a      	strh	r2, [r5, #2]
 800cf1c:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800cf20:	005a      	lsls	r2, r3, #1
 800cf22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf24:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800cf28:	8029      	strh	r1, [r5, #0]
 800cf2a:	4650      	mov	r0, sl
 800cf2c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800cf30:	f003 fe33 	bl	8010b9a <memcpy>
 800cf34:	445c      	add	r4, fp
 800cf36:	f10b 0202 	add.w	r2, fp, #2
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	4629      	mov	r1, r5
 800cf3e:	4648      	mov	r0, r9
 800cf40:	f7ff fa5c 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800cf44:	42a6      	cmp	r6, r4
 800cf46:	d8e0      	bhi.n	800cf0a <acc_sensor_a121_lut_buffer_write+0x26>
 800cf48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf4c <acc_sensor_protocol_a121_init_interrupts>:
 800cf4c:	b530      	push	{r4, r5, lr}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	2500      	movs	r5, #0
 800cf52:	4629      	mov	r1, r5
 800cf54:	9500      	str	r5, [sp, #0]
 800cf56:	237b      	movs	r3, #123	@ 0x7b
 800cf58:	22ff      	movs	r2, #255	@ 0xff
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	f001 fe52 	bl	800ec04 <acc_sensor_reg_field_write>
 800cf60:	2101      	movs	r1, #1
 800cf62:	4620      	mov	r0, r4
 800cf64:	9100      	str	r1, [sp, #0]
 800cf66:	238b      	movs	r3, #139	@ 0x8b
 800cf68:	2202      	movs	r2, #2
 800cf6a:	f001 fe4b 	bl	800ec04 <acc_sensor_reg_field_write>
 800cf6e:	9500      	str	r5, [sp, #0]
 800cf70:	4620      	mov	r0, r4
 800cf72:	238b      	movs	r3, #139	@ 0x8b
 800cf74:	2280      	movs	r2, #128	@ 0x80
 800cf76:	2107      	movs	r1, #7
 800cf78:	f001 fe44 	bl	800ec04 <acc_sensor_reg_field_write>
 800cf7c:	b003      	add	sp, #12
 800cf7e:	bd30      	pop	{r4, r5, pc}

0800cf80 <acc_sensor_protocol_a121_prepare_load>:
 800cf80:	b570      	push	{r4, r5, r6, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	f10d 0206 	add.w	r2, sp, #6
 800cf88:	2400      	movs	r4, #0
 800cf8a:	2137      	movs	r1, #55	@ 0x37
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	f8ad 4006 	strh.w	r4, [sp, #6]
 800cf92:	f001 fe11 	bl	800ebb8 <acc_sensor_reg_read>
 800cf96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cf9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cf9e:	b9b3      	cbnz	r3, 800cfce <acc_sensor_protocol_a121_prepare_load+0x4e>
 800cfa0:	f10d 0206 	add.w	r2, sp, #6
 800cfa4:	2400      	movs	r4, #0
 800cfa6:	211c      	movs	r1, #28
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f8ad 4006 	strh.w	r4, [sp, #6]
 800cfae:	f001 fe03 	bl	800ebb8 <acc_sensor_reg_read>
 800cfb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cfb6:	051b      	lsls	r3, r3, #20
 800cfb8:	d515      	bpl.n	800cfe6 <acc_sensor_protocol_a121_prepare_load+0x66>
 800cfba:	4b0e      	ldr	r3, [pc, #56]	@ (800cff4 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800cfbc:	4a0e      	ldr	r2, [pc, #56]	@ (800cff8 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800cfbe:	691e      	ldr	r6, [r3, #16]
 800cfc0:	490e      	ldr	r1, [pc, #56]	@ (800cffc <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	462b      	mov	r3, r5
 800cfc6:	47b0      	blx	r6
 800cfc8:	4620      	mov	r0, r4
 800cfca:	b002      	add	sp, #8
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	f7ff fa8f 	bl	800c4f0 <acc_rss_integration_log_level>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	d0e4      	beq.n	800cfa0 <acc_sensor_protocol_a121_prepare_load+0x20>
 800cfd6:	4b07      	ldr	r3, [pc, #28]	@ (800cff4 <acc_sensor_protocol_a121_prepare_load+0x74>)
 800cfd8:	4a09      	ldr	r2, [pc, #36]	@ (800d000 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800cfda:	691c      	ldr	r4, [r3, #16]
 800cfdc:	4907      	ldr	r1, [pc, #28]	@ (800cffc <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800cfde:	462b      	mov	r3, r5
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	47a0      	blx	r4
 800cfe4:	e7dc      	b.n	800cfa0 <acc_sensor_protocol_a121_prepare_load+0x20>
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f7ff ffb0 	bl	800cf4c <acc_sensor_protocol_a121_init_interrupts>
 800cfec:	2001      	movs	r0, #1
 800cfee:	b002      	add	sp, #8
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
 800cff2:	bf00      	nop
 800cff4:	20000610 	.word	0x20000610
 800cff8:	08015d28 	.word	0x08015d28
 800cffc:	08015d10 	.word	0x08015d10
 800d000:	08015ce4 	.word	0x08015ce4

0800d004 <acc_sensor_protocol_a121_is_ready_to_update>:
 800d004:	b500      	push	{lr}
 800d006:	b083      	sub	sp, #12
 800d008:	2300      	movs	r3, #0
 800d00a:	f10d 0206 	add.w	r2, sp, #6
 800d00e:	2137      	movs	r1, #55	@ 0x37
 800d010:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d014:	f001 fdd0 	bl	800ebb8 <acc_sensor_reg_read>
 800d018:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d01c:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800d020:	3800      	subs	r0, #0
 800d022:	bf18      	it	ne
 800d024:	2001      	movne	r0, #1
 800d026:	b003      	add	sp, #12
 800d028:	f85d fb04 	ldr.w	pc, [sp], #4

0800d02c <acc_sensor_protocol_a121_run_program>:
 800d02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02e:	b083      	sub	sp, #12
 800d030:	f10d 0206 	add.w	r2, sp, #6
 800d034:	460e      	mov	r6, r1
 800d036:	2400      	movs	r4, #0
 800d038:	211c      	movs	r1, #28
 800d03a:	4607      	mov	r7, r0
 800d03c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d040:	f001 fdba 	bl	800ebb8 <acc_sensor_reg_read>
 800d044:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d048:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800d04c:	d10c      	bne.n	800d068 <acc_sensor_protocol_a121_run_program+0x3c>
 800d04e:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800d052:	d313      	bcc.n	800d07c <acc_sensor_protocol_a121_run_program+0x50>
 800d054:	4b10      	ldr	r3, [pc, #64]	@ (800d098 <acc_sensor_protocol_a121_run_program+0x6c>)
 800d056:	4a11      	ldr	r2, [pc, #68]	@ (800d09c <acc_sensor_protocol_a121_run_program+0x70>)
 800d058:	691c      	ldr	r4, [r3, #16]
 800d05a:	4911      	ldr	r1, [pc, #68]	@ (800d0a0 <acc_sensor_protocol_a121_run_program+0x74>)
 800d05c:	4628      	mov	r0, r5
 800d05e:	4633      	mov	r3, r6
 800d060:	47a0      	blx	r4
 800d062:	4628      	mov	r0, r5
 800d064:	b003      	add	sp, #12
 800d066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d068:	4b0b      	ldr	r3, [pc, #44]	@ (800d098 <acc_sensor_protocol_a121_run_program+0x6c>)
 800d06a:	4a0e      	ldr	r2, [pc, #56]	@ (800d0a4 <acc_sensor_protocol_a121_run_program+0x78>)
 800d06c:	691d      	ldr	r5, [r3, #16]
 800d06e:	490c      	ldr	r1, [pc, #48]	@ (800d0a0 <acc_sensor_protocol_a121_run_program+0x74>)
 800d070:	4620      	mov	r0, r4
 800d072:	463b      	mov	r3, r7
 800d074:	47a8      	blx	r5
 800d076:	4620      	mov	r0, r4
 800d078:	b003      	add	sp, #12
 800d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07c:	462a      	mov	r2, r5
 800d07e:	4638      	mov	r0, r7
 800d080:	211b      	movs	r1, #27
 800d082:	f001 fdaf 	bl	800ebe4 <acc_sensor_reg_write>
 800d086:	4638      	mov	r0, r7
 800d088:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800d08c:	211b      	movs	r1, #27
 800d08e:	f001 fda9 	bl	800ebe4 <acc_sensor_reg_write>
 800d092:	2001      	movs	r0, #1
 800d094:	b003      	add	sp, #12
 800d096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d098:	20000610 	.word	0x20000610
 800d09c:	08015d88 	.word	0x08015d88
 800d0a0:	08015d10 	.word	0x08015d10
 800d0a4:	08015d58 	.word	0x08015d58

0800d0a8 <acc_sensor_protocol_a121_load_lut>:
 800d0a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0aa:	d809      	bhi.n	800d0c0 <acc_sensor_protocol_a121_load_lut+0x18>
 800d0ac:	b530      	push	{r4, r5, lr}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	461c      	mov	r4, r3
 800d0b2:	9d07      	ldr	r5, [sp, #28]
 800d0b4:	442c      	add	r4, r5
 800d0b6:	2c80      	cmp	r4, #128	@ 0x80
 800d0b8:	d904      	bls.n	800d0c4 <acc_sensor_protocol_a121_load_lut+0x1c>
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	b003      	add	sp, #12
 800d0be:	bd30      	pop	{r4, r5, pc}
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	4770      	bx	lr
 800d0c4:	9c06      	ldr	r4, [sp, #24]
 800d0c6:	9501      	str	r5, [sp, #4]
 800d0c8:	9400      	str	r4, [sp, #0]
 800d0ca:	f7ff ff0b 	bl	800cee4 <acc_sensor_a121_lut_buffer_write>
 800d0ce:	2001      	movs	r0, #1
 800d0d0:	b003      	add	sp, #12
 800d0d2:	bd30      	pop	{r4, r5, pc}

0800d0d4 <acc_sensor_protocol_a121_is_sensor_running>:
 800d0d4:	b500      	push	{lr}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f10d 0206 	add.w	r2, sp, #6
 800d0de:	211c      	movs	r1, #28
 800d0e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d0e4:	f001 fd68 	bl	800ebb8 <acc_sensor_reg_read>
 800d0e8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d0ec:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800d0f0:	b003      	add	sp, #12
 800d0f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0f6:	bf00      	nop

0800d0f8 <acc_sensor_protocol_a121_is_event_pending>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	2300      	movs	r3, #0
 800d100:	f10d 0206 	add.w	r2, sp, #6
 800d104:	2137      	movs	r1, #55	@ 0x37
 800d106:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d10a:	f001 fd55 	bl	800ebb8 <acc_sensor_reg_read>
 800d10e:	2c01      	cmp	r4, #1
 800d110:	d00b      	beq.n	800d12a <acc_sensor_protocol_a121_is_event_pending+0x32>
 800d112:	2c02      	cmp	r4, #2
 800d114:	bf14      	ite	ne
 800d116:	23c0      	movne	r3, #192	@ 0xc0
 800d118:	2380      	moveq	r3, #128	@ 0x80
 800d11a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d11e:	4213      	tst	r3, r2
 800d120:	bf14      	ite	ne
 800d122:	2001      	movne	r0, #1
 800d124:	2000      	moveq	r0, #0
 800d126:	b002      	add	sp, #8
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	2340      	movs	r3, #64	@ 0x40
 800d12c:	e7f5      	b.n	800d11a <acc_sensor_protocol_a121_is_event_pending+0x22>
 800d12e:	bf00      	nop

0800d130 <acc_sensor_protocol_a121_ack_event>:
 800d130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d132:	b083      	sub	sp, #12
 800d134:	2400      	movs	r4, #0
 800d136:	2901      	cmp	r1, #1
 800d138:	4607      	mov	r7, r0
 800d13a:	4616      	mov	r6, r2
 800d13c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d140:	d019      	beq.n	800d176 <acc_sensor_protocol_a121_ack_event+0x46>
 800d142:	2902      	cmp	r1, #2
 800d144:	d009      	beq.n	800d15a <acc_sensor_protocol_a121_ack_event+0x2a>
 800d146:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b0 <acc_sensor_protocol_a121_ack_event+0x80>)
 800d148:	4a1a      	ldr	r2, [pc, #104]	@ (800d1b4 <acc_sensor_protocol_a121_ack_event+0x84>)
 800d14a:	691d      	ldr	r5, [r3, #16]
 800d14c:	491a      	ldr	r1, [pc, #104]	@ (800d1b8 <acc_sensor_protocol_a121_ack_event+0x88>)
 800d14e:	4603      	mov	r3, r0
 800d150:	4620      	mov	r0, r4
 800d152:	47a8      	blx	r5
 800d154:	4620      	mov	r0, r4
 800d156:	b003      	add	sp, #12
 800d158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15a:	2146      	movs	r1, #70	@ 0x46
 800d15c:	f10d 0206 	add.w	r2, sp, #6
 800d160:	4638      	mov	r0, r7
 800d162:	f001 fd29 	bl	800ebb8 <acc_sensor_reg_read>
 800d166:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d16a:	2484      	movs	r4, #132	@ 0x84
 800d16c:	b175      	cbz	r5, 800d18c <acc_sensor_protocol_a121_ack_event+0x5c>
 800d16e:	b9be      	cbnz	r6, 800d1a0 <acc_sensor_protocol_a121_ack_event+0x70>
 800d170:	2001      	movs	r0, #1
 800d172:	b003      	add	sp, #12
 800d174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d176:	2145      	movs	r1, #69	@ 0x45
 800d178:	f10d 0206 	add.w	r2, sp, #6
 800d17c:	4638      	mov	r0, r7
 800d17e:	f001 fd1b 	bl	800ebb8 <acc_sensor_reg_read>
 800d182:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800d186:	2483      	movs	r4, #131	@ 0x83
 800d188:	2d00      	cmp	r5, #0
 800d18a:	d1f0      	bne.n	800d16e <acc_sensor_protocol_a121_ack_event+0x3e>
 800d18c:	4b08      	ldr	r3, [pc, #32]	@ (800d1b0 <acc_sensor_protocol_a121_ack_event+0x80>)
 800d18e:	4a0b      	ldr	r2, [pc, #44]	@ (800d1bc <acc_sensor_protocol_a121_ack_event+0x8c>)
 800d190:	691c      	ldr	r4, [r3, #16]
 800d192:	4909      	ldr	r1, [pc, #36]	@ (800d1b8 <acc_sensor_protocol_a121_ack_event+0x88>)
 800d194:	4628      	mov	r0, r5
 800d196:	463b      	mov	r3, r7
 800d198:	47a0      	blx	r4
 800d19a:	4628      	mov	r0, r5
 800d19c:	b003      	add	sp, #12
 800d19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f001 fd1d 	bl	800ebe4 <acc_sensor_reg_write>
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	e7d3      	b.n	800d156 <acc_sensor_protocol_a121_ack_event+0x26>
 800d1ae:	bf00      	nop
 800d1b0:	20000610 	.word	0x20000610
 800d1b4:	08015da4 	.word	0x08015da4
 800d1b8:	08015d10 	.word	0x08015d10
 800d1bc:	08015dc0 	.word	0x08015dc0

0800d1c0 <acc_sensor_protocol_a121_get_event>:
 800d1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	2400      	movs	r4, #0
 800d1c6:	4615      	mov	r5, r2
 800d1c8:	f8ad 400e 	strh.w	r4, [sp, #14]
 800d1cc:	2a00      	cmp	r2, #0
 800d1ce:	d03d      	beq.n	800d24c <acc_sensor_protocol_a121_get_event+0x8c>
 800d1d0:	2901      	cmp	r1, #1
 800d1d2:	4607      	mov	r7, r0
 800d1d4:	d028      	beq.n	800d228 <acc_sensor_protocol_a121_get_event+0x68>
 800d1d6:	2902      	cmp	r1, #2
 800d1d8:	d11d      	bne.n	800d216 <acc_sensor_protocol_a121_get_event+0x56>
 800d1da:	2132      	movs	r1, #50	@ 0x32
 800d1dc:	2401      	movs	r4, #1
 800d1de:	f10d 020e 	add.w	r2, sp, #14
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	f001 fce8 	bl	800ebb8 <acc_sensor_reg_read>
 800d1e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d1ec:	806b      	strh	r3, [r5, #2]
 800d1ee:	f003 0607 	and.w	r6, r3, #7
 800d1f2:	2e01      	cmp	r6, #1
 800d1f4:	802e      	strh	r6, [r5, #0]
 800d1f6:	d033      	beq.n	800d260 <acc_sensor_protocol_a121_get_event+0xa0>
 800d1f8:	f013 0f06 	tst.w	r3, #6
 800d1fc:	d117      	bne.n	800d22e <acc_sensor_protocol_a121_get_event+0x6e>
 800d1fe:	b9ce      	cbnz	r6, 800d234 <acc_sensor_protocol_a121_get_event+0x74>
 800d200:	4a1d      	ldr	r2, [pc, #116]	@ (800d278 <acc_sensor_protocol_a121_get_event+0xb8>)
 800d202:	9700      	str	r7, [sp, #0]
 800d204:	6914      	ldr	r4, [r2, #16]
 800d206:	491d      	ldr	r1, [pc, #116]	@ (800d27c <acc_sensor_protocol_a121_get_event+0xbc>)
 800d208:	4a1d      	ldr	r2, [pc, #116]	@ (800d280 <acc_sensor_protocol_a121_get_event+0xc0>)
 800d20a:	4630      	mov	r0, r6
 800d20c:	47a0      	blx	r4
 800d20e:	4634      	mov	r4, r6
 800d210:	4620      	mov	r0, r4
 800d212:	b005      	add	sp, #20
 800d214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d216:	4b18      	ldr	r3, [pc, #96]	@ (800d278 <acc_sensor_protocol_a121_get_event+0xb8>)
 800d218:	4918      	ldr	r1, [pc, #96]	@ (800d27c <acc_sensor_protocol_a121_get_event+0xbc>)
 800d21a:	691e      	ldr	r6, [r3, #16]
 800d21c:	4a19      	ldr	r2, [pc, #100]	@ (800d284 <acc_sensor_protocol_a121_get_event+0xc4>)
 800d21e:	4603      	mov	r3, r0
 800d220:	4620      	mov	r0, r4
 800d222:	47b0      	blx	r6
 800d224:	4621      	mov	r1, r4
 800d226:	e7da      	b.n	800d1de <acc_sensor_protocol_a121_get_event+0x1e>
 800d228:	460c      	mov	r4, r1
 800d22a:	2133      	movs	r1, #51	@ 0x33
 800d22c:	e7d7      	b.n	800d1de <acc_sensor_protocol_a121_get_event+0x1e>
 800d22e:	3e02      	subs	r6, #2
 800d230:	2e01      	cmp	r6, #1
 800d232:	d9ed      	bls.n	800d210 <acc_sensor_protocol_a121_get_event+0x50>
 800d234:	4a10      	ldr	r2, [pc, #64]	@ (800d278 <acc_sensor_protocol_a121_get_event+0xb8>)
 800d236:	9700      	str	r7, [sp, #0]
 800d238:	6914      	ldr	r4, [r2, #16]
 800d23a:	4910      	ldr	r1, [pc, #64]	@ (800d27c <acc_sensor_protocol_a121_get_event+0xbc>)
 800d23c:	4a12      	ldr	r2, [pc, #72]	@ (800d288 <acc_sensor_protocol_a121_get_event+0xc8>)
 800d23e:	2000      	movs	r0, #0
 800d240:	47a0      	blx	r4
 800d242:	2400      	movs	r4, #0
 800d244:	4620      	mov	r0, r4
 800d246:	802c      	strh	r4, [r5, #0]
 800d248:	b005      	add	sp, #20
 800d24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d24c:	4b0a      	ldr	r3, [pc, #40]	@ (800d278 <acc_sensor_protocol_a121_get_event+0xb8>)
 800d24e:	4a0f      	ldr	r2, [pc, #60]	@ (800d28c <acc_sensor_protocol_a121_get_event+0xcc>)
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	490a      	ldr	r1, [pc, #40]	@ (800d27c <acc_sensor_protocol_a121_get_event+0xbc>)
 800d254:	4628      	mov	r0, r5
 800d256:	4798      	blx	r3
 800d258:	462c      	mov	r4, r5
 800d25a:	4620      	mov	r0, r4
 800d25c:	b005      	add	sp, #20
 800d25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d260:	4a05      	ldr	r2, [pc, #20]	@ (800d278 <acc_sensor_protocol_a121_get_event+0xb8>)
 800d262:	9700      	str	r7, [sp, #0]
 800d264:	6914      	ldr	r4, [r2, #16]
 800d266:	4905      	ldr	r1, [pc, #20]	@ (800d27c <acc_sensor_protocol_a121_get_event+0xbc>)
 800d268:	4a09      	ldr	r2, [pc, #36]	@ (800d290 <acc_sensor_protocol_a121_get_event+0xd0>)
 800d26a:	2000      	movs	r0, #0
 800d26c:	47a0      	blx	r4
 800d26e:	2400      	movs	r4, #0
 800d270:	4620      	mov	r0, r4
 800d272:	b005      	add	sp, #20
 800d274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d276:	bf00      	nop
 800d278:	20000610 	.word	0x20000610
 800d27c:	08015d10 	.word	0x08015d10
 800d280:	08015e08 	.word	0x08015e08
 800d284:	08015da4 	.word	0x08015da4
 800d288:	08015e6c 	.word	0x08015e6c
 800d28c:	08015df4 	.word	0x08015df4
 800d290:	08015e38 	.word	0x08015e38

0800d294 <acc_sensor_protocol_a121_is_handshake>:
 800d294:	8800      	ldrh	r0, [r0, #0]
 800d296:	f1a0 0003 	sub.w	r0, r0, #3
 800d29a:	fab0 f080 	clz	r0, r0
 800d29e:	0940      	lsrs	r0, r0, #5
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop

0800d2a4 <acc_sensor_protocol_a121_is_done>:
 800d2a4:	8800      	ldrh	r0, [r0, #0]
 800d2a6:	f1a0 0002 	sub.w	r0, r0, #2
 800d2aa:	fab0 f080 	clz	r0, r0
 800d2ae:	0940      	lsrs	r0, r0, #5
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop

0800d2b4 <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800d2b4:	8840      	ldrh	r0, [r0, #2]
 800d2b6:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800d2ba:	4770      	bx	lr

0800d2bc <acc_sensor_protocol_a121_check_asic_id>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	2300      	movs	r3, #0
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	f10d 0206 	add.w	r2, sp, #6
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	f001 fc72 	bl	800ebb8 <acc_sensor_reg_read>
 800d2d4:	480f      	ldr	r0, [pc, #60]	@ (800d314 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800d2d6:	f001 fe1d 	bl	800ef14 <acc_diagnostic_log_set_scope>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	480e      	ldr	r0, [pc, #56]	@ (800d318 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800d2de:	f001 fe29 	bl	800ef34 <acc_diagnostic_log_scalar>
 800d2e2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800d2e6:	480b      	ldr	r0, [pc, #44]	@ (800d314 <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800d2e8:	f001 fe24 	bl	800ef34 <acc_diagnostic_log_scalar>
 800d2ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d2f0:	f241 2210 	movw	r2, #4624	@ 0x1210
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	bf0c      	ite	eq
 800d2f8:	2401      	moveq	r4, #1
 800d2fa:	2400      	movne	r4, #0
 800d2fc:	d006      	beq.n	800d30c <acc_sensor_protocol_a121_check_asic_id+0x50>
 800d2fe:	b92d      	cbnz	r5, 800d30c <acc_sensor_protocol_a121_check_asic_id+0x50>
 800d300:	4906      	ldr	r1, [pc, #24]	@ (800d31c <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800d302:	4a07      	ldr	r2, [pc, #28]	@ (800d320 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800d304:	690e      	ldr	r6, [r1, #16]
 800d306:	4907      	ldr	r1, [pc, #28]	@ (800d324 <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800d308:	4628      	mov	r0, r5
 800d30a:	47b0      	blx	r6
 800d30c:	4620      	mov	r0, r4
 800d30e:	b002      	add	sp, #8
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	bf00      	nop
 800d314:	08015ea0 	.word	0x08015ea0
 800d318:	08015530 	.word	0x08015530
 800d31c:	20000610 	.word	0x20000610
 800d320:	08015ea8 	.word	0x08015ea8
 800d324:	08015d10 	.word	0x08015d10

0800d328 <acc_sensor_protocol_a121_hibernate_off>:
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	2203      	movs	r2, #3
 800d32e:	460e      	mov	r6, r1
 800d330:	2100      	movs	r1, #0
 800d332:	460d      	mov	r5, r1
 800d334:	4604      	mov	r4, r0
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	f240 1349 	movw	r3, #329	@ 0x149
 800d33c:	f001 fc62 	bl	800ec04 <acc_sensor_reg_field_write>
 800d340:	4620      	mov	r0, r4
 800d342:	f240 1349 	movw	r3, #329	@ 0x149
 800d346:	2204      	movs	r2, #4
 800d348:	2102      	movs	r1, #2
 800d34a:	9500      	str	r5, [sp, #0]
 800d34c:	f001 fc5a 	bl	800ec04 <acc_sensor_reg_field_write>
 800d350:	4620      	mov	r0, r4
 800d352:	f240 1349 	movw	r3, #329	@ 0x149
 800d356:	2210      	movs	r2, #16
 800d358:	2104      	movs	r1, #4
 800d35a:	9500      	str	r5, [sp, #0]
 800d35c:	f001 fc52 	bl	800ec04 <acc_sensor_reg_field_write>
 800d360:	4620      	mov	r0, r4
 800d362:	f240 1349 	movw	r3, #329	@ 0x149
 800d366:	2220      	movs	r2, #32
 800d368:	2105      	movs	r1, #5
 800d36a:	9500      	str	r5, [sp, #0]
 800d36c:	f001 fc4a 	bl	800ec04 <acc_sensor_reg_field_write>
 800d370:	9500      	str	r5, [sp, #0]
 800d372:	4620      	mov	r0, r4
 800d374:	f240 1349 	movw	r3, #329	@ 0x149
 800d378:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800d37c:	2106      	movs	r1, #6
 800d37e:	f001 fc41 	bl	800ec04 <acc_sensor_reg_field_write>
 800d382:	b90e      	cbnz	r6, 800d388 <acc_sensor_protocol_a121_hibernate_off+0x60>
 800d384:	b002      	add	sp, #8
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	4620      	mov	r0, r4
 800d38a:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800d38e:	2131      	movs	r1, #49	@ 0x31
 800d390:	b002      	add	sp, #8
 800d392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d396:	f001 bc25 	b.w	800ebe4 <acc_sensor_reg_write>
 800d39a:	bf00      	nop

0800d39c <acc_sensor_protocol_a121_is_hibernate>:
 800d39c:	b500      	push	{lr}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f10d 0206 	add.w	r2, sp, #6
 800d3a6:	2131      	movs	r1, #49	@ 0x31
 800d3a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3ac:	f001 fc04 	bl	800ebb8 <acc_sensor_reg_read>
 800d3b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800d3b4:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800d3b8:	1ac0      	subs	r0, r0, r3
 800d3ba:	fab0 f080 	clz	r0, r0
 800d3be:	0940      	lsrs	r0, r0, #5
 800d3c0:	b003      	add	sp, #12
 800d3c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3c6:	bf00      	nop

0800d3c8 <acc_sensor_protocol_a121_reconfigure>:
 800d3c8:	b508      	push	{r3, lr}
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	2180      	movs	r1, #128	@ 0x80
 800d3ce:	f001 fc09 	bl	800ebe4 <acc_sensor_reg_write>
 800d3d2:	2001      	movs	r0, #1
 800d3d4:	bd08      	pop	{r3, pc}
 800d3d6:	bf00      	nop

0800d3d8 <get_pll_freq>:
 800d3d8:	b508      	push	{r3, lr}
 800d3da:	ed2d 8b02 	vpush	{d8}
 800d3de:	f7ff f801 	bl	800c3e4 <acc_rss_integration_get_sensor_reference_frequency>
 800d3e2:	ee07 0a90 	vmov	s15, r0
 800d3e6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800d3ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ee:	f001 fd31 	bl	800ee54 <acc_cpd_pll_divisors_ref_divisor>
 800d3f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d3f6:	ecbd 8b02 	vpop	{d8}
 800d3fa:	bd08      	pop	{r3, pc}

0800d3fc <acc_translation_a121_points_to_meter>:
 800d3fc:	b508      	push	{r3, lr}
 800d3fe:	ed2d 8b02 	vpush	{d8}
 800d402:	ee08 0a10 	vmov	s16, r0
 800d406:	f7ff ffe7 	bl	800d3d8 <get_pll_freq>
 800d40a:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 800d40e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d416:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d41a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800d41e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800d438 <acc_translation_a121_points_to_meter+0x3c>
 800d422:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d426:	ecbd 8b02 	vpop	{d8}
 800d42a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d42e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800d432:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d436:	bd08      	pop	{r3, pc}
 800d438:	4d8ef3c2 	.word	0x4d8ef3c2

0800d43c <acc_translation_a121_profile_to_pulse_params>:
 800d43c:	2300      	movs	r3, #0
 800d43e:	3801      	subs	r0, #1
 800d440:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800d444:	60cb      	str	r3, [r1, #12]
 800d446:	2804      	cmp	r0, #4
 800d448:	d82e      	bhi.n	800d4a8 <acc_translation_a121_profile_to_pulse_params+0x6c>
 800d44a:	e8df f000 	tbb	[pc, r0]
 800d44e:	160c      	.short	0x160c
 800d450:	2925      	.short	0x2925
 800d452:	03          	.byte	0x03
 800d453:	00          	.byte	0x00
 800d454:	4b17      	ldr	r3, [pc, #92]	@ (800d4b4 <acc_translation_a121_profile_to_pulse_params+0x78>)
 800d456:	4a18      	ldr	r2, [pc, #96]	@ (800d4b8 <acc_translation_a121_profile_to_pulse_params+0x7c>)
 800d458:	2000      	movs	r0, #0
 800d45a:	7008      	strb	r0, [r1, #0]
 800d45c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d460:	61ca      	str	r2, [r1, #28]
 800d462:	2001      	movs	r0, #1
 800d464:	4770      	bx	lr
 800d466:	4b15      	ldr	r3, [pc, #84]	@ (800d4bc <acc_translation_a121_profile_to_pulse_params+0x80>)
 800d468:	2200      	movs	r2, #0
 800d46a:	700a      	strb	r2, [r1, #0]
 800d46c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d470:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d474:	61ca      	str	r2, [r1, #28]
 800d476:	2001      	movs	r0, #1
 800d478:	4770      	bx	lr
 800d47a:	b430      	push	{r4, r5}
 800d47c:	4b10      	ldr	r3, [pc, #64]	@ (800d4c0 <acc_translation_a121_profile_to_pulse_params+0x84>)
 800d47e:	4c11      	ldr	r4, [pc, #68]	@ (800d4c4 <acc_translation_a121_profile_to_pulse_params+0x88>)
 800d480:	61cc      	str	r4, [r1, #28]
 800d482:	2001      	movs	r0, #1
 800d484:	2596      	movs	r5, #150	@ 0x96
 800d486:	22fa      	movs	r2, #250	@ 0xfa
 800d488:	60cd      	str	r5, [r1, #12]
 800d48a:	e9c1 2201 	strd	r2, r2, [r1, #4]
 800d48e:	bc30      	pop	{r4, r5}
 800d490:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d494:	7008      	strb	r0, [r1, #0]
 800d496:	4770      	bx	lr
 800d498:	4b0b      	ldr	r3, [pc, #44]	@ (800d4c8 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800d49a:	4a0c      	ldr	r2, [pc, #48]	@ (800d4cc <acc_translation_a121_profile_to_pulse_params+0x90>)
 800d49c:	2000      	movs	r0, #0
 800d49e:	e7dc      	b.n	800d45a <acc_translation_a121_profile_to_pulse_params+0x1e>
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d0 <acc_translation_a121_profile_to_pulse_params+0x94>)
 800d4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d4d4 <acc_translation_a121_profile_to_pulse_params+0x98>)
 800d4a4:	2000      	movs	r0, #0
 800d4a6:	e7d8      	b.n	800d45a <acc_translation_a121_profile_to_pulse_params+0x1e>
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e9c1 0005 	strd	r0, r0, [r1, #20]
 800d4ae:	7008      	strb	r0, [r1, #0]
 800d4b0:	61c8      	str	r0, [r1, #28]
 800d4b2:	4770      	bx	lr
 800d4b4:	00050008 	.word	0x00050008
 800d4b8:	0002000b 	.word	0x0002000b
 800d4bc:	00010002 	.word	0x00010002
 800d4c0:	00010008 	.word	0x00010008
 800d4c4:	00030002 	.word	0x00030002
 800d4c8:	00020008 	.word	0x00020008
 800d4cc:	00020004 	.word	0x00020004
 800d4d0:	00030008 	.word	0x00030008
 800d4d4:	00020006 	.word	0x00020006

0800d4d8 <acc_translation_a121_profile_to_start_point_offset>:
 800d4d8:	3801      	subs	r0, #1
 800d4da:	2804      	cmp	r0, #4
 800d4dc:	d818      	bhi.n	800d510 <acc_translation_a121_profile_to_start_point_offset+0x38>
 800d4de:	e8df f000 	tbb	[pc, r0]
 800d4e2:	0812      	.short	0x0812
 800d4e4:	0d03      	.short	0x0d03
 800d4e6:	03          	.byte	0x03
 800d4e7:	00          	.byte	0x00
 800d4e8:	f06f 030c 	mvn.w	r3, #12
 800d4ec:	600b      	str	r3, [r1, #0]
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	4770      	bx	lr
 800d4f2:	f06f 0306 	mvn.w	r3, #6
 800d4f6:	600b      	str	r3, [r1, #0]
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	4770      	bx	lr
 800d4fc:	f06f 030f 	mvn.w	r3, #15
 800d500:	600b      	str	r3, [r1, #0]
 800d502:	2001      	movs	r0, #1
 800d504:	4770      	bx	lr
 800d506:	f06f 030b 	mvn.w	r3, #11
 800d50a:	600b      	str	r3, [r1, #0]
 800d50c:	2001      	movs	r0, #1
 800d50e:	4770      	bx	lr
 800d510:	2000      	movs	r0, #0
 800d512:	6008      	str	r0, [r1, #0]
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop

0800d518 <acc_translation_a121_set_calibration_params>:
 800d518:	b530      	push	{r4, r5, lr}
 800d51a:	460c      	mov	r4, r1
 800d51c:	f8b0 2080 	ldrh.w	r2, [r0, #128]	@ 0x80
 800d520:	f8b0 3082 	ldrh.w	r3, [r0, #130]	@ 0x82
 800d524:	f8b0 507e 	ldrh.w	r5, [r0, #126]	@ 0x7e
 800d528:	f8b0 1084 	ldrh.w	r1, [r0, #132]	@ 0x84
 800d52c:	8062      	strh	r2, [r4, #2]
 800d52e:	8842      	ldrh	r2, [r0, #2]
 800d530:	80a3      	strh	r3, [r4, #4]
 800d532:	8883      	ldrh	r3, [r0, #4]
 800d534:	8025      	strh	r5, [r4, #0]
 800d536:	b087      	sub	sp, #28
 800d538:	88c5      	ldrh	r5, [r0, #6]
 800d53a:	80e1      	strh	r1, [r4, #6]
 800d53c:	8941      	ldrh	r1, [r0, #10]
 800d53e:	8122      	strh	r2, [r4, #8]
 800d540:	8c02      	ldrh	r2, [r0, #32]
 800d542:	8163      	strh	r3, [r4, #10]
 800d544:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800d546:	8263      	strh	r3, [r4, #18]
 800d548:	81a5      	strh	r5, [r4, #12]
 800d54a:	81e1      	strh	r1, [r4, #14]
 800d54c:	8222      	strh	r2, [r4, #16]
 800d54e:	8900      	ldrh	r0, [r0, #8]
 800d550:	466a      	mov	r2, sp
 800d552:	2160      	movs	r1, #96	@ 0x60
 800d554:	f001 fc86 	bl	800ee64 <acc_dll_calculate_area_settings>
 800d558:	f8bd 1000 	ldrh.w	r1, [sp]
 800d55c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d560:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d564:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800d568:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800d56c:	82a1      	strh	r1, [r4, #20]
 800d56e:	82e2      	strh	r2, [r4, #22]
 800d570:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800d574:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d578:	8323      	strh	r3, [r4, #24]
 800d57a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d57e:	8365      	strh	r5, [r4, #26]
 800d580:	83a0      	strh	r0, [r4, #28]
 800d582:	83e1      	strh	r1, [r4, #30]
 800d584:	8422      	strh	r2, [r4, #32]
 800d586:	8463      	strh	r3, [r4, #34]	@ 0x22
 800d588:	b007      	add	sp, #28
 800d58a:	bd30      	pop	{r4, r5, pc}

0800d58c <acc_translation_a121_set_gain_params>:
 800d58c:	7a83      	ldrb	r3, [r0, #10]
 800d58e:	2b17      	cmp	r3, #23
 800d590:	d80e      	bhi.n	800d5b0 <acc_translation_a121_set_gain_params+0x24>
 800d592:	2b09      	cmp	r3, #9
 800d594:	d80e      	bhi.n	800d5b4 <acc_translation_a121_set_gain_params+0x28>
 800d596:	f1c3 0309 	rsb	r3, r3, #9
 800d59a:	2015      	movs	r0, #21
 800d59c:	8053      	strh	r3, [r2, #2]
 800d59e:	8010      	strh	r0, [r2, #0]
 800d5a0:	b199      	cbz	r1, 800d5ca <acc_translation_a121_set_gain_params+0x3e>
 800d5a2:	8853      	ldrh	r3, [r2, #2]
 800d5a4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d5a8:	2001      	movs	r0, #1
 800d5aa:	898b      	ldrh	r3, [r1, #12]
 800d5ac:	8093      	strh	r3, [r2, #4]
 800d5ae:	4770      	bx	lr
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	4770      	bx	lr
 800d5b4:	2b10      	cmp	r3, #16
 800d5b6:	bf94      	ite	ls
 800d5b8:	f1c3 031e 	rsbls	r3, r3, #30
 800d5bc:	f1c3 0317 	rsbhi	r3, r3, #23
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	8013      	strh	r3, [r2, #0]
 800d5c4:	8050      	strh	r0, [r2, #2]
 800d5c6:	2900      	cmp	r1, #0
 800d5c8:	d1eb      	bne.n	800d5a2 <acc_translation_a121_set_gain_params+0x16>
 800d5ca:	8091      	strh	r1, [r2, #4]
 800d5cc:	2001      	movs	r0, #1
 800d5ce:	4770      	bx	lr

0800d5d0 <acc_translation_a121_set_pulse_length_params>:
 800d5d0:	8a83      	ldrh	r3, [r0, #20]
 800d5d2:	2b08      	cmp	r3, #8
 800d5d4:	d802      	bhi.n	800d5dc <acc_translation_a121_set_pulse_length_params+0xc>
 800d5d6:	8ac2      	ldrh	r2, [r0, #22]
 800d5d8:	2a07      	cmp	r2, #7
 800d5da:	d901      	bls.n	800d5e0 <acc_translation_a121_set_pulse_length_params+0x10>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	4770      	bx	lr
 800d5e0:	b470      	push	{r4, r5, r6}
 800d5e2:	8b05      	ldrh	r5, [r0, #24]
 800d5e4:	2d08      	cmp	r5, #8
 800d5e6:	d902      	bls.n	800d5ee <acc_translation_a121_set_pulse_length_params+0x1e>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	bc70      	pop	{r4, r5, r6}
 800d5ec:	4770      	bx	lr
 800d5ee:	8b44      	ldrh	r4, [r0, #26]
 800d5f0:	2c08      	cmp	r4, #8
 800d5f2:	d8f9      	bhi.n	800d5e8 <acc_translation_a121_set_pulse_length_params+0x18>
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	1e66      	subs	r6, r4, #1
 800d5f8:	fa00 f202 	lsl.w	r2, r0, r2
 800d5fc:	3a01      	subs	r2, #1
 800d5fe:	fa00 f404 	lsl.w	r4, r0, r4
 800d602:	fa00 f606 	lsl.w	r6, r0, r6
 800d606:	b292      	uxth	r2, r2
 800d608:	3c01      	subs	r4, #1
 800d60a:	3e01      	subs	r6, #1
 800d60c:	01a4      	lsls	r4, r4, #6
 800d60e:	0276      	lsls	r6, r6, #9
 800d610:	800b      	strh	r3, [r1, #0]
 800d612:	0193      	lsls	r3, r2, #6
 800d614:	0252      	lsls	r2, r2, #9
 800d616:	804d      	strh	r5, [r1, #2]
 800d618:	808b      	strh	r3, [r1, #4]
 800d61a:	810a      	strh	r2, [r1, #8]
 800d61c:	80cc      	strh	r4, [r1, #6]
 800d61e:	814e      	strh	r6, [r1, #10]
 800d620:	e7e3      	b.n	800d5ea <acc_translation_a121_set_pulse_length_params+0x1a>
 800d622:	bf00      	nop

0800d624 <acc_translation_a121_set_range_params>:
 800d624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d628:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800d62c:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800d630:	888d      	ldrh	r5, [r1, #4]
 800d632:	b08d      	sub	sp, #52	@ 0x34
 800d634:	f1ba 0f18 	cmp.w	sl, #24
 800d638:	9102      	str	r1, [sp, #8]
 800d63a:	4691      	mov	r9, r2
 800d63c:	461c      	mov	r4, r3
 800d63e:	f240 812e 	bls.w	800d89e <acc_translation_a121_set_range_params+0x27a>
 800d642:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800d646:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800d64a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800d64e:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800d652:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800d656:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800d660:	4293      	cmp	r3, r2
 800d662:	f240 8141 	bls.w	800d8e8 <acc_translation_a121_set_range_params+0x2c4>
 800d666:	4bb3      	ldr	r3, [pc, #716]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d668:	4ab3      	ldr	r2, [pc, #716]	@ (800d938 <acc_translation_a121_set_range_params+0x314>)
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	49b3      	ldr	r1, [pc, #716]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d66e:	2000      	movs	r0, #0
 800d670:	4606      	mov	r6, r0
 800d672:	9001      	str	r0, [sp, #4]
 800d674:	f04f 0801 	mov.w	r8, #1
 800d678:	4798      	blx	r3
 800d67a:	46c3      	mov	fp, r8
 800d67c:	9604      	str	r6, [sp, #16]
 800d67e:	2f00      	cmp	r7, #0
 800d680:	f040 812f 	bne.w	800d8e2 <acc_translation_a121_set_range_params+0x2be>
 800d684:	2204      	movs	r2, #4
 800d686:	9b02      	ldr	r3, [sp, #8]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4499      	add	r9, r3
 800d68c:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800d690:	fb12 f205 	smulbb	r2, r2, r5
 800d694:	3328      	adds	r3, #40	@ 0x28
 800d696:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d69a:	3d01      	subs	r5, #1
 800d69c:	b292      	uxth	r2, r2
 800d69e:	428b      	cmp	r3, r1
 800d6a0:	9205      	str	r2, [sp, #20]
 800d6a2:	fb0a 9a05 	mla	sl, sl, r5, r9
 800d6a6:	d906      	bls.n	800d6b6 <acc_translation_a121_set_range_params+0x92>
 800d6a8:	4ba2      	ldr	r3, [pc, #648]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d6aa:	4aa5      	ldr	r2, [pc, #660]	@ (800d940 <acc_translation_a121_set_range_params+0x31c>)
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	49a3      	ldr	r1, [pc, #652]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	4798      	blx	r3
 800d6b4:	2700      	movs	r7, #0
 800d6b6:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800d6ba:	3328      	adds	r3, #40	@ 0x28
 800d6bc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d906      	bls.n	800d6d2 <acc_translation_a121_set_range_params+0xae>
 800d6c4:	4b9b      	ldr	r3, [pc, #620]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d6c6:	4a9f      	ldr	r2, [pc, #636]	@ (800d944 <acc_translation_a121_set_range_params+0x320>)
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	499c      	ldr	r1, [pc, #624]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	4798      	blx	r3
 800d6d0:	2700      	movs	r7, #0
 800d6d2:	f1b9 0f00 	cmp.w	r9, #0
 800d6d6:	f2c0 817c 	blt.w	800d9d2 <acc_translation_a121_set_range_params+0x3ae>
 800d6da:	4b9b      	ldr	r3, [pc, #620]	@ (800d948 <acc_translation_a121_set_range_params+0x324>)
 800d6dc:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800d6e0:	fb83 1309 	smull	r1, r3, r3, r9
 800d6e4:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800d6e8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ec:	b21b      	sxth	r3, r3
 800d6ee:	f2c0 817e 	blt.w	800d9ee <acc_translation_a121_set_range_params+0x3ca>
 800d6f2:	4995      	ldr	r1, [pc, #596]	@ (800d948 <acc_translation_a121_set_range_params+0x324>)
 800d6f4:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800d6f8:	fb81 010a 	smull	r0, r1, r1, sl
 800d6fc:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800d700:	b209      	sxth	r1, r1
 800d702:	4891      	ldr	r0, [pc, #580]	@ (800d948 <acc_translation_a121_set_range_params+0x324>)
 800d704:	fb80 5009 	smull	r5, r0, r0, r9
 800d708:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	1ac9      	subs	r1, r1, r3
 800d710:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d714:	b288      	uxth	r0, r1
 800d716:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800d71a:	b209      	sxth	r1, r1
 800d71c:	fbb0 fbfb 	udiv	fp, r0, fp
 800d720:	f10b 0b01 	add.w	fp, fp, #1
 800d724:	9106      	str	r1, [sp, #24]
 800d726:	fa1f fb8b 	uxth.w	fp, fp
 800d72a:	f04f 0118 	mov.w	r1, #24
 800d72e:	fbb1 f1f8 	udiv	r1, r1, r8
 800d732:	f100 816e 	bmi.w	800da12 <acc_translation_a121_set_range_params+0x3ee>
 800d736:	b210      	sxth	r0, r2
 800d738:	b292      	uxth	r2, r2
 800d73a:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800d948 <acc_translation_a121_set_range_params+0x324>
 800d73e:	fbb2 f5f8 	udiv	r5, r2, r8
 800d742:	fb89 690a 	smull	r6, r9, r9, sl
 800d746:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800d74a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800d74e:	fb08 2515 	mls	r5, r8, r5, r2
 800d752:	b2ad      	uxth	r5, r5
 800d754:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800d758:	9500      	str	r5, [sp, #0]
 800d75a:	f100 8153 	bmi.w	800da04 <acc_translation_a121_set_range_params+0x3e0>
 800d75e:	fa0f f589 	sxth.w	r5, r9
 800d762:	950a      	str	r5, [sp, #40]	@ 0x28
 800d764:	fa1f f989 	uxth.w	r9, r9
 800d768:	9d00      	ldr	r5, [sp, #0]
 800d76a:	3901      	subs	r1, #1
 800d76c:	b289      	uxth	r1, r1
 800d76e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d770:	f1bb 0f01 	cmp.w	fp, #1
 800d774:	fb11 5108 	smlabb	r1, r1, r8, r5
 800d778:	b289      	uxth	r1, r1
 800d77a:	f000 80f3 	beq.w	800d964 <acc_translation_a121_set_range_params+0x340>
 800d77e:	9d00      	ldr	r5, [sp, #0]
 800d780:	ebb9 0901 	subs.w	r9, r9, r1
 800d784:	bf18      	it	ne
 800d786:	f04f 0901 	movne.w	r9, #1
 800d78a:	4295      	cmp	r5, r2
 800d78c:	bf14      	ite	ne
 800d78e:	2501      	movne	r5, #1
 800d790:	2500      	moveq	r5, #0
 800d792:	ebab 0505 	sub.w	r5, fp, r5
 800d796:	eba5 0509 	sub.w	r5, r5, r9
 800d79a:	fa1f f689 	uxth.w	r6, r9
 800d79e:	b2ad      	uxth	r5, r5
 800d7a0:	9607      	str	r6, [sp, #28]
 800d7a2:	f040 80e6 	bne.w	800d972 <acc_translation_a121_set_range_params+0x34e>
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	9108      	str	r1, [sp, #32]
 800d7aa:	9103      	str	r1, [sp, #12]
 800d7ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d7ae:	9900      	ldr	r1, [sp, #0]
 800d7b0:	0092      	lsls	r2, r2, #2
 800d7b2:	0089      	lsls	r1, r1, #2
 800d7b4:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800d7b6:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800d7b8:	2f00      	cmp	r7, #0
 800d7ba:	f000 80b4 	beq.w	800d926 <acc_translation_a121_set_range_params+0x302>
 800d7be:	9a02      	ldr	r2, [sp, #8]
 800d7c0:	7b92      	ldrb	r2, [r2, #14]
 800d7c2:	2a05      	cmp	r2, #5
 800d7c4:	f200 812a 	bhi.w	800da1c <acc_translation_a121_set_range_params+0x3f8>
 800d7c8:	4960      	ldr	r1, [pc, #384]	@ (800d94c <acc_translation_a121_set_range_params+0x328>)
 800d7ca:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800d7ce:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800d7d2:	f1aa 0003 	sub.w	r0, sl, #3
 800d7d6:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800d7da:	3903      	subs	r1, #3
 800d7dc:	b289      	uxth	r1, r1
 800d7de:	b280      	uxth	r0, r0
 800d7e0:	fa1f fb8b 	uxth.w	fp, fp
 800d7e4:	f1aa 0a14 	sub.w	sl, sl, #20
 800d7e8:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800d7ec:	445e      	add	r6, fp
 800d7ee:	9a06      	ldr	r2, [sp, #24]
 800d7f0:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800d7f2:	b233      	sxth	r3, r6
 800d7f4:	1a9a      	subs	r2, r3, r2
 800d7f6:	2a29      	cmp	r2, #41	@ 0x29
 800d7f8:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800d7fa:	b2b6      	uxth	r6, r6
 800d7fc:	dc08      	bgt.n	800d810 <acc_translation_a121_set_range_params+0x1ec>
 800d7fe:	494d      	ldr	r1, [pc, #308]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d800:	4a53      	ldr	r2, [pc, #332]	@ (800d950 <acc_translation_a121_set_range_params+0x32c>)
 800d802:	690f      	ldr	r7, [r1, #16]
 800d804:	494d      	ldr	r1, [pc, #308]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d806:	9302      	str	r3, [sp, #8]
 800d808:	2000      	movs	r0, #0
 800d80a:	47b8      	blx	r7
 800d80c:	9b02      	ldr	r3, [sp, #8]
 800d80e:	2700      	movs	r7, #0
 800d810:	4553      	cmp	r3, sl
 800d812:	db06      	blt.n	800d822 <acc_translation_a121_set_range_params+0x1fe>
 800d814:	4b47      	ldr	r3, [pc, #284]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d816:	4a4f      	ldr	r2, [pc, #316]	@ (800d954 <acc_translation_a121_set_range_params+0x330>)
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	4948      	ldr	r1, [pc, #288]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	4798      	blx	r3
 800d820:	2700      	movs	r7, #0
 800d822:	9b01      	ldr	r3, [sp, #4]
 800d824:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800d828:	2b2c      	cmp	r3, #44	@ 0x2c
 800d82a:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800d82c:	f240 80c4 	bls.w	800d9b8 <acc_translation_a121_set_range_params+0x394>
 800d830:	2300      	movs	r3, #0
 800d832:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800d836:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d83a:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800d83e:	9b04      	ldr	r3, [sp, #16]
 800d840:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800d844:	9b08      	ldr	r3, [sp, #32]
 800d846:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800d84a:	2d00      	cmp	r5, #0
 800d84c:	f000 809a 	beq.w	800d984 <acc_translation_a121_set_range_params+0x360>
 800d850:	2301      	movs	r3, #1
 800d852:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800d856:	9b03      	ldr	r3, [sp, #12]
 800d858:	9a07      	ldr	r2, [sp, #28]
 800d85a:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 80fc 	beq.w	800da5c <acc_translation_a121_set_range_params+0x438>
 800d864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d866:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d86c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800d870:	f1b9 0f00 	cmp.w	r9, #0
 800d874:	f000 80ef 	beq.w	800da56 <acc_translation_a121_set_range_params+0x432>
 800d878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d87a:	9a00      	ldr	r2, [sp, #0]
 800d87c:	eba3 0902 	sub.w	r9, r3, r2
 800d880:	fb99 f8f8 	sdiv	r8, r9, r8
 800d884:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800d888:	3d01      	subs	r5, #1
 800d88a:	b2ad      	uxth	r5, r5
 800d88c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d88e:	9a05      	ldr	r2, [sp, #20]
 800d890:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800d894:	4638      	mov	r0, r7
 800d896:	801a      	strh	r2, [r3, #0]
 800d898:	b00d      	add	sp, #52	@ 0x34
 800d89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89e:	f1ba 0f00 	cmp.w	sl, #0
 800d8a2:	f43f aee0 	beq.w	800d666 <acc_translation_a121_set_range_params+0x42>
 800d8a6:	2318      	movs	r3, #24
 800d8a8:	fbb3 f3fa 	udiv	r3, r3, sl
 800d8ac:	fb0a f303 	mul.w	r3, sl, r3
 800d8b0:	f1c3 0318 	rsb	r3, r3, #24
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	9304      	str	r3, [sp, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f47f aed4 	bne.w	800d666 <acc_translation_a121_set_range_params+0x42>
 800d8be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	46d0      	mov	r8, sl
 800d8ca:	f04f 0b01 	mov.w	fp, #1
 800d8ce:	b9d5      	cbnz	r5, 800d906 <acc_translation_a121_set_range_params+0x2e2>
 800d8d0:	4b18      	ldr	r3, [pc, #96]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d8d2:	4a21      	ldr	r2, [pc, #132]	@ (800d958 <acc_translation_a121_set_range_params+0x334>)
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	4919      	ldr	r1, [pc, #100]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d8d8:	4628      	mov	r0, r5
 800d8da:	4798      	blx	r3
 800d8dc:	2f00      	cmp	r7, #0
 800d8de:	f43f aed1 	beq.w	800d684 <acc_translation_a121_set_range_params+0x60>
 800d8e2:	2700      	movs	r7, #0
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	e6ce      	b.n	800d686 <acc_translation_a121_set_range_params+0x62>
 800d8e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d95c <acc_translation_a121_set_range_params+0x338>)
 800d8ea:	fba3 3b0a 	umull	r3, fp, r3, sl
 800d8ee:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800d8f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	235c      	movs	r3, #92	@ 0x5c
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	f04f 0818 	mov.w	r8, #24
 800d902:	2d00      	cmp	r5, #0
 800d904:	d0e4      	beq.n	800d8d0 <acc_translation_a121_set_range_params+0x2ac>
 800d906:	2f00      	cmp	r7, #0
 800d908:	f040 80b2 	bne.w	800da70 <acc_translation_a121_set_range_params+0x44c>
 800d90c:	9b02      	ldr	r3, [sp, #8]
 800d90e:	7b1b      	ldrb	r3, [r3, #12]
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 80c4 	beq.w	800da9e <acc_translation_a121_set_range_params+0x47a>
 800d916:	4b07      	ldr	r3, [pc, #28]	@ (800d934 <acc_translation_a121_set_range_params+0x310>)
 800d918:	4a11      	ldr	r2, [pc, #68]	@ (800d960 <acc_translation_a121_set_range_params+0x33c>)
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	4907      	ldr	r1, [pc, #28]	@ (800d93c <acc_translation_a121_set_range_params+0x318>)
 800d91e:	4638      	mov	r0, r7
 800d920:	4798      	blx	r3
 800d922:	2204      	movs	r2, #4
 800d924:	e6af      	b.n	800d686 <acc_translation_a121_set_range_params+0x62>
 800d926:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800d92a:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800d92e:	213d      	movs	r1, #61	@ 0x3d
 800d930:	207d      	movs	r0, #125	@ 0x7d
 800d932:	e759      	b.n	800d7e8 <acc_translation_a121_set_range_params+0x1c4>
 800d934:	20000610 	.word	0x20000610
 800d938:	08015ec8 	.word	0x08015ec8
 800d93c:	08015edc 	.word	0x08015edc
 800d940:	08015f3c 	.word	0x08015f3c
 800d944:	08015f50 	.word	0x08015f50
 800d948:	2aaaaaab 	.word	0x2aaaaaab
 800d94c:	080161b4 	.word	0x080161b4
 800d950:	08015f84 	.word	0x08015f84
 800d954:	08015fa4 	.word	0x08015fa4
 800d958:	08015ef0 	.word	0x08015ef0
 800d95c:	aaaaaaab 	.word	0xaaaaaaab
 800d960:	08015f04 	.word	0x08015f04
 800d964:	4295      	cmp	r5, r2
 800d966:	f000 808e 	beq.w	800da86 <acc_translation_a121_set_range_params+0x462>
 800d96a:	2500      	movs	r5, #0
 800d96c:	4649      	mov	r1, r9
 800d96e:	9507      	str	r5, [sp, #28]
 800d970:	46a9      	mov	r9, r5
 800d972:	2601      	movs	r6, #1
 800d974:	1a08      	subs	r0, r1, r0
 800d976:	fb90 f0f8 	sdiv	r0, r0, r8
 800d97a:	b281      	uxth	r1, r0
 800d97c:	9608      	str	r6, [sp, #32]
 800d97e:	9603      	str	r6, [sp, #12]
 800d980:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d982:	e714      	b.n	800d7ae <acc_translation_a121_set_range_params+0x18a>
 800d984:	9b07      	ldr	r3, [sp, #28]
 800d986:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800d98a:	9b03      	ldr	r3, [sp, #12]
 800d98c:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800d990:	2b00      	cmp	r3, #0
 800d992:	d06a      	beq.n	800da6a <acc_translation_a121_set_range_params+0x446>
 800d994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d996:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d99a:	2300      	movs	r3, #0
 800d99c:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800d9a0:	f1b9 0f00 	cmp.w	r9, #0
 800d9a4:	d05e      	beq.n	800da64 <acc_translation_a121_set_range_params+0x440>
 800d9a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9a8:	9a00      	ldr	r2, [sp, #0]
 800d9aa:	eba3 0902 	sub.w	r9, r3, r2
 800d9ae:	fb99 f8f8 	sdiv	r8, r9, r8
 800d9b2:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800d9b6:	e769      	b.n	800d88c <acc_translation_a121_set_range_params+0x268>
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	2b1e      	cmp	r3, #30
 800d9bc:	d93e      	bls.n	800da3c <acc_translation_a121_set_range_params+0x418>
 800d9be:	f1a3 021e 	sub.w	r2, r3, #30
 800d9c2:	230f      	movs	r3, #15
 800d9c4:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800d9c8:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800d9cc:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d9d0:	e735      	b.n	800d83e <acc_translation_a121_set_range_params+0x21a>
 800d9d2:	4a36      	ldr	r2, [pc, #216]	@ (800daac <acc_translation_a121_set_range_params+0x488>)
 800d9d4:	ea6f 0309 	mvn.w	r3, r9
 800d9d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9dc:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800d9e0:	f1ba 0f00 	cmp.w	sl, #0
 800d9e4:	b21b      	sxth	r3, r3
 800d9e6:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800d9ea:	f6bf ae82 	bge.w	800d6f2 <acc_translation_a121_set_range_params+0xce>
 800d9ee:	482f      	ldr	r0, [pc, #188]	@ (800daac <acc_translation_a121_set_range_params+0x488>)
 800d9f0:	ea6f 010a 	mvn.w	r1, sl
 800d9f4:	fba0 0101 	umull	r0, r1, r0, r1
 800d9f8:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800d9fc:	b209      	sxth	r1, r1
 800d9fe:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800da02:	e67e      	b.n	800d702 <acc_translation_a121_set_range_params+0xde>
 800da04:	f109 0518 	add.w	r5, r9, #24
 800da08:	fa1f f985 	uxth.w	r9, r5
 800da0c:	b22d      	sxth	r5, r5
 800da0e:	950a      	str	r5, [sp, #40]	@ 0x28
 800da10:	e6aa      	b.n	800d768 <acc_translation_a121_set_range_params+0x144>
 800da12:	f102 0018 	add.w	r0, r2, #24
 800da16:	b282      	uxth	r2, r0
 800da18:	b200      	sxth	r0, r0
 800da1a:	e68e      	b.n	800d73a <acc_translation_a121_set_range_params+0x116>
 800da1c:	4924      	ldr	r1, [pc, #144]	@ (800dab0 <acc_translation_a121_set_range_params+0x48c>)
 800da1e:	4a25      	ldr	r2, [pc, #148]	@ (800dab4 <acc_translation_a121_set_range_params+0x490>)
 800da20:	690e      	ldr	r6, [r1, #16]
 800da22:	4925      	ldr	r1, [pc, #148]	@ (800dab8 <acc_translation_a121_set_range_params+0x494>)
 800da24:	9302      	str	r3, [sp, #8]
 800da26:	2000      	movs	r0, #0
 800da28:	47b0      	blx	r6
 800da2a:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800da2e:	9b02      	ldr	r3, [sp, #8]
 800da30:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800da34:	213d      	movs	r1, #61	@ 0x3d
 800da36:	207d      	movs	r0, #125	@ 0x7d
 800da38:	2700      	movs	r7, #0
 800da3a:	e6d5      	b.n	800d7e8 <acc_translation_a121_set_range_params+0x1c4>
 800da3c:	9b01      	ldr	r3, [sp, #4]
 800da3e:	2b0f      	cmp	r3, #15
 800da40:	d918      	bls.n	800da74 <acc_translation_a121_set_range_params+0x450>
 800da42:	3b0f      	subs	r3, #15
 800da44:	220f      	movs	r2, #15
 800da46:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800da4a:	2300      	movs	r3, #0
 800da4c:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800da50:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800da54:	e6f3      	b.n	800d83e <acc_translation_a121_set_range_params+0x21a>
 800da56:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800da5a:	e715      	b.n	800d888 <acc_translation_a121_set_range_params+0x264>
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800da62:	e702      	b.n	800d86a <acc_translation_a121_set_range_params+0x246>
 800da64:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800da68:	e710      	b.n	800d88c <acc_translation_a121_set_range_params+0x268>
 800da6a:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800da6e:	e794      	b.n	800d99a <acc_translation_a121_set_range_params+0x376>
 800da70:	2202      	movs	r2, #2
 800da72:	e608      	b.n	800d686 <acc_translation_a121_set_range_params+0x62>
 800da74:	2300      	movs	r3, #0
 800da76:	9a01      	ldr	r2, [sp, #4]
 800da78:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800da7c:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800da80:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800da84:	e6db      	b.n	800d83e <acc_translation_a121_set_range_params+0x21a>
 800da86:	4589      	cmp	r9, r1
 800da88:	bf0c      	ite	eq
 800da8a:	2501      	moveq	r5, #1
 800da8c:	2500      	movne	r5, #0
 800da8e:	d108      	bne.n	800daa2 <acc_translation_a121_set_range_params+0x47e>
 800da90:	2100      	movs	r1, #0
 800da92:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800da96:	4689      	mov	r9, r1
 800da98:	9103      	str	r1, [sp, #12]
 800da9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800da9c:	e687      	b.n	800d7ae <acc_translation_a121_set_range_params+0x18a>
 800da9e:	2701      	movs	r7, #1
 800daa0:	e5f0      	b.n	800d684 <acc_translation_a121_set_range_params+0x60>
 800daa2:	2600      	movs	r6, #0
 800daa4:	4649      	mov	r1, r9
 800daa6:	9607      	str	r6, [sp, #28]
 800daa8:	46b1      	mov	r9, r6
 800daaa:	e762      	b.n	800d972 <acc_translation_a121_set_range_params+0x34e>
 800daac:	aaaaaaab 	.word	0xaaaaaaab
 800dab0:	20000610 	.word	0x20000610
 800dab4:	08015f78 	.word	0x08015f78
 800dab8:	08015edc 	.word	0x08015edc

0800dabc <acc_translation_a121_subsweep_translate>:
 800dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800dac4:	4607      	mov	r7, r0
 800dac6:	8908      	ldrh	r0, [r1, #8]
 800dac8:	460e      	mov	r6, r1
 800daca:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800dace:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800dad2:	b08c      	sub	sp, #48	@ 0x30
 800dad4:	f1bc 0f00 	cmp.w	ip, #0
 800dad8:	bf08      	it	eq
 800dada:	4629      	moveq	r1, r5
 800dadc:	b108      	cbz	r0, 800dae2 <acc_translation_a121_subsweep_translate+0x26>
 800dade:	4281      	cmp	r1, r0
 800dae0:	d20a      	bcs.n	800daf8 <acc_translation_a121_subsweep_translate+0x3c>
 800dae2:	4b54      	ldr	r3, [pc, #336]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800dae4:	4a54      	ldr	r2, [pc, #336]	@ (800dc38 <acc_translation_a121_subsweep_translate+0x17c>)
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	4954      	ldr	r1, [pc, #336]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800daea:	2000      	movs	r0, #0
 800daec:	4798      	blx	r3
 800daee:	2500      	movs	r5, #0
 800daf0:	4628      	mov	r0, r5
 800daf2:	b00c      	add	sp, #48	@ 0x30
 800daf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf8:	461c      	mov	r4, r3
 800dafa:	7b73      	ldrb	r3, [r6, #13]
 800dafc:	4690      	mov	r8, r2
 800dafe:	b97b      	cbnz	r3, 800db20 <acc_translation_a121_subsweep_translate+0x64>
 800db00:	7bf0      	ldrb	r0, [r6, #15]
 800db02:	7bb5      	ldrb	r5, [r6, #14]
 800db04:	2d00      	cmp	r5, #0
 800db06:	d12d      	bne.n	800db64 <acc_translation_a121_subsweep_translate+0xa8>
 800db08:	2801      	cmp	r0, #1
 800db0a:	d00f      	beq.n	800db2c <acc_translation_a121_subsweep_translate+0x70>
 800db0c:	4b49      	ldr	r3, [pc, #292]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800db0e:	4a4c      	ldr	r2, [pc, #304]	@ (800dc40 <acc_translation_a121_subsweep_translate+0x184>)
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	494a      	ldr	r1, [pc, #296]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800db14:	4628      	mov	r0, r5
 800db16:	4798      	blx	r3
 800db18:	4628      	mov	r0, r5
 800db1a:	b00c      	add	sp, #48	@ 0x30
 800db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db20:	7bf0      	ldrb	r0, [r6, #15]
 800db22:	2802      	cmp	r0, #2
 800db24:	d1ed      	bne.n	800db02 <acc_translation_a121_subsweep_translate+0x46>
 800db26:	4b43      	ldr	r3, [pc, #268]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800db28:	4a46      	ldr	r2, [pc, #280]	@ (800dc44 <acc_translation_a121_subsweep_translate+0x188>)
 800db2a:	e7dc      	b.n	800dae6 <acc_translation_a121_subsweep_translate+0x2a>
 800db2c:	4b46      	ldr	r3, [pc, #280]	@ (800dc48 <acc_translation_a121_subsweep_translate+0x18c>)
 800db2e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800db30:	9200      	str	r2, [sp, #0]
 800db32:	4631      	mov	r1, r6
 800db34:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800db38:	4638      	mov	r0, r7
 800db3a:	4623      	mov	r3, r4
 800db3c:	f7ff fd72 	bl	800d624 <acc_translation_a121_set_range_params>
 800db40:	2800      	cmp	r0, #0
 800db42:	d0d4      	beq.n	800daee <acc_translation_a121_subsweep_translate+0x32>
 800db44:	4622      	mov	r2, r4
 800db46:	4641      	mov	r1, r8
 800db48:	4630      	mov	r0, r6
 800db4a:	f7ff fd1f 	bl	800d58c <acc_translation_a121_set_gain_params>
 800db4e:	4605      	mov	r5, r0
 800db50:	b978      	cbnz	r0, 800db72 <acc_translation_a121_subsweep_translate+0xb6>
 800db52:	4b38      	ldr	r3, [pc, #224]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800db54:	4a3d      	ldr	r2, [pc, #244]	@ (800dc4c <acc_translation_a121_subsweep_translate+0x190>)
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	4938      	ldr	r1, [pc, #224]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800db5a:	4798      	blx	r3
 800db5c:	4628      	mov	r0, r5
 800db5e:	b00c      	add	sp, #48	@ 0x30
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	1e45      	subs	r5, r0, #1
 800db66:	b2ed      	uxtb	r5, r5
 800db68:	2d04      	cmp	r5, #4
 800db6a:	d9df      	bls.n	800db2c <acc_translation_a121_subsweep_translate+0x70>
 800db6c:	4b31      	ldr	r3, [pc, #196]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800db6e:	4a38      	ldr	r2, [pc, #224]	@ (800dc50 <acc_translation_a121_subsweep_translate+0x194>)
 800db70:	e7b9      	b.n	800dae6 <acc_translation_a121_subsweep_translate+0x2a>
 800db72:	7bf0      	ldrb	r0, [r6, #15]
 800db74:	a904      	add	r1, sp, #16
 800db76:	f7ff fc61 	bl	800d43c <acc_translation_a121_profile_to_pulse_params>
 800db7a:	4605      	mov	r5, r0
 800db7c:	b970      	cbnz	r0, 800db9c <acc_translation_a121_subsweep_translate+0xe0>
 800db7e:	4b2d      	ldr	r3, [pc, #180]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800db80:	4a33      	ldr	r2, [pc, #204]	@ (800dc50 <acc_translation_a121_subsweep_translate+0x194>)
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	492d      	ldr	r1, [pc, #180]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800db86:	4798      	blx	r3
 800db88:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800db8c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800db90:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800db92:	4628      	mov	r0, r5
 800db94:	8523      	strh	r3, [r4, #40]	@ 0x28
 800db96:	b00c      	add	sp, #48	@ 0x30
 800db98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800dba0:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800dba4:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800dba6:	8523      	strh	r3, [r4, #40]	@ 0x28
 800dba8:	f104 0108 	add.w	r1, r4, #8
 800dbac:	a804      	add	r0, sp, #16
 800dbae:	f7ff fd0f 	bl	800d5d0 <acc_translation_a121_set_pulse_length_params>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d09b      	beq.n	800daee <acc_translation_a121_subsweep_translate+0x32>
 800dbb6:	f104 0214 	add.w	r2, r4, #20
 800dbba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800dbbe:	9203      	str	r2, [sp, #12]
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	a804      	add	r0, sp, #16
 800dbc4:	9308      	str	r3, [sp, #32]
 800dbc6:	f000 fdcf 	bl	800e768 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800dbca:	9a03      	ldr	r2, [sp, #12]
 800dbcc:	4605      	mov	r5, r0
 800dbce:	b940      	cbnz	r0, 800dbe2 <acc_translation_a121_subsweep_translate+0x126>
 800dbd0:	4b18      	ldr	r3, [pc, #96]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800dbd2:	4a20      	ldr	r2, [pc, #128]	@ (800dc54 <acc_translation_a121_subsweep_translate+0x198>)
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	4919      	ldr	r1, [pc, #100]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800dbd8:	4798      	blx	r3
 800dbda:	4628      	mov	r0, r5
 800dbdc:	b00c      	add	sp, #48	@ 0x30
 800dbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe2:	f1b8 0f00 	cmp.w	r8, #0
 800dbe6:	d00f      	beq.n	800dc08 <acc_translation_a121_subsweep_translate+0x14c>
 800dbe8:	f108 0158 	add.w	r1, r8, #88	@ 0x58
 800dbec:	a804      	add	r0, sp, #16
 800dbee:	f000 fcb5 	bl	800e55c <acc_translation_pulseshaper_calc_settings>
 800dbf2:	b948      	cbnz	r0, 800dc08 <acc_translation_a121_subsweep_translate+0x14c>
 800dbf4:	490f      	ldr	r1, [pc, #60]	@ (800dc34 <acc_translation_a121_subsweep_translate+0x178>)
 800dbf6:	4a18      	ldr	r2, [pc, #96]	@ (800dc58 <acc_translation_a121_subsweep_translate+0x19c>)
 800dbf8:	690c      	ldr	r4, [r1, #16]
 800dbfa:	4910      	ldr	r1, [pc, #64]	@ (800dc3c <acc_translation_a121_subsweep_translate+0x180>)
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	47a0      	blx	r4
 800dc00:	4628      	mov	r0, r5
 800dc02:	b00c      	add	sp, #48	@ 0x30
 800dc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc08:	8933      	ldrh	r3, [r6, #8]
 800dc0a:	7af2      	ldrb	r2, [r6, #11]
 800dc0c:	8622      	strh	r2, [r4, #48]	@ 0x30
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d00c      	beq.n	800dc2c <acc_translation_a121_subsweep_translate+0x170>
 800dc12:	3b02      	subs	r3, #2
 800dc14:	2201      	movs	r2, #1
 800dc16:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800dc18:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800dc1a:	7b73      	ldrb	r3, [r6, #13]
 800dc1c:	80e3      	strh	r3, [r4, #6]
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f083 0301 	eor.w	r3, r3, #1
 800dc24:	8663      	strh	r3, [r4, #50]	@ 0x32
 800dc26:	b00c      	add	sp, #48	@ 0x30
 800dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800dc30:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800dc32:	e7f2      	b.n	800dc1a <acc_translation_a121_subsweep_translate+0x15e>
 800dc34:	20000610 	.word	0x20000610
 800dc38:	08015fbc 	.word	0x08015fbc
 800dc3c:	08015edc 	.word	0x08015edc
 800dc40:	08015ff8 	.word	0x08015ff8
 800dc44:	08015fcc 	.word	0x08015fcc
 800dc48:	080161c0 	.word	0x080161c0
 800dc4c:	08016020 	.word	0x08016020
 800dc50:	0801514c 	.word	0x0801514c
 800dc54:	08016038 	.word	0x08016038
 800dc58:	08016058 	.word	0x08016058

0800dc5c <acc_translation_a121_point_to_coarse>:
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	db04      	blt.n	800dc6a <acc_translation_a121_point_to_coarse+0xe>
 800dc60:	b209      	sxth	r1, r1
 800dc62:	fb90 f0f1 	sdiv	r0, r0, r1
 800dc66:	b200      	sxth	r0, r0
 800dc68:	4770      	bx	lr
 800dc6a:	43c3      	mvns	r3, r0
 800dc6c:	b208      	sxth	r0, r1
 800dc6e:	fb93 f0f0 	sdiv	r0, r3, r0
 800dc72:	43c0      	mvns	r0, r0
 800dc74:	b200      	sxth	r0, r0
 800dc76:	4770      	bx	lr

0800dc78 <acc_translation_a121_point_in_coarse>:
 800dc78:	fb90 f3f1 	sdiv	r3, r0, r1
 800dc7c:	fb03 0011 	mls	r0, r3, r1, r0
 800dc80:	0403      	lsls	r3, r0, #16
 800dc82:	bf48      	it	mi
 800dc84:	1840      	addmi	r0, r0, r1
 800dc86:	b280      	uxth	r0, r0
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop

0800dc8c <acc_translation_a121_calculate_minimum_sweep_period>:
 800dc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc90:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800dc94:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800dc98:	ed2d 8b0a 	vpush	{d8-d12}
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	b088      	sub	sp, #32
 800dca0:	4680      	mov	r8, r0
 800dca2:	4617      	mov	r7, r2
 800dca4:	f000 80b8 	beq.w	800de18 <acc_translation_a121_calculate_minimum_sweep_period+0x18c>
 800dca8:	ee07 1a90 	vmov	s15, r1
 800dcac:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800de2c <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800dcb0:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800dcb4:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800dcb8:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800dcbc:	f7ff fb8c 	bl	800d3d8 <get_pll_freq>
 800dcc0:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	eef0 8a40 	vmov.f32	s17, s0
 800dcca:	f200 8098 	bhi.w	800ddfe <acc_translation_a121_calculate_minimum_sweep_period+0x172>
 800dcce:	4958      	ldr	r1, [pc, #352]	@ (800de30 <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800dcd0:	4a58      	ldr	r2, [pc, #352]	@ (800de34 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800dcd2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800dcd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcda:	edd1 ba00 	vldr	s23, [r1]
 800dcde:	ed93 ca00 	vldr	s24, [r3]
 800dce2:	f04f 0901 	mov.w	r9, #1
 800dce6:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d067      	beq.n	800ddbe <acc_translation_a121_calculate_minimum_sweep_period+0x132>
 800dcee:	2500      	movs	r5, #0
 800dcf0:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800de38 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800dcf4:	4e51      	ldr	r6, [pc, #324]	@ (800de3c <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800dcf6:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800de40 <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800dcfa:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800de44 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800dcfe:	462c      	mov	r4, r5
 800dd00:	e03d      	b.n	800dd7e <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800dd02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd06:	ee07 3a90 	vmov	s15, r3
 800dd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd0e:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800dd12:	4444      	add	r4, r8
 800dd14:	f10a 0302 	add.w	r3, sl, #2
 800dd18:	8920      	ldrh	r0, [r4, #8]
 800dd1a:	88a1      	ldrh	r1, [r4, #4]
 800dd1c:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	fb00 3303 	mla	r3, r0, r3, r3
 800dd28:	3302      	adds	r3, #2
 800dd2a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800dd2e:	005b      	lsls	r3, r3, #1
 800dd30:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800dd3a:	f10a 0a18 	add.w	sl, sl, #24
 800dd3e:	fa1f fa8a 	uxth.w	sl, sl
 800dd42:	3501      	adds	r5, #1
 800dd44:	b2ec      	uxtb	r4, r5
 800dd46:	42a2      	cmp	r2, r4
 800dd48:	ee07 3a90 	vmov	s15, r3
 800dd4c:	ee07 aa10 	vmov	s14, sl
 800dd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dd58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800dd5c:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800dd60:	ee07 1a90 	vmov	s15, r1
 800dd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd6c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800dd70:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800dd74:	ee77 7a89 	vadd.f32	s15, s15, s18
 800dd78:	ee38 8a27 	vadd.f32	s16, s16, s15
 800dd7c:	d921      	bls.n	800ddc2 <acc_translation_a121_calculate_minimum_sweep_period+0x136>
 800dd7e:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800dd82:	4669      	mov	r1, sp
 800dd84:	7bd8      	ldrb	r0, [r3, #15]
 800dd86:	f7ff fb59 	bl	800d43c <acc_translation_a121_profile_to_pulse_params>
 800dd8a:	0124      	lsls	r4, r4, #4
 800dd8c:	4a2e      	ldr	r2, [pc, #184]	@ (800de48 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800dd8e:	492f      	ldr	r1, [pc, #188]	@ (800de4c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800dd90:	4682      	mov	sl, r0
 800dd92:	b910      	cbnz	r0, 800dd9a <acc_translation_a121_calculate_minimum_sweep_period+0x10e>
 800dd94:	6933      	ldr	r3, [r6, #16]
 800dd96:	4798      	blx	r3
 800dd98:	46d1      	mov	r9, sl
 800dd9a:	eb08 0304 	add.w	r3, r8, r4
 800dd9e:	4a2c      	ldr	r2, [pc, #176]	@ (800de50 <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800dda0:	7b9b      	ldrb	r3, [r3, #14]
 800dda2:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	d9ab      	bls.n	800dd02 <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800ddaa:	6933      	ldr	r3, [r6, #16]
 800ddac:	4a29      	ldr	r2, [pc, #164]	@ (800de54 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800ddae:	4927      	ldr	r1, [pc, #156]	@ (800de4c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	4798      	blx	r3
 800ddb4:	f04f 0900 	mov.w	r9, #0
 800ddb8:	eef0 7a4b 	vmov.f32	s15, s22
 800ddbc:	e7a7      	b.n	800dd0e <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800ddbe:	ed9f 8a1e 	vldr	s16, [pc, #120]	@ 800de38 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800ddc2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800de58 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800ddc6:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800de44 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800ddca:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800ddce:	4648      	mov	r0, r9
 800ddd0:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800ddd4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ddd8:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800dddc:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800dde0:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800dde4:	ee77 caac 	vadd.f32	s25, s15, s25
 800dde8:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800ddec:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800ddf0:	edc7 ba00 	vstr	s23, [r7]
 800ddf4:	b008      	add	sp, #32
 800ddf6:	ecbd 8b0a 	vpop	{d8-d12}
 800ddfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfe:	4b0f      	ldr	r3, [pc, #60]	@ (800de3c <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800de00:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800de38 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800de04:	4a15      	ldr	r2, [pc, #84]	@ (800de5c <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	4910      	ldr	r1, [pc, #64]	@ (800de4c <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800de0a:	2000      	movs	r0, #0
 800de0c:	4798      	blx	r3
 800de0e:	eef0 ba4c 	vmov.f32	s23, s24
 800de12:	f04f 0900 	mov.w	r9, #0
 800de16:	e766      	b.n	800dce6 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800de18:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800de38 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800de1c:	eef0 9a49 	vmov.f32	s19, s18
 800de20:	eef0 ca49 	vmov.f32	s25, s18
 800de24:	eef0 aa49 	vmov.f32	s21, s18
 800de28:	e748      	b.n	800dcbc <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800de2a:	bf00      	nop
 800de2c:	419d999a 	.word	0x419d999a
 800de30:	080161d4 	.word	0x080161d4
 800de34:	080161e0 	.word	0x080161e0
 800de38:	00000000 	.word	0x00000000
 800de3c:	20000610 	.word	0x20000610
 800de40:	43000000 	.word	0x43000000
 800de44:	49742400 	.word	0x49742400
 800de48:	0801514c 	.word	0x0801514c
 800de4c:	08015edc 	.word	0x08015edc
 800de50:	080161b4 	.word	0x080161b4
 800de54:	08015f78 	.word	0x08015f78
 800de58:	43200000 	.word	0x43200000
 800de5c:	08016084 	.word	0x08016084

0800de60 <acc_translation_a121_translate>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	ed2d 8b06 	vpush	{d8-d10}
 800de68:	4605      	mov	r5, r0
 800de6a:	b091      	sub	sp, #68	@ 0x44
 800de6c:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800de70:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800de74:	9408      	str	r4, [sp, #32]
 800de76:	2804      	cmp	r0, #4
 800de78:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800de7c:	9406      	str	r4, [sp, #24]
 800de7e:	468b      	mov	fp, r1
 800de80:	4614      	mov	r4, r2
 800de82:	4698      	mov	r8, r3
 800de84:	f200 8128 	bhi.w	800e0d8 <acc_translation_a121_translate+0x278>
 800de88:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800de8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de94:	f100 8169 	bmi.w	800e16a <acc_translation_a121_translate+0x30a>
 800de98:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f040 81a5 	bne.w	800e1ec <acc_translation_a121_translate+0x38c>
 800dea2:	f7fe fa9f 	bl	800c3e4 <acc_rss_integration_get_sensor_reference_frequency>
 800dea6:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800deaa:	ee07 0a10 	vmov	s14, r0
 800deae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800deb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb6:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800deba:	f340 81d4 	ble.w	800e266 <acc_translation_a121_translate+0x406>
 800debe:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800dec2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dec6:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800deca:	f100 81e3 	bmi.w	800e294 <acc_translation_a121_translate+0x434>
 800dece:	ee18 0a90 	vmov	r0, s17
 800ded2:	f7f3 f85f 	bl	8000f94 <__aeabi_f2ulz>
 800ded6:	2901      	cmp	r1, #1
 800ded8:	bf08      	it	eq
 800deda:	2800      	cmpeq	r0, #0
 800dedc:	f080 81da 	bcs.w	800e294 <acc_translation_a121_translate+0x434>
 800dee0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 81a9 	beq.w	800e23c <acc_translation_a121_translate+0x3dc>
 800deea:	4bc9      	ldr	r3, [pc, #804]	@ (800e210 <acc_translation_a121_translate+0x3b0>)
 800deec:	4ac9      	ldr	r2, [pc, #804]	@ (800e214 <acc_translation_a121_translate+0x3b4>)
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	49c9      	ldr	r1, [pc, #804]	@ (800e218 <acc_translation_a121_translate+0x3b8>)
 800def2:	2000      	movs	r0, #0
 800def4:	4798      	blx	r3
 800def6:	9b06      	ldr	r3, [sp, #24]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 810a 	beq.w	800e112 <acc_translation_a121_translate+0x2b2>
 800defe:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 8108 	beq.w	800e11e <acc_translation_a121_translate+0x2be>
 800df0e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800df10:	2300      	movs	r3, #0
 800df12:	7113      	strb	r3, [r2, #4]
 800df14:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800df18:	f1bb 0f00 	cmp.w	fp, #0
 800df1c:	f000 82da 	beq.w	800e4d4 <acc_translation_a121_translate+0x674>
 800df20:	4658      	mov	r0, fp
 800df22:	4621      	mov	r1, r4
 800df24:	f7ff faf8 	bl	800d518 <acc_translation_a121_set_calibration_params>
 800df28:	2200      	movs	r2, #0
 800df2a:	2301      	movs	r3, #1
 800df2c:	4617      	mov	r7, r2
 800df2e:	f8a8 2002 	strh.w	r2, [r8, #2]
 800df32:	9202      	str	r2, [sp, #8]
 800df34:	4610      	mov	r0, r2
 800df36:	f8a8 300a 	strh.w	r3, [r8, #10]
 800df3a:	f04f 0c02 	mov.w	ip, #2
 800df3e:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800df42:	2901      	cmp	r1, #1
 800df44:	d104      	bne.n	800df50 <acc_translation_a121_translate+0xf0>
 800df46:	9902      	ldr	r1, [sp, #8]
 800df48:	9e06      	ldr	r6, [sp, #24]
 800df4a:	fb06 f101 	mul.w	r1, r6, r1
 800df4e:	9102      	str	r1, [sp, #8]
 800df50:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800df54:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800df58:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800df5c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800df60:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800df64:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800df68:	3903      	subs	r1, #3
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	9902      	ldr	r1, [sp, #8]
 800df6e:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800df72:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800df76:	4571      	cmp	r1, lr
 800df78:	bf28      	it	cs
 800df7a:	4671      	movcs	r1, lr
 800df7c:	468e      	mov	lr, r1
 800df7e:	f1aa 0a03 	sub.w	sl, sl, #3
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800df88:	f089 0901 	eor.w	r9, r9, #1
 800df8c:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800df90:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800df94:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800df98:	f8a8 200c 	strh.w	r2, [r8, #12]
 800df9c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800dfa0:	f8a8 c006 	strh.w	ip, [r8, #6]
 800dfa4:	2e00      	cmp	r6, #0
 800dfa6:	f000 811c 	beq.w	800e1e2 <acc_translation_a121_translate+0x382>
 800dfaa:	3341      	adds	r3, #65	@ 0x41
 800dfac:	2240      	movs	r2, #64	@ 0x40
 800dfae:	f8a8 3000 	strh.w	r3, [r8]
 800dfb2:	f8a8 2008 	strh.w	r2, [r8, #8]
 800dfb6:	2601      	movs	r6, #1
 800dfb8:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800dfbc:	f1bb 0f00 	cmp.w	fp, #0
 800dfc0:	d003      	beq.n	800dfca <acc_translation_a121_translate+0x16a>
 800dfc2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800dfc6:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	f040 80e5 	bne.w	800e19a <acc_translation_a121_translate+0x33a>
 800dfd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dfd2:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	9b08      	ldr	r3, [sp, #32]
 800dfdc:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800dfe0:	9b06      	ldr	r3, [sp, #24]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	f240 80f7 	bls.w	800e1d6 <acc_translation_a121_translate+0x376>
 800dfe8:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800dfec:	2201      	movs	r2, #1
 800dfee:	3b02      	subs	r3, #2
 800dff0:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800dff4:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 800dff8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800e21c <acc_translation_a121_translate+0x3bc>
 800dffc:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 800e220 <acc_translation_a121_translate+0x3c0>
 800e000:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800e004:	ee28 7a07 	vmul.f32	s14, s16, s14
 800e008:	ee68 7a27 	vmul.f32	s15, s16, s15
 800e00c:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800e010:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800e014:	eec8 7a06 	vdiv.f32	s15, s16, s12
 800e018:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e01c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e020:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e024:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e028:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e02c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800e030:	ee17 2a10 	vmov	r2, s14
 800e034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e038:	ee16 3a90 	vmov	r3, s13
 800e03c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e044:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 800e048:	ee17 2a90 	vmov	r2, s15
 800e04c:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 800e050:	bf14      	ite	ne
 800e052:	2301      	movne	r3, #1
 800e054:	2300      	moveq	r3, #0
 800e056:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 800e05a:	8723      	strh	r3, [r4, #56]	@ 0x38
 800e05c:	2800      	cmp	r0, #0
 800e05e:	f000 808b 	beq.w	800e178 <acc_translation_a121_translate+0x318>
 800e062:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06a:	d00a      	beq.n	800e082 <acc_translation_a121_translate+0x222>
 800e06c:	eec8 7a25 	vdiv.f32	s15, s16, s11
 800e070:	ee37 6a86 	vadd.f32	s12, s15, s12
 800e074:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800e078:	ee17 3a90 	vmov	r3, s15
 800e07c:	0c1a      	lsrs	r2, r3, #16
 800e07e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800e080:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800e082:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800e086:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e08a:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800e08e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e090:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	bf14      	ite	ne
 800e09a:	2301      	movne	r3, #1
 800e09c:	2300      	moveq	r3, #0
 800e09e:	8662      	strh	r2, [r4, #50]	@ 0x32
 800e0a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800e0a2:	d006      	beq.n	800e0b2 <acc_translation_a121_translate+0x252>
 800e0a4:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800e0a8:	ee17 3a90 	vmov	r3, s15
 800e0ac:	0c1a      	lsrs	r2, r3, #16
 800e0ae:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800e0b0:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800e0b2:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800e0b6:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e0c0:	f640 0301 	movw	r3, #2049	@ 0x801
 800e0c4:	84a1      	strh	r1, [r4, #36]	@ 0x24
 800e0c6:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 800e0ca:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 800e0ce:	b011      	add	sp, #68	@ 0x44
 800e0d0:	ecbd 8b06 	vpop	{d8-d10}
 800e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d8:	4b4d      	ldr	r3, [pc, #308]	@ (800e210 <acc_translation_a121_translate+0x3b0>)
 800e0da:	4a52      	ldr	r2, [pc, #328]	@ (800e224 <acc_translation_a121_translate+0x3c4>)
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	494e      	ldr	r1, [pc, #312]	@ (800e218 <acc_translation_a121_translate+0x3b8>)
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	4798      	blx	r3
 800e0e4:	f7fe f97e 	bl	800c3e4 <acc_rss_integration_get_sensor_reference_frequency>
 800e0e8:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800e0ec:	ee07 0a10 	vmov	s14, r0
 800e0f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f8:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800e0fc:	dd32      	ble.n	800e164 <acc_translation_a121_translate+0x304>
 800e0fe:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800e102:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e106:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800e10a:	9b06      	ldr	r3, [sp, #24]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f47f aef6 	bne.w	800defe <acc_translation_a121_translate+0x9e>
 800e112:	9304      	str	r3, [sp, #16]
 800e114:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f47f aef8 	bne.w	800df0e <acc_translation_a121_translate+0xae>
 800e11e:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800e122:	2a02      	cmp	r2, #2
 800e124:	f040 80ef 	bne.w	800e306 <acc_translation_a121_translate+0x4a6>
 800e128:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 800e12c:	2a01      	cmp	r2, #1
 800e12e:	d069      	beq.n	800e204 <acc_translation_a121_translate+0x3a4>
 800e130:	2200      	movs	r2, #0
 800e132:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800e134:	7102      	strb	r2, [r0, #4]
 800e136:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f43f aeec 	beq.w	800df18 <acc_translation_a121_translate+0xb8>
 800e140:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 800e144:	2b01      	cmp	r3, #1
 800e146:	f000 814f 	beq.w	800e3e8 <acc_translation_a121_translate+0x588>
 800e14a:	2b02      	cmp	r3, #2
 800e14c:	f000 80f3 	beq.w	800e336 <acc_translation_a121_translate+0x4d6>
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 80dd 	beq.w	800e310 <acc_translation_a121_translate+0x4b0>
 800e156:	4b2e      	ldr	r3, [pc, #184]	@ (800e210 <acc_translation_a121_translate+0x3b0>)
 800e158:	4a33      	ldr	r2, [pc, #204]	@ (800e228 <acc_translation_a121_translate+0x3c8>)
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	492e      	ldr	r1, [pc, #184]	@ (800e218 <acc_translation_a121_translate+0x3b8>)
 800e15e:	2000      	movs	r0, #0
 800e160:	4798      	blx	r3
 800e162:	e6d9      	b.n	800df18 <acc_translation_a121_translate+0xb8>
 800e164:	eddf 8a33 	vldr	s17, [pc, #204]	@ 800e234 <acc_translation_a121_translate+0x3d4>
 800e168:	e7cf      	b.n	800e10a <acc_translation_a121_translate+0x2aa>
 800e16a:	4b29      	ldr	r3, [pc, #164]	@ (800e210 <acc_translation_a121_translate+0x3b0>)
 800e16c:	4a2f      	ldr	r2, [pc, #188]	@ (800e22c <acc_translation_a121_translate+0x3cc>)
 800e16e:	691b      	ldr	r3, [r3, #16]
 800e170:	4929      	ldr	r1, [pc, #164]	@ (800e218 <acc_translation_a121_translate+0x3b8>)
 800e172:	2000      	movs	r0, #0
 800e174:	4798      	blx	r3
 800e176:	e7b5      	b.n	800e0e4 <acc_translation_a121_translate+0x284>
 800e178:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800e17c:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e180:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800e184:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e186:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18e:	bf14      	ite	ne
 800e190:	2301      	movne	r3, #1
 800e192:	2300      	moveq	r3, #0
 800e194:	8662      	strh	r2, [r4, #50]	@ 0x32
 800e196:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800e198:	e78b      	b.n	800e0b2 <acc_translation_a121_translate+0x252>
 800e19a:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 800e19e:	2600      	movs	r6, #0
 800e1a0:	a80b      	add	r0, sp, #44	@ 0x2c
 800e1a2:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 800e1a6:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 800e1aa:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800e1ae:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 800e1b2:	f000 fad9 	bl	800e768 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800e1b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	b110      	cbz	r0, 800e1c4 <acc_translation_a121_translate+0x364>
 800e1be:	9b04      	ldr	r3, [sp, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d16e      	bne.n	800e2a2 <acc_translation_a121_translate+0x442>
 800e1c4:	9b08      	ldr	r3, [sp, #32]
 800e1c6:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800e1ca:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800e1ce:	9b06      	ldr	r3, [sp, #24]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	f63f af09 	bhi.w	800dfe8 <acc_translation_a121_translate+0x188>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800e1dc:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 800e1e0:	e70a      	b.n	800dff8 <acc_translation_a121_translate+0x198>
 800e1e2:	f8a8 6008 	strh.w	r6, [r8, #8]
 800e1e6:	f8a8 c000 	strh.w	ip, [r8]
 800e1ea:	e6e5      	b.n	800dfb8 <acc_translation_a121_translate+0x158>
 800e1ec:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f43f ae56 	beq.w	800dea2 <acc_translation_a121_translate+0x42>
 800e1f6:	4b06      	ldr	r3, [pc, #24]	@ (800e210 <acc_translation_a121_translate+0x3b0>)
 800e1f8:	4a0d      	ldr	r2, [pc, #52]	@ (800e230 <acc_translation_a121_translate+0x3d0>)
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	4906      	ldr	r1, [pc, #24]	@ (800e218 <acc_translation_a121_translate+0x3b8>)
 800e1fe:	2000      	movs	r0, #0
 800e200:	4798      	blx	r3
 800e202:	e76f      	b.n	800e0e4 <acc_translation_a121_translate+0x284>
 800e204:	7be9      	ldrb	r1, [r5, #15]
 800e206:	3901      	subs	r1, #1
 800e208:	2901      	cmp	r1, #1
 800e20a:	d892      	bhi.n	800e132 <acc_translation_a121_translate+0x2d2>
 800e20c:	e790      	b.n	800e130 <acc_translation_a121_translate+0x2d0>
 800e20e:	bf00      	nop
 800e210:	20000610 	.word	0x20000610
 800e214:	080160f8 	.word	0x080160f8
 800e218:	08015edc 	.word	0x08015edc
 800e21c:	43960000 	.word	0x43960000
 800e220:	49742400 	.word	0x49742400
 800e224:	08014ef8 	.word	0x08014ef8
 800e228:	08016174 	.word	0x08016174
 800e22c:	080160a4 	.word	0x080160a4
 800e230:	080160b8 	.word	0x080160b8
 800e234:	00000000 	.word	0x00000000
 800e238:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 800e234 <acc_translation_a121_translate+0x3d4>
 800e23c:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800e240:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800e244:	9806      	ldr	r0, [sp, #24]
 800e246:	2800      	cmp	r0, #0
 800e248:	f000 8161 	beq.w	800e50e <acc_translation_a121_translate+0x6ae>
 800e24c:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 800e250:	9004      	str	r0, [sp, #16]
 800e252:	4291      	cmp	r1, r2
 800e254:	f240 814b 	bls.w	800e4ee <acc_translation_a121_translate+0x68e>
 800e258:	4bb4      	ldr	r3, [pc, #720]	@ (800e52c <acc_translation_a121_translate+0x6cc>)
 800e25a:	4ab5      	ldr	r2, [pc, #724]	@ (800e530 <acc_translation_a121_translate+0x6d0>)
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	49b5      	ldr	r1, [pc, #724]	@ (800e534 <acc_translation_a121_translate+0x6d4>)
 800e260:	2000      	movs	r0, #0
 800e262:	4798      	blx	r3
 800e264:	e756      	b.n	800e114 <acc_translation_a121_translate+0x2b4>
 800e266:	d413      	bmi.n	800e290 <acc_translation_a121_translate+0x430>
 800e268:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d0e3      	beq.n	800e238 <acc_translation_a121_translate+0x3d8>
 800e270:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	d107      	bne.n	800e28a <acc_translation_a121_translate+0x42a>
 800e27a:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800e27e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e286:	f040 811b 	bne.w	800e4c0 <acc_translation_a121_translate+0x660>
 800e28a:	eddf 8aab 	vldr	s17, [pc, #684]	@ 800e538 <acc_translation_a121_translate+0x6d8>
 800e28e:	e62c      	b.n	800deea <acc_translation_a121_translate+0x8a>
 800e290:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 800e538 <acc_translation_a121_translate+0x6d8>
 800e294:	4ba5      	ldr	r3, [pc, #660]	@ (800e52c <acc_translation_a121_translate+0x6cc>)
 800e296:	4aa9      	ldr	r2, [pc, #676]	@ (800e53c <acc_translation_a121_translate+0x6dc>)
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	49a6      	ldr	r1, [pc, #664]	@ (800e534 <acc_translation_a121_translate+0x6d4>)
 800e29c:	2000      	movs	r0, #0
 800e29e:	4798      	blx	r3
 800e2a0:	e733      	b.n	800e10a <acc_translation_a121_translate+0x2aa>
 800e2a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e2a4:	4621      	mov	r1, r4
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	f7ff fcf0 	bl	800dc8c <acc_translation_a121_calculate_minimum_sweep_period>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d089      	beq.n	800e1c4 <acc_translation_a121_translate+0x364>
 800e2b0:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 800e2b4:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 800e540 <acc_translation_a121_translate+0x6e0>
 800e2b8:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800e544 <acc_translation_a121_translate+0x6e4>
 800e2bc:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800e2c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2c6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800e2ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2d6:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 800e2da:	eef4 5ac7 	vcmpe.f32	s11, s14
 800e2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e2:	ed83 7a00 	vstr	s14, [r3]
 800e2e6:	f77f ae78 	ble.w	800dfda <acc_translation_a121_translate+0x17a>
 800e2ea:	4b90      	ldr	r3, [pc, #576]	@ (800e52c <acc_translation_a121_translate+0x6cc>)
 800e2ec:	4a96      	ldr	r2, [pc, #600]	@ (800e548 <acc_translation_a121_translate+0x6e8>)
 800e2ee:	691f      	ldr	r7, [r3, #16]
 800e2f0:	4990      	ldr	r1, [pc, #576]	@ (800e534 <acc_translation_a121_translate+0x6d4>)
 800e2f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	ee17 3a90 	vmov	r3, s15
 800e2fc:	47b8      	blx	r7
 800e2fe:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800e302:	4630      	mov	r0, r6
 800e304:	e669      	b.n	800dfda <acc_translation_a121_translate+0x17a>
 800e306:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e308:	7113      	strb	r3, [r2, #4]
 800e30a:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e30e:	e603      	b.n	800df18 <acc_translation_a121_translate+0xb8>
 800e310:	2301      	movs	r3, #1
 800e312:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800e314:	8523      	strh	r3, [r4, #40]	@ 0x28
 800e316:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d012      	beq.n	800e344 <acc_translation_a121_translate+0x4e4>
 800e31e:	2b02      	cmp	r3, #2
 800e320:	f000 80b7 	beq.w	800e492 <acc_translation_a121_translate+0x632>
 800e324:	2b00      	cmp	r3, #0
 800e326:	d063      	beq.n	800e3f0 <acc_translation_a121_translate+0x590>
 800e328:	4b80      	ldr	r3, [pc, #512]	@ (800e52c <acc_translation_a121_translate+0x6cc>)
 800e32a:	4a88      	ldr	r2, [pc, #544]	@ (800e54c <acc_translation_a121_translate+0x6ec>)
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	4981      	ldr	r1, [pc, #516]	@ (800e534 <acc_translation_a121_translate+0x6d4>)
 800e330:	2000      	movs	r0, #0
 800e332:	4798      	blx	r3
 800e334:	e5f0      	b.n	800df18 <acc_translation_a121_translate+0xb8>
 800e336:	2300      	movs	r3, #0
 800e338:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800e33a:	8523      	strh	r3, [r4, #40]	@ 0x28
 800e33c:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800e340:	2b01      	cmp	r3, #1
 800e342:	d1ec      	bne.n	800e31e <acc_translation_a121_translate+0x4be>
 800e344:	2200      	movs	r2, #0
 800e346:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e348:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e34a:	f1bb 0f00 	cmp.w	fp, #0
 800e34e:	f040 80e0 	bne.w	800e512 <acc_translation_a121_translate+0x6b2>
 800e352:	2301      	movs	r3, #1
 800e354:	f8a8 b002 	strh.w	fp, [r8, #2]
 800e358:	f8a8 b00c 	strh.w	fp, [r8, #12]
 800e35c:	f8a8 300a 	strh.w	r3, [r8, #10]
 800e360:	2600      	movs	r6, #0
 800e362:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800e366:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 800e550 <acc_translation_a121_translate+0x6f0>
 800e36a:	eddf aa7a 	vldr	s21, [pc, #488]	@ 800e554 <acc_translation_a121_translate+0x6f4>
 800e36e:	eddf 9a72 	vldr	s19, [pc, #456]	@ 800e538 <acc_translation_a121_translate+0x6d8>
 800e372:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 800e558 <acc_translation_a121_translate+0x6f8>
 800e376:	9607      	str	r6, [sp, #28]
 800e378:	9602      	str	r6, [sp, #8]
 800e37a:	f108 090e 	add.w	r9, r8, #14
 800e37e:	462f      	mov	r7, r5
 800e380:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 800e384:	9503      	str	r5, [sp, #12]
 800e386:	9409      	str	r4, [sp, #36]	@ 0x24
 800e388:	9305      	str	r3, [sp, #20]
 800e38a:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800e38e:	fa5f fc86 	uxtb.w	ip, r6
 800e392:	4564      	cmp	r4, ip
 800e394:	4653      	mov	r3, sl
 800e396:	4639      	mov	r1, r7
 800e398:	465a      	mov	r2, fp
 800e39a:	f04f 0c00 	mov.w	ip, #0
 800e39e:	d82b      	bhi.n	800e3f8 <acc_translation_a121_translate+0x598>
 800e3a0:	9b05      	ldr	r3, [sp, #20]
 800e3a2:	f8a9 c000 	strh.w	ip, [r9]
 800e3a6:	f8a9 c008 	strh.w	ip, [r9, #8]
 800e3aa:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 800e3ae:	3601      	adds	r6, #1
 800e3b0:	2e04      	cmp	r6, #4
 800e3b2:	f109 0902 	add.w	r9, r9, #2
 800e3b6:	f107 0710 	add.w	r7, r7, #16
 800e3ba:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 800e3be:	d1e4      	bne.n	800e38a <acc_translation_a121_translate+0x52a>
 800e3c0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800e3c4:	9906      	ldr	r1, [sp, #24]
 800e3c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e3ca:	9d03      	ldr	r5, [sp, #12]
 800e3cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e3ce:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800e3d2:	fb12 f201 	smulbb	r2, r2, r1
 800e3d6:	b292      	uxth	r2, r2
 800e3d8:	4413      	add	r3, r2
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f103 0c01 	add.w	ip, r3, #1
 800e3e0:	fa1f fc8c 	uxth.w	ip, ip
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	e5aa      	b.n	800df3e <acc_translation_a121_translate+0xde>
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800e3ec:	8522      	strh	r2, [r4, #40]	@ 0x28
 800e3ee:	e792      	b.n	800e316 <acc_translation_a121_translate+0x4b6>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e3f4:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800e3f6:	e7a8      	b.n	800e34a <acc_translation_a121_translate+0x4ea>
 800e3f8:	9d05      	ldr	r5, [sp, #20]
 800e3fa:	f04f 0401 	mov.w	r4, #1
 800e3fe:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800e402:	ac0b      	add	r4, sp, #44	@ 0x2c
 800e404:	9400      	str	r4, [sp, #0]
 800e406:	f7ff fb59 	bl	800dabc <acc_translation_a121_subsweep_translate>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d045      	beq.n	800e49a <acc_translation_a121_translate+0x63a>
 800e40e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800e412:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800e416:	f8a9 3000 	strh.w	r3, [r9]
 800e41a:	f8a9 2008 	strh.w	r2, [r9, #8]
 800e41e:	4413      	add	r3, r2
 800e420:	7bfa      	ldrb	r2, [r7, #15]
 800e422:	f8a8 300c 	strh.w	r3, [r8, #12]
 800e426:	2a01      	cmp	r2, #1
 800e428:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 800e42c:	d02e      	beq.n	800e48c <acc_translation_a121_translate+0x62c>
 800e42e:	2a02      	cmp	r2, #2
 800e430:	bf0c      	ite	eq
 800e432:	eef0 5a49 	vmoveq.f32	s11, s18
 800e436:	eef0 5a69 	vmovne.f32	s11, s19
 800e43a:	3301      	adds	r3, #1
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	ee07 3a10 	vmov	s14, r3
 800e442:	88bb      	ldrh	r3, [r7, #4]
 800e444:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e448:	ee06 3a10 	vmov	s12, r3
 800e44c:	893b      	ldrh	r3, [r7, #8]
 800e44e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800e452:	ee07 3a90 	vmov	s15, r3
 800e456:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e45a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800e45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e462:	ee67 7a06 	vmul.f32	s15, s14, s12
 800e466:	9b02      	ldr	r3, [sp, #8]
 800e468:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e46c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e470:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800e474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e478:	ee17 2a90 	vmov	r2, s15
 800e47c:	4413      	add	r3, r2
 800e47e:	9302      	str	r3, [sp, #8]
 800e480:	9b07      	ldr	r3, [sp, #28]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d193      	bne.n	800e3ae <acc_translation_a121_translate+0x54e>
 800e486:	7afb      	ldrb	r3, [r7, #11]
 800e488:	9307      	str	r3, [sp, #28]
 800e48a:	e790      	b.n	800e3ae <acc_translation_a121_translate+0x54e>
 800e48c:	eef0 5a6a 	vmov.f32	s11, s21
 800e490:	e7d3      	b.n	800e43a <acc_translation_a121_translate+0x5da>
 800e492:	2300      	movs	r3, #0
 800e494:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e496:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800e498:	e757      	b.n	800e34a <acc_translation_a121_translate+0x4ea>
 800e49a:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800e49e:	9906      	ldr	r1, [sp, #24]
 800e4a0:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e4a4:	9d03      	ldr	r5, [sp, #12]
 800e4a6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e4a8:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800e4ac:	fb12 f201 	smulbb	r2, r2, r1
 800e4b0:	b292      	uxth	r2, r2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	f103 0c01 	add.w	ip, r3, #1
 800e4ba:	fa1f fc8c 	uxth.w	ip, ip
 800e4be:	e53e      	b.n	800df3e <acc_translation_a121_translate+0xde>
 800e4c0:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800e4c4:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800e4c8:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800e538 <acc_translation_a121_translate+0x6d8>
 800e4cc:	4291      	cmp	r1, r2
 800e4ce:	f47f ad0c 	bne.w	800deea <acc_translation_a121_translate+0x8a>
 800e4d2:	e6b7      	b.n	800e244 <acc_translation_a121_translate+0x3e4>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	f8a8 b002 	strh.w	fp, [r8, #2]
 800e4da:	f8a8 300a 	strh.w	r3, [r8, #10]
 800e4de:	465f      	mov	r7, fp
 800e4e0:	f04f 0c02 	mov.w	ip, #2
 800e4e4:	465a      	mov	r2, fp
 800e4e6:	f8cd b008 	str.w	fp, [sp, #8]
 800e4ea:	4658      	mov	r0, fp
 800e4ec:	e527      	b.n	800df3e <acc_translation_a121_translate+0xde>
 800e4ee:	b933      	cbnz	r3, 800e4fe <acc_translation_a121_translate+0x69e>
 800e4f0:	2a02      	cmp	r2, #2
 800e4f2:	d00a      	beq.n	800e50a <acc_translation_a121_translate+0x6aa>
 800e4f4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e4f6:	7113      	strb	r3, [r2, #4]
 800e4f8:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e4fc:	e620      	b.n	800e140 <acc_translation_a121_translate+0x2e0>
 800e4fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e500:	2300      	movs	r3, #0
 800e502:	7113      	strb	r3, [r2, #4]
 800e504:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e508:	e61a      	b.n	800e140 <acc_translation_a121_translate+0x2e0>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e60c      	b.n	800e128 <acc_translation_a121_translate+0x2c8>
 800e50e:	9004      	str	r0, [sp, #16]
 800e510:	e69f      	b.n	800e252 <acc_translation_a121_translate+0x3f2>
 800e512:	4621      	mov	r1, r4
 800e514:	4658      	mov	r0, fp
 800e516:	f7fe ffff 	bl	800d518 <acc_translation_a121_set_calibration_params>
 800e51a:	2300      	movs	r3, #0
 800e51c:	2201      	movs	r2, #1
 800e51e:	f8a8 3002 	strh.w	r3, [r8, #2]
 800e522:	f8a8 300c 	strh.w	r3, [r8, #12]
 800e526:	f8a8 200a 	strh.w	r2, [r8, #10]
 800e52a:	e719      	b.n	800e360 <acc_translation_a121_translate+0x500>
 800e52c:	20000610 	.word	0x20000610
 800e530:	08016124 	.word	0x08016124
 800e534:	08015edc 	.word	0x08015edc
 800e538:	00000000 	.word	0x00000000
 800e53c:	080160e4 	.word	0x080160e4
 800e540:	3c23d70a 	.word	0x3c23d70a
 800e544:	49742400 	.word	0x49742400
 800e548:	08016194 	.word	0x08016194
 800e54c:	08016084 	.word	0x08016084
 800e550:	3e124925 	.word	0x3e124925
 800e554:	3e4ccccd 	.word	0x3e4ccccd
 800e558:	3d75c28f 	.word	0x3d75c28f

0800e55c <acc_translation_pulseshaper_calc_settings>:
 800e55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e560:	7804      	ldrb	r4, [r0, #0]
 800e562:	2300      	movs	r3, #0
 800e564:	8093      	strh	r3, [r2, #4]
 800e566:	b374      	cbz	r4, 800e5c6 <acc_translation_pulseshaper_calc_settings+0x6a>
 800e568:	6846      	ldr	r6, [r0, #4]
 800e56a:	2401      	movs	r4, #1
 800e56c:	4637      	mov	r7, r6
 800e56e:	8214      	strh	r4, [r2, #16]
 800e570:	b3a6      	cbz	r6, 800e5dc <acc_translation_pulseshaper_calc_settings+0x80>
 800e572:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 800e576:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800e57a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800e57e:	461c      	mov	r4, r3
 800e580:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 800e584:	eba5 0508 	sub.w	r5, r5, r8
 800e588:	4575      	cmp	r5, lr
 800e58a:	fa1f fc84 	uxth.w	ip, r4
 800e58e:	4453      	add	r3, sl
 800e590:	f104 0401 	add.w	r4, r4, #1
 800e594:	da02      	bge.n	800e59c <acc_translation_pulseshaper_calc_settings+0x40>
 800e596:	2c0f      	cmp	r4, #15
 800e598:	d1f2      	bne.n	800e580 <acc_translation_pulseshaper_calc_settings+0x24>
 800e59a:	46a4      	mov	ip, r4
 800e59c:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 800e5a0:	2505      	movs	r5, #5
 800e5a2:	f8a2 c006 	strh.w	ip, [r2, #6]
 800e5a6:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800e5aa:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 800e5ae:	1ba4      	subs	r4, r4, r6
 800e5b0:	f105 0c01 	add.w	ip, r5, #1
 800e5b4:	4473      	add	r3, lr
 800e5b6:	d563      	bpl.n	800e680 <acc_translation_pulseshaper_calc_settings+0x124>
 800e5b8:	fa1f f58c 	uxth.w	r5, ip
 800e5bc:	2d14      	cmp	r5, #20
 800e5be:	d1f4      	bne.n	800e5aa <acc_translation_pulseshaper_calc_settings+0x4e>
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c6:	8214      	strh	r4, [r2, #16]
 800e5c8:	80d4      	strh	r4, [r2, #6]
 800e5ca:	8054      	strh	r4, [r2, #2]
 800e5cc:	8114      	strh	r4, [r2, #8]
 800e5ce:	81d4      	strh	r4, [r2, #14]
 800e5d0:	8154      	strh	r4, [r2, #10]
 800e5d2:	8194      	strh	r4, [r2, #12]
 800e5d4:	8254      	strh	r4, [r2, #18]
 800e5d6:	2001      	movs	r0, #1
 800e5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5dc:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e5e0:	80d6      	strh	r6, [r2, #6]
 800e5e2:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800e5e6:	8056      	strh	r6, [r2, #2]
 800e5e8:	d343      	bcc.n	800e672 <acc_translation_pulseshaper_calc_settings+0x116>
 800e5ea:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e5ee:	ebac 050e 	sub.w	r5, ip, lr
 800e5f2:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800e5f6:	f340 80b3 	ble.w	800e760 <acc_translation_pulseshaper_calc_settings+0x204>
 800e5fa:	2400      	movs	r4, #0
 800e5fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e600:	4620      	mov	r0, r4
 800e602:	3002      	adds	r0, #2
 800e604:	fb03 f000 	mul.w	r0, r3, r0
 800e608:	42a8      	cmp	r0, r5
 800e60a:	f104 0401 	add.w	r4, r4, #1
 800e60e:	dbf7      	blt.n	800e600 <acc_translation_pulseshaper_calc_settings+0xa4>
 800e610:	2e00      	cmp	r6, #0
 800e612:	bf14      	ite	ne
 800e614:	2501      	movne	r5, #1
 800e616:	2500      	moveq	r5, #0
 800e618:	f04f 0001 	mov.w	r0, #1
 800e61c:	8115      	strh	r5, [r2, #8]
 800e61e:	81d0      	strh	r0, [r2, #14]
 800e620:	d14f      	bne.n	800e6c2 <acc_translation_pulseshaper_calc_settings+0x166>
 800e622:	8156      	strh	r6, [r2, #10]
 800e624:	b344      	cbz	r4, 800e678 <acc_translation_pulseshaper_calc_settings+0x11c>
 800e626:	fb03 c314 	mls	r3, r3, r4, ip
 800e62a:	2000      	movs	r0, #0
 800e62c:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800e630:	4601      	mov	r1, r0
 800e632:	e001      	b.n	800e638 <acc_translation_pulseshaper_calc_settings+0xdc>
 800e634:	2916      	cmp	r1, #22
 800e636:	d0c3      	beq.n	800e5c0 <acc_translation_pulseshaper_calc_settings+0x64>
 800e638:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 800e63c:	1aed      	subs	r5, r5, r3
 800e63e:	b28e      	uxth	r6, r1
 800e640:	4470      	add	r0, lr
 800e642:	f101 0101 	add.w	r1, r1, #1
 800e646:	d4f5      	bmi.n	800e634 <acc_translation_pulseshaper_calc_settings+0xd8>
 800e648:	b15e      	cbz	r6, 800e662 <acc_translation_pulseshaper_calc_settings+0x106>
 800e64a:	b957      	cbnz	r7, 800e662 <acc_translation_pulseshaper_calc_settings+0x106>
 800e64c:	1e71      	subs	r1, r6, #1
 800e64e:	b289      	uxth	r1, r1
 800e650:	fb0e fe01 	mul.w	lr, lr, r1
 800e654:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 800e658:	eba3 030c 	sub.w	r3, r3, ip
 800e65c:	429d      	cmp	r5, r3
 800e65e:	bfc8      	it	gt
 800e660:	460e      	movgt	r6, r1
 800e662:	8196      	strh	r6, [r2, #12]
 800e664:	2c00      	cmp	r4, #0
 800e666:	d0b5      	beq.n	800e5d4 <acc_translation_pulseshaper_calc_settings+0x78>
 800e668:	1de3      	adds	r3, r4, #7
 800e66a:	2401      	movs	r4, #1
 800e66c:	409c      	lsls	r4, r3
 800e66e:	b2a4      	uxth	r4, r4
 800e670:	e7b0      	b.n	800e5d4 <acc_translation_pulseshaper_calc_settings+0x78>
 800e672:	8116      	strh	r6, [r2, #8]
 800e674:	81d6      	strh	r6, [r2, #14]
 800e676:	8156      	strh	r6, [r2, #10]
 800e678:	2400      	movs	r4, #0
 800e67a:	4663      	mov	r3, ip
 800e67c:	4627      	mov	r7, r4
 800e67e:	e7d4      	b.n	800e62a <acc_translation_pulseshaper_calc_settings+0xce>
 800e680:	2d05      	cmp	r5, #5
 800e682:	d00a      	beq.n	800e69a <acc_translation_pulseshaper_calc_settings+0x13e>
 800e684:	1e6b      	subs	r3, r5, #1
 800e686:	b29b      	uxth	r3, r3
 800e688:	fb0e fe03 	mul.w	lr, lr, r3
 800e68c:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 800e690:	eba6 0e0e 	sub.w	lr, r6, lr
 800e694:	4574      	cmp	r4, lr
 800e696:	bfc8      	it	gt
 800e698:	461d      	movgt	r5, r3
 800e69a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e69e:	8055      	strh	r5, [r2, #2]
 800e6a0:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800e6a4:	d349      	bcc.n	800e73a <acc_translation_pulseshaper_calc_settings+0x1de>
 800e6a6:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e6aa:	ebac 050e 	sub.w	r5, ip, lr
 800e6ae:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800e6b2:	dca2      	bgt.n	800e5fa <acc_translation_pulseshaper_calc_settings+0x9e>
 800e6b4:	1e30      	subs	r0, r6, #0
 800e6b6:	bf18      	it	ne
 800e6b8:	2001      	movne	r0, #1
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	8110      	strh	r0, [r2, #8]
 800e6be:	81d3      	strh	r3, [r2, #14]
 800e6c0:	2400      	movs	r4, #0
 800e6c2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e6c6:	fb03 c314 	mls	r3, r3, r4, ip
 800e6ca:	2500      	movs	r5, #0
 800e6cc:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	e002      	b.n	800e6da <acc_translation_pulseshaper_calc_settings+0x17e>
 800e6d4:	2816      	cmp	r0, #22
 800e6d6:	f43f af73 	beq.w	800e5c0 <acc_translation_pulseshaper_calc_settings+0x64>
 800e6da:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 800e6de:	1aff      	subs	r7, r7, r3
 800e6e0:	fa1f f880 	uxth.w	r8, r0
 800e6e4:	444d      	add	r5, r9
 800e6e6:	f100 0001 	add.w	r0, r0, #1
 800e6ea:	d4f3      	bmi.n	800e6d4 <acc_translation_pulseshaper_calc_settings+0x178>
 800e6ec:	f1b8 0f00 	cmp.w	r8, #0
 800e6f0:	d12a      	bne.n	800e748 <acc_translation_pulseshaper_calc_settings+0x1ec>
 800e6f2:	f8a2 800a 	strh.w	r8, [r2, #10]
 800e6f6:	b1c4      	cbz	r4, 800e72a <acc_translation_pulseshaper_calc_settings+0x1ce>
 800e6f8:	4637      	mov	r7, r6
 800e6fa:	2e00      	cmp	r6, #0
 800e6fc:	d095      	beq.n	800e62a <acc_translation_pulseshaper_calc_settings+0xce>
 800e6fe:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 800e702:	88d6      	ldrh	r6, [r2, #6]
 800e704:	fb05 f506 	mul.w	r5, r5, r6
 800e708:	688e      	ldr	r6, [r1, #8]
 800e70a:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800e70e:	1b80      	subs	r0, r0, r6
 800e710:	f53f af56 	bmi.w	800e5c0 <acc_translation_pulseshaper_calc_settings+0x64>
 800e714:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 800e718:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800e71c:	fb06 f60c 	mul.w	r6, r6, ip
 800e720:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800e724:	4428      	add	r0, r5
 800e726:	4403      	add	r3, r0
 800e728:	e77f      	b.n	800e62a <acc_translation_pulseshaper_calc_settings+0xce>
 800e72a:	4637      	mov	r7, r6
 800e72c:	2e00      	cmp	r6, #0
 800e72e:	d0a3      	beq.n	800e678 <acc_translation_pulseshaper_calc_settings+0x11c>
 800e730:	fb09 f308 	mul.w	r3, r9, r8
 800e734:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 800e738:	e7e1      	b.n	800e6fe <acc_translation_pulseshaper_calc_settings+0x1a2>
 800e73a:	2400      	movs	r4, #0
 800e73c:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e740:	8114      	strh	r4, [r2, #8]
 800e742:	81d4      	strh	r4, [r2, #14]
 800e744:	4663      	mov	r3, ip
 800e746:	e7c0      	b.n	800e6ca <acc_translation_pulseshaper_calc_settings+0x16e>
 800e748:	f108 35ff 	add.w	r5, r8, #4294967295
 800e74c:	b2ad      	uxth	r5, r5
 800e74e:	fb09 f005 	mul.w	r0, r9, r5
 800e752:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 800e756:	1a18      	subs	r0, r3, r0
 800e758:	4287      	cmp	r7, r0
 800e75a:	bfc8      	it	gt
 800e75c:	46a8      	movgt	r8, r5
 800e75e:	e7c8      	b.n	800e6f2 <acc_translation_pulseshaper_calc_settings+0x196>
 800e760:	8116      	strh	r6, [r2, #8]
 800e762:	81d4      	strh	r4, [r2, #14]
 800e764:	8156      	strh	r6, [r2, #10]
 800e766:	e787      	b.n	800e678 <acc_translation_pulseshaper_calc_settings+0x11c>

0800e768 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 800e768:	7803      	ldrb	r3, [r0, #0]
 800e76a:	b13b      	cbz	r3, 800e77c <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800e76c:	6842      	ldr	r2, [r0, #4]
 800e76e:	b12a      	cbz	r2, 800e77c <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800e770:	6902      	ldr	r2, [r0, #16]
 800e772:	2a02      	cmp	r2, #2
 800e774:	d90b      	bls.n	800e78e <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 800e776:	2300      	movs	r3, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	4770      	bx	lr
 800e77c:	6903      	ldr	r3, [r0, #16]
 800e77e:	2b07      	cmp	r3, #7
 800e780:	d8f9      	bhi.n	800e776 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 800e782:	4a05      	ldr	r2, [pc, #20]	@ (800e798 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 800e784:	5cd3      	ldrb	r3, [r2, r3]
 800e786:	800b      	strh	r3, [r1, #0]
 800e788:	2301      	movs	r3, #1
 800e78a:	4618      	mov	r0, r3
 800e78c:	4770      	bx	lr
 800e78e:	4803      	ldr	r0, [pc, #12]	@ (800e79c <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 800e790:	5c82      	ldrb	r2, [r0, r2]
 800e792:	800a      	strh	r2, [r1, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	4770      	bx	lr
 800e798:	080161ec 	.word	0x080161ec
 800e79c:	080161f4 	.word	0x080161f4

0800e7a0 <acc_utils_bool_to_str>:
 800e7a0:	4a03      	ldr	r2, [pc, #12]	@ (800e7b0 <acc_utils_bool_to_str+0x10>)
 800e7a2:	4b04      	ldr	r3, [pc, #16]	@ (800e7b4 <acc_utils_bool_to_str+0x14>)
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	bf14      	ite	ne
 800e7a8:	4610      	movne	r0, r2
 800e7aa:	4618      	moveq	r0, r3
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	080161f8 	.word	0x080161f8
 800e7b4:	08016200 	.word	0x08016200

0800e7b8 <acc_utils_idle_state_to_str>:
 800e7b8:	2802      	cmp	r0, #2
 800e7ba:	bf9a      	itte	ls
 800e7bc:	4b02      	ldrls	r3, [pc, #8]	@ (800e7c8 <acc_utils_idle_state_to_str+0x10>)
 800e7be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e7c2:	4802      	ldrhi	r0, [pc, #8]	@ (800e7cc <acc_utils_idle_state_to_str+0x14>)
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	08016290 	.word	0x08016290
 800e7cc:	08014b24 	.word	0x08014b24

0800e7d0 <acc_utils_profile_to_str>:
 800e7d0:	3801      	subs	r0, #1
 800e7d2:	b2c0      	uxtb	r0, r0
 800e7d4:	2804      	cmp	r0, #4
 800e7d6:	bf9a      	itte	ls
 800e7d8:	4b02      	ldrls	r3, [pc, #8]	@ (800e7e4 <acc_utils_profile_to_str+0x14>)
 800e7da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e7de:	4802      	ldrhi	r0, [pc, #8]	@ (800e7e8 <acc_utils_profile_to_str+0x18>)
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	0801629c 	.word	0x0801629c
 800e7e8:	08014b24 	.word	0x08014b24

0800e7ec <acc_utils_prf_to_str>:
 800e7ec:	2805      	cmp	r0, #5
 800e7ee:	bf9a      	itte	ls
 800e7f0:	4b02      	ldrls	r3, [pc, #8]	@ (800e7fc <acc_utils_prf_to_str+0x10>)
 800e7f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e7f6:	4802      	ldrhi	r0, [pc, #8]	@ (800e800 <acc_utils_prf_to_str+0x14>)
 800e7f8:	4770      	bx	lr
 800e7fa:	bf00      	nop
 800e7fc:	080162b0 	.word	0x080162b0
 800e800:	08014b24 	.word	0x08014b24

0800e804 <acc_version_get>:
 800e804:	4800      	ldr	r0, [pc, #0]	@ (800e808 <acc_version_get+0x4>)
 800e806:	4770      	bx	lr
 800e808:	08014944 	.word	0x08014944

0800e80c <acc_alg_basic_util_crc32>:
 800e80c:	b1a9      	cbz	r1, 800e83a <acc_alg_basic_util_crc32+0x2e>
 800e80e:	b430      	push	{r4, r5}
 800e810:	4a0b      	ldr	r2, [pc, #44]	@ (800e840 <acc_alg_basic_util_crc32+0x34>)
 800e812:	1e44      	subs	r4, r0, #1
 800e814:	1865      	adds	r5, r4, r1
 800e816:	f04f 30ff 	mov.w	r0, #4294967295
 800e81a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800e81e:	2308      	movs	r3, #8
 800e820:	4048      	eors	r0, r1
 800e822:	07c1      	lsls	r1, r0, #31
 800e824:	bf4c      	ite	mi
 800e826:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 800e82a:	0840      	lsrpl	r0, r0, #1
 800e82c:	3b01      	subs	r3, #1
 800e82e:	d1f8      	bne.n	800e822 <acc_alg_basic_util_crc32+0x16>
 800e830:	42ac      	cmp	r4, r5
 800e832:	d1f2      	bne.n	800e81a <acc_alg_basic_util_crc32+0xe>
 800e834:	43c0      	mvns	r0, r0
 800e836:	bc30      	pop	{r4, r5}
 800e838:	4770      	bx	lr
 800e83a:	4608      	mov	r0, r1
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	edb88320 	.word	0xedb88320

0800e844 <acc_confprogram_modify_bin_sensor>:
 800e844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e848:	b085      	sub	sp, #20
 800e84a:	2601      	movs	r6, #1
 800e84c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800e850:	fa06 f503 	lsl.w	r5, r6, r3
 800e854:	4545      	cmp	r5, r8
 800e856:	461c      	mov	r4, r3
 800e858:	460b      	mov	r3, r1
 800e85a:	d80d      	bhi.n	800e878 <acc_confprogram_modify_bin_sensor+0x34>
 800e85c:	4a14      	ldr	r2, [pc, #80]	@ (800e8b0 <acc_confprogram_modify_bin_sensor+0x6c>)
 800e85e:	f8cd 8000 	str.w	r8, [sp]
 800e862:	3d01      	subs	r5, #1
 800e864:	9501      	str	r5, [sp, #4]
 800e866:	6914      	ldr	r4, [r2, #16]
 800e868:	4912      	ldr	r1, [pc, #72]	@ (800e8b4 <acc_confprogram_modify_bin_sensor+0x70>)
 800e86a:	4a13      	ldr	r2, [pc, #76]	@ (800e8b8 <acc_confprogram_modify_bin_sensor+0x74>)
 800e86c:	2000      	movs	r0, #0
 800e86e:	47a0      	blx	r4
 800e870:	2000      	movs	r0, #0
 800e872:	b005      	add	sp, #20
 800e874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e878:	4691      	mov	r9, r2
 800e87a:	4607      	mov	r7, r0
 800e87c:	9103      	str	r1, [sp, #12]
 800e87e:	f1c4 0420 	rsb	r4, r4, #32
 800e882:	f000 f9ed 	bl	800ec60 <acc_sensor_conf_read_instr>
 800e886:	f04f 31ff 	mov.w	r1, #4294967295
 800e88a:	fa21 f404 	lsr.w	r4, r1, r4
 800e88e:	9b03      	ldr	r3, [sp, #12]
 800e890:	fa04 f409 	lsl.w	r4, r4, r9
 800e894:	ea20 0404 	bic.w	r4, r0, r4
 800e898:	fa08 f209 	lsl.w	r2, r8, r9
 800e89c:	4619      	mov	r1, r3
 800e89e:	4638      	mov	r0, r7
 800e8a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8a2:	4322      	orrs	r2, r4
 800e8a4:	4798      	blx	r3
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	b005      	add	sp, #20
 800e8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20000610 	.word	0x20000610
 800e8b4:	08016300 	.word	0x08016300
 800e8b8:	080162c8 	.word	0x080162c8

0800e8bc <acc_confprogram_modify_bin>:
 800e8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8c0:	b085      	sub	sp, #20
 800e8c2:	2401      	movs	r4, #1
 800e8c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800e8c8:	fa04 f703 	lsl.w	r7, r4, r3
 800e8cc:	4547      	cmp	r7, r8
 800e8ce:	461e      	mov	r6, r3
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	d80d      	bhi.n	800e8f0 <acc_confprogram_modify_bin+0x34>
 800e8d4:	4a17      	ldr	r2, [pc, #92]	@ (800e934 <acc_confprogram_modify_bin+0x78>)
 800e8d6:	f8cd 8000 	str.w	r8, [sp]
 800e8da:	3f01      	subs	r7, #1
 800e8dc:	9701      	str	r7, [sp, #4]
 800e8de:	6914      	ldr	r4, [r2, #16]
 800e8e0:	4915      	ldr	r1, [pc, #84]	@ (800e938 <acc_confprogram_modify_bin+0x7c>)
 800e8e2:	4a16      	ldr	r2, [pc, #88]	@ (800e93c <acc_confprogram_modify_bin+0x80>)
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	47a0      	blx	r4
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	b005      	add	sp, #20
 800e8ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f0:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800e8f4:	4691      	mov	r9, r2
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	a902      	add	r1, sp, #8
 800e8fc:	f000 faf8 	bl	800eef0 <acc_utils_transfer_buffer_to_uint32>
 800e900:	f1c6 0620 	rsb	r6, r6, #32
 800e904:	f04f 32ff 	mov.w	r2, #4294967295
 800e908:	fa22 f606 	lsr.w	r6, r2, r6
 800e90c:	9a02      	ldr	r2, [sp, #8]
 800e90e:	fa06 f609 	lsl.w	r6, r6, r9
 800e912:	fa08 f809 	lsl.w	r8, r8, r9
 800e916:	ea22 0206 	bic.w	r2, r2, r6
 800e91a:	ea42 0608 	orr.w	r6, r2, r8
 800e91e:	a803      	add	r0, sp, #12
 800e920:	4629      	mov	r1, r5
 800e922:	4622      	mov	r2, r4
 800e924:	9603      	str	r6, [sp, #12]
 800e926:	f000 fad5 	bl	800eed4 <acc_utils_uint32_to_transfer_buffer>
 800e92a:	4620      	mov	r0, r4
 800e92c:	b005      	add	sp, #20
 800e92e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e932:	bf00      	nop
 800e934:	20000610 	.word	0x20000610
 800e938:	08016300 	.word	0x08016300
 800e93c:	0801630c 	.word	0x0801630c

0800e940 <acc_confprogram_modify_runif>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800e946:	b082      	sub	sp, #8
 800e948:	2201      	movs	r2, #1
 800e94a:	460e      	mov	r6, r1
 800e94c:	4620      	mov	r0, r4
 800e94e:	4669      	mov	r1, sp
 800e950:	461d      	mov	r5, r3
 800e952:	f000 facd 	bl	800eef0 <acc_utils_transfer_buffer_to_uint32>
 800e956:	9a00      	ldr	r2, [sp, #0]
 800e958:	f022 020f 	bic.w	r2, r2, #15
 800e95c:	b105      	cbz	r5, 800e960 <acc_confprogram_modify_runif+0x20>
 800e95e:	4332      	orrs	r2, r6
 800e960:	9201      	str	r2, [sp, #4]
 800e962:	4621      	mov	r1, r4
 800e964:	2201      	movs	r2, #1
 800e966:	a801      	add	r0, sp, #4
 800e968:	f000 fab4 	bl	800eed4 <acc_utils_uint32_to_transfer_buffer>
 800e96c:	b002      	add	sp, #8
 800e96e:	bd70      	pop	{r4, r5, r6, pc}

0800e970 <acc_confprogram_patch_offset>:
 800e970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e974:	b083      	sub	sp, #12
 800e976:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 800e97a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800e97e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e982:	887b      	ldrh	r3, [r7, #2]
 800e984:	b303      	cbz	r3, 800e9c8 <acc_confprogram_patch_offset+0x58>
 800e986:	460d      	mov	r5, r1
 800e988:	6879      	ldr	r1, [r7, #4]
 800e98a:	4680      	mov	r8, r0
 800e98c:	18ae      	adds	r6, r5, r2
 800e98e:	2400      	movs	r4, #0
 800e990:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800e994:	0042      	lsls	r2, r0, #1
 800e996:	b292      	uxth	r2, r2
 800e998:	42aa      	cmp	r2, r5
 800e99a:	d312      	bcc.n	800e9c2 <acc_confprogram_patch_offset+0x52>
 800e99c:	42b2      	cmp	r2, r6
 800e99e:	da10      	bge.n	800e9c2 <acc_confprogram_patch_offset+0x52>
 800e9a0:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d036      	beq.n	800ea16 <acc_confprogram_patch_offset+0xa6>
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d024      	beq.n	800e9f6 <acc_confprogram_patch_offset+0x86>
 800e9ac:	b183      	cbz	r3, 800e9d0 <acc_confprogram_patch_offset+0x60>
 800e9ae:	4b1e      	ldr	r3, [pc, #120]	@ (800ea28 <acc_confprogram_patch_offset+0xb8>)
 800e9b0:	4a1e      	ldr	r2, [pc, #120]	@ (800ea2c <acc_confprogram_patch_offset+0xbc>)
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	491e      	ldr	r1, [pc, #120]	@ (800ea30 <acc_confprogram_patch_offset+0xc0>)
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	4798      	blx	r3
 800e9ba:	2000      	movs	r0, #0
 800e9bc:	b003      	add	sp, #12
 800e9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9c2:	3401      	adds	r4, #1
 800e9c4:	42a3      	cmp	r3, r4
 800e9c6:	d8e3      	bhi.n	800e990 <acc_confprogram_patch_offset+0x20>
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	b003      	add	sp, #12
 800e9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9d0:	1b52      	subs	r2, r2, r5
 800e9d2:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800e9d6:	b291      	uxth	r1, r2
 800e9d8:	f8cd 9000 	str.w	r9, [sp]
 800e9dc:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	f7ff ff6b 	bl	800e8bc <acc_confprogram_modify_bin>
 800e9e6:	887b      	ldrh	r3, [r7, #2]
 800e9e8:	3401      	adds	r4, #1
 800e9ea:	42a3      	cmp	r3, r4
 800e9ec:	d9e6      	bls.n	800e9bc <acc_confprogram_patch_offset+0x4c>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d0e4      	beq.n	800e9bc <acc_confprogram_patch_offset+0x4c>
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	e7cc      	b.n	800e990 <acc_confprogram_patch_offset+0x20>
 800e9f6:	1b52      	subs	r2, r2, r5
 800e9f8:	fab9 f389 	clz	r3, r9
 800e9fc:	b292      	uxth	r2, r2
 800e9fe:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800ea02:	095b      	lsrs	r3, r3, #5
 800ea04:	4640      	mov	r0, r8
 800ea06:	f7ff ff9b 	bl	800e940 <acc_confprogram_modify_runif>
 800ea0a:	887b      	ldrh	r3, [r7, #2]
 800ea0c:	3401      	adds	r4, #1
 800ea0e:	42a3      	cmp	r3, r4
 800ea10:	d8ef      	bhi.n	800e9f2 <acc_confprogram_patch_offset+0x82>
 800ea12:	2001      	movs	r0, #1
 800ea14:	e7d9      	b.n	800e9ca <acc_confprogram_patch_offset+0x5a>
 800ea16:	1b52      	subs	r2, r2, r5
 800ea18:	f1b9 0300 	subs.w	r3, r9, #0
 800ea1c:	b292      	uxth	r2, r2
 800ea1e:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800ea22:	bf18      	it	ne
 800ea24:	2301      	movne	r3, #1
 800ea26:	e7ed      	b.n	800ea04 <acc_confprogram_patch_offset+0x94>
 800ea28:	20000610 	.word	0x20000610
 800ea2c:	08016344 	.word	0x08016344
 800ea30:	08016300 	.word	0x08016300

0800ea34 <acc_confprogram_live_patch>:
 800ea34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 800ea3e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800ea42:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ea46:	8873      	ldrh	r3, [r6, #2]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d050      	beq.n	800eaee <acc_confprogram_live_patch+0xba>
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	468b      	mov	fp, r1
 800ea50:	4690      	mov	r8, r2
 800ea52:	2501      	movs	r5, #1
 800ea54:	6873      	ldr	r3, [r6, #4]
 800ea56:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ea5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ea5e:	f3c0 7401 	ubfx	r4, r0, #28, #2
 800ea62:	2c01      	cmp	r4, #1
 800ea64:	d00c      	beq.n	800ea80 <acc_confprogram_live_patch+0x4c>
 800ea66:	2c02      	cmp	r4, #2
 800ea68:	d032      	beq.n	800ead0 <acc_confprogram_live_patch+0x9c>
 800ea6a:	b1ec      	cbz	r4, 800eaa8 <acc_confprogram_live_patch+0x74>
 800ea6c:	4b22      	ldr	r3, [pc, #136]	@ (800eaf8 <acc_confprogram_live_patch+0xc4>)
 800ea6e:	4a23      	ldr	r2, [pc, #140]	@ (800eafc <acc_confprogram_live_patch+0xc8>)
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	4923      	ldr	r1, [pc, #140]	@ (800eb00 <acc_confprogram_live_patch+0xcc>)
 800ea74:	2000      	movs	r0, #0
 800ea76:	4798      	blx	r3
 800ea78:	2000      	movs	r0, #0
 800ea7a:	b003      	add	sp, #12
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea80:	eb08 0100 	add.w	r1, r8, r0
 800ea84:	b289      	uxth	r1, r1
 800ea86:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800ea8a:	f022 020f 	bic.w	r2, r2, #15
 800ea8e:	f1b9 0f00 	cmp.w	r9, #0
 800ea92:	d002      	beq.n	800ea9a <acc_confprogram_live_patch+0x66>
 800ea94:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800ea98:	4302      	orrs	r2, r0
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47d0      	blx	sl
 800ea9e:	8873      	ldrh	r3, [r6, #2]
 800eaa0:	42ab      	cmp	r3, r5
 800eaa2:	d924      	bls.n	800eaee <acc_confprogram_live_patch+0xba>
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	e7d5      	b.n	800ea54 <acc_confprogram_live_patch+0x20>
 800eaa8:	eb08 0100 	add.w	r1, r8, r0
 800eaac:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800eab0:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800eab4:	e9cd 9a00 	strd	r9, sl, [sp]
 800eab8:	b289      	uxth	r1, r1
 800eaba:	4638      	mov	r0, r7
 800eabc:	f7ff fec2 	bl	800e844 <acc_confprogram_modify_bin_sensor>
 800eac0:	8873      	ldrh	r3, [r6, #2]
 800eac2:	42ab      	cmp	r3, r5
 800eac4:	d9d9      	bls.n	800ea7a <acc_confprogram_live_patch+0x46>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d1ec      	bne.n	800eaa4 <acc_confprogram_live_patch+0x70>
 800eaca:	b003      	add	sp, #12
 800eacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead0:	eb08 0100 	add.w	r1, r8, r0
 800ead4:	b289      	uxth	r1, r1
 800ead6:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800eada:	f022 020f 	bic.w	r2, r2, #15
 800eade:	f1b9 0f00 	cmp.w	r9, #0
 800eae2:	d0d7      	beq.n	800ea94 <acc_confprogram_live_patch+0x60>
 800eae4:	4638      	mov	r0, r7
 800eae6:	47d0      	blx	sl
 800eae8:	8873      	ldrh	r3, [r6, #2]
 800eaea:	42ab      	cmp	r3, r5
 800eaec:	d8da      	bhi.n	800eaa4 <acc_confprogram_live_patch+0x70>
 800eaee:	2001      	movs	r0, #1
 800eaf0:	b003      	add	sp, #12
 800eaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20000610 	.word	0x20000610
 800eafc:	08016368 	.word	0x08016368
 800eb00:	08016300 	.word	0x08016300

0800eb04 <acc_confprogram_copy>:
 800eb04:	b152      	cbz	r2, 800eb1c <acc_confprogram_copy+0x18>
 800eb06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800eb0a:	3804      	subs	r0, #4
 800eb0c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800eb10:	804b      	strh	r3, [r1, #2]
 800eb12:	0c1b      	lsrs	r3, r3, #16
 800eb14:	800b      	strh	r3, [r1, #0]
 800eb16:	3104      	adds	r1, #4
 800eb18:	4291      	cmp	r1, r2
 800eb1a:	d1f7      	bne.n	800eb0c <acc_confprogram_copy+0x8>
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop

0800eb20 <acc_confprogram_get_parameter_patch_range>:
 800eb20:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eb24:	b470      	push	{r4, r5, r6}
 800eb26:	884e      	ldrh	r6, [r1, #2]
 800eb28:	b1c6      	cbz	r6, 800eb5c <acc_confprogram_get_parameter_patch_range+0x3c>
 800eb2a:	6848      	ldr	r0, [r1, #4]
 800eb2c:	2500      	movs	r5, #0
 800eb2e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800eb32:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800eb36:	f850 1b04 	ldr.w	r1, [r0], #4
 800eb3a:	b289      	uxth	r1, r1
 800eb3c:	428c      	cmp	r4, r1
 800eb3e:	bf28      	it	cs
 800eb40:	460c      	movcs	r4, r1
 800eb42:	428d      	cmp	r5, r1
 800eb44:	bf38      	it	cc
 800eb46:	460d      	movcc	r5, r1
 800eb48:	4286      	cmp	r6, r0
 800eb4a:	d1f4      	bne.n	800eb36 <acc_confprogram_get_parameter_patch_range+0x16>
 800eb4c:	0064      	lsls	r4, r4, #1
 800eb4e:	006d      	lsls	r5, r5, #1
 800eb50:	b2a4      	uxth	r4, r4
 800eb52:	b2ad      	uxth	r5, r5
 800eb54:	8014      	strh	r4, [r2, #0]
 800eb56:	801d      	strh	r5, [r3, #0]
 800eb58:	bc70      	pop	{r4, r5, r6}
 800eb5a:	4770      	bx	lr
 800eb5c:	4635      	mov	r5, r6
 800eb5e:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 800eb62:	8014      	strh	r4, [r2, #0]
 800eb64:	801d      	strh	r5, [r3, #0]
 800eb66:	bc70      	pop	{r4, r5, r6}
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop

0800eb6c <acc_element_sizeof>:
 800eb6c:	3801      	subs	r0, #1
 800eb6e:	b2c0      	uxtb	r0, r0
 800eb70:	2807      	cmp	r0, #7
 800eb72:	bf9a      	itte	ls
 800eb74:	4b02      	ldrls	r3, [pc, #8]	@ (800eb80 <acc_element_sizeof+0x14>)
 800eb76:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800eb7a:	2000      	movhi	r0, #0
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	08016390 	.word	0x08016390

0800eb84 <acc_element_connect>:
 800eb84:	6001      	str	r1, [r0, #0]
 800eb86:	4770      	bx	lr

0800eb88 <acc_probes_execute_struct>:
 800eb88:	b530      	push	{r4, r5, lr}
 800eb8a:	4c0a      	ldr	r4, [pc, #40]	@ (800ebb4 <acc_probes_execute_struct+0x2c>)
 800eb8c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 800eb90:	b085      	sub	sp, #20
 800eb92:	6865      	ldr	r5, [r4, #4]
 800eb94:	f88d 0004 	strb.w	r0, [sp, #4]
 800eb98:	2007      	movs	r0, #7
 800eb9a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800eb9e:	b135      	cbz	r5, 800ebae <acc_probes_execute_struct+0x26>
 800eba0:	4611      	mov	r1, r2
 800eba2:	a801      	add	r0, sp, #4
 800eba4:	461a      	mov	r2, r3
 800eba6:	68e3      	ldr	r3, [r4, #12]
 800eba8:	47a8      	blx	r5
 800ebaa:	b005      	add	sp, #20
 800ebac:	bd30      	pop	{r4, r5, pc}
 800ebae:	2001      	movs	r0, #1
 800ebb0:	b005      	add	sp, #20
 800ebb2:	bd30      	pop	{r4, r5, pc}
 800ebb4:	2000002c 	.word	0x2000002c

0800ebb8 <acc_sensor_reg_read>:
 800ebb8:	b530      	push	{r4, r5, lr}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 800ebc0:	4614      	mov	r4, r2
 800ebc2:	2500      	movs	r5, #0
 800ebc4:	f8ad 1000 	strh.w	r1, [sp]
 800ebc8:	2301      	movs	r3, #1
 800ebca:	2203      	movs	r2, #3
 800ebcc:	4669      	mov	r1, sp
 800ebce:	f8ad 5002 	strh.w	r5, [sp, #2]
 800ebd2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800ebd6:	f7fd fc11 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ebda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ebde:	8023      	strh	r3, [r4, #0]
 800ebe0:	b003      	add	sp, #12
 800ebe2:	bd30      	pop	{r4, r5, pc}

0800ebe4 <acc_sensor_reg_write>:
 800ebe4:	b530      	push	{r4, r5, lr}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 800ebec:	4615      	mov	r5, r2
 800ebee:	2300      	movs	r3, #0
 800ebf0:	2202      	movs	r2, #2
 800ebf2:	a901      	add	r1, sp, #4
 800ebf4:	f8ad 4004 	strh.w	r4, [sp, #4]
 800ebf8:	f8ad 5006 	strh.w	r5, [sp, #6]
 800ebfc:	f7fd fbfe 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ec00:	b003      	add	sp, #12
 800ec02:	bd30      	pop	{r4, r5, pc}

0800ec04 <acc_sensor_reg_field_write>:
 800ec04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec08:	b082      	sub	sp, #8
 800ec0a:	461d      	mov	r5, r3
 800ec0c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800ec10:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 800ec14:	f8ad 3000 	strh.w	r3, [sp]
 800ec18:	2700      	movs	r7, #0
 800ec1a:	468a      	mov	sl, r1
 800ec1c:	4691      	mov	r9, r2
 800ec1e:	4669      	mov	r1, sp
 800ec20:	2301      	movs	r3, #1
 800ec22:	2203      	movs	r2, #3
 800ec24:	4680      	mov	r8, r0
 800ec26:	f8ad 7002 	strh.w	r7, [sp, #2]
 800ec2a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ec2e:	f7fd fbe5 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ec32:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800ec36:	fa04 f10a 	lsl.w	r1, r4, sl
 800ec3a:	4071      	eors	r1, r6
 800ec3c:	ea01 0409 	and.w	r4, r1, r9
 800ec40:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 800ec44:	4640      	mov	r0, r8
 800ec46:	463b      	mov	r3, r7
 800ec48:	4669      	mov	r1, sp
 800ec4a:	4074      	eors	r4, r6
 800ec4c:	2202      	movs	r2, #2
 800ec4e:	f8ad 5000 	strh.w	r5, [sp]
 800ec52:	f8ad 4002 	strh.w	r4, [sp, #2]
 800ec56:	f7fd fbd1 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ec5a:	b002      	add	sp, #8
 800ec5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ec60 <acc_sensor_conf_read_instr>:
 800ec60:	b530      	push	{r4, r5, lr}
 800ec62:	b085      	sub	sp, #20
 800ec64:	2401      	movs	r4, #1
 800ec66:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 800ec6a:	4623      	mov	r3, r4
 800ec6c:	2500      	movs	r5, #0
 800ec6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ec72:	2205      	movs	r2, #5
 800ec74:	a901      	add	r1, sp, #4
 800ec76:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ec7a:	f8ad 5008 	strh.w	r5, [sp, #8]
 800ec7e:	f8cd 500a 	str.w	r5, [sp, #10]
 800ec82:	f7fd fbbb 	bl	800c3fc <acc_rss_integration_sensor_device_transfer>
 800ec86:	f10d 000a 	add.w	r0, sp, #10
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	4669      	mov	r1, sp
 800ec8e:	f000 f92f 	bl	800eef0 <acc_utils_transfer_buffer_to_uint32>
 800ec92:	9800      	ldr	r0, [sp, #0]
 800ec94:	b005      	add	sp, #20
 800ec96:	bd30      	pop	{r4, r5, pc}

0800ec98 <acc_cpd_pll_divisors_calculate>:
 800ec98:	edd0 7a00 	vldr	s15, [r0]
 800ec9c:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 800ee24 <acc_cpd_pll_divisors_calculate+0x18c>
 800eca0:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800ee28 <acc_cpd_pll_divisors_calculate+0x190>
 800eca4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecaa:	4606      	mov	r6, r0
 800ecac:	b083      	sub	sp, #12
 800ecae:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ecb2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ecb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ecba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ecbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc2:	ee17 3a10 	vmov	r3, s14
 800ecc6:	b29c      	uxth	r4, r3
 800ecc8:	dc06      	bgt.n	800ecd8 <acc_cpd_pll_divisors_calculate+0x40>
 800ecca:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ee2c <acc_cpd_pll_divisors_calculate+0x194>
 800ecce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	d571      	bpl.n	800edbc <acc_cpd_pll_divisors_calculate+0x124>
 800ecd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800ee30 <acc_cpd_pll_divisors_calculate+0x198>
 800ece4:	bf4c      	ite	mi
 800ece6:	4b53      	ldrmi	r3, [pc, #332]	@ (800ee34 <acc_cpd_pll_divisors_calculate+0x19c>)
 800ece8:	4b53      	ldrpl	r3, [pc, #332]	@ (800ee38 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800ecea:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 800ee30 <acc_cpd_pll_divisors_calculate+0x198>
 800ecee:	eddf 6a53 	vldr	s13, [pc, #332]	@ 800ee3c <acc_cpd_pll_divisors_calculate+0x1a4>
 800ecf2:	4d53      	ldr	r5, [pc, #332]	@ (800ee40 <acc_cpd_pll_divisors_calculate+0x1a8>)
 800ecf4:	4953      	ldr	r1, [pc, #332]	@ (800ee44 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800ecf6:	692f      	ldr	r7, [r5, #16]
 800ecf8:	bf48      	it	mi
 800ecfa:	eef1 7a67 	vnegmi.f32	s15, s15
 800ecfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed02:	2000      	movs	r0, #0
 800ed04:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ed08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed10:	ee17 2a10 	vmov	r2, s14
 800ed14:	bf4c      	ite	mi
 800ed16:	eeb1 7a67 	vnegmi.f32	s14, s15
 800ed1a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800ed1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ed22:	9200      	str	r2, [sp, #0]
 800ed24:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ed28:	4a47      	ldr	r2, [pc, #284]	@ (800ee48 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800ed2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ed2e:	3c10      	subs	r4, #16
 800ed30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed3c:	edcd 7a01 	vstr	s15, [sp, #4]
 800ed40:	47b8      	blx	r7
 800ed42:	2cef      	cmp	r4, #239	@ 0xef
 800ed44:	d937      	bls.n	800edb6 <acc_cpd_pll_divisors_calculate+0x11e>
 800ed46:	edd6 7a00 	vldr	s15, [r6]
 800ed4a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ee30 <acc_cpd_pll_divisors_calculate+0x198>
 800ed4e:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 800ee30 <acc_cpd_pll_divisors_calculate+0x198>
 800ed52:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800ee3c <acc_cpd_pll_divisors_calculate+0x1a4>
 800ed56:	692c      	ldr	r4, [r5, #16]
 800ed58:	493a      	ldr	r1, [pc, #232]	@ (800ee44 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800ed5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	bf48      	it	mi
 800ed64:	eef1 7a67 	vnegmi.f32	s15, s15
 800ed68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed6c:	bf4c      	ite	mi
 800ed6e:	4b31      	ldrmi	r3, [pc, #196]	@ (800ee34 <acc_cpd_pll_divisors_calculate+0x19c>)
 800ed70:	4b31      	ldrpl	r3, [pc, #196]	@ (800ee38 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800ed72:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ed76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7e:	ee17 2a10 	vmov	r2, s14
 800ed82:	bf4c      	ite	mi
 800ed84:	eeb1 7a67 	vnegmi.f32	s14, s15
 800ed88:	eeb0 7a67 	vmovpl.f32	s14, s15
 800ed8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ed90:	9200      	str	r2, [sp, #0]
 800ed92:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ed96:	4a2c      	ldr	r2, [pc, #176]	@ (800ee48 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800ed98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eda2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eda6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edaa:	edcd 7a01 	vstr	s15, [sp, #4]
 800edae:	47a0      	blx	r4
 800edb0:	2000      	movs	r0, #0
 800edb2:	b003      	add	sp, #12
 800edb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb6:	2000      	movs	r0, #0
 800edb8:	b003      	add	sp, #12
 800edba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edbc:	f1a4 0310 	sub.w	r3, r4, #16
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	2bef      	cmp	r3, #239	@ 0xef
 800edc4:	d901      	bls.n	800edca <acc_cpd_pll_divisors_calculate+0x132>
 800edc6:	4d1e      	ldr	r5, [pc, #120]	@ (800ee40 <acc_cpd_pll_divisors_calculate+0x1a8>)
 800edc8:	e7bf      	b.n	800ed4a <acc_cpd_pll_divisors_calculate+0xb2>
 800edca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edce:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800ee4c <acc_cpd_pll_divisors_calculate+0x1b4>
 800edd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ee50 <acc_cpd_pll_divisors_calculate+0x1b8>
 800edd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800edda:	2c3f      	cmp	r4, #63	@ 0x3f
 800eddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ede0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ede4:	ee17 2a90 	vmov	r2, s15
 800ede8:	810a      	strh	r2, [r1, #8]
 800edea:	d912      	bls.n	800ee12 <acc_cpd_pll_divisors_calculate+0x17a>
 800edec:	2cbf      	cmp	r4, #191	@ 0xbf
 800edee:	f04f 0301 	mov.w	r3, #1
 800edf2:	bf98      	it	ls
 800edf4:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 800edf8:	804b      	strh	r3, [r1, #2]
 800edfa:	bf8c      	ite	hi
 800edfc:	08e2      	lsrhi	r2, r4, #3
 800edfe:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800ee02:	f004 0307 	and.w	r3, r4, #7
 800ee06:	808a      	strh	r2, [r1, #4]
 800ee08:	80cb      	strh	r3, [r1, #6]
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	800c      	strh	r4, [r1, #0]
 800ee0e:	b003      	add	sp, #12
 800ee10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee12:	2200      	movs	r2, #0
 800ee14:	2c2f      	cmp	r4, #47	@ 0x2f
 800ee16:	bf88      	it	hi
 800ee18:	4623      	movhi	r3, r4
 800ee1a:	808b      	strh	r3, [r1, #4]
 800ee1c:	804a      	strh	r2, [r1, #2]
 800ee1e:	80ca      	strh	r2, [r1, #6]
 800ee20:	e7f3      	b.n	800ee0a <acc_cpd_pll_divisors_calculate+0x172>
 800ee22:	bf00      	nop
 800ee24:	4f1502f9 	.word	0x4f1502f9
 800ee28:	4c989680 	.word	0x4c989680
 800ee2c:	4b989680 	.word	0x4b989680
 800ee30:	350637bd 	.word	0x350637bd
 800ee34:	08014b20 	.word	0x08014b20
 800ee38:	08015d24 	.word	0x08015d24
 800ee3c:	49742400 	.word	0x49742400
 800ee40:	20000610 	.word	0x20000610
 800ee44:	080163dc 	.word	0x080163dc
 800ee48:	080163b0 	.word	0x080163b0
 800ee4c:	b55b38e8 	.word	0xb55b38e8
 800ee50:	427c0000 	.word	0x427c0000

0800ee54 <acc_cpd_pll_divisors_ref_divisor>:
 800ee54:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800ee60 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800ee58:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ee5c:	f004 b924 	b.w	80130a8 <roundf>
 800ee60:	4f1502f9 	.word	0x4f1502f9

0800ee64 <acc_dll_calculate_area_settings>:
 800ee64:	0080      	lsls	r0, r0, #2
 800ee66:	b280      	uxth	r0, r0
 800ee68:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	428b      	cmp	r3, r1
 800ee70:	8010      	strh	r0, [r2, #0]
 800ee72:	8053      	strh	r3, [r2, #2]
 800ee74:	d20c      	bcs.n	800ee90 <acc_dll_calculate_area_settings+0x2c>
 800ee76:	2301      	movs	r3, #1
 800ee78:	2100      	movs	r1, #0
 800ee7a:	2003      	movs	r0, #3
 800ee7c:	8093      	strh	r3, [r2, #4]
 800ee7e:	8153      	strh	r3, [r2, #10]
 800ee80:	8193      	strh	r3, [r2, #12]
 800ee82:	8213      	strh	r3, [r2, #16]
 800ee84:	80d1      	strh	r1, [r2, #6]
 800ee86:	8251      	strh	r1, [r2, #18]
 800ee88:	8291      	strh	r1, [r2, #20]
 800ee8a:	8110      	strh	r0, [r2, #8]
 800ee8c:	81d0      	strh	r0, [r2, #14]
 800ee8e:	4770      	bx	lr
 800ee90:	b430      	push	{r4, r5}
 800ee92:	fbb3 f4f1 	udiv	r4, r3, r1
 800ee96:	2500      	movs	r5, #0
 800ee98:	fb01 3114 	mls	r1, r1, r4, r3
 800ee9c:	2401      	movs	r4, #1
 800ee9e:	2303      	movs	r3, #3
 800eea0:	8094      	strh	r4, [r2, #4]
 800eea2:	80d4      	strh	r4, [r2, #6]
 800eea4:	8154      	strh	r4, [r2, #10]
 800eea6:	8214      	strh	r4, [r2, #16]
 800eea8:	8254      	strh	r4, [r2, #18]
 800eeaa:	8195      	strh	r5, [r2, #12]
 800eeac:	81d5      	strh	r5, [r2, #14]
 800eeae:	8295      	strh	r5, [r2, #20]
 800eeb0:	8050      	strh	r0, [r2, #2]
 800eeb2:	bc30      	pop	{r4, r5}
 800eeb4:	8011      	strh	r1, [r2, #0]
 800eeb6:	8113      	strh	r3, [r2, #8]
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <acc_utils_swap16_array>:
 800eebc:	b141      	cbz	r1, 800eed0 <acc_utils_swap16_array+0x14>
 800eebe:	3802      	subs	r0, #2
 800eec0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800eec4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800eec8:	ba5b      	rev16	r3, r3
 800eeca:	4288      	cmp	r0, r1
 800eecc:	8003      	strh	r3, [r0, #0]
 800eece:	d1f9      	bne.n	800eec4 <acc_utils_swap16_array+0x8>
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop

0800eed4 <acc_utils_uint32_to_transfer_buffer>:
 800eed4:	b152      	cbz	r2, 800eeec <acc_utils_uint32_to_transfer_buffer+0x18>
 800eed6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800eeda:	3804      	subs	r0, #4
 800eedc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800eee0:	804b      	strh	r3, [r1, #2]
 800eee2:	0c1b      	lsrs	r3, r3, #16
 800eee4:	800b      	strh	r3, [r1, #0]
 800eee6:	3104      	adds	r1, #4
 800eee8:	4291      	cmp	r1, r2
 800eeea:	d1f7      	bne.n	800eedc <acc_utils_uint32_to_transfer_buffer+0x8>
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <acc_utils_transfer_buffer_to_uint32>:
 800eef0:	b17a      	cbz	r2, 800ef12 <acc_utils_transfer_buffer_to_uint32+0x22>
 800eef2:	b410      	push	{r4}
 800eef4:	3904      	subs	r1, #4
 800eef6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800eefa:	8802      	ldrh	r2, [r0, #0]
 800eefc:	8843      	ldrh	r3, [r0, #2]
 800eefe:	3004      	adds	r0, #4
 800ef00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef04:	4284      	cmp	r4, r0
 800ef06:	f841 3f04 	str.w	r3, [r1, #4]!
 800ef0a:	d1f6      	bne.n	800eefa <acc_utils_transfer_buffer_to_uint32+0xa>
 800ef0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	4770      	bx	lr

0800ef14 <acc_diagnostic_log_set_scope>:
 800ef14:	4b02      	ldr	r3, [pc, #8]	@ (800ef20 <acc_diagnostic_log_set_scope+0xc>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	b10b      	cbz	r3, 800ef1e <acc_diagnostic_log_set_scope+0xa>
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4718      	bx	r3
 800ef1e:	4770      	bx	lr
 800ef20:	200004c0 	.word	0x200004c0

0800ef24 <acc_diagnostic_log_array>:
 800ef24:	4b02      	ldr	r3, [pc, #8]	@ (800ef30 <acc_diagnostic_log_array+0xc>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	b10b      	cbz	r3, 800ef2e <acc_diagnostic_log_array+0xa>
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	4718      	bx	r3
 800ef2e:	4770      	bx	lr
 800ef30:	200004c0 	.word	0x200004c0

0800ef34 <acc_diagnostic_log_scalar>:
 800ef34:	4b02      	ldr	r3, [pc, #8]	@ (800ef40 <acc_diagnostic_log_scalar+0xc>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	b10b      	cbz	r3, 800ef3e <acc_diagnostic_log_scalar+0xa>
 800ef3a:	695b      	ldr	r3, [r3, #20]
 800ef3c:	4718      	bx	r3
 800ef3e:	4770      	bx	lr
 800ef40:	200004c0 	.word	0x200004c0

0800ef44 <acc_diagnostic_log_data_u16>:
 800ef44:	4b02      	ldr	r3, [pc, #8]	@ (800ef50 <acc_diagnostic_log_data_u16+0xc>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	b10b      	cbz	r3, 800ef4e <acc_diagnostic_log_data_u16+0xa>
 800ef4a:	6a1b      	ldr	r3, [r3, #32]
 800ef4c:	4718      	bx	r3
 800ef4e:	4770      	bx	lr
 800ef50:	200004c0 	.word	0x200004c0

0800ef54 <acc_diagnostic_log_data_i16>:
 800ef54:	4b02      	ldr	r3, [pc, #8]	@ (800ef60 <acc_diagnostic_log_data_i16+0xc>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	b10b      	cbz	r3, 800ef5e <acc_diagnostic_log_data_i16+0xa>
 800ef5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef5c:	4718      	bx	r3
 800ef5e:	4770      	bx	lr
 800ef60:	200004c0 	.word	0x200004c0

0800ef64 <acc_image_a121_r1a_cal_session_get>:
 800ef64:	4800      	ldr	r0, [pc, #0]	@ (800ef68 <acc_image_a121_r1a_cal_session_get+0x4>)
 800ef66:	4770      	bx	lr
 800ef68:	080163f0 	.word	0x080163f0

0800ef6c <acc_image_a121_r1a_cal_session_param_table_get>:
 800ef6c:	4800      	ldr	r0, [pc, #0]	@ (800ef70 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 800ef6e:	4770      	bx	lr
 800ef70:	08017a84 	.word	0x08017a84

0800ef74 <acc_alg_comp_iq_imb>:
 800ef74:	b430      	push	{r4, r5}
 800ef76:	8814      	ldrh	r4, [r2, #0]
 800ef78:	9a02      	ldr	r2, [sp, #8]
 800ef7a:	f004 051f 	and.w	r5, r4, #31
 800ef7e:	3530      	adds	r5, #48	@ 0x30
 800ef80:	fb00 f005 	mul.w	r0, r0, r5
 800ef84:	0aa5      	lsrs	r5, r4, #10
 800ef86:	3d20      	subs	r5, #32
 800ef88:	f3c4 1444 	ubfx	r4, r4, #5, #5
 800ef8c:	fb01 f505 	mul.w	r5, r1, r5
 800ef90:	2800      	cmp	r0, #0
 800ef92:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 800ef96:	fb01 f104 	mul.w	r1, r1, r4
 800ef9a:	bfb8      	it	lt
 800ef9c:	303f      	addlt	r0, #63	@ 0x3f
 800ef9e:	2d00      	cmp	r5, #0
 800efa0:	bfb8      	it	lt
 800efa2:	351f      	addlt	r5, #31
 800efa4:	2900      	cmp	r1, #0
 800efa6:	ea4f 10a0 	mov.w	r0, r0, asr #6
 800efaa:	bfb8      	it	lt
 800efac:	313f      	addlt	r1, #63	@ 0x3f
 800efae:	eb00 1065 	add.w	r0, r0, r5, asr #5
 800efb2:	1189      	asrs	r1, r1, #6
 800efb4:	8018      	strh	r0, [r3, #0]
 800efb6:	bc30      	pop	{r4, r5}
 800efb8:	8011      	strh	r1, [r2, #0]
 800efba:	4770      	bx	lr

0800efbc <acc_alg_iq_imb_comp_to_fix_point>:
 800efbc:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 800efc0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800f09c <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 800efc4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800f0a0 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 800efc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800efcc:	ee31 1a67 	vsub.f32	s2, s2, s15
 800efd0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800efd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800efd8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800efdc:	ee70 0a86 	vadd.f32	s1, s1, s12
 800efe0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800efe4:	ee21 1a07 	vmul.f32	s2, s2, s14
 800efe8:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800efec:	ee60 0aa6 	vmul.f32	s1, s1, s13
 800eff0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	ee31 1a27 	vadd.f32	s2, s2, s15
 800effc:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800f000:	dc22      	bgt.n	800f048 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 800f002:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00a:	bf48      	it	mi
 800f00c:	2300      	movmi	r3, #0
 800f00e:	d537      	bpl.n	800f080 <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 800f010:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800f0a4 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800f014:	eef4 0ae7 	vcmpe.f32	s1, s15
 800f018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01c:	dd1d      	ble.n	800f05a <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 800f01e:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 800f022:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 800f026:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 800f02a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800f02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f032:	dc20      	bgt.n	800f076 <acc_alg_iq_imb_comp_to_fix_point+0xba>
 800f034:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800f038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03c:	bf48      	it	mi
 800f03e:	2200      	movmi	r2, #0
 800f040:	d524      	bpl.n	800f08c <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 800f042:	4313      	orrs	r3, r2
 800f044:	8003      	strh	r3, [r0, #0]
 800f046:	4770      	bx	lr
 800f048:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800f0a4 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800f04c:	eef4 0ae7 	vcmpe.f32	s1, s15
 800f050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f054:	f04f 031f 	mov.w	r3, #31
 800f058:	dce1      	bgt.n	800f01e <acc_alg_iq_imb_comp_to_fix_point+0x62>
 800f05a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800f05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f062:	d4e0      	bmi.n	800f026 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800f064:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 800f068:	ee10 2a90 	vmov	r2, s1
 800f06c:	b292      	uxth	r2, r2
 800f06e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800f072:	b21b      	sxth	r3, r3
 800f074:	e7d7      	b.n	800f026 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800f076:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800f07a:	4313      	orrs	r3, r2
 800f07c:	8003      	strh	r3, [r0, #0]
 800f07e:	4770      	bx	lr
 800f080:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800f084:	ee10 3a10 	vmov	r3, s0
 800f088:	b21b      	sxth	r3, r3
 800f08a:	e7c1      	b.n	800f010 <acc_alg_iq_imb_comp_to_fix_point+0x54>
 800f08c:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800f090:	ee17 2a90 	vmov	r2, s15
 800f094:	f342 020a 	sbfx	r2, r2, #0, #11
 800f098:	0152      	lsls	r2, r2, #5
 800f09a:	e7d2      	b.n	800f042 <acc_alg_iq_imb_comp_to_fix_point+0x86>
 800f09c:	42800000 	.word	0x42800000
 800f0a0:	42000000 	.word	0x42000000
 800f0a4:	427c0000 	.word	0x427c0000

0800f0a8 <acc_alg_temp>:
 800f0a8:	f240 13e5 	movw	r3, #485	@ 0x1e5
 800f0ac:	fb03 f000 	mul.w	r0, r3, r0
 800f0b0:	0c00      	lsrs	r0, r0, #16
 800f0b2:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 800f0b6:	4770      	bx	lr

0800f0b8 <element_frame_reset>:
 800f0b8:	6800      	ldr	r0, [r0, #0]
 800f0ba:	68c3      	ldr	r3, [r0, #12]
 800f0bc:	4718      	bx	r3
 800f0be:	bf00      	nop

0800f0c0 <element_frame_callback>:
 800f0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c2:	6995      	ldr	r5, [r2, #24]
 800f0c4:	782b      	ldrb	r3, [r5, #0]
 800f0c6:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800f0ca:	4614      	mov	r4, r2
 800f0cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800f0d0:	460f      	mov	r7, r1
 800f0d2:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 800f0d6:	6963      	ldr	r3, [r4, #20]
 800f0d8:	4601      	mov	r1, r0
 800f0da:	0072      	lsls	r2, r6, #1
 800f0dc:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 800f0e0:	f001 fcb2 	bl	8010a48 <memmove>
 800f0e4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f0e6:	8869      	ldrh	r1, [r5, #2]
 800f0e8:	7813      	ldrb	r3, [r2, #0]
 800f0ea:	440e      	add	r6, r1
 800f0ec:	806e      	strh	r6, [r5, #2]
 800f0ee:	b903      	cbnz	r3, 800f0f2 <element_frame_callback+0x32>
 800f0f0:	793b      	ldrb	r3, [r7, #4]
 800f0f2:	7013      	strb	r3, [r2, #0]
 800f0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0f6:	bf00      	nop

0800f0f8 <element_frame_event>:
 800f0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800f0fe:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800f102:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f106:	2400      	movs	r4, #0
 800f108:	f8a8 4002 	strh.w	r4, [r8, #2]
 800f10c:	4605      	mov	r5, r0
 800f10e:	701c      	strb	r4, [r3, #0]
 800f110:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 800f114:	f857 6b04 	ldr.w	r6, [r7], #4
 800f118:	4649      	mov	r1, r9
 800f11a:	4630      	mov	r0, r6
 800f11c:	b136      	cbz	r6, 800f12c <element_frame_event+0x34>
 800f11e:	f000 fb11 	bl	800f744 <acc_pipeline_subsweep_prepare_memory>
 800f122:	f888 4000 	strb.w	r4, [r8]
 800f126:	4630      	mov	r0, r6
 800f128:	f000 fb24 	bl	800f774 <acc_pipeline_subsweep_produce>
 800f12c:	3401      	adds	r4, #1
 800f12e:	b2e4      	uxtb	r4, r4
 800f130:	2c04      	cmp	r4, #4
 800f132:	d1ef      	bne.n	800f114 <element_frame_event+0x1c>
 800f134:	6828      	ldr	r0, [r5, #0]
 800f136:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f13a:	6843      	ldr	r3, [r0, #4]
 800f13c:	4718      	bx	r3
 800f13e:	bf00      	nop

0800f140 <element_frame_validate>:
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	4604      	mov	r4, r0
 800f144:	6980      	ldr	r0, [r0, #24]
 800f146:	b178      	cbz	r0, 800f168 <element_frame_validate+0x28>
 800f148:	69e3      	ldr	r3, [r4, #28]
 800f14a:	b143      	cbz	r3, 800f15e <element_frame_validate+0x1e>
 800f14c:	f7fd f9d0 	bl	800c4f0 <acc_rss_integration_log_level>
 800f150:	b128      	cbz	r0, 800f15e <element_frame_validate+0x1e>
 800f152:	4b0e      	ldr	r3, [pc, #56]	@ (800f18c <element_frame_validate+0x4c>)
 800f154:	4a0e      	ldr	r2, [pc, #56]	@ (800f190 <element_frame_validate+0x50>)
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	490e      	ldr	r1, [pc, #56]	@ (800f194 <element_frame_validate+0x54>)
 800f15a:	2001      	movs	r0, #1
 800f15c:	4798      	blx	r3
 800f15e:	6820      	ldr	r0, [r4, #0]
 800f160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f164:	6883      	ldr	r3, [r0, #8]
 800f166:	4718      	bx	r3
 800f168:	4d08      	ldr	r5, [pc, #32]	@ (800f18c <element_frame_validate+0x4c>)
 800f16a:	4a0b      	ldr	r2, [pc, #44]	@ (800f198 <element_frame_validate+0x58>)
 800f16c:	692b      	ldr	r3, [r5, #16]
 800f16e:	4909      	ldr	r1, [pc, #36]	@ (800f194 <element_frame_validate+0x54>)
 800f170:	4798      	blx	r3
 800f172:	69e3      	ldr	r3, [r4, #28]
 800f174:	b13b      	cbz	r3, 800f186 <element_frame_validate+0x46>
 800f176:	f7fd f9bb 	bl	800c4f0 <acc_rss_integration_log_level>
 800f17a:	b120      	cbz	r0, 800f186 <element_frame_validate+0x46>
 800f17c:	692b      	ldr	r3, [r5, #16]
 800f17e:	4a04      	ldr	r2, [pc, #16]	@ (800f190 <element_frame_validate+0x50>)
 800f180:	4904      	ldr	r1, [pc, #16]	@ (800f194 <element_frame_validate+0x54>)
 800f182:	2001      	movs	r0, #1
 800f184:	4798      	blx	r3
 800f186:	2000      	movs	r0, #0
 800f188:	bd70      	pop	{r4, r5, r6, pc}
 800f18a:	bf00      	nop
 800f18c:	20000610 	.word	0x20000610
 800f190:	08017d94 	.word	0x08017d94
 800f194:	08017d84 	.word	0x08017d84
 800f198:	08017d68 	.word	0x08017d68

0800f19c <acc_element_frame_init>:
 800f19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	4b33      	ldr	r3, [pc, #204]	@ (800f270 <acc_element_frame_init+0xd4>)
 800f1a4:	4a33      	ldr	r2, [pc, #204]	@ (800f274 <acc_element_frame_init+0xd8>)
 800f1a6:	4934      	ldr	r1, [pc, #208]	@ (800f278 <acc_element_frame_init+0xdc>)
 800f1a8:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800f1ac:	896e      	ldrh	r6, [r5, #10]
 800f1ae:	6043      	str	r3, [r0, #4]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800f1b6:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 800f1ba:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 800f1be:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 800f1c2:	8746      	strh	r6, [r0, #58]	@ 0x3a
 800f1c4:	79aa      	ldrb	r2, [r5, #6]
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	2a00      	cmp	r2, #0
 800f1ca:	d04c      	beq.n	800f266 <acc_element_frame_init+0xca>
 800f1cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800f288 <acc_element_frame_init+0xec>
 800f1d0:	4607      	mov	r7, r0
 800f1d2:	4699      	mov	r9, r3
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	e007      	b.n	800f1e8 <acc_element_frame_init+0x4c>
 800f1d8:	79ab      	ldrb	r3, [r5, #6]
 800f1da:	fa5f f489 	uxtb.w	r4, r9
 800f1de:	42a3      	cmp	r3, r4
 800f1e0:	d941      	bls.n	800f266 <acc_element_frame_init+0xca>
 800f1e2:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800f1e6:	896e      	ldrh	r6, [r5, #10]
 800f1e8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800f1ec:	69e8      	ldr	r0, [r5, #28]
 800f1ee:	f8ad 6012 	strh.w	r6, [sp, #18]
 800f1f2:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 800f1f6:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 800f1fa:	898b      	ldrh	r3, [r1, #12]
 800f1fc:	8a89      	ldrh	r1, [r1, #20]
 800f1fe:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 800f202:	8793      	strh	r3, [r2, #60]	@ 0x3c
 800f204:	4473      	add	r3, lr
 800f206:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 800f20a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f20e:	4668      	mov	r0, sp
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	9302      	str	r3, [sp, #8]
 800f214:	f8cd 8000 	str.w	r8, [sp]
 800f218:	9701      	str	r7, [sp, #4]
 800f21a:	f8ad c010 	strh.w	ip, [sp, #16]
 800f21e:	f8ad 100e 	strh.w	r1, [sp, #14]
 800f222:	9205      	str	r2, [sp, #20]
 800f224:	f000 fa1a 	bl	800f65c <acc_pipeline_subsweep_assemble>
 800f228:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800f22c:	f109 0901 	add.w	r9, r9, #1
 800f230:	4606      	mov	r6, r0
 800f232:	64d8      	str	r0, [r3, #76]	@ 0x4c
 800f234:	2800      	cmp	r0, #0
 800f236:	d1cf      	bne.n	800f1d8 <acc_element_frame_init+0x3c>
 800f238:	4b10      	ldr	r3, [pc, #64]	@ (800f27c <acc_element_frame_init+0xe0>)
 800f23a:	4a11      	ldr	r2, [pc, #68]	@ (800f280 <acc_element_frame_init+0xe4>)
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	4911      	ldr	r1, [pc, #68]	@ (800f284 <acc_element_frame_init+0xe8>)
 800f240:	4798      	blx	r3
 800f242:	b164      	cbz	r4, 800f25e <acc_element_frame_init+0xc2>
 800f244:	3c01      	subs	r4, #1
 800f246:	b2e4      	uxtb	r4, r4
 800f248:	3413      	adds	r4, #19
 800f24a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f24e:	3748      	adds	r7, #72	@ 0x48
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	f000 fa6b 	bl	800f72c <acc_pipeline_subsweep_disassemble>
 800f256:	f844 6904 	str.w	r6, [r4], #-4
 800f25a:	42a7      	cmp	r7, r4
 800f25c:	d1f8      	bne.n	800f250 <acc_element_frame_init+0xb4>
 800f25e:	2000      	movs	r0, #0
 800f260:	b007      	add	sp, #28
 800f262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f266:	2001      	movs	r0, #1
 800f268:	b007      	add	sp, #28
 800f26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f26e:	bf00      	nop
 800f270:	0800f0f9 	.word	0x0800f0f9
 800f274:	0800f0b9 	.word	0x0800f0b9
 800f278:	0800f141 	.word	0x0800f141
 800f27c:	20000610 	.word	0x20000610
 800f280:	08017da4 	.word	0x08017da4
 800f284:	08017d84 	.word	0x08017d84
 800f288:	0800f0c1 	.word	0x0800f0c1

0800f28c <acc_element_frame_release>:
 800f28c:	b178      	cbz	r0, 800f2ae <acc_element_frame_release+0x22>
 800f28e:	b570      	push	{r4, r5, r6, lr}
 800f290:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 800f294:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800f298:	2600      	movs	r6, #0
 800f29a:	f854 0b04 	ldr.w	r0, [r4], #4
 800f29e:	b118      	cbz	r0, 800f2a8 <acc_element_frame_release+0x1c>
 800f2a0:	f000 fa44 	bl	800f72c <acc_pipeline_subsweep_disassemble>
 800f2a4:	f844 6c04 	str.w	r6, [r4, #-4]
 800f2a8:	42ac      	cmp	r4, r5
 800f2aa:	d1f6      	bne.n	800f29a <acc_element_frame_release+0xe>
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	4770      	bx	lr

0800f2b0 <element_frame_aux_reset>:
 800f2b0:	6800      	ldr	r0, [r0, #0]
 800f2b2:	68c3      	ldr	r3, [r0, #12]
 800f2b4:	4718      	bx	r3
 800f2b6:	bf00      	nop

0800f2b8 <element_frame_aux_validate>:
 800f2b8:	6800      	ldr	r0, [r0, #0]
 800f2ba:	6883      	ldr	r3, [r0, #8]
 800f2bc:	4718      	bx	r3
 800f2be:	bf00      	nop

0800f2c0 <element_frame_aux_event>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	6902      	ldr	r2, [r0, #16]
 800f2c4:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 800f2c8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800f2d2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	bf08      	it	eq
 800f2d8:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 800f2dc:	f7ff fee4 	bl	800f0a8 <acc_alg_temp>
 800f2e0:	8028      	strh	r0, [r5, #0]
 800f2e2:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800f2e4:	6923      	ldr	r3, [r4, #16]
 800f2e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f2ea:	b14a      	cbz	r2, 800f300 <element_frame_aux_event+0x40>
 800f2ec:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800f2f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f2f4:	2a01      	cmp	r2, #1
 800f2f6:	d903      	bls.n	800f300 <element_frame_aux_event+0x40>
 800f2f8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	7011      	strb	r1, [r2, #0]
 800f2fe:	e002      	b.n	800f306 <element_frame_aux_event+0x46>
 800f300:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800f302:	2100      	movs	r1, #0
 800f304:	7011      	strb	r1, [r2, #0]
 800f306:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800f308:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 800f30a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f30e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f312:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800f314:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800f316:	882d      	ldrh	r5, [r5, #0]
 800f318:	f1a2 0301 	sub.w	r3, r2, #1
 800f31c:	fab3 f383 	clz	r3, r3
 800f320:	095b      	lsrs	r3, r3, #5
 800f322:	700b      	strb	r3, [r1, #0]
 800f324:	f7ff fec0 	bl	800f0a8 <acc_alg_temp>
 800f328:	1a2d      	subs	r5, r5, r0
 800f32a:	b22d      	sxth	r5, r5
 800f32c:	2d00      	cmp	r5, #0
 800f32e:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800f332:	6820      	ldr	r0, [r4, #0]
 800f334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f336:	bfb8      	it	lt
 800f338:	426d      	neglt	r5, r5
 800f33a:	b22d      	sxth	r5, r5
 800f33c:	42ab      	cmp	r3, r5
 800f33e:	bfac      	ite	ge
 800f340:	2500      	movge	r5, #0
 800f342:	2501      	movlt	r5, #1
 800f344:	7015      	strb	r5, [r2, #0]
 800f346:	6843      	ldr	r3, [r0, #4]
 800f348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f34c:	4718      	bx	r3
 800f34e:	bf00      	nop

0800f350 <acc_element_frame_aux_init>:
 800f350:	b430      	push	{r4, r5}
 800f352:	880b      	ldrh	r3, [r1, #0]
 800f354:	4d0c      	ldr	r5, [pc, #48]	@ (800f388 <acc_element_frame_aux_init+0x38>)
 800f356:	4c0d      	ldr	r4, [pc, #52]	@ (800f38c <acc_element_frame_aux_init+0x3c>)
 800f358:	4a0d      	ldr	r2, [pc, #52]	@ (800f390 <acc_element_frame_aux_init+0x40>)
 800f35a:	6045      	str	r5, [r0, #4]
 800f35c:	884d      	ldrh	r5, [r1, #2]
 800f35e:	6084      	str	r4, [r0, #8]
 800f360:	888c      	ldrh	r4, [r1, #4]
 800f362:	60c2      	str	r2, [r0, #12]
 800f364:	88ca      	ldrh	r2, [r1, #6]
 800f366:	8743      	strh	r3, [r0, #58]	@ 0x3a
 800f368:	890b      	ldrh	r3, [r1, #8]
 800f36a:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800f36e:	8785      	strh	r5, [r0, #60]	@ 0x3c
 800f370:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 800f372:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800f376:	7b0b      	ldrb	r3, [r1, #12]
 800f378:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f37c:	894b      	ldrh	r3, [r1, #10]
 800f37e:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 800f382:	bc30      	pop	{r4, r5}
 800f384:	2001      	movs	r0, #1
 800f386:	4770      	bx	lr
 800f388:	0800f2c1 	.word	0x0800f2c1
 800f38c:	0800f2b9 	.word	0x0800f2b9
 800f390:	0800f2b1 	.word	0x0800f2b1

0800f394 <acc_element_frame_aux_release>:
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop

0800f398 <sink_a121_callback_consume>:
 800f398:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 800f39c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800f39e:	6900      	ldr	r0, [r0, #16]
 800f3a0:	4718      	bx	r3
 800f3a2:	bf00      	nop

0800f3a4 <sink_a121_callback_reset>:
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop

0800f3a8 <sink_a121_callback_validate>:
 800f3a8:	6983      	ldr	r3, [r0, #24]
 800f3aa:	b510      	push	{r4, lr}
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	b1bb      	cbz	r3, 800f3e0 <sink_a121_callback_validate+0x38>
 800f3b0:	f7fd f89e 	bl	800c4f0 <acc_rss_integration_log_level>
 800f3b4:	b948      	cbnz	r0, 800f3ca <sink_a121_callback_validate+0x22>
 800f3b6:	6963      	ldr	r3, [r4, #20]
 800f3b8:	b183      	cbz	r3, 800f3dc <sink_a121_callback_validate+0x34>
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e8 <sink_a121_callback_validate+0x40>)
 800f3bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f3ec <sink_a121_callback_validate+0x44>)
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	490b      	ldr	r1, [pc, #44]	@ (800f3f0 <sink_a121_callback_validate+0x48>)
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	4798      	blx	r3
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	4b07      	ldr	r3, [pc, #28]	@ (800f3e8 <sink_a121_callback_validate+0x40>)
 800f3cc:	4a09      	ldr	r2, [pc, #36]	@ (800f3f4 <sink_a121_callback_validate+0x4c>)
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	4907      	ldr	r1, [pc, #28]	@ (800f3f0 <sink_a121_callback_validate+0x48>)
 800f3d2:	2001      	movs	r0, #1
 800f3d4:	4798      	blx	r3
 800f3d6:	6963      	ldr	r3, [r4, #20]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1ee      	bne.n	800f3ba <sink_a121_callback_validate+0x12>
 800f3dc:	2001      	movs	r0, #1
 800f3de:	bd10      	pop	{r4, pc}
 800f3e0:	69c3      	ldr	r3, [r0, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e4      	bne.n	800f3b0 <sink_a121_callback_validate+0x8>
 800f3e6:	e7e6      	b.n	800f3b6 <sink_a121_callback_validate+0xe>
 800f3e8:	20000610 	.word	0x20000610
 800f3ec:	08017e00 	.word	0x08017e00
 800f3f0:	08017de4 	.word	0x08017de4
 800f3f4:	08017dc8 	.word	0x08017dc8

0800f3f8 <acc_element_sink_a121_callback_init>:
 800f3f8:	b410      	push	{r4}
 800f3fa:	4a05      	ldr	r2, [pc, #20]	@ (800f410 <acc_element_sink_a121_callback_init+0x18>)
 800f3fc:	4c05      	ldr	r4, [pc, #20]	@ (800f414 <acc_element_sink_a121_callback_init+0x1c>)
 800f3fe:	4b06      	ldr	r3, [pc, #24]	@ (800f418 <acc_element_sink_a121_callback_init+0x20>)
 800f400:	6401      	str	r1, [r0, #64]	@ 0x40
 800f402:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800f406:	60c3      	str	r3, [r0, #12]
 800f408:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	0800f3a9 	.word	0x0800f3a9
 800f414:	0800f399 	.word	0x0800f399
 800f418:	0800f3a5 	.word	0x0800f3a5

0800f41c <patch_program_parameters>:
 800f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 800f424:	469a      	mov	sl, r3
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	360e      	adds	r6, #14
 800f42a:	42b3      	cmp	r3, r6
 800f42c:	b083      	sub	sp, #12
 800f42e:	bf94      	ite	ls
 800f430:	b29e      	uxthls	r6, r3
 800f432:	b2b6      	uxthhi	r6, r6
 800f434:	4690      	mov	r8, r2
 800f436:	4605      	mov	r5, r0
 800f438:	4689      	mov	r9, r1
 800f43a:	f000 f9a7 	bl	800f78c <acc_image_a121_r1a_meas_session_get>
 800f43e:	ea4f 0358 	mov.w	r3, r8, lsr #1
 800f442:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f446:	0872      	lsrs	r2, r6, #1
 800f448:	4649      	mov	r1, r9
 800f44a:	f7ff fb5b 	bl	800eb04 <acc_confprogram_copy>
 800f44e:	f000 f9a5 	bl	800f79c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800f452:	4607      	mov	r7, r0
 800f454:	3d02      	subs	r5, #2
 800f456:	1e44      	subs	r4, r0, #1
 800f458:	37e1      	adds	r7, #225	@ 0xe1
 800f45a:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800f45e:	f000 f999 	bl	800f794 <acc_image_a121_r1a_meas_session_param_table_get>
 800f462:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 800f466:	4603      	mov	r3, r0
 800f468:	e9cd b200 	strd	fp, r2, [sp]
 800f46c:	4641      	mov	r1, r8
 800f46e:	4632      	mov	r2, r6
 800f470:	4648      	mov	r0, r9
 800f472:	f7ff fa7d 	bl	800e970 <acc_confprogram_patch_offset>
 800f476:	42bc      	cmp	r4, r7
 800f478:	d001      	beq.n	800f47e <patch_program_parameters+0x62>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d1ed      	bne.n	800f45a <patch_program_parameters+0x3e>
 800f47e:	f8ca 6000 	str.w	r6, [sl]
 800f482:	b003      	add	sp, #12
 800f484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f488 <get_parameter_patch_range.constprop.0>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	b085      	sub	sp, #20
 800f48e:	4606      	mov	r6, r0
 800f490:	460d      	mov	r5, r1
 800f492:	4693      	mov	fp, r2
 800f494:	469a      	mov	sl, r3
 800f496:	f000 f981 	bl	800f79c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800f49a:	3e02      	subs	r6, #2
 800f49c:	4604      	mov	r4, r0
 800f49e:	3d02      	subs	r5, #2
 800f4a0:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 800f4a4:	2700      	movs	r7, #0
 800f4a6:	f640 18de 	movw	r8, #2526	@ 0x9de
 800f4aa:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800f4ae:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d013      	beq.n	800f4de <get_parameter_patch_range.constprop.0+0x56>
 800f4b6:	7821      	ldrb	r1, [r4, #0]
 800f4b8:	9101      	str	r1, [sp, #4]
 800f4ba:	f000 f96b 	bl	800f794 <acc_image_a121_r1a_meas_session_param_table_get>
 800f4be:	f10d 030e 	add.w	r3, sp, #14
 800f4c2:	aa03      	add	r2, sp, #12
 800f4c4:	9901      	ldr	r1, [sp, #4]
 800f4c6:	f7ff fb2b 	bl	800eb20 <acc_confprogram_get_parameter_patch_range>
 800f4ca:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f4ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f4d2:	4590      	cmp	r8, r2
 800f4d4:	bf28      	it	cs
 800f4d6:	4690      	movcs	r8, r2
 800f4d8:	429f      	cmp	r7, r3
 800f4da:	bf38      	it	cc
 800f4dc:	461f      	movcc	r7, r3
 800f4de:	3401      	adds	r4, #1
 800f4e0:	454c      	cmp	r4, r9
 800f4e2:	d1e2      	bne.n	800f4aa <get_parameter_patch_range.constprop.0+0x22>
 800f4e4:	f8ab 8000 	strh.w	r8, [fp]
 800f4e8:	f8aa 7000 	strh.w	r7, [sl]
 800f4ec:	b005      	add	sp, #20
 800f4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f2:	bf00      	nop

0800f4f4 <acc_cpd_a121_meas_session_load_program>:
 800f4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f8:	4688      	mov	r8, r1
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	4607      	mov	r7, r0
 800f4fe:	4611      	mov	r1, r2
 800f500:	4640      	mov	r0, r8
 800f502:	4699      	mov	r9, r3
 800f504:	2400      	movs	r4, #0
 800f506:	ab02      	add	r3, sp, #8
 800f508:	aa01      	add	r2, sp, #4
 800f50a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800f50e:	f7fd fc8d 	bl	800ce2c <acc_sensor_a121_prepare_load_confmem>
 800f512:	4638      	mov	r0, r7
 800f514:	f7fd fd34 	bl	800cf80 <acc_sensor_protocol_a121_prepare_load>
 800f518:	b1d8      	cbz	r0, 800f552 <acc_cpd_a121_meas_session_load_program+0x5e>
 800f51a:	9d02      	ldr	r5, [sp, #8]
 800f51c:	f640 1add 	movw	sl, #2525	@ 0x9dd
 800f520:	e000      	b.n	800f524 <acc_cpd_a121_meas_session_load_program+0x30>
 800f522:	b1b6      	cbz	r6, 800f552 <acc_cpd_a121_meas_session_load_program+0x5e>
 800f524:	4622      	mov	r2, r4
 800f526:	9901      	ldr	r1, [sp, #4]
 800f528:	9503      	str	r5, [sp, #12]
 800f52a:	ab03      	add	r3, sp, #12
 800f52c:	4648      	mov	r0, r9
 800f52e:	f7ff ff75 	bl	800f41c <patch_program_parameters>
 800f532:	0861      	lsrs	r1, r4, #1
 800f534:	4606      	mov	r6, r0
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	4638      	mov	r0, r7
 800f53a:	4642      	mov	r2, r8
 800f53c:	f7fd fc8e 	bl	800ce5c <acc_sensor_a121_load_confmem>
 800f540:	9d02      	ldr	r5, [sp, #8]
 800f542:	442c      	add	r4, r5
 800f544:	b2a4      	uxth	r4, r4
 800f546:	4554      	cmp	r4, sl
 800f548:	4630      	mov	r0, r6
 800f54a:	d9ea      	bls.n	800f522 <acc_cpd_a121_meas_session_load_program+0x2e>
 800f54c:	b004      	add	sp, #16
 800f54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f552:	2000      	movs	r0, #0
 800f554:	b004      	add	sp, #16
 800f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f55a:	bf00      	nop

0800f55c <acc_cpd_a121_meas_session_run_program>:
 800f55c:	2115      	movs	r1, #21
 800f55e:	f7fd bd65 	b.w	800d02c <acc_sensor_protocol_a121_run_program>
 800f562:	bf00      	nop

0800f564 <acc_cpd_a121_meas_session_is_patch_needed>:
 800f564:	b500      	push	{lr}
 800f566:	b083      	sub	sp, #12
 800f568:	f10d 0306 	add.w	r3, sp, #6
 800f56c:	aa01      	add	r2, sp, #4
 800f56e:	f7ff ff8b 	bl	800f488 <get_parameter_patch_range.constprop.0>
 800f572:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f576:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f57a:	4298      	cmp	r0, r3
 800f57c:	bf34      	ite	cc
 800f57e:	2000      	movcc	r0, #0
 800f580:	2001      	movcs	r0, #1
 800f582:	b003      	add	sp, #12
 800f584:	f85d fb04 	ldr.w	pc, [sp], #4

0800f588 <acc_cpd_a121_meas_session_update_program>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	b085      	sub	sp, #20
 800f58e:	468a      	mov	sl, r1
 800f590:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800f594:	4693      	mov	fp, r2
 800f596:	461c      	mov	r4, r3
 800f598:	4607      	mov	r7, r0
 800f59a:	f7fd fd33 	bl	800d004 <acc_sensor_protocol_a121_is_ready_to_update>
 800f59e:	b198      	cbz	r0, 800f5c8 <acc_cpd_a121_meas_session_update_program+0x40>
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	ab03      	add	r3, sp, #12
 800f5a4:	aa02      	add	r2, sp, #8
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	f7ff ff6e 	bl	800f488 <get_parameter_patch_range.constprop.0>
 800f5ac:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800f5b0:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 800f5b4:	4544      	cmp	r4, r8
 800f5b6:	d91c      	bls.n	800f5f2 <acc_cpd_a121_meas_session_update_program+0x6a>
 800f5b8:	2501      	movs	r5, #1
 800f5ba:	4638      	mov	r0, r7
 800f5bc:	f7fd ff04 	bl	800d3c8 <acc_sensor_protocol_a121_reconfigure>
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	b005      	add	sp, #20
 800f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c8:	4638      	mov	r0, r7
 800f5ca:	f7fd fee7 	bl	800d39c <acc_sensor_protocol_a121_is_hibernate>
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d1e5      	bne.n	800f5a0 <acc_cpd_a121_meas_session_update_program+0x18>
 800f5d4:	f7fc ff8c 	bl	800c4f0 <acc_rss_integration_log_level>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d0f1      	beq.n	800f5c0 <acc_cpd_a121_meas_session_update_program+0x38>
 800f5dc:	4b18      	ldr	r3, [pc, #96]	@ (800f640 <acc_cpd_a121_meas_session_update_program+0xb8>)
 800f5de:	4a19      	ldr	r2, [pc, #100]	@ (800f644 <acc_cpd_a121_meas_session_update_program+0xbc>)
 800f5e0:	691c      	ldr	r4, [r3, #16]
 800f5e2:	4919      	ldr	r1, [pc, #100]	@ (800f648 <acc_cpd_a121_meas_session_update_program+0xc0>)
 800f5e4:	463b      	mov	r3, r7
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	47a0      	blx	r4
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	b005      	add	sp, #20
 800f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	ab02      	add	r3, sp, #8
 800f5f4:	f108 0602 	add.w	r6, r8, #2
 800f5f8:	4659      	mov	r1, fp
 800f5fa:	aa01      	add	r2, sp, #4
 800f5fc:	4650      	mov	r0, sl
 800f5fe:	f7fd fc15 	bl	800ce2c <acc_sensor_a121_prepare_load_confmem>
 800f602:	1b36      	subs	r6, r6, r4
 800f604:	9b02      	ldr	r3, [sp, #8]
 800f606:	b2b6      	uxth	r6, r6
 800f608:	429e      	cmp	r6, r3
 800f60a:	bf28      	it	cs
 800f60c:	461e      	movcs	r6, r3
 800f60e:	9602      	str	r6, [sp, #8]
 800f610:	e004      	b.n	800f61c <acc_cpd_a121_meas_session_update_program+0x94>
 800f612:	9e02      	ldr	r6, [sp, #8]
 800f614:	4434      	add	r4, r6
 800f616:	b2a4      	uxth	r4, r4
 800f618:	4544      	cmp	r4, r8
 800f61a:	d8ce      	bhi.n	800f5ba <acc_cpd_a121_meas_session_update_program+0x32>
 800f61c:	9901      	ldr	r1, [sp, #4]
 800f61e:	9603      	str	r6, [sp, #12]
 800f620:	ab03      	add	r3, sp, #12
 800f622:	4622      	mov	r2, r4
 800f624:	4648      	mov	r0, r9
 800f626:	f7ff fef9 	bl	800f41c <patch_program_parameters>
 800f62a:	4605      	mov	r5, r0
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d0f0      	beq.n	800f612 <acc_cpd_a121_meas_session_update_program+0x8a>
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	4652      	mov	r2, sl
 800f634:	0861      	lsrs	r1, r4, #1
 800f636:	4638      	mov	r0, r7
 800f638:	f7fd fc10 	bl	800ce5c <acc_sensor_a121_load_confmem>
 800f63c:	e7e9      	b.n	800f612 <acc_cpd_a121_meas_session_update_program+0x8a>
 800f63e:	bf00      	nop
 800f640:	20000610 	.word	0x20000610
 800f644:	08017e28 	.word	0x08017e28
 800f648:	08017e4c 	.word	0x08017e4c

0800f64c <acc_cpd_a121_meas_session_transfer_data>:
 800f64c:	b410      	push	{r4}
 800f64e:	460c      	mov	r4, r1
 800f650:	4611      	mov	r1, r2
 800f652:	4622      	mov	r2, r4
 800f654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f658:	f7fd bc2a 	b.w	800ceb0 <acc_sensor_a121_buffer_processed_read>

0800f65c <acc_pipeline_subsweep_assemble>:
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	4a30      	ldr	r2, [pc, #192]	@ (800f720 <acc_pipeline_subsweep_assemble+0xc4>)
 800f660:	b085      	sub	sp, #20
 800f662:	4605      	mov	r5, r0
 800f664:	2333      	movs	r3, #51	@ 0x33
 800f666:	21e8      	movs	r1, #232	@ 0xe8
 800f668:	2001      	movs	r0, #1
 800f66a:	f7fc ff11 	bl	800c490 <acc_rss_integration_mem_calloc_debug>
 800f66e:	4604      	mov	r4, r0
 800f670:	2800      	cmp	r0, #0
 800f672:	d042      	beq.n	800f6fa <acc_pipeline_subsweep_assemble+0x9e>
 800f674:	89ab      	ldrh	r3, [r5, #12]
 800f676:	68a9      	ldr	r1, [r5, #8]
 800f678:	8a2e      	ldrh	r6, [r5, #16]
 800f67a:	8a6a      	ldrh	r2, [r5, #18]
 800f67c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f680:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 800f684:	696b      	ldr	r3, [r5, #20]
 800f686:	9100      	str	r1, [sp, #0]
 800f688:	f8ad 6006 	strh.w	r6, [sp, #6]
 800f68c:	4669      	mov	r1, sp
 800f68e:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 800f692:	4638      	mov	r0, r7
 800f694:	f8ad 2008 	strh.w	r2, [sp, #8]
 800f698:	9303      	str	r3, [sp, #12]
 800f69a:	f000 f975 	bl	800f988 <acc_element_phase_enhancement_init>
 800f69e:	6829      	ldr	r1, [r5, #0]
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	f7ff fea9 	bl	800f3f8 <acc_element_sink_a121_callback_init>
 800f6a6:	89eb      	ldrh	r3, [r5, #14]
 800f6a8:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800f6ac:	6868      	ldr	r0, [r5, #4]
 800f6ae:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 800f6ba:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 800f6be:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 800f6c2:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 800f6c6:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 800f6ca:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f6cc:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 800f6d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	6265      	str	r5, [r4, #36]	@ 0x24
 800f6d8:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7ff fa51 	bl	800eb84 <acc_element_connect>
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f7ff fa4d 	bl	800eb84 <acc_element_connect>
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	6883      	ldr	r3, [r0, #8]
 800f6ee:	4798      	blx	r3
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	b128      	cbz	r0, 800f700 <acc_pipeline_subsweep_assemble+0xa4>
 800f6f4:	6820      	ldr	r0, [r4, #0]
 800f6f6:	68c3      	ldr	r3, [r0, #12]
 800f6f8:	4798      	blx	r3
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	b005      	add	sp, #20
 800f6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f700:	4b08      	ldr	r3, [pc, #32]	@ (800f724 <acc_pipeline_subsweep_assemble+0xc8>)
 800f702:	4a09      	ldr	r2, [pc, #36]	@ (800f728 <acc_pipeline_subsweep_assemble+0xcc>)
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	4906      	ldr	r1, [pc, #24]	@ (800f720 <acc_pipeline_subsweep_assemble+0xc4>)
 800f708:	4798      	blx	r3
 800f70a:	4638      	mov	r0, r7
 800f70c:	f000 f96e 	bl	800f9ec <acc_element_phase_enhancement_release>
 800f710:	4620      	mov	r0, r4
 800f712:	f7fc fed9 	bl	800c4c8 <acc_rss_integration_mem_free>
 800f716:	462c      	mov	r4, r5
 800f718:	4620      	mov	r0, r4
 800f71a:	b005      	add	sp, #20
 800f71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f71e:	bf00      	nop
 800f720:	08017e64 	.word	0x08017e64
 800f724:	20000610 	.word	0x20000610
 800f728:	08015b50 	.word	0x08015b50

0800f72c <acc_pipeline_subsweep_disassemble>:
 800f72c:	b148      	cbz	r0, 800f742 <acc_pipeline_subsweep_disassemble+0x16>
 800f72e:	b510      	push	{r4, lr}
 800f730:	4604      	mov	r4, r0
 800f732:	303c      	adds	r0, #60	@ 0x3c
 800f734:	f000 f95a 	bl	800f9ec <acc_element_phase_enhancement_release>
 800f738:	4620      	mov	r0, r4
 800f73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f73e:	f7fc bec3 	b.w	800c4c8 <acc_rss_integration_mem_free>
 800f742:	4770      	bx	lr

0800f744 <acc_pipeline_subsweep_prepare_memory>:
 800f744:	b430      	push	{r4, r5}
 800f746:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f74a:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 800f74e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f750:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 800f754:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800f758:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f75c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f760:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800f764:	6144      	str	r4, [r0, #20]
 800f766:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 800f76a:	bc30      	pop	{r4, r5}
 800f76c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop

0800f774 <acc_pipeline_subsweep_produce>:
 800f774:	6803      	ldr	r3, [r0, #0]
 800f776:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 800f77a:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 800f77e:	2100      	movs	r1, #0
 800f780:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	4618      	mov	r0, r3
 800f788:	4710      	bx	r2
 800f78a:	bf00      	nop

0800f78c <acc_image_a121_r1a_meas_session_get>:
 800f78c:	4800      	ldr	r0, [pc, #0]	@ (800f790 <acc_image_a121_r1a_meas_session_get+0x4>)
 800f78e:	4770      	bx	lr
 800f790:	08017e78 	.word	0x08017e78

0800f794 <acc_image_a121_r1a_meas_session_param_table_get>:
 800f794:	4800      	ldr	r0, [pc, #0]	@ (800f798 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 800f796:	4770      	bx	lr
 800f798:	08019234 	.word	0x08019234

0800f79c <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 800f79c:	4800      	ldr	r0, [pc, #0]	@ (800f7a0 <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 800f79e:	4770      	bx	lr
 800f7a0:	08019fdc 	.word	0x08019fdc

0800f7a4 <element_phase_enhancement_reset>:
 800f7a4:	6800      	ldr	r0, [r0, #0]
 800f7a6:	68c3      	ldr	r3, [r0, #12]
 800f7a8:	4718      	bx	r3
 800f7aa:	bf00      	nop

0800f7ac <element_phase_enhancement_validate>:
 800f7ac:	6800      	ldr	r0, [r0, #0]
 800f7ae:	6883      	ldr	r3, [r0, #8]
 800f7b0:	4718      	bx	r3
 800f7b2:	bf00      	nop

0800f7b4 <element_phase_enhancement_event>:
 800f7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	ed2d 8b04 	vpush	{d8-d9}
 800f7bc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f7c0:	b089      	sub	sp, #36	@ 0x24
 800f7c2:	4683      	mov	fp, r0
 800f7c4:	9303      	str	r3, [sp, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f000 80d1 	beq.w	800f96e <element_phase_enhancement_event+0x1ba>
 800f7cc:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 800f7ce:	6904      	ldr	r4, [r0, #16]
 800f7d0:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 800f7d2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 800f7d6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f7d8:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800f7dc:	9006      	str	r0, [sp, #24]
 800f7de:	0052      	lsls	r2, r2, #1
 800f7e0:	9201      	str	r2, [sp, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 80c3 	beq.w	800f96e <element_phase_enhancement_event+0x1ba>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	010a      	lsls	r2, r1, #4
 800f7ec:	eddf 8a64 	vldr	s17, [pc, #400]	@ 800f980 <element_phase_enhancement_event+0x1cc>
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	9207      	str	r2, [sp, #28]
 800f7f4:	469a      	mov	sl, r3
 800f7f6:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 800f7fa:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 800f7fe:	4413      	add	r3, r2
 800f800:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f804:	fb02 3606 	mla	r6, r2, r6, r3
 800f808:	2118      	movs	r1, #24
 800f80a:	4630      	mov	r0, r6
 800f80c:	f7fe fa34 	bl	800dc78 <acc_translation_a121_point_in_coarse>
 800f810:	2118      	movs	r1, #24
 800f812:	4605      	mov	r5, r0
 800f814:	4630      	mov	r0, r6
 800f816:	f7fe fa21 	bl	800dc5c <acc_translation_a121_point_to_coarse>
 800f81a:	9b07      	ldr	r3, [sp, #28]
 800f81c:	0400      	lsls	r0, r0, #16
 800f81e:	fb80 0103 	smull	r0, r1, r0, r3
 800f822:	2800      	cmp	r0, #0
 800f824:	f171 0300 	sbcs.w	r3, r1, #0
 800f828:	da04      	bge.n	800f834 <element_phase_enhancement_event+0x80>
 800f82a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f82e:	18c0      	adds	r0, r0, r3
 800f830:	f141 0100 	adc.w	r1, r1, #0
 800f834:	9b06      	ldr	r3, [sp, #24]
 800f836:	441d      	add	r5, r3
 800f838:	0c03      	lsrs	r3, r0, #16
 800f83a:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 800f83e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f842:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 800f846:	ee07 3a90 	vmov	s15, r3
 800f84a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800f84e:	ee29 9a28 	vmul.f32	s18, s18, s17
 800f852:	eeb0 0a49 	vmov.f32	s0, s18
 800f856:	f003 f973 	bl	8012b40 <cosf>
 800f85a:	eeb0 8a40 	vmov.f32	s16, s0
 800f85e:	eeb0 0a49 	vmov.f32	s0, s18
 800f862:	f003 f9b9 	bl	8012bd8 <sinf>
 800f866:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 800f86a:	f1b9 0f00 	cmp.w	r9, #0
 800f86e:	d073      	beq.n	800f958 <element_phase_enhancement_event+0x1a4>
 800f870:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 800f874:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 800f878:	f8cd b014 	str.w	fp, [sp, #20]
 800f87c:	2000      	movs	r0, #0
 800f87e:	f893 8000 	ldrb.w	r8, [r3]
 800f882:	f8df c100 	ldr.w	ip, [pc, #256]	@ 800f984 <element_phase_enhancement_event+0x1d0>
 800f886:	9304      	str	r3, [sp, #16]
 800f888:	4605      	mov	r5, r0
 800f88a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f88e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800f892:	4693      	mov	fp, r2
 800f894:	e009      	b.n	800f8aa <element_phase_enhancement_event+0xf6>
 800f896:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f89a:	52e2      	strh	r2, [r4, r3]
 800f89c:	3501      	adds	r5, #1
 800f89e:	fa1f fe85 	uxth.w	lr, r5
 800f8a2:	45f1      	cmp	r9, lr
 800f8a4:	4458      	add	r0, fp
 800f8a6:	8071      	strh	r1, [r6, #2]
 800f8a8:	d952      	bls.n	800f950 <element_phase_enhancement_event+0x19c>
 800f8aa:	9a01      	ldr	r2, [sp, #4]
 800f8ac:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8b6:	18e6      	adds	r6, r4, r3
 800f8b8:	5ee2      	ldrsh	r2, [r4, r3]
 800f8ba:	ee07 2a90 	vmov	s15, r2
 800f8be:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800f8c2:	ee06 2a90 	vmov	s13, r2
 800f8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f8ce:	ee27 7a88 	vmul.f32	s14, s15, s16
 800f8d2:	ee66 5a80 	vmul.f32	s11, s13, s0
 800f8d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f8da:	ee66 6a88 	vmul.f32	s13, s13, s16
 800f8de:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f8f2:	bf4c      	ite	mi
 800f8f4:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 800f8f8:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 800f8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f900:	bf4c      	ite	mi
 800f902:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 800f906:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 800f90a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800f90e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f912:	ee17 ea10 	vmov	lr, s14
 800f916:	ee17 1a90 	vmov	r1, s15
 800f91a:	ee17 2a10 	vmov	r2, s14
 800f91e:	45e6      	cmp	lr, ip
 800f920:	bfb8      	it	lt
 800f922:	4662      	movlt	r2, ip
 800f924:	4561      	cmp	r1, ip
 800f926:	bfb8      	it	lt
 800f928:	4661      	movlt	r1, ip
 800f92a:	42ba      	cmp	r2, r7
 800f92c:	bfa8      	it	ge
 800f92e:	463a      	movge	r2, r7
 800f930:	42b9      	cmp	r1, r7
 800f932:	bfa8      	it	ge
 800f934:	4639      	movge	r1, r7
 800f936:	f1b8 0f00 	cmp.w	r8, #0
 800f93a:	d1ae      	bne.n	800f89a <element_phase_enhancement_event+0xe6>
 800f93c:	4596      	cmp	lr, r2
 800f93e:	d1aa      	bne.n	800f896 <element_phase_enhancement_event+0xe2>
 800f940:	ee17 ea90 	vmov	lr, s15
 800f944:	ebbe 0801 	subs.w	r8, lr, r1
 800f948:	bf18      	it	ne
 800f94a:	f04f 0801 	movne.w	r8, #1
 800f94e:	e7a4      	b.n	800f89a <element_phase_enhancement_event+0xe6>
 800f950:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 800f954:	f883 8000 	strb.w	r8, [r3]
 800f958:	9b02      	ldr	r3, [sp, #8]
 800f95a:	3301      	adds	r3, #1
 800f95c:	461a      	mov	r2, r3
 800f95e:	9302      	str	r3, [sp, #8]
 800f960:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 800f964:	fa1f fa82 	uxth.w	sl, r2
 800f968:	4553      	cmp	r3, sl
 800f96a:	f63f af44 	bhi.w	800f7f6 <element_phase_enhancement_event+0x42>
 800f96e:	f8db 0000 	ldr.w	r0, [fp]
 800f972:	6843      	ldr	r3, [r0, #4]
 800f974:	b009      	add	sp, #36	@ 0x24
 800f976:	ecbd 8b04 	vpop	{d8-d9}
 800f97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97e:	4718      	bx	r3
 800f980:	37800000 	.word	0x37800000
 800f984:	ffff8000 	.word	0xffff8000

0800f988 <acc_element_phase_enhancement_init>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	4604      	mov	r4, r0
 800f98c:	460d      	mov	r5, r1
 800f98e:	4814      	ldr	r0, [pc, #80]	@ (800f9e0 <acc_element_phase_enhancement_init+0x58>)
 800f990:	4914      	ldr	r1, [pc, #80]	@ (800f9e4 <acc_element_phase_enhancement_init+0x5c>)
 800f992:	68eb      	ldr	r3, [r5, #12]
 800f994:	4a14      	ldr	r2, [pc, #80]	@ (800f9e8 <acc_element_phase_enhancement_init+0x60>)
 800f996:	60e2      	str	r2, [r4, #12]
 800f998:	e9c4 0101 	strd	r0, r1, [r4, #4]
 800f99c:	b082      	sub	sp, #8
 800f99e:	a901      	add	r1, sp, #4
 800f9a0:	7bd8      	ldrb	r0, [r3, #15]
 800f9a2:	f7fd fd99 	bl	800d4d8 <acc_translation_a121_profile_to_start_point_offset>
 800f9a6:	68eb      	ldr	r3, [r5, #12]
 800f9a8:	882a      	ldrh	r2, [r5, #0]
 800f9aa:	8869      	ldrh	r1, [r5, #2]
 800f9ac:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800f9ae:	88aa      	ldrh	r2, [r5, #4]
 800f9b0:	88ee      	ldrh	r6, [r5, #6]
 800f9b2:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 800f9b4:	8929      	ldrh	r1, [r5, #8]
 800f9b6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800f9b8:	7b1a      	ldrb	r2, [r3, #12]
 800f9ba:	681d      	ldr	r5, [r3, #0]
 800f9bc:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 800f9c0:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 800f9c4:	9901      	ldr	r1, [sp, #4]
 800f9c6:	88da      	ldrh	r2, [r3, #6]
 800f9c8:	889b      	ldrh	r3, [r3, #4]
 800f9ca:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 800f9ce:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 800f9d2:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 800f9d6:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800f9da:	b002      	add	sp, #8
 800f9dc:	bd70      	pop	{r4, r5, r6, pc}
 800f9de:	bf00      	nop
 800f9e0:	0800f7b5 	.word	0x0800f7b5
 800f9e4:	0800f7ad 	.word	0x0800f7ad
 800f9e8:	0800f7a5 	.word	0x0800f7a5

0800f9ec <acc_element_phase_enhancement_release>:
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop

0800f9f0 <_calloc_r>:
 800f9f0:	b570      	push	{r4, r5, r6, lr}
 800f9f2:	fba1 5402 	umull	r5, r4, r1, r2
 800f9f6:	b93c      	cbnz	r4, 800fa08 <_calloc_r+0x18>
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	f000 f83f 	bl	800fa7c <_malloc_r>
 800f9fe:	4606      	mov	r6, r0
 800fa00:	b928      	cbnz	r0, 800fa0e <_calloc_r+0x1e>
 800fa02:	2600      	movs	r6, #0
 800fa04:	4630      	mov	r0, r6
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	220c      	movs	r2, #12
 800fa0a:	6002      	str	r2, [r0, #0]
 800fa0c:	e7f9      	b.n	800fa02 <_calloc_r+0x12>
 800fa0e:	462a      	mov	r2, r5
 800fa10:	4621      	mov	r1, r4
 800fa12:	f001 f833 	bl	8010a7c <memset>
 800fa16:	e7f5      	b.n	800fa04 <_calloc_r+0x14>

0800fa18 <malloc>:
 800fa18:	4b02      	ldr	r3, [pc, #8]	@ (800fa24 <malloc+0xc>)
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	f000 b82d 	b.w	800fa7c <_malloc_r>
 800fa22:	bf00      	nop
 800fa24:	200001b8 	.word	0x200001b8

0800fa28 <free>:
 800fa28:	4b02      	ldr	r3, [pc, #8]	@ (800fa34 <free+0xc>)
 800fa2a:	4601      	mov	r1, r0
 800fa2c:	6818      	ldr	r0, [r3, #0]
 800fa2e:	f001 bf0f 	b.w	8011850 <_free_r>
 800fa32:	bf00      	nop
 800fa34:	200001b8 	.word	0x200001b8

0800fa38 <sbrk_aligned>:
 800fa38:	b570      	push	{r4, r5, r6, lr}
 800fa3a:	4e0f      	ldr	r6, [pc, #60]	@ (800fa78 <sbrk_aligned+0x40>)
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	6831      	ldr	r1, [r6, #0]
 800fa40:	4605      	mov	r5, r0
 800fa42:	b911      	cbnz	r1, 800fa4a <sbrk_aligned+0x12>
 800fa44:	f001 f85a 	bl	8010afc <_sbrk_r>
 800fa48:	6030      	str	r0, [r6, #0]
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f001 f855 	bl	8010afc <_sbrk_r>
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	d103      	bne.n	800fa5e <sbrk_aligned+0x26>
 800fa56:	f04f 34ff 	mov.w	r4, #4294967295
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	bd70      	pop	{r4, r5, r6, pc}
 800fa5e:	1cc4      	adds	r4, r0, #3
 800fa60:	f024 0403 	bic.w	r4, r4, #3
 800fa64:	42a0      	cmp	r0, r4
 800fa66:	d0f8      	beq.n	800fa5a <sbrk_aligned+0x22>
 800fa68:	1a21      	subs	r1, r4, r0
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	f001 f846 	bl	8010afc <_sbrk_r>
 800fa70:	3001      	adds	r0, #1
 800fa72:	d1f2      	bne.n	800fa5a <sbrk_aligned+0x22>
 800fa74:	e7ef      	b.n	800fa56 <sbrk_aligned+0x1e>
 800fa76:	bf00      	nop
 800fa78:	200004c4 	.word	0x200004c4

0800fa7c <_malloc_r>:
 800fa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa80:	1ccd      	adds	r5, r1, #3
 800fa82:	f025 0503 	bic.w	r5, r5, #3
 800fa86:	3508      	adds	r5, #8
 800fa88:	2d0c      	cmp	r5, #12
 800fa8a:	bf38      	it	cc
 800fa8c:	250c      	movcc	r5, #12
 800fa8e:	2d00      	cmp	r5, #0
 800fa90:	4606      	mov	r6, r0
 800fa92:	db01      	blt.n	800fa98 <_malloc_r+0x1c>
 800fa94:	42a9      	cmp	r1, r5
 800fa96:	d904      	bls.n	800faa2 <_malloc_r+0x26>
 800fa98:	230c      	movs	r3, #12
 800fa9a:	6033      	str	r3, [r6, #0]
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb78 <_malloc_r+0xfc>
 800faa6:	f000 f869 	bl	800fb7c <__malloc_lock>
 800faaa:	f8d8 3000 	ldr.w	r3, [r8]
 800faae:	461c      	mov	r4, r3
 800fab0:	bb44      	cbnz	r4, 800fb04 <_malloc_r+0x88>
 800fab2:	4629      	mov	r1, r5
 800fab4:	4630      	mov	r0, r6
 800fab6:	f7ff ffbf 	bl	800fa38 <sbrk_aligned>
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	4604      	mov	r4, r0
 800fabe:	d158      	bne.n	800fb72 <_malloc_r+0xf6>
 800fac0:	f8d8 4000 	ldr.w	r4, [r8]
 800fac4:	4627      	mov	r7, r4
 800fac6:	2f00      	cmp	r7, #0
 800fac8:	d143      	bne.n	800fb52 <_malloc_r+0xd6>
 800faca:	2c00      	cmp	r4, #0
 800facc:	d04b      	beq.n	800fb66 <_malloc_r+0xea>
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	4639      	mov	r1, r7
 800fad2:	4630      	mov	r0, r6
 800fad4:	eb04 0903 	add.w	r9, r4, r3
 800fad8:	f001 f810 	bl	8010afc <_sbrk_r>
 800fadc:	4581      	cmp	r9, r0
 800fade:	d142      	bne.n	800fb66 <_malloc_r+0xea>
 800fae0:	6821      	ldr	r1, [r4, #0]
 800fae2:	1a6d      	subs	r5, r5, r1
 800fae4:	4629      	mov	r1, r5
 800fae6:	4630      	mov	r0, r6
 800fae8:	f7ff ffa6 	bl	800fa38 <sbrk_aligned>
 800faec:	3001      	adds	r0, #1
 800faee:	d03a      	beq.n	800fb66 <_malloc_r+0xea>
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	442b      	add	r3, r5
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	f8d8 3000 	ldr.w	r3, [r8]
 800fafa:	685a      	ldr	r2, [r3, #4]
 800fafc:	bb62      	cbnz	r2, 800fb58 <_malloc_r+0xdc>
 800fafe:	f8c8 7000 	str.w	r7, [r8]
 800fb02:	e00f      	b.n	800fb24 <_malloc_r+0xa8>
 800fb04:	6822      	ldr	r2, [r4, #0]
 800fb06:	1b52      	subs	r2, r2, r5
 800fb08:	d420      	bmi.n	800fb4c <_malloc_r+0xd0>
 800fb0a:	2a0b      	cmp	r2, #11
 800fb0c:	d917      	bls.n	800fb3e <_malloc_r+0xc2>
 800fb0e:	1961      	adds	r1, r4, r5
 800fb10:	42a3      	cmp	r3, r4
 800fb12:	6025      	str	r5, [r4, #0]
 800fb14:	bf18      	it	ne
 800fb16:	6059      	strne	r1, [r3, #4]
 800fb18:	6863      	ldr	r3, [r4, #4]
 800fb1a:	bf08      	it	eq
 800fb1c:	f8c8 1000 	streq.w	r1, [r8]
 800fb20:	5162      	str	r2, [r4, r5]
 800fb22:	604b      	str	r3, [r1, #4]
 800fb24:	4630      	mov	r0, r6
 800fb26:	f000 f82f 	bl	800fb88 <__malloc_unlock>
 800fb2a:	f104 000b 	add.w	r0, r4, #11
 800fb2e:	1d23      	adds	r3, r4, #4
 800fb30:	f020 0007 	bic.w	r0, r0, #7
 800fb34:	1ac2      	subs	r2, r0, r3
 800fb36:	bf1c      	itt	ne
 800fb38:	1a1b      	subne	r3, r3, r0
 800fb3a:	50a3      	strne	r3, [r4, r2]
 800fb3c:	e7af      	b.n	800fa9e <_malloc_r+0x22>
 800fb3e:	6862      	ldr	r2, [r4, #4]
 800fb40:	42a3      	cmp	r3, r4
 800fb42:	bf0c      	ite	eq
 800fb44:	f8c8 2000 	streq.w	r2, [r8]
 800fb48:	605a      	strne	r2, [r3, #4]
 800fb4a:	e7eb      	b.n	800fb24 <_malloc_r+0xa8>
 800fb4c:	4623      	mov	r3, r4
 800fb4e:	6864      	ldr	r4, [r4, #4]
 800fb50:	e7ae      	b.n	800fab0 <_malloc_r+0x34>
 800fb52:	463c      	mov	r4, r7
 800fb54:	687f      	ldr	r7, [r7, #4]
 800fb56:	e7b6      	b.n	800fac6 <_malloc_r+0x4a>
 800fb58:	461a      	mov	r2, r3
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	42a3      	cmp	r3, r4
 800fb5e:	d1fb      	bne.n	800fb58 <_malloc_r+0xdc>
 800fb60:	2300      	movs	r3, #0
 800fb62:	6053      	str	r3, [r2, #4]
 800fb64:	e7de      	b.n	800fb24 <_malloc_r+0xa8>
 800fb66:	230c      	movs	r3, #12
 800fb68:	6033      	str	r3, [r6, #0]
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f000 f80c 	bl	800fb88 <__malloc_unlock>
 800fb70:	e794      	b.n	800fa9c <_malloc_r+0x20>
 800fb72:	6005      	str	r5, [r0, #0]
 800fb74:	e7d6      	b.n	800fb24 <_malloc_r+0xa8>
 800fb76:	bf00      	nop
 800fb78:	200004c8 	.word	0x200004c8

0800fb7c <__malloc_lock>:
 800fb7c:	4801      	ldr	r0, [pc, #4]	@ (800fb84 <__malloc_lock+0x8>)
 800fb7e:	f001 b80a 	b.w	8010b96 <__retarget_lock_acquire_recursive>
 800fb82:	bf00      	nop
 800fb84:	2000060c 	.word	0x2000060c

0800fb88 <__malloc_unlock>:
 800fb88:	4801      	ldr	r0, [pc, #4]	@ (800fb90 <__malloc_unlock+0x8>)
 800fb8a:	f001 b805 	b.w	8010b98 <__retarget_lock_release_recursive>
 800fb8e:	bf00      	nop
 800fb90:	2000060c 	.word	0x2000060c

0800fb94 <__cvt>:
 800fb94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb98:	ec57 6b10 	vmov	r6, r7, d0
 800fb9c:	2f00      	cmp	r7, #0
 800fb9e:	460c      	mov	r4, r1
 800fba0:	4619      	mov	r1, r3
 800fba2:	463b      	mov	r3, r7
 800fba4:	bfbb      	ittet	lt
 800fba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fbaa:	461f      	movlt	r7, r3
 800fbac:	2300      	movge	r3, #0
 800fbae:	232d      	movlt	r3, #45	@ 0x2d
 800fbb0:	700b      	strb	r3, [r1, #0]
 800fbb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fbb8:	4691      	mov	r9, r2
 800fbba:	f023 0820 	bic.w	r8, r3, #32
 800fbbe:	bfbc      	itt	lt
 800fbc0:	4632      	movlt	r2, r6
 800fbc2:	4616      	movlt	r6, r2
 800fbc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fbc8:	d005      	beq.n	800fbd6 <__cvt+0x42>
 800fbca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fbce:	d100      	bne.n	800fbd2 <__cvt+0x3e>
 800fbd0:	3401      	adds	r4, #1
 800fbd2:	2102      	movs	r1, #2
 800fbd4:	e000      	b.n	800fbd8 <__cvt+0x44>
 800fbd6:	2103      	movs	r1, #3
 800fbd8:	ab03      	add	r3, sp, #12
 800fbda:	9301      	str	r3, [sp, #4]
 800fbdc:	ab02      	add	r3, sp, #8
 800fbde:	9300      	str	r3, [sp, #0]
 800fbe0:	ec47 6b10 	vmov	d0, r6, r7
 800fbe4:	4653      	mov	r3, sl
 800fbe6:	4622      	mov	r2, r4
 800fbe8:	f001 f86e 	bl	8010cc8 <_dtoa_r>
 800fbec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fbf0:	4605      	mov	r5, r0
 800fbf2:	d119      	bne.n	800fc28 <__cvt+0x94>
 800fbf4:	f019 0f01 	tst.w	r9, #1
 800fbf8:	d00e      	beq.n	800fc18 <__cvt+0x84>
 800fbfa:	eb00 0904 	add.w	r9, r0, r4
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2300      	movs	r3, #0
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f7f0 ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc0a:	b108      	cbz	r0, 800fc10 <__cvt+0x7c>
 800fc0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc10:	2230      	movs	r2, #48	@ 0x30
 800fc12:	9b03      	ldr	r3, [sp, #12]
 800fc14:	454b      	cmp	r3, r9
 800fc16:	d31e      	bcc.n	800fc56 <__cvt+0xc2>
 800fc18:	9b03      	ldr	r3, [sp, #12]
 800fc1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc1c:	1b5b      	subs	r3, r3, r5
 800fc1e:	4628      	mov	r0, r5
 800fc20:	6013      	str	r3, [r2, #0]
 800fc22:	b004      	add	sp, #16
 800fc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fc2c:	eb00 0904 	add.w	r9, r0, r4
 800fc30:	d1e5      	bne.n	800fbfe <__cvt+0x6a>
 800fc32:	7803      	ldrb	r3, [r0, #0]
 800fc34:	2b30      	cmp	r3, #48	@ 0x30
 800fc36:	d10a      	bne.n	800fc4e <__cvt+0xba>
 800fc38:	2200      	movs	r2, #0
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	4639      	mov	r1, r7
 800fc40:	f7f0 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc44:	b918      	cbnz	r0, 800fc4e <__cvt+0xba>
 800fc46:	f1c4 0401 	rsb	r4, r4, #1
 800fc4a:	f8ca 4000 	str.w	r4, [sl]
 800fc4e:	f8da 3000 	ldr.w	r3, [sl]
 800fc52:	4499      	add	r9, r3
 800fc54:	e7d3      	b.n	800fbfe <__cvt+0x6a>
 800fc56:	1c59      	adds	r1, r3, #1
 800fc58:	9103      	str	r1, [sp, #12]
 800fc5a:	701a      	strb	r2, [r3, #0]
 800fc5c:	e7d9      	b.n	800fc12 <__cvt+0x7e>

0800fc5e <__exponent>:
 800fc5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc60:	2900      	cmp	r1, #0
 800fc62:	bfba      	itte	lt
 800fc64:	4249      	neglt	r1, r1
 800fc66:	232d      	movlt	r3, #45	@ 0x2d
 800fc68:	232b      	movge	r3, #43	@ 0x2b
 800fc6a:	2909      	cmp	r1, #9
 800fc6c:	7002      	strb	r2, [r0, #0]
 800fc6e:	7043      	strb	r3, [r0, #1]
 800fc70:	dd29      	ble.n	800fcc6 <__exponent+0x68>
 800fc72:	f10d 0307 	add.w	r3, sp, #7
 800fc76:	461d      	mov	r5, r3
 800fc78:	270a      	movs	r7, #10
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	fbb1 f6f7 	udiv	r6, r1, r7
 800fc80:	fb07 1416 	mls	r4, r7, r6, r1
 800fc84:	3430      	adds	r4, #48	@ 0x30
 800fc86:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	2c63      	cmp	r4, #99	@ 0x63
 800fc8e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fc92:	4631      	mov	r1, r6
 800fc94:	dcf1      	bgt.n	800fc7a <__exponent+0x1c>
 800fc96:	3130      	adds	r1, #48	@ 0x30
 800fc98:	1e94      	subs	r4, r2, #2
 800fc9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fc9e:	1c41      	adds	r1, r0, #1
 800fca0:	4623      	mov	r3, r4
 800fca2:	42ab      	cmp	r3, r5
 800fca4:	d30a      	bcc.n	800fcbc <__exponent+0x5e>
 800fca6:	f10d 0309 	add.w	r3, sp, #9
 800fcaa:	1a9b      	subs	r3, r3, r2
 800fcac:	42ac      	cmp	r4, r5
 800fcae:	bf88      	it	hi
 800fcb0:	2300      	movhi	r3, #0
 800fcb2:	3302      	adds	r3, #2
 800fcb4:	4403      	add	r3, r0
 800fcb6:	1a18      	subs	r0, r3, r0
 800fcb8:	b003      	add	sp, #12
 800fcba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fcc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fcc4:	e7ed      	b.n	800fca2 <__exponent+0x44>
 800fcc6:	2330      	movs	r3, #48	@ 0x30
 800fcc8:	3130      	adds	r1, #48	@ 0x30
 800fcca:	7083      	strb	r3, [r0, #2]
 800fccc:	70c1      	strb	r1, [r0, #3]
 800fcce:	1d03      	adds	r3, r0, #4
 800fcd0:	e7f1      	b.n	800fcb6 <__exponent+0x58>
	...

0800fcd4 <_printf_float>:
 800fcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd8:	b08d      	sub	sp, #52	@ 0x34
 800fcda:	460c      	mov	r4, r1
 800fcdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fce0:	4616      	mov	r6, r2
 800fce2:	461f      	mov	r7, r3
 800fce4:	4605      	mov	r5, r0
 800fce6:	f000 fed1 	bl	8010a8c <_localeconv_r>
 800fcea:	6803      	ldr	r3, [r0, #0]
 800fcec:	9304      	str	r3, [sp, #16]
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7f0 fac6 	bl	8000280 <strlen>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fcf8:	f8d8 3000 	ldr.w	r3, [r8]
 800fcfc:	9005      	str	r0, [sp, #20]
 800fcfe:	3307      	adds	r3, #7
 800fd00:	f023 0307 	bic.w	r3, r3, #7
 800fd04:	f103 0208 	add.w	r2, r3, #8
 800fd08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fd0c:	f8d4 b000 	ldr.w	fp, [r4]
 800fd10:	f8c8 2000 	str.w	r2, [r8]
 800fd14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fd1c:	9307      	str	r3, [sp, #28]
 800fd1e:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd2a:	4b9c      	ldr	r3, [pc, #624]	@ (800ff9c <_printf_float+0x2c8>)
 800fd2c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd30:	f7f0 ff04 	bl	8000b3c <__aeabi_dcmpun>
 800fd34:	bb70      	cbnz	r0, 800fd94 <_printf_float+0xc0>
 800fd36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd3a:	4b98      	ldr	r3, [pc, #608]	@ (800ff9c <_printf_float+0x2c8>)
 800fd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd40:	f7f0 fede 	bl	8000b00 <__aeabi_dcmple>
 800fd44:	bb30      	cbnz	r0, 800fd94 <_printf_float+0xc0>
 800fd46:	2200      	movs	r2, #0
 800fd48:	2300      	movs	r3, #0
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	f7f0 fecd 	bl	8000aec <__aeabi_dcmplt>
 800fd52:	b110      	cbz	r0, 800fd5a <_printf_float+0x86>
 800fd54:	232d      	movs	r3, #45	@ 0x2d
 800fd56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd5a:	4a91      	ldr	r2, [pc, #580]	@ (800ffa0 <_printf_float+0x2cc>)
 800fd5c:	4b91      	ldr	r3, [pc, #580]	@ (800ffa4 <_printf_float+0x2d0>)
 800fd5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd62:	bf94      	ite	ls
 800fd64:	4690      	movls	r8, r2
 800fd66:	4698      	movhi	r8, r3
 800fd68:	2303      	movs	r3, #3
 800fd6a:	6123      	str	r3, [r4, #16]
 800fd6c:	f02b 0304 	bic.w	r3, fp, #4
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	f04f 0900 	mov.w	r9, #0
 800fd76:	9700      	str	r7, [sp, #0]
 800fd78:	4633      	mov	r3, r6
 800fd7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f000 f9d2 	bl	8010128 <_printf_common>
 800fd84:	3001      	adds	r0, #1
 800fd86:	f040 808d 	bne.w	800fea4 <_printf_float+0x1d0>
 800fd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8e:	b00d      	add	sp, #52	@ 0x34
 800fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd94:	4642      	mov	r2, r8
 800fd96:	464b      	mov	r3, r9
 800fd98:	4640      	mov	r0, r8
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	f7f0 fece 	bl	8000b3c <__aeabi_dcmpun>
 800fda0:	b140      	cbz	r0, 800fdb4 <_printf_float+0xe0>
 800fda2:	464b      	mov	r3, r9
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	bfbc      	itt	lt
 800fda8:	232d      	movlt	r3, #45	@ 0x2d
 800fdaa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fdae:	4a7e      	ldr	r2, [pc, #504]	@ (800ffa8 <_printf_float+0x2d4>)
 800fdb0:	4b7e      	ldr	r3, [pc, #504]	@ (800ffac <_printf_float+0x2d8>)
 800fdb2:	e7d4      	b.n	800fd5e <_printf_float+0x8a>
 800fdb4:	6863      	ldr	r3, [r4, #4]
 800fdb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fdba:	9206      	str	r2, [sp, #24]
 800fdbc:	1c5a      	adds	r2, r3, #1
 800fdbe:	d13b      	bne.n	800fe38 <_printf_float+0x164>
 800fdc0:	2306      	movs	r3, #6
 800fdc2:	6063      	str	r3, [r4, #4]
 800fdc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fdc8:	2300      	movs	r3, #0
 800fdca:	6022      	str	r2, [r4, #0]
 800fdcc:	9303      	str	r3, [sp, #12]
 800fdce:	ab0a      	add	r3, sp, #40	@ 0x28
 800fdd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fdd4:	ab09      	add	r3, sp, #36	@ 0x24
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	6861      	ldr	r1, [r4, #4]
 800fdda:	ec49 8b10 	vmov	d0, r8, r9
 800fdde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7ff fed6 	bl	800fb94 <__cvt>
 800fde8:	9b06      	ldr	r3, [sp, #24]
 800fdea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fdec:	2b47      	cmp	r3, #71	@ 0x47
 800fdee:	4680      	mov	r8, r0
 800fdf0:	d129      	bne.n	800fe46 <_printf_float+0x172>
 800fdf2:	1cc8      	adds	r0, r1, #3
 800fdf4:	db02      	blt.n	800fdfc <_printf_float+0x128>
 800fdf6:	6863      	ldr	r3, [r4, #4]
 800fdf8:	4299      	cmp	r1, r3
 800fdfa:	dd41      	ble.n	800fe80 <_printf_float+0x1ac>
 800fdfc:	f1aa 0a02 	sub.w	sl, sl, #2
 800fe00:	fa5f fa8a 	uxtb.w	sl, sl
 800fe04:	3901      	subs	r1, #1
 800fe06:	4652      	mov	r2, sl
 800fe08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fe0c:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe0e:	f7ff ff26 	bl	800fc5e <__exponent>
 800fe12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fe14:	1813      	adds	r3, r2, r0
 800fe16:	2a01      	cmp	r2, #1
 800fe18:	4681      	mov	r9, r0
 800fe1a:	6123      	str	r3, [r4, #16]
 800fe1c:	dc02      	bgt.n	800fe24 <_printf_float+0x150>
 800fe1e:	6822      	ldr	r2, [r4, #0]
 800fe20:	07d2      	lsls	r2, r2, #31
 800fe22:	d501      	bpl.n	800fe28 <_printf_float+0x154>
 800fe24:	3301      	adds	r3, #1
 800fe26:	6123      	str	r3, [r4, #16]
 800fe28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d0a2      	beq.n	800fd76 <_printf_float+0xa2>
 800fe30:	232d      	movs	r3, #45	@ 0x2d
 800fe32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe36:	e79e      	b.n	800fd76 <_printf_float+0xa2>
 800fe38:	9a06      	ldr	r2, [sp, #24]
 800fe3a:	2a47      	cmp	r2, #71	@ 0x47
 800fe3c:	d1c2      	bne.n	800fdc4 <_printf_float+0xf0>
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1c0      	bne.n	800fdc4 <_printf_float+0xf0>
 800fe42:	2301      	movs	r3, #1
 800fe44:	e7bd      	b.n	800fdc2 <_printf_float+0xee>
 800fe46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fe4a:	d9db      	bls.n	800fe04 <_printf_float+0x130>
 800fe4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fe50:	d118      	bne.n	800fe84 <_printf_float+0x1b0>
 800fe52:	2900      	cmp	r1, #0
 800fe54:	6863      	ldr	r3, [r4, #4]
 800fe56:	dd0b      	ble.n	800fe70 <_printf_float+0x19c>
 800fe58:	6121      	str	r1, [r4, #16]
 800fe5a:	b913      	cbnz	r3, 800fe62 <_printf_float+0x18e>
 800fe5c:	6822      	ldr	r2, [r4, #0]
 800fe5e:	07d0      	lsls	r0, r2, #31
 800fe60:	d502      	bpl.n	800fe68 <_printf_float+0x194>
 800fe62:	3301      	adds	r3, #1
 800fe64:	440b      	add	r3, r1
 800fe66:	6123      	str	r3, [r4, #16]
 800fe68:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fe6a:	f04f 0900 	mov.w	r9, #0
 800fe6e:	e7db      	b.n	800fe28 <_printf_float+0x154>
 800fe70:	b913      	cbnz	r3, 800fe78 <_printf_float+0x1a4>
 800fe72:	6822      	ldr	r2, [r4, #0]
 800fe74:	07d2      	lsls	r2, r2, #31
 800fe76:	d501      	bpl.n	800fe7c <_printf_float+0x1a8>
 800fe78:	3302      	adds	r3, #2
 800fe7a:	e7f4      	b.n	800fe66 <_printf_float+0x192>
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	e7f2      	b.n	800fe66 <_printf_float+0x192>
 800fe80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fe84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe86:	4299      	cmp	r1, r3
 800fe88:	db05      	blt.n	800fe96 <_printf_float+0x1c2>
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	6121      	str	r1, [r4, #16]
 800fe8e:	07d8      	lsls	r0, r3, #31
 800fe90:	d5ea      	bpl.n	800fe68 <_printf_float+0x194>
 800fe92:	1c4b      	adds	r3, r1, #1
 800fe94:	e7e7      	b.n	800fe66 <_printf_float+0x192>
 800fe96:	2900      	cmp	r1, #0
 800fe98:	bfd4      	ite	le
 800fe9a:	f1c1 0202 	rsble	r2, r1, #2
 800fe9e:	2201      	movgt	r2, #1
 800fea0:	4413      	add	r3, r2
 800fea2:	e7e0      	b.n	800fe66 <_printf_float+0x192>
 800fea4:	6823      	ldr	r3, [r4, #0]
 800fea6:	055a      	lsls	r2, r3, #21
 800fea8:	d407      	bmi.n	800feba <_printf_float+0x1e6>
 800feaa:	6923      	ldr	r3, [r4, #16]
 800feac:	4642      	mov	r2, r8
 800feae:	4631      	mov	r1, r6
 800feb0:	4628      	mov	r0, r5
 800feb2:	47b8      	blx	r7
 800feb4:	3001      	adds	r0, #1
 800feb6:	d12b      	bne.n	800ff10 <_printf_float+0x23c>
 800feb8:	e767      	b.n	800fd8a <_printf_float+0xb6>
 800feba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800febe:	f240 80dd 	bls.w	801007c <_printf_float+0x3a8>
 800fec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fec6:	2200      	movs	r2, #0
 800fec8:	2300      	movs	r3, #0
 800feca:	f7f0 fe05 	bl	8000ad8 <__aeabi_dcmpeq>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d033      	beq.n	800ff3a <_printf_float+0x266>
 800fed2:	4a37      	ldr	r2, [pc, #220]	@ (800ffb0 <_printf_float+0x2dc>)
 800fed4:	2301      	movs	r3, #1
 800fed6:	4631      	mov	r1, r6
 800fed8:	4628      	mov	r0, r5
 800feda:	47b8      	blx	r7
 800fedc:	3001      	adds	r0, #1
 800fede:	f43f af54 	beq.w	800fd8a <_printf_float+0xb6>
 800fee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fee6:	4543      	cmp	r3, r8
 800fee8:	db02      	blt.n	800fef0 <_printf_float+0x21c>
 800feea:	6823      	ldr	r3, [r4, #0]
 800feec:	07d8      	lsls	r0, r3, #31
 800feee:	d50f      	bpl.n	800ff10 <_printf_float+0x23c>
 800fef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fef4:	4631      	mov	r1, r6
 800fef6:	4628      	mov	r0, r5
 800fef8:	47b8      	blx	r7
 800fefa:	3001      	adds	r0, #1
 800fefc:	f43f af45 	beq.w	800fd8a <_printf_float+0xb6>
 800ff00:	f04f 0900 	mov.w	r9, #0
 800ff04:	f108 38ff 	add.w	r8, r8, #4294967295
 800ff08:	f104 0a1a 	add.w	sl, r4, #26
 800ff0c:	45c8      	cmp	r8, r9
 800ff0e:	dc09      	bgt.n	800ff24 <_printf_float+0x250>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	079b      	lsls	r3, r3, #30
 800ff14:	f100 8103 	bmi.w	801011e <_printf_float+0x44a>
 800ff18:	68e0      	ldr	r0, [r4, #12]
 800ff1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff1c:	4298      	cmp	r0, r3
 800ff1e:	bfb8      	it	lt
 800ff20:	4618      	movlt	r0, r3
 800ff22:	e734      	b.n	800fd8e <_printf_float+0xba>
 800ff24:	2301      	movs	r3, #1
 800ff26:	4652      	mov	r2, sl
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	47b8      	blx	r7
 800ff2e:	3001      	adds	r0, #1
 800ff30:	f43f af2b 	beq.w	800fd8a <_printf_float+0xb6>
 800ff34:	f109 0901 	add.w	r9, r9, #1
 800ff38:	e7e8      	b.n	800ff0c <_printf_float+0x238>
 800ff3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	dc39      	bgt.n	800ffb4 <_printf_float+0x2e0>
 800ff40:	4a1b      	ldr	r2, [pc, #108]	@ (800ffb0 <_printf_float+0x2dc>)
 800ff42:	2301      	movs	r3, #1
 800ff44:	4631      	mov	r1, r6
 800ff46:	4628      	mov	r0, r5
 800ff48:	47b8      	blx	r7
 800ff4a:	3001      	adds	r0, #1
 800ff4c:	f43f af1d 	beq.w	800fd8a <_printf_float+0xb6>
 800ff50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ff54:	ea59 0303 	orrs.w	r3, r9, r3
 800ff58:	d102      	bne.n	800ff60 <_printf_float+0x28c>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	07d9      	lsls	r1, r3, #31
 800ff5e:	d5d7      	bpl.n	800ff10 <_printf_float+0x23c>
 800ff60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff64:	4631      	mov	r1, r6
 800ff66:	4628      	mov	r0, r5
 800ff68:	47b8      	blx	r7
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	f43f af0d 	beq.w	800fd8a <_printf_float+0xb6>
 800ff70:	f04f 0a00 	mov.w	sl, #0
 800ff74:	f104 0b1a 	add.w	fp, r4, #26
 800ff78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff7a:	425b      	negs	r3, r3
 800ff7c:	4553      	cmp	r3, sl
 800ff7e:	dc01      	bgt.n	800ff84 <_printf_float+0x2b0>
 800ff80:	464b      	mov	r3, r9
 800ff82:	e793      	b.n	800feac <_printf_float+0x1d8>
 800ff84:	2301      	movs	r3, #1
 800ff86:	465a      	mov	r2, fp
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	f43f aefb 	beq.w	800fd8a <_printf_float+0xb6>
 800ff94:	f10a 0a01 	add.w	sl, sl, #1
 800ff98:	e7ee      	b.n	800ff78 <_printf_float+0x2a4>
 800ff9a:	bf00      	nop
 800ff9c:	7fefffff 	.word	0x7fefffff
 800ffa0:	0801a0be 	.word	0x0801a0be
 800ffa4:	0801a0c2 	.word	0x0801a0c2
 800ffa8:	0801a0c6 	.word	0x0801a0c6
 800ffac:	0801a0ca 	.word	0x0801a0ca
 800ffb0:	0801a0ce 	.word	0x0801a0ce
 800ffb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ffba:	4553      	cmp	r3, sl
 800ffbc:	bfa8      	it	ge
 800ffbe:	4653      	movge	r3, sl
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	4699      	mov	r9, r3
 800ffc4:	dc36      	bgt.n	8010034 <_printf_float+0x360>
 800ffc6:	f04f 0b00 	mov.w	fp, #0
 800ffca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffce:	f104 021a 	add.w	r2, r4, #26
 800ffd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ffd4:	9306      	str	r3, [sp, #24]
 800ffd6:	eba3 0309 	sub.w	r3, r3, r9
 800ffda:	455b      	cmp	r3, fp
 800ffdc:	dc31      	bgt.n	8010042 <_printf_float+0x36e>
 800ffde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffe0:	459a      	cmp	sl, r3
 800ffe2:	dc3a      	bgt.n	801005a <_printf_float+0x386>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	07da      	lsls	r2, r3, #31
 800ffe8:	d437      	bmi.n	801005a <_printf_float+0x386>
 800ffea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffec:	ebaa 0903 	sub.w	r9, sl, r3
 800fff0:	9b06      	ldr	r3, [sp, #24]
 800fff2:	ebaa 0303 	sub.w	r3, sl, r3
 800fff6:	4599      	cmp	r9, r3
 800fff8:	bfa8      	it	ge
 800fffa:	4699      	movge	r9, r3
 800fffc:	f1b9 0f00 	cmp.w	r9, #0
 8010000:	dc33      	bgt.n	801006a <_printf_float+0x396>
 8010002:	f04f 0800 	mov.w	r8, #0
 8010006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801000a:	f104 0b1a 	add.w	fp, r4, #26
 801000e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010010:	ebaa 0303 	sub.w	r3, sl, r3
 8010014:	eba3 0309 	sub.w	r3, r3, r9
 8010018:	4543      	cmp	r3, r8
 801001a:	f77f af79 	ble.w	800ff10 <_printf_float+0x23c>
 801001e:	2301      	movs	r3, #1
 8010020:	465a      	mov	r2, fp
 8010022:	4631      	mov	r1, r6
 8010024:	4628      	mov	r0, r5
 8010026:	47b8      	blx	r7
 8010028:	3001      	adds	r0, #1
 801002a:	f43f aeae 	beq.w	800fd8a <_printf_float+0xb6>
 801002e:	f108 0801 	add.w	r8, r8, #1
 8010032:	e7ec      	b.n	801000e <_printf_float+0x33a>
 8010034:	4642      	mov	r2, r8
 8010036:	4631      	mov	r1, r6
 8010038:	4628      	mov	r0, r5
 801003a:	47b8      	blx	r7
 801003c:	3001      	adds	r0, #1
 801003e:	d1c2      	bne.n	800ffc6 <_printf_float+0x2f2>
 8010040:	e6a3      	b.n	800fd8a <_printf_float+0xb6>
 8010042:	2301      	movs	r3, #1
 8010044:	4631      	mov	r1, r6
 8010046:	4628      	mov	r0, r5
 8010048:	9206      	str	r2, [sp, #24]
 801004a:	47b8      	blx	r7
 801004c:	3001      	adds	r0, #1
 801004e:	f43f ae9c 	beq.w	800fd8a <_printf_float+0xb6>
 8010052:	9a06      	ldr	r2, [sp, #24]
 8010054:	f10b 0b01 	add.w	fp, fp, #1
 8010058:	e7bb      	b.n	800ffd2 <_printf_float+0x2fe>
 801005a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801005e:	4631      	mov	r1, r6
 8010060:	4628      	mov	r0, r5
 8010062:	47b8      	blx	r7
 8010064:	3001      	adds	r0, #1
 8010066:	d1c0      	bne.n	800ffea <_printf_float+0x316>
 8010068:	e68f      	b.n	800fd8a <_printf_float+0xb6>
 801006a:	9a06      	ldr	r2, [sp, #24]
 801006c:	464b      	mov	r3, r9
 801006e:	4442      	add	r2, r8
 8010070:	4631      	mov	r1, r6
 8010072:	4628      	mov	r0, r5
 8010074:	47b8      	blx	r7
 8010076:	3001      	adds	r0, #1
 8010078:	d1c3      	bne.n	8010002 <_printf_float+0x32e>
 801007a:	e686      	b.n	800fd8a <_printf_float+0xb6>
 801007c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010080:	f1ba 0f01 	cmp.w	sl, #1
 8010084:	dc01      	bgt.n	801008a <_printf_float+0x3b6>
 8010086:	07db      	lsls	r3, r3, #31
 8010088:	d536      	bpl.n	80100f8 <_printf_float+0x424>
 801008a:	2301      	movs	r3, #1
 801008c:	4642      	mov	r2, r8
 801008e:	4631      	mov	r1, r6
 8010090:	4628      	mov	r0, r5
 8010092:	47b8      	blx	r7
 8010094:	3001      	adds	r0, #1
 8010096:	f43f ae78 	beq.w	800fd8a <_printf_float+0xb6>
 801009a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801009e:	4631      	mov	r1, r6
 80100a0:	4628      	mov	r0, r5
 80100a2:	47b8      	blx	r7
 80100a4:	3001      	adds	r0, #1
 80100a6:	f43f ae70 	beq.w	800fd8a <_printf_float+0xb6>
 80100aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80100ae:	2200      	movs	r2, #0
 80100b0:	2300      	movs	r3, #0
 80100b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100b6:	f7f0 fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80100ba:	b9c0      	cbnz	r0, 80100ee <_printf_float+0x41a>
 80100bc:	4653      	mov	r3, sl
 80100be:	f108 0201 	add.w	r2, r8, #1
 80100c2:	4631      	mov	r1, r6
 80100c4:	4628      	mov	r0, r5
 80100c6:	47b8      	blx	r7
 80100c8:	3001      	adds	r0, #1
 80100ca:	d10c      	bne.n	80100e6 <_printf_float+0x412>
 80100cc:	e65d      	b.n	800fd8a <_printf_float+0xb6>
 80100ce:	2301      	movs	r3, #1
 80100d0:	465a      	mov	r2, fp
 80100d2:	4631      	mov	r1, r6
 80100d4:	4628      	mov	r0, r5
 80100d6:	47b8      	blx	r7
 80100d8:	3001      	adds	r0, #1
 80100da:	f43f ae56 	beq.w	800fd8a <_printf_float+0xb6>
 80100de:	f108 0801 	add.w	r8, r8, #1
 80100e2:	45d0      	cmp	r8, sl
 80100e4:	dbf3      	blt.n	80100ce <_printf_float+0x3fa>
 80100e6:	464b      	mov	r3, r9
 80100e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80100ec:	e6df      	b.n	800feae <_printf_float+0x1da>
 80100ee:	f04f 0800 	mov.w	r8, #0
 80100f2:	f104 0b1a 	add.w	fp, r4, #26
 80100f6:	e7f4      	b.n	80100e2 <_printf_float+0x40e>
 80100f8:	2301      	movs	r3, #1
 80100fa:	4642      	mov	r2, r8
 80100fc:	e7e1      	b.n	80100c2 <_printf_float+0x3ee>
 80100fe:	2301      	movs	r3, #1
 8010100:	464a      	mov	r2, r9
 8010102:	4631      	mov	r1, r6
 8010104:	4628      	mov	r0, r5
 8010106:	47b8      	blx	r7
 8010108:	3001      	adds	r0, #1
 801010a:	f43f ae3e 	beq.w	800fd8a <_printf_float+0xb6>
 801010e:	f108 0801 	add.w	r8, r8, #1
 8010112:	68e3      	ldr	r3, [r4, #12]
 8010114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010116:	1a5b      	subs	r3, r3, r1
 8010118:	4543      	cmp	r3, r8
 801011a:	dcf0      	bgt.n	80100fe <_printf_float+0x42a>
 801011c:	e6fc      	b.n	800ff18 <_printf_float+0x244>
 801011e:	f04f 0800 	mov.w	r8, #0
 8010122:	f104 0919 	add.w	r9, r4, #25
 8010126:	e7f4      	b.n	8010112 <_printf_float+0x43e>

08010128 <_printf_common>:
 8010128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801012c:	4616      	mov	r6, r2
 801012e:	4698      	mov	r8, r3
 8010130:	688a      	ldr	r2, [r1, #8]
 8010132:	690b      	ldr	r3, [r1, #16]
 8010134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010138:	4293      	cmp	r3, r2
 801013a:	bfb8      	it	lt
 801013c:	4613      	movlt	r3, r2
 801013e:	6033      	str	r3, [r6, #0]
 8010140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010144:	4607      	mov	r7, r0
 8010146:	460c      	mov	r4, r1
 8010148:	b10a      	cbz	r2, 801014e <_printf_common+0x26>
 801014a:	3301      	adds	r3, #1
 801014c:	6033      	str	r3, [r6, #0]
 801014e:	6823      	ldr	r3, [r4, #0]
 8010150:	0699      	lsls	r1, r3, #26
 8010152:	bf42      	ittt	mi
 8010154:	6833      	ldrmi	r3, [r6, #0]
 8010156:	3302      	addmi	r3, #2
 8010158:	6033      	strmi	r3, [r6, #0]
 801015a:	6825      	ldr	r5, [r4, #0]
 801015c:	f015 0506 	ands.w	r5, r5, #6
 8010160:	d106      	bne.n	8010170 <_printf_common+0x48>
 8010162:	f104 0a19 	add.w	sl, r4, #25
 8010166:	68e3      	ldr	r3, [r4, #12]
 8010168:	6832      	ldr	r2, [r6, #0]
 801016a:	1a9b      	subs	r3, r3, r2
 801016c:	42ab      	cmp	r3, r5
 801016e:	dc26      	bgt.n	80101be <_printf_common+0x96>
 8010170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010174:	6822      	ldr	r2, [r4, #0]
 8010176:	3b00      	subs	r3, #0
 8010178:	bf18      	it	ne
 801017a:	2301      	movne	r3, #1
 801017c:	0692      	lsls	r2, r2, #26
 801017e:	d42b      	bmi.n	80101d8 <_printf_common+0xb0>
 8010180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010184:	4641      	mov	r1, r8
 8010186:	4638      	mov	r0, r7
 8010188:	47c8      	blx	r9
 801018a:	3001      	adds	r0, #1
 801018c:	d01e      	beq.n	80101cc <_printf_common+0xa4>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	6922      	ldr	r2, [r4, #16]
 8010192:	f003 0306 	and.w	r3, r3, #6
 8010196:	2b04      	cmp	r3, #4
 8010198:	bf02      	ittt	eq
 801019a:	68e5      	ldreq	r5, [r4, #12]
 801019c:	6833      	ldreq	r3, [r6, #0]
 801019e:	1aed      	subeq	r5, r5, r3
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	bf0c      	ite	eq
 80101a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101a8:	2500      	movne	r5, #0
 80101aa:	4293      	cmp	r3, r2
 80101ac:	bfc4      	itt	gt
 80101ae:	1a9b      	subgt	r3, r3, r2
 80101b0:	18ed      	addgt	r5, r5, r3
 80101b2:	2600      	movs	r6, #0
 80101b4:	341a      	adds	r4, #26
 80101b6:	42b5      	cmp	r5, r6
 80101b8:	d11a      	bne.n	80101f0 <_printf_common+0xc8>
 80101ba:	2000      	movs	r0, #0
 80101bc:	e008      	b.n	80101d0 <_printf_common+0xa8>
 80101be:	2301      	movs	r3, #1
 80101c0:	4652      	mov	r2, sl
 80101c2:	4641      	mov	r1, r8
 80101c4:	4638      	mov	r0, r7
 80101c6:	47c8      	blx	r9
 80101c8:	3001      	adds	r0, #1
 80101ca:	d103      	bne.n	80101d4 <_printf_common+0xac>
 80101cc:	f04f 30ff 	mov.w	r0, #4294967295
 80101d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d4:	3501      	adds	r5, #1
 80101d6:	e7c6      	b.n	8010166 <_printf_common+0x3e>
 80101d8:	18e1      	adds	r1, r4, r3
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	2030      	movs	r0, #48	@ 0x30
 80101de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80101e2:	4422      	add	r2, r4
 80101e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80101e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80101ec:	3302      	adds	r3, #2
 80101ee:	e7c7      	b.n	8010180 <_printf_common+0x58>
 80101f0:	2301      	movs	r3, #1
 80101f2:	4622      	mov	r2, r4
 80101f4:	4641      	mov	r1, r8
 80101f6:	4638      	mov	r0, r7
 80101f8:	47c8      	blx	r9
 80101fa:	3001      	adds	r0, #1
 80101fc:	d0e6      	beq.n	80101cc <_printf_common+0xa4>
 80101fe:	3601      	adds	r6, #1
 8010200:	e7d9      	b.n	80101b6 <_printf_common+0x8e>
	...

08010204 <_printf_i>:
 8010204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010208:	7e0f      	ldrb	r7, [r1, #24]
 801020a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801020c:	2f78      	cmp	r7, #120	@ 0x78
 801020e:	4691      	mov	r9, r2
 8010210:	4680      	mov	r8, r0
 8010212:	460c      	mov	r4, r1
 8010214:	469a      	mov	sl, r3
 8010216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801021a:	d807      	bhi.n	801022c <_printf_i+0x28>
 801021c:	2f62      	cmp	r7, #98	@ 0x62
 801021e:	d80a      	bhi.n	8010236 <_printf_i+0x32>
 8010220:	2f00      	cmp	r7, #0
 8010222:	f000 80d2 	beq.w	80103ca <_printf_i+0x1c6>
 8010226:	2f58      	cmp	r7, #88	@ 0x58
 8010228:	f000 80b9 	beq.w	801039e <_printf_i+0x19a>
 801022c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010234:	e03a      	b.n	80102ac <_printf_i+0xa8>
 8010236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801023a:	2b15      	cmp	r3, #21
 801023c:	d8f6      	bhi.n	801022c <_printf_i+0x28>
 801023e:	a101      	add	r1, pc, #4	@ (adr r1, 8010244 <_printf_i+0x40>)
 8010240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010244:	0801029d 	.word	0x0801029d
 8010248:	080102b1 	.word	0x080102b1
 801024c:	0801022d 	.word	0x0801022d
 8010250:	0801022d 	.word	0x0801022d
 8010254:	0801022d 	.word	0x0801022d
 8010258:	0801022d 	.word	0x0801022d
 801025c:	080102b1 	.word	0x080102b1
 8010260:	0801022d 	.word	0x0801022d
 8010264:	0801022d 	.word	0x0801022d
 8010268:	0801022d 	.word	0x0801022d
 801026c:	0801022d 	.word	0x0801022d
 8010270:	080103b1 	.word	0x080103b1
 8010274:	080102db 	.word	0x080102db
 8010278:	0801036b 	.word	0x0801036b
 801027c:	0801022d 	.word	0x0801022d
 8010280:	0801022d 	.word	0x0801022d
 8010284:	080103d3 	.word	0x080103d3
 8010288:	0801022d 	.word	0x0801022d
 801028c:	080102db 	.word	0x080102db
 8010290:	0801022d 	.word	0x0801022d
 8010294:	0801022d 	.word	0x0801022d
 8010298:	08010373 	.word	0x08010373
 801029c:	6833      	ldr	r3, [r6, #0]
 801029e:	1d1a      	adds	r2, r3, #4
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	6032      	str	r2, [r6, #0]
 80102a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80102ac:	2301      	movs	r3, #1
 80102ae:	e09d      	b.n	80103ec <_printf_i+0x1e8>
 80102b0:	6833      	ldr	r3, [r6, #0]
 80102b2:	6820      	ldr	r0, [r4, #0]
 80102b4:	1d19      	adds	r1, r3, #4
 80102b6:	6031      	str	r1, [r6, #0]
 80102b8:	0606      	lsls	r6, r0, #24
 80102ba:	d501      	bpl.n	80102c0 <_printf_i+0xbc>
 80102bc:	681d      	ldr	r5, [r3, #0]
 80102be:	e003      	b.n	80102c8 <_printf_i+0xc4>
 80102c0:	0645      	lsls	r5, r0, #25
 80102c2:	d5fb      	bpl.n	80102bc <_printf_i+0xb8>
 80102c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80102c8:	2d00      	cmp	r5, #0
 80102ca:	da03      	bge.n	80102d4 <_printf_i+0xd0>
 80102cc:	232d      	movs	r3, #45	@ 0x2d
 80102ce:	426d      	negs	r5, r5
 80102d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102d4:	4859      	ldr	r0, [pc, #356]	@ (801043c <_printf_i+0x238>)
 80102d6:	230a      	movs	r3, #10
 80102d8:	e011      	b.n	80102fe <_printf_i+0xfa>
 80102da:	6821      	ldr	r1, [r4, #0]
 80102dc:	6833      	ldr	r3, [r6, #0]
 80102de:	0608      	lsls	r0, r1, #24
 80102e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80102e4:	d402      	bmi.n	80102ec <_printf_i+0xe8>
 80102e6:	0649      	lsls	r1, r1, #25
 80102e8:	bf48      	it	mi
 80102ea:	b2ad      	uxthmi	r5, r5
 80102ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80102ee:	4853      	ldr	r0, [pc, #332]	@ (801043c <_printf_i+0x238>)
 80102f0:	6033      	str	r3, [r6, #0]
 80102f2:	bf14      	ite	ne
 80102f4:	230a      	movne	r3, #10
 80102f6:	2308      	moveq	r3, #8
 80102f8:	2100      	movs	r1, #0
 80102fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80102fe:	6866      	ldr	r6, [r4, #4]
 8010300:	60a6      	str	r6, [r4, #8]
 8010302:	2e00      	cmp	r6, #0
 8010304:	bfa2      	ittt	ge
 8010306:	6821      	ldrge	r1, [r4, #0]
 8010308:	f021 0104 	bicge.w	r1, r1, #4
 801030c:	6021      	strge	r1, [r4, #0]
 801030e:	b90d      	cbnz	r5, 8010314 <_printf_i+0x110>
 8010310:	2e00      	cmp	r6, #0
 8010312:	d04b      	beq.n	80103ac <_printf_i+0x1a8>
 8010314:	4616      	mov	r6, r2
 8010316:	fbb5 f1f3 	udiv	r1, r5, r3
 801031a:	fb03 5711 	mls	r7, r3, r1, r5
 801031e:	5dc7      	ldrb	r7, [r0, r7]
 8010320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010324:	462f      	mov	r7, r5
 8010326:	42bb      	cmp	r3, r7
 8010328:	460d      	mov	r5, r1
 801032a:	d9f4      	bls.n	8010316 <_printf_i+0x112>
 801032c:	2b08      	cmp	r3, #8
 801032e:	d10b      	bne.n	8010348 <_printf_i+0x144>
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	07df      	lsls	r7, r3, #31
 8010334:	d508      	bpl.n	8010348 <_printf_i+0x144>
 8010336:	6923      	ldr	r3, [r4, #16]
 8010338:	6861      	ldr	r1, [r4, #4]
 801033a:	4299      	cmp	r1, r3
 801033c:	bfde      	ittt	le
 801033e:	2330      	movle	r3, #48	@ 0x30
 8010340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010348:	1b92      	subs	r2, r2, r6
 801034a:	6122      	str	r2, [r4, #16]
 801034c:	f8cd a000 	str.w	sl, [sp]
 8010350:	464b      	mov	r3, r9
 8010352:	aa03      	add	r2, sp, #12
 8010354:	4621      	mov	r1, r4
 8010356:	4640      	mov	r0, r8
 8010358:	f7ff fee6 	bl	8010128 <_printf_common>
 801035c:	3001      	adds	r0, #1
 801035e:	d14a      	bne.n	80103f6 <_printf_i+0x1f2>
 8010360:	f04f 30ff 	mov.w	r0, #4294967295
 8010364:	b004      	add	sp, #16
 8010366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036a:	6823      	ldr	r3, [r4, #0]
 801036c:	f043 0320 	orr.w	r3, r3, #32
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	4833      	ldr	r0, [pc, #204]	@ (8010440 <_printf_i+0x23c>)
 8010374:	2778      	movs	r7, #120	@ 0x78
 8010376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	6831      	ldr	r1, [r6, #0]
 801037e:	061f      	lsls	r7, r3, #24
 8010380:	f851 5b04 	ldr.w	r5, [r1], #4
 8010384:	d402      	bmi.n	801038c <_printf_i+0x188>
 8010386:	065f      	lsls	r7, r3, #25
 8010388:	bf48      	it	mi
 801038a:	b2ad      	uxthmi	r5, r5
 801038c:	6031      	str	r1, [r6, #0]
 801038e:	07d9      	lsls	r1, r3, #31
 8010390:	bf44      	itt	mi
 8010392:	f043 0320 	orrmi.w	r3, r3, #32
 8010396:	6023      	strmi	r3, [r4, #0]
 8010398:	b11d      	cbz	r5, 80103a2 <_printf_i+0x19e>
 801039a:	2310      	movs	r3, #16
 801039c:	e7ac      	b.n	80102f8 <_printf_i+0xf4>
 801039e:	4827      	ldr	r0, [pc, #156]	@ (801043c <_printf_i+0x238>)
 80103a0:	e7e9      	b.n	8010376 <_printf_i+0x172>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	f023 0320 	bic.w	r3, r3, #32
 80103a8:	6023      	str	r3, [r4, #0]
 80103aa:	e7f6      	b.n	801039a <_printf_i+0x196>
 80103ac:	4616      	mov	r6, r2
 80103ae:	e7bd      	b.n	801032c <_printf_i+0x128>
 80103b0:	6833      	ldr	r3, [r6, #0]
 80103b2:	6825      	ldr	r5, [r4, #0]
 80103b4:	6961      	ldr	r1, [r4, #20]
 80103b6:	1d18      	adds	r0, r3, #4
 80103b8:	6030      	str	r0, [r6, #0]
 80103ba:	062e      	lsls	r6, r5, #24
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	d501      	bpl.n	80103c4 <_printf_i+0x1c0>
 80103c0:	6019      	str	r1, [r3, #0]
 80103c2:	e002      	b.n	80103ca <_printf_i+0x1c6>
 80103c4:	0668      	lsls	r0, r5, #25
 80103c6:	d5fb      	bpl.n	80103c0 <_printf_i+0x1bc>
 80103c8:	8019      	strh	r1, [r3, #0]
 80103ca:	2300      	movs	r3, #0
 80103cc:	6123      	str	r3, [r4, #16]
 80103ce:	4616      	mov	r6, r2
 80103d0:	e7bc      	b.n	801034c <_printf_i+0x148>
 80103d2:	6833      	ldr	r3, [r6, #0]
 80103d4:	1d1a      	adds	r2, r3, #4
 80103d6:	6032      	str	r2, [r6, #0]
 80103d8:	681e      	ldr	r6, [r3, #0]
 80103da:	6862      	ldr	r2, [r4, #4]
 80103dc:	2100      	movs	r1, #0
 80103de:	4630      	mov	r0, r6
 80103e0:	f7ef fefe 	bl	80001e0 <memchr>
 80103e4:	b108      	cbz	r0, 80103ea <_printf_i+0x1e6>
 80103e6:	1b80      	subs	r0, r0, r6
 80103e8:	6060      	str	r0, [r4, #4]
 80103ea:	6863      	ldr	r3, [r4, #4]
 80103ec:	6123      	str	r3, [r4, #16]
 80103ee:	2300      	movs	r3, #0
 80103f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80103f4:	e7aa      	b.n	801034c <_printf_i+0x148>
 80103f6:	6923      	ldr	r3, [r4, #16]
 80103f8:	4632      	mov	r2, r6
 80103fa:	4649      	mov	r1, r9
 80103fc:	4640      	mov	r0, r8
 80103fe:	47d0      	blx	sl
 8010400:	3001      	adds	r0, #1
 8010402:	d0ad      	beq.n	8010360 <_printf_i+0x15c>
 8010404:	6823      	ldr	r3, [r4, #0]
 8010406:	079b      	lsls	r3, r3, #30
 8010408:	d413      	bmi.n	8010432 <_printf_i+0x22e>
 801040a:	68e0      	ldr	r0, [r4, #12]
 801040c:	9b03      	ldr	r3, [sp, #12]
 801040e:	4298      	cmp	r0, r3
 8010410:	bfb8      	it	lt
 8010412:	4618      	movlt	r0, r3
 8010414:	e7a6      	b.n	8010364 <_printf_i+0x160>
 8010416:	2301      	movs	r3, #1
 8010418:	4632      	mov	r2, r6
 801041a:	4649      	mov	r1, r9
 801041c:	4640      	mov	r0, r8
 801041e:	47d0      	blx	sl
 8010420:	3001      	adds	r0, #1
 8010422:	d09d      	beq.n	8010360 <_printf_i+0x15c>
 8010424:	3501      	adds	r5, #1
 8010426:	68e3      	ldr	r3, [r4, #12]
 8010428:	9903      	ldr	r1, [sp, #12]
 801042a:	1a5b      	subs	r3, r3, r1
 801042c:	42ab      	cmp	r3, r5
 801042e:	dcf2      	bgt.n	8010416 <_printf_i+0x212>
 8010430:	e7eb      	b.n	801040a <_printf_i+0x206>
 8010432:	2500      	movs	r5, #0
 8010434:	f104 0619 	add.w	r6, r4, #25
 8010438:	e7f5      	b.n	8010426 <_printf_i+0x222>
 801043a:	bf00      	nop
 801043c:	0801a0d0 	.word	0x0801a0d0
 8010440:	0801a0e1 	.word	0x0801a0e1

08010444 <__sflush_r>:
 8010444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044c:	0716      	lsls	r6, r2, #28
 801044e:	4605      	mov	r5, r0
 8010450:	460c      	mov	r4, r1
 8010452:	d454      	bmi.n	80104fe <__sflush_r+0xba>
 8010454:	684b      	ldr	r3, [r1, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	dc02      	bgt.n	8010460 <__sflush_r+0x1c>
 801045a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801045c:	2b00      	cmp	r3, #0
 801045e:	dd48      	ble.n	80104f2 <__sflush_r+0xae>
 8010460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010462:	2e00      	cmp	r6, #0
 8010464:	d045      	beq.n	80104f2 <__sflush_r+0xae>
 8010466:	2300      	movs	r3, #0
 8010468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801046c:	682f      	ldr	r7, [r5, #0]
 801046e:	6a21      	ldr	r1, [r4, #32]
 8010470:	602b      	str	r3, [r5, #0]
 8010472:	d030      	beq.n	80104d6 <__sflush_r+0x92>
 8010474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	0759      	lsls	r1, r3, #29
 801047a:	d505      	bpl.n	8010488 <__sflush_r+0x44>
 801047c:	6863      	ldr	r3, [r4, #4]
 801047e:	1ad2      	subs	r2, r2, r3
 8010480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010482:	b10b      	cbz	r3, 8010488 <__sflush_r+0x44>
 8010484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010486:	1ad2      	subs	r2, r2, r3
 8010488:	2300      	movs	r3, #0
 801048a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801048c:	6a21      	ldr	r1, [r4, #32]
 801048e:	4628      	mov	r0, r5
 8010490:	47b0      	blx	r6
 8010492:	1c43      	adds	r3, r0, #1
 8010494:	89a3      	ldrh	r3, [r4, #12]
 8010496:	d106      	bne.n	80104a6 <__sflush_r+0x62>
 8010498:	6829      	ldr	r1, [r5, #0]
 801049a:	291d      	cmp	r1, #29
 801049c:	d82b      	bhi.n	80104f6 <__sflush_r+0xb2>
 801049e:	4a2a      	ldr	r2, [pc, #168]	@ (8010548 <__sflush_r+0x104>)
 80104a0:	410a      	asrs	r2, r1
 80104a2:	07d6      	lsls	r6, r2, #31
 80104a4:	d427      	bmi.n	80104f6 <__sflush_r+0xb2>
 80104a6:	2200      	movs	r2, #0
 80104a8:	6062      	str	r2, [r4, #4]
 80104aa:	04d9      	lsls	r1, r3, #19
 80104ac:	6922      	ldr	r2, [r4, #16]
 80104ae:	6022      	str	r2, [r4, #0]
 80104b0:	d504      	bpl.n	80104bc <__sflush_r+0x78>
 80104b2:	1c42      	adds	r2, r0, #1
 80104b4:	d101      	bne.n	80104ba <__sflush_r+0x76>
 80104b6:	682b      	ldr	r3, [r5, #0]
 80104b8:	b903      	cbnz	r3, 80104bc <__sflush_r+0x78>
 80104ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80104bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104be:	602f      	str	r7, [r5, #0]
 80104c0:	b1b9      	cbz	r1, 80104f2 <__sflush_r+0xae>
 80104c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104c6:	4299      	cmp	r1, r3
 80104c8:	d002      	beq.n	80104d0 <__sflush_r+0x8c>
 80104ca:	4628      	mov	r0, r5
 80104cc:	f001 f9c0 	bl	8011850 <_free_r>
 80104d0:	2300      	movs	r3, #0
 80104d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80104d4:	e00d      	b.n	80104f2 <__sflush_r+0xae>
 80104d6:	2301      	movs	r3, #1
 80104d8:	4628      	mov	r0, r5
 80104da:	47b0      	blx	r6
 80104dc:	4602      	mov	r2, r0
 80104de:	1c50      	adds	r0, r2, #1
 80104e0:	d1c9      	bne.n	8010476 <__sflush_r+0x32>
 80104e2:	682b      	ldr	r3, [r5, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d0c6      	beq.n	8010476 <__sflush_r+0x32>
 80104e8:	2b1d      	cmp	r3, #29
 80104ea:	d001      	beq.n	80104f0 <__sflush_r+0xac>
 80104ec:	2b16      	cmp	r3, #22
 80104ee:	d11e      	bne.n	801052e <__sflush_r+0xea>
 80104f0:	602f      	str	r7, [r5, #0]
 80104f2:	2000      	movs	r0, #0
 80104f4:	e022      	b.n	801053c <__sflush_r+0xf8>
 80104f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104fa:	b21b      	sxth	r3, r3
 80104fc:	e01b      	b.n	8010536 <__sflush_r+0xf2>
 80104fe:	690f      	ldr	r7, [r1, #16]
 8010500:	2f00      	cmp	r7, #0
 8010502:	d0f6      	beq.n	80104f2 <__sflush_r+0xae>
 8010504:	0793      	lsls	r3, r2, #30
 8010506:	680e      	ldr	r6, [r1, #0]
 8010508:	bf08      	it	eq
 801050a:	694b      	ldreq	r3, [r1, #20]
 801050c:	600f      	str	r7, [r1, #0]
 801050e:	bf18      	it	ne
 8010510:	2300      	movne	r3, #0
 8010512:	eba6 0807 	sub.w	r8, r6, r7
 8010516:	608b      	str	r3, [r1, #8]
 8010518:	f1b8 0f00 	cmp.w	r8, #0
 801051c:	dde9      	ble.n	80104f2 <__sflush_r+0xae>
 801051e:	6a21      	ldr	r1, [r4, #32]
 8010520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010522:	4643      	mov	r3, r8
 8010524:	463a      	mov	r2, r7
 8010526:	4628      	mov	r0, r5
 8010528:	47b0      	blx	r6
 801052a:	2800      	cmp	r0, #0
 801052c:	dc08      	bgt.n	8010540 <__sflush_r+0xfc>
 801052e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010536:	81a3      	strh	r3, [r4, #12]
 8010538:	f04f 30ff 	mov.w	r0, #4294967295
 801053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010540:	4407      	add	r7, r0
 8010542:	eba8 0800 	sub.w	r8, r8, r0
 8010546:	e7e7      	b.n	8010518 <__sflush_r+0xd4>
 8010548:	dfbffffe 	.word	0xdfbffffe

0801054c <_fflush_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	690b      	ldr	r3, [r1, #16]
 8010550:	4605      	mov	r5, r0
 8010552:	460c      	mov	r4, r1
 8010554:	b913      	cbnz	r3, 801055c <_fflush_r+0x10>
 8010556:	2500      	movs	r5, #0
 8010558:	4628      	mov	r0, r5
 801055a:	bd38      	pop	{r3, r4, r5, pc}
 801055c:	b118      	cbz	r0, 8010566 <_fflush_r+0x1a>
 801055e:	6a03      	ldr	r3, [r0, #32]
 8010560:	b90b      	cbnz	r3, 8010566 <_fflush_r+0x1a>
 8010562:	f000 f8bb 	bl	80106dc <__sinit>
 8010566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d0f3      	beq.n	8010556 <_fflush_r+0xa>
 801056e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010570:	07d0      	lsls	r0, r2, #31
 8010572:	d404      	bmi.n	801057e <_fflush_r+0x32>
 8010574:	0599      	lsls	r1, r3, #22
 8010576:	d402      	bmi.n	801057e <_fflush_r+0x32>
 8010578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801057a:	f000 fb0c 	bl	8010b96 <__retarget_lock_acquire_recursive>
 801057e:	4628      	mov	r0, r5
 8010580:	4621      	mov	r1, r4
 8010582:	f7ff ff5f 	bl	8010444 <__sflush_r>
 8010586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010588:	07da      	lsls	r2, r3, #31
 801058a:	4605      	mov	r5, r0
 801058c:	d4e4      	bmi.n	8010558 <_fflush_r+0xc>
 801058e:	89a3      	ldrh	r3, [r4, #12]
 8010590:	059b      	lsls	r3, r3, #22
 8010592:	d4e1      	bmi.n	8010558 <_fflush_r+0xc>
 8010594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010596:	f000 faff 	bl	8010b98 <__retarget_lock_release_recursive>
 801059a:	e7dd      	b.n	8010558 <_fflush_r+0xc>

0801059c <fflush>:
 801059c:	4601      	mov	r1, r0
 801059e:	b920      	cbnz	r0, 80105aa <fflush+0xe>
 80105a0:	4a04      	ldr	r2, [pc, #16]	@ (80105b4 <fflush+0x18>)
 80105a2:	4905      	ldr	r1, [pc, #20]	@ (80105b8 <fflush+0x1c>)
 80105a4:	4805      	ldr	r0, [pc, #20]	@ (80105bc <fflush+0x20>)
 80105a6:	f000 b8b1 	b.w	801070c <_fwalk_sglue>
 80105aa:	4b05      	ldr	r3, [pc, #20]	@ (80105c0 <fflush+0x24>)
 80105ac:	6818      	ldr	r0, [r3, #0]
 80105ae:	f7ff bfcd 	b.w	801054c <_fflush_r>
 80105b2:	bf00      	nop
 80105b4:	200001ac 	.word	0x200001ac
 80105b8:	0801054d 	.word	0x0801054d
 80105bc:	200001bc 	.word	0x200001bc
 80105c0:	200001b8 	.word	0x200001b8

080105c4 <std>:
 80105c4:	2300      	movs	r3, #0
 80105c6:	b510      	push	{r4, lr}
 80105c8:	4604      	mov	r4, r0
 80105ca:	e9c0 3300 	strd	r3, r3, [r0]
 80105ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105d2:	6083      	str	r3, [r0, #8]
 80105d4:	8181      	strh	r1, [r0, #12]
 80105d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80105d8:	81c2      	strh	r2, [r0, #14]
 80105da:	6183      	str	r3, [r0, #24]
 80105dc:	4619      	mov	r1, r3
 80105de:	2208      	movs	r2, #8
 80105e0:	305c      	adds	r0, #92	@ 0x5c
 80105e2:	f000 fa4b 	bl	8010a7c <memset>
 80105e6:	4b0d      	ldr	r3, [pc, #52]	@ (801061c <std+0x58>)
 80105e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80105ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <std+0x5c>)
 80105ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010624 <std+0x60>)
 80105f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010628 <std+0x64>)
 80105f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80105f6:	4b0d      	ldr	r3, [pc, #52]	@ (801062c <std+0x68>)
 80105f8:	6224      	str	r4, [r4, #32]
 80105fa:	429c      	cmp	r4, r3
 80105fc:	d006      	beq.n	801060c <std+0x48>
 80105fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010602:	4294      	cmp	r4, r2
 8010604:	d002      	beq.n	801060c <std+0x48>
 8010606:	33d0      	adds	r3, #208	@ 0xd0
 8010608:	429c      	cmp	r4, r3
 801060a:	d105      	bne.n	8010618 <std+0x54>
 801060c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010614:	f000 babe 	b.w	8010b94 <__retarget_lock_init_recursive>
 8010618:	bd10      	pop	{r4, pc}
 801061a:	bf00      	nop
 801061c:	08010829 	.word	0x08010829
 8010620:	0801084b 	.word	0x0801084b
 8010624:	08010883 	.word	0x08010883
 8010628:	080108a7 	.word	0x080108a7
 801062c:	200004cc 	.word	0x200004cc

08010630 <stdio_exit_handler>:
 8010630:	4a02      	ldr	r2, [pc, #8]	@ (801063c <stdio_exit_handler+0xc>)
 8010632:	4903      	ldr	r1, [pc, #12]	@ (8010640 <stdio_exit_handler+0x10>)
 8010634:	4803      	ldr	r0, [pc, #12]	@ (8010644 <stdio_exit_handler+0x14>)
 8010636:	f000 b869 	b.w	801070c <_fwalk_sglue>
 801063a:	bf00      	nop
 801063c:	200001ac 	.word	0x200001ac
 8010640:	0801054d 	.word	0x0801054d
 8010644:	200001bc 	.word	0x200001bc

08010648 <cleanup_stdio>:
 8010648:	6841      	ldr	r1, [r0, #4]
 801064a:	4b0c      	ldr	r3, [pc, #48]	@ (801067c <cleanup_stdio+0x34>)
 801064c:	4299      	cmp	r1, r3
 801064e:	b510      	push	{r4, lr}
 8010650:	4604      	mov	r4, r0
 8010652:	d001      	beq.n	8010658 <cleanup_stdio+0x10>
 8010654:	f7ff ff7a 	bl	801054c <_fflush_r>
 8010658:	68a1      	ldr	r1, [r4, #8]
 801065a:	4b09      	ldr	r3, [pc, #36]	@ (8010680 <cleanup_stdio+0x38>)
 801065c:	4299      	cmp	r1, r3
 801065e:	d002      	beq.n	8010666 <cleanup_stdio+0x1e>
 8010660:	4620      	mov	r0, r4
 8010662:	f7ff ff73 	bl	801054c <_fflush_r>
 8010666:	68e1      	ldr	r1, [r4, #12]
 8010668:	4b06      	ldr	r3, [pc, #24]	@ (8010684 <cleanup_stdio+0x3c>)
 801066a:	4299      	cmp	r1, r3
 801066c:	d004      	beq.n	8010678 <cleanup_stdio+0x30>
 801066e:	4620      	mov	r0, r4
 8010670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010674:	f7ff bf6a 	b.w	801054c <_fflush_r>
 8010678:	bd10      	pop	{r4, pc}
 801067a:	bf00      	nop
 801067c:	200004cc 	.word	0x200004cc
 8010680:	20000534 	.word	0x20000534
 8010684:	2000059c 	.word	0x2000059c

08010688 <global_stdio_init.part.0>:
 8010688:	b510      	push	{r4, lr}
 801068a:	4b0b      	ldr	r3, [pc, #44]	@ (80106b8 <global_stdio_init.part.0+0x30>)
 801068c:	4c0b      	ldr	r4, [pc, #44]	@ (80106bc <global_stdio_init.part.0+0x34>)
 801068e:	4a0c      	ldr	r2, [pc, #48]	@ (80106c0 <global_stdio_init.part.0+0x38>)
 8010690:	601a      	str	r2, [r3, #0]
 8010692:	4620      	mov	r0, r4
 8010694:	2200      	movs	r2, #0
 8010696:	2104      	movs	r1, #4
 8010698:	f7ff ff94 	bl	80105c4 <std>
 801069c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106a0:	2201      	movs	r2, #1
 80106a2:	2109      	movs	r1, #9
 80106a4:	f7ff ff8e 	bl	80105c4 <std>
 80106a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106ac:	2202      	movs	r2, #2
 80106ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106b2:	2112      	movs	r1, #18
 80106b4:	f7ff bf86 	b.w	80105c4 <std>
 80106b8:	20000604 	.word	0x20000604
 80106bc:	200004cc 	.word	0x200004cc
 80106c0:	08010631 	.word	0x08010631

080106c4 <__sfp_lock_acquire>:
 80106c4:	4801      	ldr	r0, [pc, #4]	@ (80106cc <__sfp_lock_acquire+0x8>)
 80106c6:	f000 ba66 	b.w	8010b96 <__retarget_lock_acquire_recursive>
 80106ca:	bf00      	nop
 80106cc:	2000060d 	.word	0x2000060d

080106d0 <__sfp_lock_release>:
 80106d0:	4801      	ldr	r0, [pc, #4]	@ (80106d8 <__sfp_lock_release+0x8>)
 80106d2:	f000 ba61 	b.w	8010b98 <__retarget_lock_release_recursive>
 80106d6:	bf00      	nop
 80106d8:	2000060d 	.word	0x2000060d

080106dc <__sinit>:
 80106dc:	b510      	push	{r4, lr}
 80106de:	4604      	mov	r4, r0
 80106e0:	f7ff fff0 	bl	80106c4 <__sfp_lock_acquire>
 80106e4:	6a23      	ldr	r3, [r4, #32]
 80106e6:	b11b      	cbz	r3, 80106f0 <__sinit+0x14>
 80106e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106ec:	f7ff bff0 	b.w	80106d0 <__sfp_lock_release>
 80106f0:	4b04      	ldr	r3, [pc, #16]	@ (8010704 <__sinit+0x28>)
 80106f2:	6223      	str	r3, [r4, #32]
 80106f4:	4b04      	ldr	r3, [pc, #16]	@ (8010708 <__sinit+0x2c>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d1f5      	bne.n	80106e8 <__sinit+0xc>
 80106fc:	f7ff ffc4 	bl	8010688 <global_stdio_init.part.0>
 8010700:	e7f2      	b.n	80106e8 <__sinit+0xc>
 8010702:	bf00      	nop
 8010704:	08010649 	.word	0x08010649
 8010708:	20000604 	.word	0x20000604

0801070c <_fwalk_sglue>:
 801070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010710:	4607      	mov	r7, r0
 8010712:	4688      	mov	r8, r1
 8010714:	4614      	mov	r4, r2
 8010716:	2600      	movs	r6, #0
 8010718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801071c:	f1b9 0901 	subs.w	r9, r9, #1
 8010720:	d505      	bpl.n	801072e <_fwalk_sglue+0x22>
 8010722:	6824      	ldr	r4, [r4, #0]
 8010724:	2c00      	cmp	r4, #0
 8010726:	d1f7      	bne.n	8010718 <_fwalk_sglue+0xc>
 8010728:	4630      	mov	r0, r6
 801072a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801072e:	89ab      	ldrh	r3, [r5, #12]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d907      	bls.n	8010744 <_fwalk_sglue+0x38>
 8010734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010738:	3301      	adds	r3, #1
 801073a:	d003      	beq.n	8010744 <_fwalk_sglue+0x38>
 801073c:	4629      	mov	r1, r5
 801073e:	4638      	mov	r0, r7
 8010740:	47c0      	blx	r8
 8010742:	4306      	orrs	r6, r0
 8010744:	3568      	adds	r5, #104	@ 0x68
 8010746:	e7e9      	b.n	801071c <_fwalk_sglue+0x10>

08010748 <iprintf>:
 8010748:	b40f      	push	{r0, r1, r2, r3}
 801074a:	b507      	push	{r0, r1, r2, lr}
 801074c:	4906      	ldr	r1, [pc, #24]	@ (8010768 <iprintf+0x20>)
 801074e:	ab04      	add	r3, sp, #16
 8010750:	6808      	ldr	r0, [r1, #0]
 8010752:	f853 2b04 	ldr.w	r2, [r3], #4
 8010756:	6881      	ldr	r1, [r0, #8]
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	f001 fdc7 	bl	80122ec <_vfiprintf_r>
 801075e:	b003      	add	sp, #12
 8010760:	f85d eb04 	ldr.w	lr, [sp], #4
 8010764:	b004      	add	sp, #16
 8010766:	4770      	bx	lr
 8010768:	200001b8 	.word	0x200001b8

0801076c <_puts_r>:
 801076c:	6a03      	ldr	r3, [r0, #32]
 801076e:	b570      	push	{r4, r5, r6, lr}
 8010770:	6884      	ldr	r4, [r0, #8]
 8010772:	4605      	mov	r5, r0
 8010774:	460e      	mov	r6, r1
 8010776:	b90b      	cbnz	r3, 801077c <_puts_r+0x10>
 8010778:	f7ff ffb0 	bl	80106dc <__sinit>
 801077c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801077e:	07db      	lsls	r3, r3, #31
 8010780:	d405      	bmi.n	801078e <_puts_r+0x22>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	0598      	lsls	r0, r3, #22
 8010786:	d402      	bmi.n	801078e <_puts_r+0x22>
 8010788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801078a:	f000 fa04 	bl	8010b96 <__retarget_lock_acquire_recursive>
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	0719      	lsls	r1, r3, #28
 8010792:	d502      	bpl.n	801079a <_puts_r+0x2e>
 8010794:	6923      	ldr	r3, [r4, #16]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d135      	bne.n	8010806 <_puts_r+0x9a>
 801079a:	4621      	mov	r1, r4
 801079c:	4628      	mov	r0, r5
 801079e:	f000 f8fd 	bl	801099c <__swsetup_r>
 80107a2:	b380      	cbz	r0, 8010806 <_puts_r+0x9a>
 80107a4:	f04f 35ff 	mov.w	r5, #4294967295
 80107a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107aa:	07da      	lsls	r2, r3, #31
 80107ac:	d405      	bmi.n	80107ba <_puts_r+0x4e>
 80107ae:	89a3      	ldrh	r3, [r4, #12]
 80107b0:	059b      	lsls	r3, r3, #22
 80107b2:	d402      	bmi.n	80107ba <_puts_r+0x4e>
 80107b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107b6:	f000 f9ef 	bl	8010b98 <__retarget_lock_release_recursive>
 80107ba:	4628      	mov	r0, r5
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
 80107be:	2b00      	cmp	r3, #0
 80107c0:	da04      	bge.n	80107cc <_puts_r+0x60>
 80107c2:	69a2      	ldr	r2, [r4, #24]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	dc17      	bgt.n	80107f8 <_puts_r+0x8c>
 80107c8:	290a      	cmp	r1, #10
 80107ca:	d015      	beq.n	80107f8 <_puts_r+0x8c>
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	6022      	str	r2, [r4, #0]
 80107d2:	7019      	strb	r1, [r3, #0]
 80107d4:	68a3      	ldr	r3, [r4, #8]
 80107d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80107da:	3b01      	subs	r3, #1
 80107dc:	60a3      	str	r3, [r4, #8]
 80107de:	2900      	cmp	r1, #0
 80107e0:	d1ed      	bne.n	80107be <_puts_r+0x52>
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	da11      	bge.n	801080a <_puts_r+0x9e>
 80107e6:	4622      	mov	r2, r4
 80107e8:	210a      	movs	r1, #10
 80107ea:	4628      	mov	r0, r5
 80107ec:	f000 f898 	bl	8010920 <__swbuf_r>
 80107f0:	3001      	adds	r0, #1
 80107f2:	d0d7      	beq.n	80107a4 <_puts_r+0x38>
 80107f4:	250a      	movs	r5, #10
 80107f6:	e7d7      	b.n	80107a8 <_puts_r+0x3c>
 80107f8:	4622      	mov	r2, r4
 80107fa:	4628      	mov	r0, r5
 80107fc:	f000 f890 	bl	8010920 <__swbuf_r>
 8010800:	3001      	adds	r0, #1
 8010802:	d1e7      	bne.n	80107d4 <_puts_r+0x68>
 8010804:	e7ce      	b.n	80107a4 <_puts_r+0x38>
 8010806:	3e01      	subs	r6, #1
 8010808:	e7e4      	b.n	80107d4 <_puts_r+0x68>
 801080a:	6823      	ldr	r3, [r4, #0]
 801080c:	1c5a      	adds	r2, r3, #1
 801080e:	6022      	str	r2, [r4, #0]
 8010810:	220a      	movs	r2, #10
 8010812:	701a      	strb	r2, [r3, #0]
 8010814:	e7ee      	b.n	80107f4 <_puts_r+0x88>
	...

08010818 <puts>:
 8010818:	4b02      	ldr	r3, [pc, #8]	@ (8010824 <puts+0xc>)
 801081a:	4601      	mov	r1, r0
 801081c:	6818      	ldr	r0, [r3, #0]
 801081e:	f7ff bfa5 	b.w	801076c <_puts_r>
 8010822:	bf00      	nop
 8010824:	200001b8 	.word	0x200001b8

08010828 <__sread>:
 8010828:	b510      	push	{r4, lr}
 801082a:	460c      	mov	r4, r1
 801082c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010830:	f000 f952 	bl	8010ad8 <_read_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	bfab      	itete	ge
 8010838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801083a:	89a3      	ldrhlt	r3, [r4, #12]
 801083c:	181b      	addge	r3, r3, r0
 801083e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010842:	bfac      	ite	ge
 8010844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010846:	81a3      	strhlt	r3, [r4, #12]
 8010848:	bd10      	pop	{r4, pc}

0801084a <__swrite>:
 801084a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801084e:	461f      	mov	r7, r3
 8010850:	898b      	ldrh	r3, [r1, #12]
 8010852:	05db      	lsls	r3, r3, #23
 8010854:	4605      	mov	r5, r0
 8010856:	460c      	mov	r4, r1
 8010858:	4616      	mov	r6, r2
 801085a:	d505      	bpl.n	8010868 <__swrite+0x1e>
 801085c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010860:	2302      	movs	r3, #2
 8010862:	2200      	movs	r2, #0
 8010864:	f000 f926 	bl	8010ab4 <_lseek_r>
 8010868:	89a3      	ldrh	r3, [r4, #12]
 801086a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801086e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010872:	81a3      	strh	r3, [r4, #12]
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	4628      	mov	r0, r5
 801087a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801087e:	f000 b94d 	b.w	8010b1c <_write_r>

08010882 <__sseek>:
 8010882:	b510      	push	{r4, lr}
 8010884:	460c      	mov	r4, r1
 8010886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801088a:	f000 f913 	bl	8010ab4 <_lseek_r>
 801088e:	1c43      	adds	r3, r0, #1
 8010890:	89a3      	ldrh	r3, [r4, #12]
 8010892:	bf15      	itete	ne
 8010894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801089a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801089e:	81a3      	strheq	r3, [r4, #12]
 80108a0:	bf18      	it	ne
 80108a2:	81a3      	strhne	r3, [r4, #12]
 80108a4:	bd10      	pop	{r4, pc}

080108a6 <__sclose>:
 80108a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108aa:	f000 b8f3 	b.w	8010a94 <_close_r>

080108ae <_vsniprintf_r>:
 80108ae:	b530      	push	{r4, r5, lr}
 80108b0:	4614      	mov	r4, r2
 80108b2:	2c00      	cmp	r4, #0
 80108b4:	b09b      	sub	sp, #108	@ 0x6c
 80108b6:	4605      	mov	r5, r0
 80108b8:	461a      	mov	r2, r3
 80108ba:	da05      	bge.n	80108c8 <_vsniprintf_r+0x1a>
 80108bc:	238b      	movs	r3, #139	@ 0x8b
 80108be:	6003      	str	r3, [r0, #0]
 80108c0:	f04f 30ff 	mov.w	r0, #4294967295
 80108c4:	b01b      	add	sp, #108	@ 0x6c
 80108c6:	bd30      	pop	{r4, r5, pc}
 80108c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80108cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80108d0:	bf14      	ite	ne
 80108d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80108d6:	4623      	moveq	r3, r4
 80108d8:	9302      	str	r3, [sp, #8]
 80108da:	9305      	str	r3, [sp, #20]
 80108dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80108e0:	9100      	str	r1, [sp, #0]
 80108e2:	9104      	str	r1, [sp, #16]
 80108e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80108e8:	4669      	mov	r1, sp
 80108ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80108ec:	f001 fbd8 	bl	80120a0 <_svfiprintf_r>
 80108f0:	1c43      	adds	r3, r0, #1
 80108f2:	bfbc      	itt	lt
 80108f4:	238b      	movlt	r3, #139	@ 0x8b
 80108f6:	602b      	strlt	r3, [r5, #0]
 80108f8:	2c00      	cmp	r4, #0
 80108fa:	d0e3      	beq.n	80108c4 <_vsniprintf_r+0x16>
 80108fc:	9b00      	ldr	r3, [sp, #0]
 80108fe:	2200      	movs	r2, #0
 8010900:	701a      	strb	r2, [r3, #0]
 8010902:	e7df      	b.n	80108c4 <_vsniprintf_r+0x16>

08010904 <vsniprintf>:
 8010904:	b507      	push	{r0, r1, r2, lr}
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	4613      	mov	r3, r2
 801090a:	460a      	mov	r2, r1
 801090c:	4601      	mov	r1, r0
 801090e:	4803      	ldr	r0, [pc, #12]	@ (801091c <vsniprintf+0x18>)
 8010910:	6800      	ldr	r0, [r0, #0]
 8010912:	f7ff ffcc 	bl	80108ae <_vsniprintf_r>
 8010916:	b003      	add	sp, #12
 8010918:	f85d fb04 	ldr.w	pc, [sp], #4
 801091c:	200001b8 	.word	0x200001b8

08010920 <__swbuf_r>:
 8010920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010922:	460e      	mov	r6, r1
 8010924:	4614      	mov	r4, r2
 8010926:	4605      	mov	r5, r0
 8010928:	b118      	cbz	r0, 8010932 <__swbuf_r+0x12>
 801092a:	6a03      	ldr	r3, [r0, #32]
 801092c:	b90b      	cbnz	r3, 8010932 <__swbuf_r+0x12>
 801092e:	f7ff fed5 	bl	80106dc <__sinit>
 8010932:	69a3      	ldr	r3, [r4, #24]
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	071a      	lsls	r2, r3, #28
 801093a:	d501      	bpl.n	8010940 <__swbuf_r+0x20>
 801093c:	6923      	ldr	r3, [r4, #16]
 801093e:	b943      	cbnz	r3, 8010952 <__swbuf_r+0x32>
 8010940:	4621      	mov	r1, r4
 8010942:	4628      	mov	r0, r5
 8010944:	f000 f82a 	bl	801099c <__swsetup_r>
 8010948:	b118      	cbz	r0, 8010952 <__swbuf_r+0x32>
 801094a:	f04f 37ff 	mov.w	r7, #4294967295
 801094e:	4638      	mov	r0, r7
 8010950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010952:	6823      	ldr	r3, [r4, #0]
 8010954:	6922      	ldr	r2, [r4, #16]
 8010956:	1a98      	subs	r0, r3, r2
 8010958:	6963      	ldr	r3, [r4, #20]
 801095a:	b2f6      	uxtb	r6, r6
 801095c:	4283      	cmp	r3, r0
 801095e:	4637      	mov	r7, r6
 8010960:	dc05      	bgt.n	801096e <__swbuf_r+0x4e>
 8010962:	4621      	mov	r1, r4
 8010964:	4628      	mov	r0, r5
 8010966:	f7ff fdf1 	bl	801054c <_fflush_r>
 801096a:	2800      	cmp	r0, #0
 801096c:	d1ed      	bne.n	801094a <__swbuf_r+0x2a>
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	3b01      	subs	r3, #1
 8010972:	60a3      	str	r3, [r4, #8]
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	1c5a      	adds	r2, r3, #1
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	701e      	strb	r6, [r3, #0]
 801097c:	6962      	ldr	r2, [r4, #20]
 801097e:	1c43      	adds	r3, r0, #1
 8010980:	429a      	cmp	r2, r3
 8010982:	d004      	beq.n	801098e <__swbuf_r+0x6e>
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	07db      	lsls	r3, r3, #31
 8010988:	d5e1      	bpl.n	801094e <__swbuf_r+0x2e>
 801098a:	2e0a      	cmp	r6, #10
 801098c:	d1df      	bne.n	801094e <__swbuf_r+0x2e>
 801098e:	4621      	mov	r1, r4
 8010990:	4628      	mov	r0, r5
 8010992:	f7ff fddb 	bl	801054c <_fflush_r>
 8010996:	2800      	cmp	r0, #0
 8010998:	d0d9      	beq.n	801094e <__swbuf_r+0x2e>
 801099a:	e7d6      	b.n	801094a <__swbuf_r+0x2a>

0801099c <__swsetup_r>:
 801099c:	b538      	push	{r3, r4, r5, lr}
 801099e:	4b29      	ldr	r3, [pc, #164]	@ (8010a44 <__swsetup_r+0xa8>)
 80109a0:	4605      	mov	r5, r0
 80109a2:	6818      	ldr	r0, [r3, #0]
 80109a4:	460c      	mov	r4, r1
 80109a6:	b118      	cbz	r0, 80109b0 <__swsetup_r+0x14>
 80109a8:	6a03      	ldr	r3, [r0, #32]
 80109aa:	b90b      	cbnz	r3, 80109b0 <__swsetup_r+0x14>
 80109ac:	f7ff fe96 	bl	80106dc <__sinit>
 80109b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b4:	0719      	lsls	r1, r3, #28
 80109b6:	d422      	bmi.n	80109fe <__swsetup_r+0x62>
 80109b8:	06da      	lsls	r2, r3, #27
 80109ba:	d407      	bmi.n	80109cc <__swsetup_r+0x30>
 80109bc:	2209      	movs	r2, #9
 80109be:	602a      	str	r2, [r5, #0]
 80109c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109c4:	81a3      	strh	r3, [r4, #12]
 80109c6:	f04f 30ff 	mov.w	r0, #4294967295
 80109ca:	e033      	b.n	8010a34 <__swsetup_r+0x98>
 80109cc:	0758      	lsls	r0, r3, #29
 80109ce:	d512      	bpl.n	80109f6 <__swsetup_r+0x5a>
 80109d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d2:	b141      	cbz	r1, 80109e6 <__swsetup_r+0x4a>
 80109d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109d8:	4299      	cmp	r1, r3
 80109da:	d002      	beq.n	80109e2 <__swsetup_r+0x46>
 80109dc:	4628      	mov	r0, r5
 80109de:	f000 ff37 	bl	8011850 <_free_r>
 80109e2:	2300      	movs	r3, #0
 80109e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80109e6:	89a3      	ldrh	r3, [r4, #12]
 80109e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80109ec:	81a3      	strh	r3, [r4, #12]
 80109ee:	2300      	movs	r3, #0
 80109f0:	6063      	str	r3, [r4, #4]
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	6023      	str	r3, [r4, #0]
 80109f6:	89a3      	ldrh	r3, [r4, #12]
 80109f8:	f043 0308 	orr.w	r3, r3, #8
 80109fc:	81a3      	strh	r3, [r4, #12]
 80109fe:	6923      	ldr	r3, [r4, #16]
 8010a00:	b94b      	cbnz	r3, 8010a16 <__swsetup_r+0x7a>
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a0c:	d003      	beq.n	8010a16 <__swsetup_r+0x7a>
 8010a0e:	4621      	mov	r1, r4
 8010a10:	4628      	mov	r0, r5
 8010a12:	f001 fda9 	bl	8012568 <__smakebuf_r>
 8010a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a1a:	f013 0201 	ands.w	r2, r3, #1
 8010a1e:	d00a      	beq.n	8010a36 <__swsetup_r+0x9a>
 8010a20:	2200      	movs	r2, #0
 8010a22:	60a2      	str	r2, [r4, #8]
 8010a24:	6962      	ldr	r2, [r4, #20]
 8010a26:	4252      	negs	r2, r2
 8010a28:	61a2      	str	r2, [r4, #24]
 8010a2a:	6922      	ldr	r2, [r4, #16]
 8010a2c:	b942      	cbnz	r2, 8010a40 <__swsetup_r+0xa4>
 8010a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010a32:	d1c5      	bne.n	80109c0 <__swsetup_r+0x24>
 8010a34:	bd38      	pop	{r3, r4, r5, pc}
 8010a36:	0799      	lsls	r1, r3, #30
 8010a38:	bf58      	it	pl
 8010a3a:	6962      	ldrpl	r2, [r4, #20]
 8010a3c:	60a2      	str	r2, [r4, #8]
 8010a3e:	e7f4      	b.n	8010a2a <__swsetup_r+0x8e>
 8010a40:	2000      	movs	r0, #0
 8010a42:	e7f7      	b.n	8010a34 <__swsetup_r+0x98>
 8010a44:	200001b8 	.word	0x200001b8

08010a48 <memmove>:
 8010a48:	4288      	cmp	r0, r1
 8010a4a:	b510      	push	{r4, lr}
 8010a4c:	eb01 0402 	add.w	r4, r1, r2
 8010a50:	d902      	bls.n	8010a58 <memmove+0x10>
 8010a52:	4284      	cmp	r4, r0
 8010a54:	4623      	mov	r3, r4
 8010a56:	d807      	bhi.n	8010a68 <memmove+0x20>
 8010a58:	1e43      	subs	r3, r0, #1
 8010a5a:	42a1      	cmp	r1, r4
 8010a5c:	d008      	beq.n	8010a70 <memmove+0x28>
 8010a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a66:	e7f8      	b.n	8010a5a <memmove+0x12>
 8010a68:	4402      	add	r2, r0
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	428a      	cmp	r2, r1
 8010a6e:	d100      	bne.n	8010a72 <memmove+0x2a>
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a7a:	e7f7      	b.n	8010a6c <memmove+0x24>

08010a7c <memset>:
 8010a7c:	4402      	add	r2, r0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d100      	bne.n	8010a86 <memset+0xa>
 8010a84:	4770      	bx	lr
 8010a86:	f803 1b01 	strb.w	r1, [r3], #1
 8010a8a:	e7f9      	b.n	8010a80 <memset+0x4>

08010a8c <_localeconv_r>:
 8010a8c:	4800      	ldr	r0, [pc, #0]	@ (8010a90 <_localeconv_r+0x4>)
 8010a8e:	4770      	bx	lr
 8010a90:	200002f8 	.word	0x200002f8

08010a94 <_close_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4d06      	ldr	r5, [pc, #24]	@ (8010ab0 <_close_r+0x1c>)
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	4608      	mov	r0, r1
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	f7f2 f992 	bl	8002dc8 <_close>
 8010aa4:	1c43      	adds	r3, r0, #1
 8010aa6:	d102      	bne.n	8010aae <_close_r+0x1a>
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	b103      	cbz	r3, 8010aae <_close_r+0x1a>
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	bd38      	pop	{r3, r4, r5, pc}
 8010ab0:	20000608 	.word	0x20000608

08010ab4 <_lseek_r>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4d07      	ldr	r5, [pc, #28]	@ (8010ad4 <_lseek_r+0x20>)
 8010ab8:	4604      	mov	r4, r0
 8010aba:	4608      	mov	r0, r1
 8010abc:	4611      	mov	r1, r2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	602a      	str	r2, [r5, #0]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	f7f2 f9a7 	bl	8002e16 <_lseek>
 8010ac8:	1c43      	adds	r3, r0, #1
 8010aca:	d102      	bne.n	8010ad2 <_lseek_r+0x1e>
 8010acc:	682b      	ldr	r3, [r5, #0]
 8010ace:	b103      	cbz	r3, 8010ad2 <_lseek_r+0x1e>
 8010ad0:	6023      	str	r3, [r4, #0]
 8010ad2:	bd38      	pop	{r3, r4, r5, pc}
 8010ad4:	20000608 	.word	0x20000608

08010ad8 <_read_r>:
 8010ad8:	b538      	push	{r3, r4, r5, lr}
 8010ada:	4d07      	ldr	r5, [pc, #28]	@ (8010af8 <_read_r+0x20>)
 8010adc:	4604      	mov	r4, r0
 8010ade:	4608      	mov	r0, r1
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	602a      	str	r2, [r5, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	f7f2 f935 	bl	8002d56 <_read>
 8010aec:	1c43      	adds	r3, r0, #1
 8010aee:	d102      	bne.n	8010af6 <_read_r+0x1e>
 8010af0:	682b      	ldr	r3, [r5, #0]
 8010af2:	b103      	cbz	r3, 8010af6 <_read_r+0x1e>
 8010af4:	6023      	str	r3, [r4, #0]
 8010af6:	bd38      	pop	{r3, r4, r5, pc}
 8010af8:	20000608 	.word	0x20000608

08010afc <_sbrk_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d06      	ldr	r5, [pc, #24]	@ (8010b18 <_sbrk_r+0x1c>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	4604      	mov	r4, r0
 8010b04:	4608      	mov	r0, r1
 8010b06:	602b      	str	r3, [r5, #0]
 8010b08:	f7f2 f992 	bl	8002e30 <_sbrk>
 8010b0c:	1c43      	adds	r3, r0, #1
 8010b0e:	d102      	bne.n	8010b16 <_sbrk_r+0x1a>
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	b103      	cbz	r3, 8010b16 <_sbrk_r+0x1a>
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	bd38      	pop	{r3, r4, r5, pc}
 8010b18:	20000608 	.word	0x20000608

08010b1c <_write_r>:
 8010b1c:	b538      	push	{r3, r4, r5, lr}
 8010b1e:	4d07      	ldr	r5, [pc, #28]	@ (8010b3c <_write_r+0x20>)
 8010b20:	4604      	mov	r4, r0
 8010b22:	4608      	mov	r0, r1
 8010b24:	4611      	mov	r1, r2
 8010b26:	2200      	movs	r2, #0
 8010b28:	602a      	str	r2, [r5, #0]
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	f7f2 f930 	bl	8002d90 <_write>
 8010b30:	1c43      	adds	r3, r0, #1
 8010b32:	d102      	bne.n	8010b3a <_write_r+0x1e>
 8010b34:	682b      	ldr	r3, [r5, #0]
 8010b36:	b103      	cbz	r3, 8010b3a <_write_r+0x1e>
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	20000608 	.word	0x20000608

08010b40 <__errno>:
 8010b40:	4b01      	ldr	r3, [pc, #4]	@ (8010b48 <__errno+0x8>)
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	200001b8 	.word	0x200001b8

08010b4c <__libc_init_array>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8010b84 <__libc_init_array+0x38>)
 8010b50:	4c0d      	ldr	r4, [pc, #52]	@ (8010b88 <__libc_init_array+0x3c>)
 8010b52:	1b64      	subs	r4, r4, r5
 8010b54:	10a4      	asrs	r4, r4, #2
 8010b56:	2600      	movs	r6, #0
 8010b58:	42a6      	cmp	r6, r4
 8010b5a:	d109      	bne.n	8010b70 <__libc_init_array+0x24>
 8010b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8010b8c <__libc_init_array+0x40>)
 8010b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8010b90 <__libc_init_array+0x44>)
 8010b60:	f003 fd32 	bl	80145c8 <_init>
 8010b64:	1b64      	subs	r4, r4, r5
 8010b66:	10a4      	asrs	r4, r4, #2
 8010b68:	2600      	movs	r6, #0
 8010b6a:	42a6      	cmp	r6, r4
 8010b6c:	d105      	bne.n	8010b7a <__libc_init_array+0x2e>
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b74:	4798      	blx	r3
 8010b76:	3601      	adds	r6, #1
 8010b78:	e7ee      	b.n	8010b58 <__libc_init_array+0xc>
 8010b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b7e:	4798      	blx	r3
 8010b80:	3601      	adds	r6, #1
 8010b82:	e7f2      	b.n	8010b6a <__libc_init_array+0x1e>
 8010b84:	0801a858 	.word	0x0801a858
 8010b88:	0801a858 	.word	0x0801a858
 8010b8c:	0801a858 	.word	0x0801a858
 8010b90:	0801a85c 	.word	0x0801a85c

08010b94 <__retarget_lock_init_recursive>:
 8010b94:	4770      	bx	lr

08010b96 <__retarget_lock_acquire_recursive>:
 8010b96:	4770      	bx	lr

08010b98 <__retarget_lock_release_recursive>:
 8010b98:	4770      	bx	lr

08010b9a <memcpy>:
 8010b9a:	440a      	add	r2, r1
 8010b9c:	4291      	cmp	r1, r2
 8010b9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ba2:	d100      	bne.n	8010ba6 <memcpy+0xc>
 8010ba4:	4770      	bx	lr
 8010ba6:	b510      	push	{r4, lr}
 8010ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bb0:	4291      	cmp	r1, r2
 8010bb2:	d1f9      	bne.n	8010ba8 <memcpy+0xe>
 8010bb4:	bd10      	pop	{r4, pc}

08010bb6 <quorem>:
 8010bb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	6903      	ldr	r3, [r0, #16]
 8010bbc:	690c      	ldr	r4, [r1, #16]
 8010bbe:	42a3      	cmp	r3, r4
 8010bc0:	4607      	mov	r7, r0
 8010bc2:	db7e      	blt.n	8010cc2 <quorem+0x10c>
 8010bc4:	3c01      	subs	r4, #1
 8010bc6:	f101 0814 	add.w	r8, r1, #20
 8010bca:	00a3      	lsls	r3, r4, #2
 8010bcc:	f100 0514 	add.w	r5, r0, #20
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bd6:	9301      	str	r3, [sp, #4]
 8010bd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010be0:	3301      	adds	r3, #1
 8010be2:	429a      	cmp	r2, r3
 8010be4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010be8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bec:	d32e      	bcc.n	8010c4c <quorem+0x96>
 8010bee:	f04f 0a00 	mov.w	sl, #0
 8010bf2:	46c4      	mov	ip, r8
 8010bf4:	46ae      	mov	lr, r5
 8010bf6:	46d3      	mov	fp, sl
 8010bf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010bfc:	b298      	uxth	r0, r3
 8010bfe:	fb06 a000 	mla	r0, r6, r0, sl
 8010c02:	0c02      	lsrs	r2, r0, #16
 8010c04:	0c1b      	lsrs	r3, r3, #16
 8010c06:	fb06 2303 	mla	r3, r6, r3, r2
 8010c0a:	f8de 2000 	ldr.w	r2, [lr]
 8010c0e:	b280      	uxth	r0, r0
 8010c10:	b292      	uxth	r2, r2
 8010c12:	1a12      	subs	r2, r2, r0
 8010c14:	445a      	add	r2, fp
 8010c16:	f8de 0000 	ldr.w	r0, [lr]
 8010c1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010c24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010c28:	b292      	uxth	r2, r2
 8010c2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010c2e:	45e1      	cmp	r9, ip
 8010c30:	f84e 2b04 	str.w	r2, [lr], #4
 8010c34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010c38:	d2de      	bcs.n	8010bf8 <quorem+0x42>
 8010c3a:	9b00      	ldr	r3, [sp, #0]
 8010c3c:	58eb      	ldr	r3, [r5, r3]
 8010c3e:	b92b      	cbnz	r3, 8010c4c <quorem+0x96>
 8010c40:	9b01      	ldr	r3, [sp, #4]
 8010c42:	3b04      	subs	r3, #4
 8010c44:	429d      	cmp	r5, r3
 8010c46:	461a      	mov	r2, r3
 8010c48:	d32f      	bcc.n	8010caa <quorem+0xf4>
 8010c4a:	613c      	str	r4, [r7, #16]
 8010c4c:	4638      	mov	r0, r7
 8010c4e:	f001 f8c3 	bl	8011dd8 <__mcmp>
 8010c52:	2800      	cmp	r0, #0
 8010c54:	db25      	blt.n	8010ca2 <quorem+0xec>
 8010c56:	4629      	mov	r1, r5
 8010c58:	2000      	movs	r0, #0
 8010c5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c5e:	f8d1 c000 	ldr.w	ip, [r1]
 8010c62:	fa1f fe82 	uxth.w	lr, r2
 8010c66:	fa1f f38c 	uxth.w	r3, ip
 8010c6a:	eba3 030e 	sub.w	r3, r3, lr
 8010c6e:	4403      	add	r3, r0
 8010c70:	0c12      	lsrs	r2, r2, #16
 8010c72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c7a:	b29b      	uxth	r3, r3
 8010c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c80:	45c1      	cmp	r9, r8
 8010c82:	f841 3b04 	str.w	r3, [r1], #4
 8010c86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c8a:	d2e6      	bcs.n	8010c5a <quorem+0xa4>
 8010c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c94:	b922      	cbnz	r2, 8010ca0 <quorem+0xea>
 8010c96:	3b04      	subs	r3, #4
 8010c98:	429d      	cmp	r5, r3
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	d30b      	bcc.n	8010cb6 <quorem+0x100>
 8010c9e:	613c      	str	r4, [r7, #16]
 8010ca0:	3601      	adds	r6, #1
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	b003      	add	sp, #12
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010caa:	6812      	ldr	r2, [r2, #0]
 8010cac:	3b04      	subs	r3, #4
 8010cae:	2a00      	cmp	r2, #0
 8010cb0:	d1cb      	bne.n	8010c4a <quorem+0x94>
 8010cb2:	3c01      	subs	r4, #1
 8010cb4:	e7c6      	b.n	8010c44 <quorem+0x8e>
 8010cb6:	6812      	ldr	r2, [r2, #0]
 8010cb8:	3b04      	subs	r3, #4
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	d1ef      	bne.n	8010c9e <quorem+0xe8>
 8010cbe:	3c01      	subs	r4, #1
 8010cc0:	e7ea      	b.n	8010c98 <quorem+0xe2>
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	e7ee      	b.n	8010ca4 <quorem+0xee>
	...

08010cc8 <_dtoa_r>:
 8010cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ccc:	69c7      	ldr	r7, [r0, #28]
 8010cce:	b099      	sub	sp, #100	@ 0x64
 8010cd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010cd4:	ec55 4b10 	vmov	r4, r5, d0
 8010cd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010cda:	9109      	str	r1, [sp, #36]	@ 0x24
 8010cdc:	4683      	mov	fp, r0
 8010cde:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ce0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010ce2:	b97f      	cbnz	r7, 8010d04 <_dtoa_r+0x3c>
 8010ce4:	2010      	movs	r0, #16
 8010ce6:	f7fe fe97 	bl	800fa18 <malloc>
 8010cea:	4602      	mov	r2, r0
 8010cec:	f8cb 001c 	str.w	r0, [fp, #28]
 8010cf0:	b920      	cbnz	r0, 8010cfc <_dtoa_r+0x34>
 8010cf2:	4ba7      	ldr	r3, [pc, #668]	@ (8010f90 <_dtoa_r+0x2c8>)
 8010cf4:	21ef      	movs	r1, #239	@ 0xef
 8010cf6:	48a7      	ldr	r0, [pc, #668]	@ (8010f94 <_dtoa_r+0x2cc>)
 8010cf8:	f001 fc94 	bl	8012624 <__assert_func>
 8010cfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010d00:	6007      	str	r7, [r0, #0]
 8010d02:	60c7      	str	r7, [r0, #12]
 8010d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d08:	6819      	ldr	r1, [r3, #0]
 8010d0a:	b159      	cbz	r1, 8010d24 <_dtoa_r+0x5c>
 8010d0c:	685a      	ldr	r2, [r3, #4]
 8010d0e:	604a      	str	r2, [r1, #4]
 8010d10:	2301      	movs	r3, #1
 8010d12:	4093      	lsls	r3, r2
 8010d14:	608b      	str	r3, [r1, #8]
 8010d16:	4658      	mov	r0, fp
 8010d18:	f000 fe24 	bl	8011964 <_Bfree>
 8010d1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d20:	2200      	movs	r2, #0
 8010d22:	601a      	str	r2, [r3, #0]
 8010d24:	1e2b      	subs	r3, r5, #0
 8010d26:	bfb9      	ittee	lt
 8010d28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010d2c:	9303      	strlt	r3, [sp, #12]
 8010d2e:	2300      	movge	r3, #0
 8010d30:	6033      	strge	r3, [r6, #0]
 8010d32:	9f03      	ldr	r7, [sp, #12]
 8010d34:	4b98      	ldr	r3, [pc, #608]	@ (8010f98 <_dtoa_r+0x2d0>)
 8010d36:	bfbc      	itt	lt
 8010d38:	2201      	movlt	r2, #1
 8010d3a:	6032      	strlt	r2, [r6, #0]
 8010d3c:	43bb      	bics	r3, r7
 8010d3e:	d112      	bne.n	8010d66 <_dtoa_r+0x9e>
 8010d40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010d46:	6013      	str	r3, [r2, #0]
 8010d48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d4c:	4323      	orrs	r3, r4
 8010d4e:	f000 854d 	beq.w	80117ec <_dtoa_r+0xb24>
 8010d52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010fac <_dtoa_r+0x2e4>
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f000 854f 	beq.w	80117fc <_dtoa_r+0xb34>
 8010d5e:	f10a 0303 	add.w	r3, sl, #3
 8010d62:	f000 bd49 	b.w	80117f8 <_dtoa_r+0xb30>
 8010d66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	ec51 0b17 	vmov	r0, r1, d7
 8010d70:	2300      	movs	r3, #0
 8010d72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010d76:	f7ef feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d7a:	4680      	mov	r8, r0
 8010d7c:	b158      	cbz	r0, 8010d96 <_dtoa_r+0xce>
 8010d7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d80:	2301      	movs	r3, #1
 8010d82:	6013      	str	r3, [r2, #0]
 8010d84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d86:	b113      	cbz	r3, 8010d8e <_dtoa_r+0xc6>
 8010d88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d8a:	4b84      	ldr	r3, [pc, #528]	@ (8010f9c <_dtoa_r+0x2d4>)
 8010d8c:	6013      	str	r3, [r2, #0]
 8010d8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010fb0 <_dtoa_r+0x2e8>
 8010d92:	f000 bd33 	b.w	80117fc <_dtoa_r+0xb34>
 8010d96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010d9a:	aa16      	add	r2, sp, #88	@ 0x58
 8010d9c:	a917      	add	r1, sp, #92	@ 0x5c
 8010d9e:	4658      	mov	r0, fp
 8010da0:	f001 f8ca 	bl	8011f38 <__d2b>
 8010da4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010da8:	4681      	mov	r9, r0
 8010daa:	2e00      	cmp	r6, #0
 8010dac:	d077      	beq.n	8010e9e <_dtoa_r+0x1d6>
 8010dae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010db0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010dbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010dc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010dc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010dc8:	4619      	mov	r1, r3
 8010dca:	2200      	movs	r2, #0
 8010dcc:	4b74      	ldr	r3, [pc, #464]	@ (8010fa0 <_dtoa_r+0x2d8>)
 8010dce:	f7ef fa63 	bl	8000298 <__aeabi_dsub>
 8010dd2:	a369      	add	r3, pc, #420	@ (adr r3, 8010f78 <_dtoa_r+0x2b0>)
 8010dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd8:	f7ef fc16 	bl	8000608 <__aeabi_dmul>
 8010ddc:	a368      	add	r3, pc, #416	@ (adr r3, 8010f80 <_dtoa_r+0x2b8>)
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	f7ef fa5b 	bl	800029c <__adddf3>
 8010de6:	4604      	mov	r4, r0
 8010de8:	4630      	mov	r0, r6
 8010dea:	460d      	mov	r5, r1
 8010dec:	f7ef fba2 	bl	8000534 <__aeabi_i2d>
 8010df0:	a365      	add	r3, pc, #404	@ (adr r3, 8010f88 <_dtoa_r+0x2c0>)
 8010df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df6:	f7ef fc07 	bl	8000608 <__aeabi_dmul>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7ef fa4b 	bl	800029c <__adddf3>
 8010e06:	4604      	mov	r4, r0
 8010e08:	460d      	mov	r5, r1
 8010e0a:	f7ef fead 	bl	8000b68 <__aeabi_d2iz>
 8010e0e:	2200      	movs	r2, #0
 8010e10:	4607      	mov	r7, r0
 8010e12:	2300      	movs	r3, #0
 8010e14:	4620      	mov	r0, r4
 8010e16:	4629      	mov	r1, r5
 8010e18:	f7ef fe68 	bl	8000aec <__aeabi_dcmplt>
 8010e1c:	b140      	cbz	r0, 8010e30 <_dtoa_r+0x168>
 8010e1e:	4638      	mov	r0, r7
 8010e20:	f7ef fb88 	bl	8000534 <__aeabi_i2d>
 8010e24:	4622      	mov	r2, r4
 8010e26:	462b      	mov	r3, r5
 8010e28:	f7ef fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e2c:	b900      	cbnz	r0, 8010e30 <_dtoa_r+0x168>
 8010e2e:	3f01      	subs	r7, #1
 8010e30:	2f16      	cmp	r7, #22
 8010e32:	d851      	bhi.n	8010ed8 <_dtoa_r+0x210>
 8010e34:	4b5b      	ldr	r3, [pc, #364]	@ (8010fa4 <_dtoa_r+0x2dc>)
 8010e36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e42:	f7ef fe53 	bl	8000aec <__aeabi_dcmplt>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d048      	beq.n	8010edc <_dtoa_r+0x214>
 8010e4a:	3f01      	subs	r7, #1
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010e50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e52:	1b9b      	subs	r3, r3, r6
 8010e54:	1e5a      	subs	r2, r3, #1
 8010e56:	bf44      	itt	mi
 8010e58:	f1c3 0801 	rsbmi	r8, r3, #1
 8010e5c:	2300      	movmi	r3, #0
 8010e5e:	9208      	str	r2, [sp, #32]
 8010e60:	bf54      	ite	pl
 8010e62:	f04f 0800 	movpl.w	r8, #0
 8010e66:	9308      	strmi	r3, [sp, #32]
 8010e68:	2f00      	cmp	r7, #0
 8010e6a:	db39      	blt.n	8010ee0 <_dtoa_r+0x218>
 8010e6c:	9b08      	ldr	r3, [sp, #32]
 8010e6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010e70:	443b      	add	r3, r7
 8010e72:	9308      	str	r3, [sp, #32]
 8010e74:	2300      	movs	r3, #0
 8010e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e7a:	2b09      	cmp	r3, #9
 8010e7c:	d864      	bhi.n	8010f48 <_dtoa_r+0x280>
 8010e7e:	2b05      	cmp	r3, #5
 8010e80:	bfc4      	itt	gt
 8010e82:	3b04      	subgt	r3, #4
 8010e84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e88:	f1a3 0302 	sub.w	r3, r3, #2
 8010e8c:	bfcc      	ite	gt
 8010e8e:	2400      	movgt	r4, #0
 8010e90:	2401      	movle	r4, #1
 8010e92:	2b03      	cmp	r3, #3
 8010e94:	d863      	bhi.n	8010f5e <_dtoa_r+0x296>
 8010e96:	e8df f003 	tbb	[pc, r3]
 8010e9a:	372a      	.short	0x372a
 8010e9c:	5535      	.short	0x5535
 8010e9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010ea2:	441e      	add	r6, r3
 8010ea4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010ea8:	2b20      	cmp	r3, #32
 8010eaa:	bfc1      	itttt	gt
 8010eac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010eb0:	409f      	lslgt	r7, r3
 8010eb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010eb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010eba:	bfd6      	itet	le
 8010ebc:	f1c3 0320 	rsble	r3, r3, #32
 8010ec0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010ec4:	fa04 f003 	lslle.w	r0, r4, r3
 8010ec8:	f7ef fb24 	bl	8000514 <__aeabi_ui2d>
 8010ecc:	2201      	movs	r2, #1
 8010ece:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010ed2:	3e01      	subs	r6, #1
 8010ed4:	9214      	str	r2, [sp, #80]	@ 0x50
 8010ed6:	e777      	b.n	8010dc8 <_dtoa_r+0x100>
 8010ed8:	2301      	movs	r3, #1
 8010eda:	e7b8      	b.n	8010e4e <_dtoa_r+0x186>
 8010edc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ede:	e7b7      	b.n	8010e50 <_dtoa_r+0x188>
 8010ee0:	427b      	negs	r3, r7
 8010ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	eba8 0807 	sub.w	r8, r8, r7
 8010eea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010eec:	e7c4      	b.n	8010e78 <_dtoa_r+0x1b0>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	dc35      	bgt.n	8010f64 <_dtoa_r+0x29c>
 8010ef8:	2301      	movs	r3, #1
 8010efa:	9300      	str	r3, [sp, #0]
 8010efc:	9307      	str	r3, [sp, #28]
 8010efe:	461a      	mov	r2, r3
 8010f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f02:	e00b      	b.n	8010f1c <_dtoa_r+0x254>
 8010f04:	2301      	movs	r3, #1
 8010f06:	e7f3      	b.n	8010ef0 <_dtoa_r+0x228>
 8010f08:	2300      	movs	r3, #0
 8010f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f0e:	18fb      	adds	r3, r7, r3
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	3301      	adds	r3, #1
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	9307      	str	r3, [sp, #28]
 8010f18:	bfb8      	it	lt
 8010f1a:	2301      	movlt	r3, #1
 8010f1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010f20:	2100      	movs	r1, #0
 8010f22:	2204      	movs	r2, #4
 8010f24:	f102 0514 	add.w	r5, r2, #20
 8010f28:	429d      	cmp	r5, r3
 8010f2a:	d91f      	bls.n	8010f6c <_dtoa_r+0x2a4>
 8010f2c:	6041      	str	r1, [r0, #4]
 8010f2e:	4658      	mov	r0, fp
 8010f30:	f000 fcd8 	bl	80118e4 <_Balloc>
 8010f34:	4682      	mov	sl, r0
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d13c      	bne.n	8010fb4 <_dtoa_r+0x2ec>
 8010f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fa8 <_dtoa_r+0x2e0>)
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010f42:	e6d8      	b.n	8010cf6 <_dtoa_r+0x2e>
 8010f44:	2301      	movs	r3, #1
 8010f46:	e7e0      	b.n	8010f0a <_dtoa_r+0x242>
 8010f48:	2401      	movs	r4, #1
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f50:	f04f 33ff 	mov.w	r3, #4294967295
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	9307      	str	r3, [sp, #28]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	2312      	movs	r3, #18
 8010f5c:	e7d0      	b.n	8010f00 <_dtoa_r+0x238>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f62:	e7f5      	b.n	8010f50 <_dtoa_r+0x288>
 8010f64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	9307      	str	r3, [sp, #28]
 8010f6a:	e7d7      	b.n	8010f1c <_dtoa_r+0x254>
 8010f6c:	3101      	adds	r1, #1
 8010f6e:	0052      	lsls	r2, r2, #1
 8010f70:	e7d8      	b.n	8010f24 <_dtoa_r+0x25c>
 8010f72:	bf00      	nop
 8010f74:	f3af 8000 	nop.w
 8010f78:	636f4361 	.word	0x636f4361
 8010f7c:	3fd287a7 	.word	0x3fd287a7
 8010f80:	8b60c8b3 	.word	0x8b60c8b3
 8010f84:	3fc68a28 	.word	0x3fc68a28
 8010f88:	509f79fb 	.word	0x509f79fb
 8010f8c:	3fd34413 	.word	0x3fd34413
 8010f90:	0801a0ff 	.word	0x0801a0ff
 8010f94:	0801a116 	.word	0x0801a116
 8010f98:	7ff00000 	.word	0x7ff00000
 8010f9c:	0801a0cf 	.word	0x0801a0cf
 8010fa0:	3ff80000 	.word	0x3ff80000
 8010fa4:	0801a210 	.word	0x0801a210
 8010fa8:	0801a16e 	.word	0x0801a16e
 8010fac:	0801a0fb 	.word	0x0801a0fb
 8010fb0:	0801a0ce 	.word	0x0801a0ce
 8010fb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010fb8:	6018      	str	r0, [r3, #0]
 8010fba:	9b07      	ldr	r3, [sp, #28]
 8010fbc:	2b0e      	cmp	r3, #14
 8010fbe:	f200 80a4 	bhi.w	801110a <_dtoa_r+0x442>
 8010fc2:	2c00      	cmp	r4, #0
 8010fc4:	f000 80a1 	beq.w	801110a <_dtoa_r+0x442>
 8010fc8:	2f00      	cmp	r7, #0
 8010fca:	dd33      	ble.n	8011034 <_dtoa_r+0x36c>
 8010fcc:	4bad      	ldr	r3, [pc, #692]	@ (8011284 <_dtoa_r+0x5bc>)
 8010fce:	f007 020f 	and.w	r2, r7, #15
 8010fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fd6:	ed93 7b00 	vldr	d7, [r3]
 8010fda:	05f8      	lsls	r0, r7, #23
 8010fdc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010fe0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010fe4:	d516      	bpl.n	8011014 <_dtoa_r+0x34c>
 8010fe6:	4ba8      	ldr	r3, [pc, #672]	@ (8011288 <_dtoa_r+0x5c0>)
 8010fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ff0:	f7ef fc34 	bl	800085c <__aeabi_ddiv>
 8010ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ff8:	f004 040f 	and.w	r4, r4, #15
 8010ffc:	2603      	movs	r6, #3
 8010ffe:	4da2      	ldr	r5, [pc, #648]	@ (8011288 <_dtoa_r+0x5c0>)
 8011000:	b954      	cbnz	r4, 8011018 <_dtoa_r+0x350>
 8011002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801100a:	f7ef fc27 	bl	800085c <__aeabi_ddiv>
 801100e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011012:	e028      	b.n	8011066 <_dtoa_r+0x39e>
 8011014:	2602      	movs	r6, #2
 8011016:	e7f2      	b.n	8010ffe <_dtoa_r+0x336>
 8011018:	07e1      	lsls	r1, r4, #31
 801101a:	d508      	bpl.n	801102e <_dtoa_r+0x366>
 801101c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011024:	f7ef faf0 	bl	8000608 <__aeabi_dmul>
 8011028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801102c:	3601      	adds	r6, #1
 801102e:	1064      	asrs	r4, r4, #1
 8011030:	3508      	adds	r5, #8
 8011032:	e7e5      	b.n	8011000 <_dtoa_r+0x338>
 8011034:	f000 80d2 	beq.w	80111dc <_dtoa_r+0x514>
 8011038:	427c      	negs	r4, r7
 801103a:	4b92      	ldr	r3, [pc, #584]	@ (8011284 <_dtoa_r+0x5bc>)
 801103c:	4d92      	ldr	r5, [pc, #584]	@ (8011288 <_dtoa_r+0x5c0>)
 801103e:	f004 020f 	and.w	r2, r4, #15
 8011042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801104e:	f7ef fadb 	bl	8000608 <__aeabi_dmul>
 8011052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011056:	1124      	asrs	r4, r4, #4
 8011058:	2300      	movs	r3, #0
 801105a:	2602      	movs	r6, #2
 801105c:	2c00      	cmp	r4, #0
 801105e:	f040 80b2 	bne.w	80111c6 <_dtoa_r+0x4fe>
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1d3      	bne.n	801100e <_dtoa_r+0x346>
 8011066:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011068:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	f000 80b7 	beq.w	80111e0 <_dtoa_r+0x518>
 8011072:	4b86      	ldr	r3, [pc, #536]	@ (801128c <_dtoa_r+0x5c4>)
 8011074:	2200      	movs	r2, #0
 8011076:	4620      	mov	r0, r4
 8011078:	4629      	mov	r1, r5
 801107a:	f7ef fd37 	bl	8000aec <__aeabi_dcmplt>
 801107e:	2800      	cmp	r0, #0
 8011080:	f000 80ae 	beq.w	80111e0 <_dtoa_r+0x518>
 8011084:	9b07      	ldr	r3, [sp, #28]
 8011086:	2b00      	cmp	r3, #0
 8011088:	f000 80aa 	beq.w	80111e0 <_dtoa_r+0x518>
 801108c:	9b00      	ldr	r3, [sp, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	dd37      	ble.n	8011102 <_dtoa_r+0x43a>
 8011092:	1e7b      	subs	r3, r7, #1
 8011094:	9304      	str	r3, [sp, #16]
 8011096:	4620      	mov	r0, r4
 8011098:	4b7d      	ldr	r3, [pc, #500]	@ (8011290 <_dtoa_r+0x5c8>)
 801109a:	2200      	movs	r2, #0
 801109c:	4629      	mov	r1, r5
 801109e:	f7ef fab3 	bl	8000608 <__aeabi_dmul>
 80110a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110a6:	9c00      	ldr	r4, [sp, #0]
 80110a8:	3601      	adds	r6, #1
 80110aa:	4630      	mov	r0, r6
 80110ac:	f7ef fa42 	bl	8000534 <__aeabi_i2d>
 80110b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110b4:	f7ef faa8 	bl	8000608 <__aeabi_dmul>
 80110b8:	4b76      	ldr	r3, [pc, #472]	@ (8011294 <_dtoa_r+0x5cc>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	f7ef f8ee 	bl	800029c <__adddf3>
 80110c0:	4605      	mov	r5, r0
 80110c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80110c6:	2c00      	cmp	r4, #0
 80110c8:	f040 808d 	bne.w	80111e6 <_dtoa_r+0x51e>
 80110cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110d0:	4b71      	ldr	r3, [pc, #452]	@ (8011298 <_dtoa_r+0x5d0>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	f7ef f8e0 	bl	8000298 <__aeabi_dsub>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80110e0:	462a      	mov	r2, r5
 80110e2:	4633      	mov	r3, r6
 80110e4:	f7ef fd20 	bl	8000b28 <__aeabi_dcmpgt>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	f040 828b 	bne.w	8011604 <_dtoa_r+0x93c>
 80110ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110f2:	462a      	mov	r2, r5
 80110f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80110f8:	f7ef fcf8 	bl	8000aec <__aeabi_dcmplt>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f040 8128 	bne.w	8011352 <_dtoa_r+0x68a>
 8011102:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801110a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801110c:	2b00      	cmp	r3, #0
 801110e:	f2c0 815a 	blt.w	80113c6 <_dtoa_r+0x6fe>
 8011112:	2f0e      	cmp	r7, #14
 8011114:	f300 8157 	bgt.w	80113c6 <_dtoa_r+0x6fe>
 8011118:	4b5a      	ldr	r3, [pc, #360]	@ (8011284 <_dtoa_r+0x5bc>)
 801111a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801111e:	ed93 7b00 	vldr	d7, [r3]
 8011122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011124:	2b00      	cmp	r3, #0
 8011126:	ed8d 7b00 	vstr	d7, [sp]
 801112a:	da03      	bge.n	8011134 <_dtoa_r+0x46c>
 801112c:	9b07      	ldr	r3, [sp, #28]
 801112e:	2b00      	cmp	r3, #0
 8011130:	f340 8101 	ble.w	8011336 <_dtoa_r+0x66e>
 8011134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011138:	4656      	mov	r6, sl
 801113a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801113e:	4620      	mov	r0, r4
 8011140:	4629      	mov	r1, r5
 8011142:	f7ef fb8b 	bl	800085c <__aeabi_ddiv>
 8011146:	f7ef fd0f 	bl	8000b68 <__aeabi_d2iz>
 801114a:	4680      	mov	r8, r0
 801114c:	f7ef f9f2 	bl	8000534 <__aeabi_i2d>
 8011150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011154:	f7ef fa58 	bl	8000608 <__aeabi_dmul>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	4620      	mov	r0, r4
 801115e:	4629      	mov	r1, r5
 8011160:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011164:	f7ef f898 	bl	8000298 <__aeabi_dsub>
 8011168:	f806 4b01 	strb.w	r4, [r6], #1
 801116c:	9d07      	ldr	r5, [sp, #28]
 801116e:	eba6 040a 	sub.w	r4, r6, sl
 8011172:	42a5      	cmp	r5, r4
 8011174:	4602      	mov	r2, r0
 8011176:	460b      	mov	r3, r1
 8011178:	f040 8117 	bne.w	80113aa <_dtoa_r+0x6e2>
 801117c:	f7ef f88e 	bl	800029c <__adddf3>
 8011180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011184:	4604      	mov	r4, r0
 8011186:	460d      	mov	r5, r1
 8011188:	f7ef fcce 	bl	8000b28 <__aeabi_dcmpgt>
 801118c:	2800      	cmp	r0, #0
 801118e:	f040 80f9 	bne.w	8011384 <_dtoa_r+0x6bc>
 8011192:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011196:	4620      	mov	r0, r4
 8011198:	4629      	mov	r1, r5
 801119a:	f7ef fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 801119e:	b118      	cbz	r0, 80111a8 <_dtoa_r+0x4e0>
 80111a0:	f018 0f01 	tst.w	r8, #1
 80111a4:	f040 80ee 	bne.w	8011384 <_dtoa_r+0x6bc>
 80111a8:	4649      	mov	r1, r9
 80111aa:	4658      	mov	r0, fp
 80111ac:	f000 fbda 	bl	8011964 <_Bfree>
 80111b0:	2300      	movs	r3, #0
 80111b2:	7033      	strb	r3, [r6, #0]
 80111b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80111b6:	3701      	adds	r7, #1
 80111b8:	601f      	str	r7, [r3, #0]
 80111ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80111bc:	2b00      	cmp	r3, #0
 80111be:	f000 831d 	beq.w	80117fc <_dtoa_r+0xb34>
 80111c2:	601e      	str	r6, [r3, #0]
 80111c4:	e31a      	b.n	80117fc <_dtoa_r+0xb34>
 80111c6:	07e2      	lsls	r2, r4, #31
 80111c8:	d505      	bpl.n	80111d6 <_dtoa_r+0x50e>
 80111ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111ce:	f7ef fa1b 	bl	8000608 <__aeabi_dmul>
 80111d2:	3601      	adds	r6, #1
 80111d4:	2301      	movs	r3, #1
 80111d6:	1064      	asrs	r4, r4, #1
 80111d8:	3508      	adds	r5, #8
 80111da:	e73f      	b.n	801105c <_dtoa_r+0x394>
 80111dc:	2602      	movs	r6, #2
 80111de:	e742      	b.n	8011066 <_dtoa_r+0x39e>
 80111e0:	9c07      	ldr	r4, [sp, #28]
 80111e2:	9704      	str	r7, [sp, #16]
 80111e4:	e761      	b.n	80110aa <_dtoa_r+0x3e2>
 80111e6:	4b27      	ldr	r3, [pc, #156]	@ (8011284 <_dtoa_r+0x5bc>)
 80111e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80111ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80111f2:	4454      	add	r4, sl
 80111f4:	2900      	cmp	r1, #0
 80111f6:	d053      	beq.n	80112a0 <_dtoa_r+0x5d8>
 80111f8:	4928      	ldr	r1, [pc, #160]	@ (801129c <_dtoa_r+0x5d4>)
 80111fa:	2000      	movs	r0, #0
 80111fc:	f7ef fb2e 	bl	800085c <__aeabi_ddiv>
 8011200:	4633      	mov	r3, r6
 8011202:	462a      	mov	r2, r5
 8011204:	f7ef f848 	bl	8000298 <__aeabi_dsub>
 8011208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801120c:	4656      	mov	r6, sl
 801120e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011212:	f7ef fca9 	bl	8000b68 <__aeabi_d2iz>
 8011216:	4605      	mov	r5, r0
 8011218:	f7ef f98c 	bl	8000534 <__aeabi_i2d>
 801121c:	4602      	mov	r2, r0
 801121e:	460b      	mov	r3, r1
 8011220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011224:	f7ef f838 	bl	8000298 <__aeabi_dsub>
 8011228:	3530      	adds	r5, #48	@ 0x30
 801122a:	4602      	mov	r2, r0
 801122c:	460b      	mov	r3, r1
 801122e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011232:	f806 5b01 	strb.w	r5, [r6], #1
 8011236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801123a:	f7ef fc57 	bl	8000aec <__aeabi_dcmplt>
 801123e:	2800      	cmp	r0, #0
 8011240:	d171      	bne.n	8011326 <_dtoa_r+0x65e>
 8011242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011246:	4911      	ldr	r1, [pc, #68]	@ (801128c <_dtoa_r+0x5c4>)
 8011248:	2000      	movs	r0, #0
 801124a:	f7ef f825 	bl	8000298 <__aeabi_dsub>
 801124e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011252:	f7ef fc4b 	bl	8000aec <__aeabi_dcmplt>
 8011256:	2800      	cmp	r0, #0
 8011258:	f040 8095 	bne.w	8011386 <_dtoa_r+0x6be>
 801125c:	42a6      	cmp	r6, r4
 801125e:	f43f af50 	beq.w	8011102 <_dtoa_r+0x43a>
 8011262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011266:	4b0a      	ldr	r3, [pc, #40]	@ (8011290 <_dtoa_r+0x5c8>)
 8011268:	2200      	movs	r2, #0
 801126a:	f7ef f9cd 	bl	8000608 <__aeabi_dmul>
 801126e:	4b08      	ldr	r3, [pc, #32]	@ (8011290 <_dtoa_r+0x5c8>)
 8011270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011274:	2200      	movs	r2, #0
 8011276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801127a:	f7ef f9c5 	bl	8000608 <__aeabi_dmul>
 801127e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011282:	e7c4      	b.n	801120e <_dtoa_r+0x546>
 8011284:	0801a210 	.word	0x0801a210
 8011288:	0801a1e8 	.word	0x0801a1e8
 801128c:	3ff00000 	.word	0x3ff00000
 8011290:	40240000 	.word	0x40240000
 8011294:	401c0000 	.word	0x401c0000
 8011298:	40140000 	.word	0x40140000
 801129c:	3fe00000 	.word	0x3fe00000
 80112a0:	4631      	mov	r1, r6
 80112a2:	4628      	mov	r0, r5
 80112a4:	f7ef f9b0 	bl	8000608 <__aeabi_dmul>
 80112a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80112ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80112ae:	4656      	mov	r6, sl
 80112b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112b4:	f7ef fc58 	bl	8000b68 <__aeabi_d2iz>
 80112b8:	4605      	mov	r5, r0
 80112ba:	f7ef f93b 	bl	8000534 <__aeabi_i2d>
 80112be:	4602      	mov	r2, r0
 80112c0:	460b      	mov	r3, r1
 80112c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112c6:	f7ee ffe7 	bl	8000298 <__aeabi_dsub>
 80112ca:	3530      	adds	r5, #48	@ 0x30
 80112cc:	f806 5b01 	strb.w	r5, [r6], #1
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	42a6      	cmp	r6, r4
 80112d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112da:	f04f 0200 	mov.w	r2, #0
 80112de:	d124      	bne.n	801132a <_dtoa_r+0x662>
 80112e0:	4bac      	ldr	r3, [pc, #688]	@ (8011594 <_dtoa_r+0x8cc>)
 80112e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80112e6:	f7ee ffd9 	bl	800029c <__adddf3>
 80112ea:	4602      	mov	r2, r0
 80112ec:	460b      	mov	r3, r1
 80112ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112f2:	f7ef fc19 	bl	8000b28 <__aeabi_dcmpgt>
 80112f6:	2800      	cmp	r0, #0
 80112f8:	d145      	bne.n	8011386 <_dtoa_r+0x6be>
 80112fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80112fe:	49a5      	ldr	r1, [pc, #660]	@ (8011594 <_dtoa_r+0x8cc>)
 8011300:	2000      	movs	r0, #0
 8011302:	f7ee ffc9 	bl	8000298 <__aeabi_dsub>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801130e:	f7ef fbed 	bl	8000aec <__aeabi_dcmplt>
 8011312:	2800      	cmp	r0, #0
 8011314:	f43f aef5 	beq.w	8011102 <_dtoa_r+0x43a>
 8011318:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801131a:	1e73      	subs	r3, r6, #1
 801131c:	9315      	str	r3, [sp, #84]	@ 0x54
 801131e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011322:	2b30      	cmp	r3, #48	@ 0x30
 8011324:	d0f8      	beq.n	8011318 <_dtoa_r+0x650>
 8011326:	9f04      	ldr	r7, [sp, #16]
 8011328:	e73e      	b.n	80111a8 <_dtoa_r+0x4e0>
 801132a:	4b9b      	ldr	r3, [pc, #620]	@ (8011598 <_dtoa_r+0x8d0>)
 801132c:	f7ef f96c 	bl	8000608 <__aeabi_dmul>
 8011330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011334:	e7bc      	b.n	80112b0 <_dtoa_r+0x5e8>
 8011336:	d10c      	bne.n	8011352 <_dtoa_r+0x68a>
 8011338:	4b98      	ldr	r3, [pc, #608]	@ (801159c <_dtoa_r+0x8d4>)
 801133a:	2200      	movs	r2, #0
 801133c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011340:	f7ef f962 	bl	8000608 <__aeabi_dmul>
 8011344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011348:	f7ef fbe4 	bl	8000b14 <__aeabi_dcmpge>
 801134c:	2800      	cmp	r0, #0
 801134e:	f000 8157 	beq.w	8011600 <_dtoa_r+0x938>
 8011352:	2400      	movs	r4, #0
 8011354:	4625      	mov	r5, r4
 8011356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011358:	43db      	mvns	r3, r3
 801135a:	9304      	str	r3, [sp, #16]
 801135c:	4656      	mov	r6, sl
 801135e:	2700      	movs	r7, #0
 8011360:	4621      	mov	r1, r4
 8011362:	4658      	mov	r0, fp
 8011364:	f000 fafe 	bl	8011964 <_Bfree>
 8011368:	2d00      	cmp	r5, #0
 801136a:	d0dc      	beq.n	8011326 <_dtoa_r+0x65e>
 801136c:	b12f      	cbz	r7, 801137a <_dtoa_r+0x6b2>
 801136e:	42af      	cmp	r7, r5
 8011370:	d003      	beq.n	801137a <_dtoa_r+0x6b2>
 8011372:	4639      	mov	r1, r7
 8011374:	4658      	mov	r0, fp
 8011376:	f000 faf5 	bl	8011964 <_Bfree>
 801137a:	4629      	mov	r1, r5
 801137c:	4658      	mov	r0, fp
 801137e:	f000 faf1 	bl	8011964 <_Bfree>
 8011382:	e7d0      	b.n	8011326 <_dtoa_r+0x65e>
 8011384:	9704      	str	r7, [sp, #16]
 8011386:	4633      	mov	r3, r6
 8011388:	461e      	mov	r6, r3
 801138a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801138e:	2a39      	cmp	r2, #57	@ 0x39
 8011390:	d107      	bne.n	80113a2 <_dtoa_r+0x6da>
 8011392:	459a      	cmp	sl, r3
 8011394:	d1f8      	bne.n	8011388 <_dtoa_r+0x6c0>
 8011396:	9a04      	ldr	r2, [sp, #16]
 8011398:	3201      	adds	r2, #1
 801139a:	9204      	str	r2, [sp, #16]
 801139c:	2230      	movs	r2, #48	@ 0x30
 801139e:	f88a 2000 	strb.w	r2, [sl]
 80113a2:	781a      	ldrb	r2, [r3, #0]
 80113a4:	3201      	adds	r2, #1
 80113a6:	701a      	strb	r2, [r3, #0]
 80113a8:	e7bd      	b.n	8011326 <_dtoa_r+0x65e>
 80113aa:	4b7b      	ldr	r3, [pc, #492]	@ (8011598 <_dtoa_r+0x8d0>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	f7ef f92b 	bl	8000608 <__aeabi_dmul>
 80113b2:	2200      	movs	r2, #0
 80113b4:	2300      	movs	r3, #0
 80113b6:	4604      	mov	r4, r0
 80113b8:	460d      	mov	r5, r1
 80113ba:	f7ef fb8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80113be:	2800      	cmp	r0, #0
 80113c0:	f43f aebb 	beq.w	801113a <_dtoa_r+0x472>
 80113c4:	e6f0      	b.n	80111a8 <_dtoa_r+0x4e0>
 80113c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80113c8:	2a00      	cmp	r2, #0
 80113ca:	f000 80db 	beq.w	8011584 <_dtoa_r+0x8bc>
 80113ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d0:	2a01      	cmp	r2, #1
 80113d2:	f300 80bf 	bgt.w	8011554 <_dtoa_r+0x88c>
 80113d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80113d8:	2a00      	cmp	r2, #0
 80113da:	f000 80b7 	beq.w	801154c <_dtoa_r+0x884>
 80113de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80113e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113e4:	4646      	mov	r6, r8
 80113e6:	9a08      	ldr	r2, [sp, #32]
 80113e8:	2101      	movs	r1, #1
 80113ea:	441a      	add	r2, r3
 80113ec:	4658      	mov	r0, fp
 80113ee:	4498      	add	r8, r3
 80113f0:	9208      	str	r2, [sp, #32]
 80113f2:	f000 fb6b 	bl	8011acc <__i2b>
 80113f6:	4605      	mov	r5, r0
 80113f8:	b15e      	cbz	r6, 8011412 <_dtoa_r+0x74a>
 80113fa:	9b08      	ldr	r3, [sp, #32]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	dd08      	ble.n	8011412 <_dtoa_r+0x74a>
 8011400:	42b3      	cmp	r3, r6
 8011402:	9a08      	ldr	r2, [sp, #32]
 8011404:	bfa8      	it	ge
 8011406:	4633      	movge	r3, r6
 8011408:	eba8 0803 	sub.w	r8, r8, r3
 801140c:	1af6      	subs	r6, r6, r3
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	9308      	str	r3, [sp, #32]
 8011412:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011414:	b1f3      	cbz	r3, 8011454 <_dtoa_r+0x78c>
 8011416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011418:	2b00      	cmp	r3, #0
 801141a:	f000 80b7 	beq.w	801158c <_dtoa_r+0x8c4>
 801141e:	b18c      	cbz	r4, 8011444 <_dtoa_r+0x77c>
 8011420:	4629      	mov	r1, r5
 8011422:	4622      	mov	r2, r4
 8011424:	4658      	mov	r0, fp
 8011426:	f000 fc11 	bl	8011c4c <__pow5mult>
 801142a:	464a      	mov	r2, r9
 801142c:	4601      	mov	r1, r0
 801142e:	4605      	mov	r5, r0
 8011430:	4658      	mov	r0, fp
 8011432:	f000 fb61 	bl	8011af8 <__multiply>
 8011436:	4649      	mov	r1, r9
 8011438:	9004      	str	r0, [sp, #16]
 801143a:	4658      	mov	r0, fp
 801143c:	f000 fa92 	bl	8011964 <_Bfree>
 8011440:	9b04      	ldr	r3, [sp, #16]
 8011442:	4699      	mov	r9, r3
 8011444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011446:	1b1a      	subs	r2, r3, r4
 8011448:	d004      	beq.n	8011454 <_dtoa_r+0x78c>
 801144a:	4649      	mov	r1, r9
 801144c:	4658      	mov	r0, fp
 801144e:	f000 fbfd 	bl	8011c4c <__pow5mult>
 8011452:	4681      	mov	r9, r0
 8011454:	2101      	movs	r1, #1
 8011456:	4658      	mov	r0, fp
 8011458:	f000 fb38 	bl	8011acc <__i2b>
 801145c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801145e:	4604      	mov	r4, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	f000 81cf 	beq.w	8011804 <_dtoa_r+0xb3c>
 8011466:	461a      	mov	r2, r3
 8011468:	4601      	mov	r1, r0
 801146a:	4658      	mov	r0, fp
 801146c:	f000 fbee 	bl	8011c4c <__pow5mult>
 8011470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011472:	2b01      	cmp	r3, #1
 8011474:	4604      	mov	r4, r0
 8011476:	f300 8095 	bgt.w	80115a4 <_dtoa_r+0x8dc>
 801147a:	9b02      	ldr	r3, [sp, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	f040 8087 	bne.w	8011590 <_dtoa_r+0x8c8>
 8011482:	9b03      	ldr	r3, [sp, #12]
 8011484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011488:	2b00      	cmp	r3, #0
 801148a:	f040 8089 	bne.w	80115a0 <_dtoa_r+0x8d8>
 801148e:	9b03      	ldr	r3, [sp, #12]
 8011490:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011494:	0d1b      	lsrs	r3, r3, #20
 8011496:	051b      	lsls	r3, r3, #20
 8011498:	b12b      	cbz	r3, 80114a6 <_dtoa_r+0x7de>
 801149a:	9b08      	ldr	r3, [sp, #32]
 801149c:	3301      	adds	r3, #1
 801149e:	9308      	str	r3, [sp, #32]
 80114a0:	f108 0801 	add.w	r8, r8, #1
 80114a4:	2301      	movs	r3, #1
 80114a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80114a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f000 81b0 	beq.w	8011810 <_dtoa_r+0xb48>
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80114b6:	6918      	ldr	r0, [r3, #16]
 80114b8:	f000 fabc 	bl	8011a34 <__hi0bits>
 80114bc:	f1c0 0020 	rsb	r0, r0, #32
 80114c0:	9b08      	ldr	r3, [sp, #32]
 80114c2:	4418      	add	r0, r3
 80114c4:	f010 001f 	ands.w	r0, r0, #31
 80114c8:	d077      	beq.n	80115ba <_dtoa_r+0x8f2>
 80114ca:	f1c0 0320 	rsb	r3, r0, #32
 80114ce:	2b04      	cmp	r3, #4
 80114d0:	dd6b      	ble.n	80115aa <_dtoa_r+0x8e2>
 80114d2:	9b08      	ldr	r3, [sp, #32]
 80114d4:	f1c0 001c 	rsb	r0, r0, #28
 80114d8:	4403      	add	r3, r0
 80114da:	4480      	add	r8, r0
 80114dc:	4406      	add	r6, r0
 80114de:	9308      	str	r3, [sp, #32]
 80114e0:	f1b8 0f00 	cmp.w	r8, #0
 80114e4:	dd05      	ble.n	80114f2 <_dtoa_r+0x82a>
 80114e6:	4649      	mov	r1, r9
 80114e8:	4642      	mov	r2, r8
 80114ea:	4658      	mov	r0, fp
 80114ec:	f000 fc08 	bl	8011d00 <__lshift>
 80114f0:	4681      	mov	r9, r0
 80114f2:	9b08      	ldr	r3, [sp, #32]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	dd05      	ble.n	8011504 <_dtoa_r+0x83c>
 80114f8:	4621      	mov	r1, r4
 80114fa:	461a      	mov	r2, r3
 80114fc:	4658      	mov	r0, fp
 80114fe:	f000 fbff 	bl	8011d00 <__lshift>
 8011502:	4604      	mov	r4, r0
 8011504:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011506:	2b00      	cmp	r3, #0
 8011508:	d059      	beq.n	80115be <_dtoa_r+0x8f6>
 801150a:	4621      	mov	r1, r4
 801150c:	4648      	mov	r0, r9
 801150e:	f000 fc63 	bl	8011dd8 <__mcmp>
 8011512:	2800      	cmp	r0, #0
 8011514:	da53      	bge.n	80115be <_dtoa_r+0x8f6>
 8011516:	1e7b      	subs	r3, r7, #1
 8011518:	9304      	str	r3, [sp, #16]
 801151a:	4649      	mov	r1, r9
 801151c:	2300      	movs	r3, #0
 801151e:	220a      	movs	r2, #10
 8011520:	4658      	mov	r0, fp
 8011522:	f000 fa41 	bl	80119a8 <__multadd>
 8011526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011528:	4681      	mov	r9, r0
 801152a:	2b00      	cmp	r3, #0
 801152c:	f000 8172 	beq.w	8011814 <_dtoa_r+0xb4c>
 8011530:	2300      	movs	r3, #0
 8011532:	4629      	mov	r1, r5
 8011534:	220a      	movs	r2, #10
 8011536:	4658      	mov	r0, fp
 8011538:	f000 fa36 	bl	80119a8 <__multadd>
 801153c:	9b00      	ldr	r3, [sp, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	4605      	mov	r5, r0
 8011542:	dc67      	bgt.n	8011614 <_dtoa_r+0x94c>
 8011544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011546:	2b02      	cmp	r3, #2
 8011548:	dc41      	bgt.n	80115ce <_dtoa_r+0x906>
 801154a:	e063      	b.n	8011614 <_dtoa_r+0x94c>
 801154c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801154e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011552:	e746      	b.n	80113e2 <_dtoa_r+0x71a>
 8011554:	9b07      	ldr	r3, [sp, #28]
 8011556:	1e5c      	subs	r4, r3, #1
 8011558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801155a:	42a3      	cmp	r3, r4
 801155c:	bfbf      	itttt	lt
 801155e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011560:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011562:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011564:	1ae3      	sublt	r3, r4, r3
 8011566:	bfb4      	ite	lt
 8011568:	18d2      	addlt	r2, r2, r3
 801156a:	1b1c      	subge	r4, r3, r4
 801156c:	9b07      	ldr	r3, [sp, #28]
 801156e:	bfbc      	itt	lt
 8011570:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011572:	2400      	movlt	r4, #0
 8011574:	2b00      	cmp	r3, #0
 8011576:	bfb5      	itete	lt
 8011578:	eba8 0603 	sublt.w	r6, r8, r3
 801157c:	9b07      	ldrge	r3, [sp, #28]
 801157e:	2300      	movlt	r3, #0
 8011580:	4646      	movge	r6, r8
 8011582:	e730      	b.n	80113e6 <_dtoa_r+0x71e>
 8011584:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011586:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011588:	4646      	mov	r6, r8
 801158a:	e735      	b.n	80113f8 <_dtoa_r+0x730>
 801158c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801158e:	e75c      	b.n	801144a <_dtoa_r+0x782>
 8011590:	2300      	movs	r3, #0
 8011592:	e788      	b.n	80114a6 <_dtoa_r+0x7de>
 8011594:	3fe00000 	.word	0x3fe00000
 8011598:	40240000 	.word	0x40240000
 801159c:	40140000 	.word	0x40140000
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	e780      	b.n	80114a6 <_dtoa_r+0x7de>
 80115a4:	2300      	movs	r3, #0
 80115a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80115a8:	e782      	b.n	80114b0 <_dtoa_r+0x7e8>
 80115aa:	d099      	beq.n	80114e0 <_dtoa_r+0x818>
 80115ac:	9a08      	ldr	r2, [sp, #32]
 80115ae:	331c      	adds	r3, #28
 80115b0:	441a      	add	r2, r3
 80115b2:	4498      	add	r8, r3
 80115b4:	441e      	add	r6, r3
 80115b6:	9208      	str	r2, [sp, #32]
 80115b8:	e792      	b.n	80114e0 <_dtoa_r+0x818>
 80115ba:	4603      	mov	r3, r0
 80115bc:	e7f6      	b.n	80115ac <_dtoa_r+0x8e4>
 80115be:	9b07      	ldr	r3, [sp, #28]
 80115c0:	9704      	str	r7, [sp, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	dc20      	bgt.n	8011608 <_dtoa_r+0x940>
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	dd1e      	ble.n	801160c <_dtoa_r+0x944>
 80115ce:	9b00      	ldr	r3, [sp, #0]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f47f aec0 	bne.w	8011356 <_dtoa_r+0x68e>
 80115d6:	4621      	mov	r1, r4
 80115d8:	2205      	movs	r2, #5
 80115da:	4658      	mov	r0, fp
 80115dc:	f000 f9e4 	bl	80119a8 <__multadd>
 80115e0:	4601      	mov	r1, r0
 80115e2:	4604      	mov	r4, r0
 80115e4:	4648      	mov	r0, r9
 80115e6:	f000 fbf7 	bl	8011dd8 <__mcmp>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	f77f aeb3 	ble.w	8011356 <_dtoa_r+0x68e>
 80115f0:	4656      	mov	r6, sl
 80115f2:	2331      	movs	r3, #49	@ 0x31
 80115f4:	f806 3b01 	strb.w	r3, [r6], #1
 80115f8:	9b04      	ldr	r3, [sp, #16]
 80115fa:	3301      	adds	r3, #1
 80115fc:	9304      	str	r3, [sp, #16]
 80115fe:	e6ae      	b.n	801135e <_dtoa_r+0x696>
 8011600:	9c07      	ldr	r4, [sp, #28]
 8011602:	9704      	str	r7, [sp, #16]
 8011604:	4625      	mov	r5, r4
 8011606:	e7f3      	b.n	80115f0 <_dtoa_r+0x928>
 8011608:	9b07      	ldr	r3, [sp, #28]
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801160e:	2b00      	cmp	r3, #0
 8011610:	f000 8104 	beq.w	801181c <_dtoa_r+0xb54>
 8011614:	2e00      	cmp	r6, #0
 8011616:	dd05      	ble.n	8011624 <_dtoa_r+0x95c>
 8011618:	4629      	mov	r1, r5
 801161a:	4632      	mov	r2, r6
 801161c:	4658      	mov	r0, fp
 801161e:	f000 fb6f 	bl	8011d00 <__lshift>
 8011622:	4605      	mov	r5, r0
 8011624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011626:	2b00      	cmp	r3, #0
 8011628:	d05a      	beq.n	80116e0 <_dtoa_r+0xa18>
 801162a:	6869      	ldr	r1, [r5, #4]
 801162c:	4658      	mov	r0, fp
 801162e:	f000 f959 	bl	80118e4 <_Balloc>
 8011632:	4606      	mov	r6, r0
 8011634:	b928      	cbnz	r0, 8011642 <_dtoa_r+0x97a>
 8011636:	4b84      	ldr	r3, [pc, #528]	@ (8011848 <_dtoa_r+0xb80>)
 8011638:	4602      	mov	r2, r0
 801163a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801163e:	f7ff bb5a 	b.w	8010cf6 <_dtoa_r+0x2e>
 8011642:	692a      	ldr	r2, [r5, #16]
 8011644:	3202      	adds	r2, #2
 8011646:	0092      	lsls	r2, r2, #2
 8011648:	f105 010c 	add.w	r1, r5, #12
 801164c:	300c      	adds	r0, #12
 801164e:	f7ff faa4 	bl	8010b9a <memcpy>
 8011652:	2201      	movs	r2, #1
 8011654:	4631      	mov	r1, r6
 8011656:	4658      	mov	r0, fp
 8011658:	f000 fb52 	bl	8011d00 <__lshift>
 801165c:	f10a 0301 	add.w	r3, sl, #1
 8011660:	9307      	str	r3, [sp, #28]
 8011662:	9b00      	ldr	r3, [sp, #0]
 8011664:	4453      	add	r3, sl
 8011666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011668:	9b02      	ldr	r3, [sp, #8]
 801166a:	f003 0301 	and.w	r3, r3, #1
 801166e:	462f      	mov	r7, r5
 8011670:	930a      	str	r3, [sp, #40]	@ 0x28
 8011672:	4605      	mov	r5, r0
 8011674:	9b07      	ldr	r3, [sp, #28]
 8011676:	4621      	mov	r1, r4
 8011678:	3b01      	subs	r3, #1
 801167a:	4648      	mov	r0, r9
 801167c:	9300      	str	r3, [sp, #0]
 801167e:	f7ff fa9a 	bl	8010bb6 <quorem>
 8011682:	4639      	mov	r1, r7
 8011684:	9002      	str	r0, [sp, #8]
 8011686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801168a:	4648      	mov	r0, r9
 801168c:	f000 fba4 	bl	8011dd8 <__mcmp>
 8011690:	462a      	mov	r2, r5
 8011692:	9008      	str	r0, [sp, #32]
 8011694:	4621      	mov	r1, r4
 8011696:	4658      	mov	r0, fp
 8011698:	f000 fbba 	bl	8011e10 <__mdiff>
 801169c:	68c2      	ldr	r2, [r0, #12]
 801169e:	4606      	mov	r6, r0
 80116a0:	bb02      	cbnz	r2, 80116e4 <_dtoa_r+0xa1c>
 80116a2:	4601      	mov	r1, r0
 80116a4:	4648      	mov	r0, r9
 80116a6:	f000 fb97 	bl	8011dd8 <__mcmp>
 80116aa:	4602      	mov	r2, r0
 80116ac:	4631      	mov	r1, r6
 80116ae:	4658      	mov	r0, fp
 80116b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80116b2:	f000 f957 	bl	8011964 <_Bfree>
 80116b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116ba:	9e07      	ldr	r6, [sp, #28]
 80116bc:	ea43 0102 	orr.w	r1, r3, r2
 80116c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116c2:	4319      	orrs	r1, r3
 80116c4:	d110      	bne.n	80116e8 <_dtoa_r+0xa20>
 80116c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116ca:	d029      	beq.n	8011720 <_dtoa_r+0xa58>
 80116cc:	9b08      	ldr	r3, [sp, #32]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	dd02      	ble.n	80116d8 <_dtoa_r+0xa10>
 80116d2:	9b02      	ldr	r3, [sp, #8]
 80116d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80116d8:	9b00      	ldr	r3, [sp, #0]
 80116da:	f883 8000 	strb.w	r8, [r3]
 80116de:	e63f      	b.n	8011360 <_dtoa_r+0x698>
 80116e0:	4628      	mov	r0, r5
 80116e2:	e7bb      	b.n	801165c <_dtoa_r+0x994>
 80116e4:	2201      	movs	r2, #1
 80116e6:	e7e1      	b.n	80116ac <_dtoa_r+0x9e4>
 80116e8:	9b08      	ldr	r3, [sp, #32]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	db04      	blt.n	80116f8 <_dtoa_r+0xa30>
 80116ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116f0:	430b      	orrs	r3, r1
 80116f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116f4:	430b      	orrs	r3, r1
 80116f6:	d120      	bne.n	801173a <_dtoa_r+0xa72>
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	dded      	ble.n	80116d8 <_dtoa_r+0xa10>
 80116fc:	4649      	mov	r1, r9
 80116fe:	2201      	movs	r2, #1
 8011700:	4658      	mov	r0, fp
 8011702:	f000 fafd 	bl	8011d00 <__lshift>
 8011706:	4621      	mov	r1, r4
 8011708:	4681      	mov	r9, r0
 801170a:	f000 fb65 	bl	8011dd8 <__mcmp>
 801170e:	2800      	cmp	r0, #0
 8011710:	dc03      	bgt.n	801171a <_dtoa_r+0xa52>
 8011712:	d1e1      	bne.n	80116d8 <_dtoa_r+0xa10>
 8011714:	f018 0f01 	tst.w	r8, #1
 8011718:	d0de      	beq.n	80116d8 <_dtoa_r+0xa10>
 801171a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801171e:	d1d8      	bne.n	80116d2 <_dtoa_r+0xa0a>
 8011720:	9a00      	ldr	r2, [sp, #0]
 8011722:	2339      	movs	r3, #57	@ 0x39
 8011724:	7013      	strb	r3, [r2, #0]
 8011726:	4633      	mov	r3, r6
 8011728:	461e      	mov	r6, r3
 801172a:	3b01      	subs	r3, #1
 801172c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011730:	2a39      	cmp	r2, #57	@ 0x39
 8011732:	d052      	beq.n	80117da <_dtoa_r+0xb12>
 8011734:	3201      	adds	r2, #1
 8011736:	701a      	strb	r2, [r3, #0]
 8011738:	e612      	b.n	8011360 <_dtoa_r+0x698>
 801173a:	2a00      	cmp	r2, #0
 801173c:	dd07      	ble.n	801174e <_dtoa_r+0xa86>
 801173e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011742:	d0ed      	beq.n	8011720 <_dtoa_r+0xa58>
 8011744:	9a00      	ldr	r2, [sp, #0]
 8011746:	f108 0301 	add.w	r3, r8, #1
 801174a:	7013      	strb	r3, [r2, #0]
 801174c:	e608      	b.n	8011360 <_dtoa_r+0x698>
 801174e:	9b07      	ldr	r3, [sp, #28]
 8011750:	9a07      	ldr	r2, [sp, #28]
 8011752:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011758:	4293      	cmp	r3, r2
 801175a:	d028      	beq.n	80117ae <_dtoa_r+0xae6>
 801175c:	4649      	mov	r1, r9
 801175e:	2300      	movs	r3, #0
 8011760:	220a      	movs	r2, #10
 8011762:	4658      	mov	r0, fp
 8011764:	f000 f920 	bl	80119a8 <__multadd>
 8011768:	42af      	cmp	r7, r5
 801176a:	4681      	mov	r9, r0
 801176c:	f04f 0300 	mov.w	r3, #0
 8011770:	f04f 020a 	mov.w	r2, #10
 8011774:	4639      	mov	r1, r7
 8011776:	4658      	mov	r0, fp
 8011778:	d107      	bne.n	801178a <_dtoa_r+0xac2>
 801177a:	f000 f915 	bl	80119a8 <__multadd>
 801177e:	4607      	mov	r7, r0
 8011780:	4605      	mov	r5, r0
 8011782:	9b07      	ldr	r3, [sp, #28]
 8011784:	3301      	adds	r3, #1
 8011786:	9307      	str	r3, [sp, #28]
 8011788:	e774      	b.n	8011674 <_dtoa_r+0x9ac>
 801178a:	f000 f90d 	bl	80119a8 <__multadd>
 801178e:	4629      	mov	r1, r5
 8011790:	4607      	mov	r7, r0
 8011792:	2300      	movs	r3, #0
 8011794:	220a      	movs	r2, #10
 8011796:	4658      	mov	r0, fp
 8011798:	f000 f906 	bl	80119a8 <__multadd>
 801179c:	4605      	mov	r5, r0
 801179e:	e7f0      	b.n	8011782 <_dtoa_r+0xaba>
 80117a0:	9b00      	ldr	r3, [sp, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	bfcc      	ite	gt
 80117a6:	461e      	movgt	r6, r3
 80117a8:	2601      	movle	r6, #1
 80117aa:	4456      	add	r6, sl
 80117ac:	2700      	movs	r7, #0
 80117ae:	4649      	mov	r1, r9
 80117b0:	2201      	movs	r2, #1
 80117b2:	4658      	mov	r0, fp
 80117b4:	f000 faa4 	bl	8011d00 <__lshift>
 80117b8:	4621      	mov	r1, r4
 80117ba:	4681      	mov	r9, r0
 80117bc:	f000 fb0c 	bl	8011dd8 <__mcmp>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	dcb0      	bgt.n	8011726 <_dtoa_r+0xa5e>
 80117c4:	d102      	bne.n	80117cc <_dtoa_r+0xb04>
 80117c6:	f018 0f01 	tst.w	r8, #1
 80117ca:	d1ac      	bne.n	8011726 <_dtoa_r+0xa5e>
 80117cc:	4633      	mov	r3, r6
 80117ce:	461e      	mov	r6, r3
 80117d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117d4:	2a30      	cmp	r2, #48	@ 0x30
 80117d6:	d0fa      	beq.n	80117ce <_dtoa_r+0xb06>
 80117d8:	e5c2      	b.n	8011360 <_dtoa_r+0x698>
 80117da:	459a      	cmp	sl, r3
 80117dc:	d1a4      	bne.n	8011728 <_dtoa_r+0xa60>
 80117de:	9b04      	ldr	r3, [sp, #16]
 80117e0:	3301      	adds	r3, #1
 80117e2:	9304      	str	r3, [sp, #16]
 80117e4:	2331      	movs	r3, #49	@ 0x31
 80117e6:	f88a 3000 	strb.w	r3, [sl]
 80117ea:	e5b9      	b.n	8011360 <_dtoa_r+0x698>
 80117ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80117ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801184c <_dtoa_r+0xb84>
 80117f2:	b11b      	cbz	r3, 80117fc <_dtoa_r+0xb34>
 80117f4:	f10a 0308 	add.w	r3, sl, #8
 80117f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80117fa:	6013      	str	r3, [r2, #0]
 80117fc:	4650      	mov	r0, sl
 80117fe:	b019      	add	sp, #100	@ 0x64
 8011800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011806:	2b01      	cmp	r3, #1
 8011808:	f77f ae37 	ble.w	801147a <_dtoa_r+0x7b2>
 801180c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801180e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011810:	2001      	movs	r0, #1
 8011812:	e655      	b.n	80114c0 <_dtoa_r+0x7f8>
 8011814:	9b00      	ldr	r3, [sp, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	f77f aed6 	ble.w	80115c8 <_dtoa_r+0x900>
 801181c:	4656      	mov	r6, sl
 801181e:	4621      	mov	r1, r4
 8011820:	4648      	mov	r0, r9
 8011822:	f7ff f9c8 	bl	8010bb6 <quorem>
 8011826:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801182a:	f806 8b01 	strb.w	r8, [r6], #1
 801182e:	9b00      	ldr	r3, [sp, #0]
 8011830:	eba6 020a 	sub.w	r2, r6, sl
 8011834:	4293      	cmp	r3, r2
 8011836:	ddb3      	ble.n	80117a0 <_dtoa_r+0xad8>
 8011838:	4649      	mov	r1, r9
 801183a:	2300      	movs	r3, #0
 801183c:	220a      	movs	r2, #10
 801183e:	4658      	mov	r0, fp
 8011840:	f000 f8b2 	bl	80119a8 <__multadd>
 8011844:	4681      	mov	r9, r0
 8011846:	e7ea      	b.n	801181e <_dtoa_r+0xb56>
 8011848:	0801a16e 	.word	0x0801a16e
 801184c:	0801a0f2 	.word	0x0801a0f2

08011850 <_free_r>:
 8011850:	b538      	push	{r3, r4, r5, lr}
 8011852:	4605      	mov	r5, r0
 8011854:	2900      	cmp	r1, #0
 8011856:	d041      	beq.n	80118dc <_free_r+0x8c>
 8011858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801185c:	1f0c      	subs	r4, r1, #4
 801185e:	2b00      	cmp	r3, #0
 8011860:	bfb8      	it	lt
 8011862:	18e4      	addlt	r4, r4, r3
 8011864:	f7fe f98a 	bl	800fb7c <__malloc_lock>
 8011868:	4a1d      	ldr	r2, [pc, #116]	@ (80118e0 <_free_r+0x90>)
 801186a:	6813      	ldr	r3, [r2, #0]
 801186c:	b933      	cbnz	r3, 801187c <_free_r+0x2c>
 801186e:	6063      	str	r3, [r4, #4]
 8011870:	6014      	str	r4, [r2, #0]
 8011872:	4628      	mov	r0, r5
 8011874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011878:	f7fe b986 	b.w	800fb88 <__malloc_unlock>
 801187c:	42a3      	cmp	r3, r4
 801187e:	d908      	bls.n	8011892 <_free_r+0x42>
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	1821      	adds	r1, r4, r0
 8011884:	428b      	cmp	r3, r1
 8011886:	bf01      	itttt	eq
 8011888:	6819      	ldreq	r1, [r3, #0]
 801188a:	685b      	ldreq	r3, [r3, #4]
 801188c:	1809      	addeq	r1, r1, r0
 801188e:	6021      	streq	r1, [r4, #0]
 8011890:	e7ed      	b.n	801186e <_free_r+0x1e>
 8011892:	461a      	mov	r2, r3
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	b10b      	cbz	r3, 801189c <_free_r+0x4c>
 8011898:	42a3      	cmp	r3, r4
 801189a:	d9fa      	bls.n	8011892 <_free_r+0x42>
 801189c:	6811      	ldr	r1, [r2, #0]
 801189e:	1850      	adds	r0, r2, r1
 80118a0:	42a0      	cmp	r0, r4
 80118a2:	d10b      	bne.n	80118bc <_free_r+0x6c>
 80118a4:	6820      	ldr	r0, [r4, #0]
 80118a6:	4401      	add	r1, r0
 80118a8:	1850      	adds	r0, r2, r1
 80118aa:	4283      	cmp	r3, r0
 80118ac:	6011      	str	r1, [r2, #0]
 80118ae:	d1e0      	bne.n	8011872 <_free_r+0x22>
 80118b0:	6818      	ldr	r0, [r3, #0]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	6053      	str	r3, [r2, #4]
 80118b6:	4408      	add	r0, r1
 80118b8:	6010      	str	r0, [r2, #0]
 80118ba:	e7da      	b.n	8011872 <_free_r+0x22>
 80118bc:	d902      	bls.n	80118c4 <_free_r+0x74>
 80118be:	230c      	movs	r3, #12
 80118c0:	602b      	str	r3, [r5, #0]
 80118c2:	e7d6      	b.n	8011872 <_free_r+0x22>
 80118c4:	6820      	ldr	r0, [r4, #0]
 80118c6:	1821      	adds	r1, r4, r0
 80118c8:	428b      	cmp	r3, r1
 80118ca:	bf04      	itt	eq
 80118cc:	6819      	ldreq	r1, [r3, #0]
 80118ce:	685b      	ldreq	r3, [r3, #4]
 80118d0:	6063      	str	r3, [r4, #4]
 80118d2:	bf04      	itt	eq
 80118d4:	1809      	addeq	r1, r1, r0
 80118d6:	6021      	streq	r1, [r4, #0]
 80118d8:	6054      	str	r4, [r2, #4]
 80118da:	e7ca      	b.n	8011872 <_free_r+0x22>
 80118dc:	bd38      	pop	{r3, r4, r5, pc}
 80118de:	bf00      	nop
 80118e0:	200004c8 	.word	0x200004c8

080118e4 <_Balloc>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	69c6      	ldr	r6, [r0, #28]
 80118e8:	4604      	mov	r4, r0
 80118ea:	460d      	mov	r5, r1
 80118ec:	b976      	cbnz	r6, 801190c <_Balloc+0x28>
 80118ee:	2010      	movs	r0, #16
 80118f0:	f7fe f892 	bl	800fa18 <malloc>
 80118f4:	4602      	mov	r2, r0
 80118f6:	61e0      	str	r0, [r4, #28]
 80118f8:	b920      	cbnz	r0, 8011904 <_Balloc+0x20>
 80118fa:	4b18      	ldr	r3, [pc, #96]	@ (801195c <_Balloc+0x78>)
 80118fc:	4818      	ldr	r0, [pc, #96]	@ (8011960 <_Balloc+0x7c>)
 80118fe:	216b      	movs	r1, #107	@ 0x6b
 8011900:	f000 fe90 	bl	8012624 <__assert_func>
 8011904:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011908:	6006      	str	r6, [r0, #0]
 801190a:	60c6      	str	r6, [r0, #12]
 801190c:	69e6      	ldr	r6, [r4, #28]
 801190e:	68f3      	ldr	r3, [r6, #12]
 8011910:	b183      	cbz	r3, 8011934 <_Balloc+0x50>
 8011912:	69e3      	ldr	r3, [r4, #28]
 8011914:	68db      	ldr	r3, [r3, #12]
 8011916:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801191a:	b9b8      	cbnz	r0, 801194c <_Balloc+0x68>
 801191c:	2101      	movs	r1, #1
 801191e:	fa01 f605 	lsl.w	r6, r1, r5
 8011922:	1d72      	adds	r2, r6, #5
 8011924:	0092      	lsls	r2, r2, #2
 8011926:	4620      	mov	r0, r4
 8011928:	f7fe f862 	bl	800f9f0 <_calloc_r>
 801192c:	b160      	cbz	r0, 8011948 <_Balloc+0x64>
 801192e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011932:	e00e      	b.n	8011952 <_Balloc+0x6e>
 8011934:	2221      	movs	r2, #33	@ 0x21
 8011936:	2104      	movs	r1, #4
 8011938:	4620      	mov	r0, r4
 801193a:	f7fe f859 	bl	800f9f0 <_calloc_r>
 801193e:	69e3      	ldr	r3, [r4, #28]
 8011940:	60f0      	str	r0, [r6, #12]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d1e4      	bne.n	8011912 <_Balloc+0x2e>
 8011948:	2000      	movs	r0, #0
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	6802      	ldr	r2, [r0, #0]
 801194e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011952:	2300      	movs	r3, #0
 8011954:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011958:	e7f7      	b.n	801194a <_Balloc+0x66>
 801195a:	bf00      	nop
 801195c:	0801a0ff 	.word	0x0801a0ff
 8011960:	0801a17f 	.word	0x0801a17f

08011964 <_Bfree>:
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	69c6      	ldr	r6, [r0, #28]
 8011968:	4605      	mov	r5, r0
 801196a:	460c      	mov	r4, r1
 801196c:	b976      	cbnz	r6, 801198c <_Bfree+0x28>
 801196e:	2010      	movs	r0, #16
 8011970:	f7fe f852 	bl	800fa18 <malloc>
 8011974:	4602      	mov	r2, r0
 8011976:	61e8      	str	r0, [r5, #28]
 8011978:	b920      	cbnz	r0, 8011984 <_Bfree+0x20>
 801197a:	4b09      	ldr	r3, [pc, #36]	@ (80119a0 <_Bfree+0x3c>)
 801197c:	4809      	ldr	r0, [pc, #36]	@ (80119a4 <_Bfree+0x40>)
 801197e:	218f      	movs	r1, #143	@ 0x8f
 8011980:	f000 fe50 	bl	8012624 <__assert_func>
 8011984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011988:	6006      	str	r6, [r0, #0]
 801198a:	60c6      	str	r6, [r0, #12]
 801198c:	b13c      	cbz	r4, 801199e <_Bfree+0x3a>
 801198e:	69eb      	ldr	r3, [r5, #28]
 8011990:	6862      	ldr	r2, [r4, #4]
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011998:	6021      	str	r1, [r4, #0]
 801199a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801199e:	bd70      	pop	{r4, r5, r6, pc}
 80119a0:	0801a0ff 	.word	0x0801a0ff
 80119a4:	0801a17f 	.word	0x0801a17f

080119a8 <__multadd>:
 80119a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ac:	690d      	ldr	r5, [r1, #16]
 80119ae:	4607      	mov	r7, r0
 80119b0:	460c      	mov	r4, r1
 80119b2:	461e      	mov	r6, r3
 80119b4:	f101 0c14 	add.w	ip, r1, #20
 80119b8:	2000      	movs	r0, #0
 80119ba:	f8dc 3000 	ldr.w	r3, [ip]
 80119be:	b299      	uxth	r1, r3
 80119c0:	fb02 6101 	mla	r1, r2, r1, r6
 80119c4:	0c1e      	lsrs	r6, r3, #16
 80119c6:	0c0b      	lsrs	r3, r1, #16
 80119c8:	fb02 3306 	mla	r3, r2, r6, r3
 80119cc:	b289      	uxth	r1, r1
 80119ce:	3001      	adds	r0, #1
 80119d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119d4:	4285      	cmp	r5, r0
 80119d6:	f84c 1b04 	str.w	r1, [ip], #4
 80119da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119de:	dcec      	bgt.n	80119ba <__multadd+0x12>
 80119e0:	b30e      	cbz	r6, 8011a26 <__multadd+0x7e>
 80119e2:	68a3      	ldr	r3, [r4, #8]
 80119e4:	42ab      	cmp	r3, r5
 80119e6:	dc19      	bgt.n	8011a1c <__multadd+0x74>
 80119e8:	6861      	ldr	r1, [r4, #4]
 80119ea:	4638      	mov	r0, r7
 80119ec:	3101      	adds	r1, #1
 80119ee:	f7ff ff79 	bl	80118e4 <_Balloc>
 80119f2:	4680      	mov	r8, r0
 80119f4:	b928      	cbnz	r0, 8011a02 <__multadd+0x5a>
 80119f6:	4602      	mov	r2, r0
 80119f8:	4b0c      	ldr	r3, [pc, #48]	@ (8011a2c <__multadd+0x84>)
 80119fa:	480d      	ldr	r0, [pc, #52]	@ (8011a30 <__multadd+0x88>)
 80119fc:	21ba      	movs	r1, #186	@ 0xba
 80119fe:	f000 fe11 	bl	8012624 <__assert_func>
 8011a02:	6922      	ldr	r2, [r4, #16]
 8011a04:	3202      	adds	r2, #2
 8011a06:	f104 010c 	add.w	r1, r4, #12
 8011a0a:	0092      	lsls	r2, r2, #2
 8011a0c:	300c      	adds	r0, #12
 8011a0e:	f7ff f8c4 	bl	8010b9a <memcpy>
 8011a12:	4621      	mov	r1, r4
 8011a14:	4638      	mov	r0, r7
 8011a16:	f7ff ffa5 	bl	8011964 <_Bfree>
 8011a1a:	4644      	mov	r4, r8
 8011a1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a20:	3501      	adds	r5, #1
 8011a22:	615e      	str	r6, [r3, #20]
 8011a24:	6125      	str	r5, [r4, #16]
 8011a26:	4620      	mov	r0, r4
 8011a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a2c:	0801a16e 	.word	0x0801a16e
 8011a30:	0801a17f 	.word	0x0801a17f

08011a34 <__hi0bits>:
 8011a34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011a38:	4603      	mov	r3, r0
 8011a3a:	bf36      	itet	cc
 8011a3c:	0403      	lslcc	r3, r0, #16
 8011a3e:	2000      	movcs	r0, #0
 8011a40:	2010      	movcc	r0, #16
 8011a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a46:	bf3c      	itt	cc
 8011a48:	021b      	lslcc	r3, r3, #8
 8011a4a:	3008      	addcc	r0, #8
 8011a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a50:	bf3c      	itt	cc
 8011a52:	011b      	lslcc	r3, r3, #4
 8011a54:	3004      	addcc	r0, #4
 8011a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a5a:	bf3c      	itt	cc
 8011a5c:	009b      	lslcc	r3, r3, #2
 8011a5e:	3002      	addcc	r0, #2
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	db05      	blt.n	8011a70 <__hi0bits+0x3c>
 8011a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011a68:	f100 0001 	add.w	r0, r0, #1
 8011a6c:	bf08      	it	eq
 8011a6e:	2020      	moveq	r0, #32
 8011a70:	4770      	bx	lr

08011a72 <__lo0bits>:
 8011a72:	6803      	ldr	r3, [r0, #0]
 8011a74:	4602      	mov	r2, r0
 8011a76:	f013 0007 	ands.w	r0, r3, #7
 8011a7a:	d00b      	beq.n	8011a94 <__lo0bits+0x22>
 8011a7c:	07d9      	lsls	r1, r3, #31
 8011a7e:	d421      	bmi.n	8011ac4 <__lo0bits+0x52>
 8011a80:	0798      	lsls	r0, r3, #30
 8011a82:	bf49      	itett	mi
 8011a84:	085b      	lsrmi	r3, r3, #1
 8011a86:	089b      	lsrpl	r3, r3, #2
 8011a88:	2001      	movmi	r0, #1
 8011a8a:	6013      	strmi	r3, [r2, #0]
 8011a8c:	bf5c      	itt	pl
 8011a8e:	6013      	strpl	r3, [r2, #0]
 8011a90:	2002      	movpl	r0, #2
 8011a92:	4770      	bx	lr
 8011a94:	b299      	uxth	r1, r3
 8011a96:	b909      	cbnz	r1, 8011a9c <__lo0bits+0x2a>
 8011a98:	0c1b      	lsrs	r3, r3, #16
 8011a9a:	2010      	movs	r0, #16
 8011a9c:	b2d9      	uxtb	r1, r3
 8011a9e:	b909      	cbnz	r1, 8011aa4 <__lo0bits+0x32>
 8011aa0:	3008      	adds	r0, #8
 8011aa2:	0a1b      	lsrs	r3, r3, #8
 8011aa4:	0719      	lsls	r1, r3, #28
 8011aa6:	bf04      	itt	eq
 8011aa8:	091b      	lsreq	r3, r3, #4
 8011aaa:	3004      	addeq	r0, #4
 8011aac:	0799      	lsls	r1, r3, #30
 8011aae:	bf04      	itt	eq
 8011ab0:	089b      	lsreq	r3, r3, #2
 8011ab2:	3002      	addeq	r0, #2
 8011ab4:	07d9      	lsls	r1, r3, #31
 8011ab6:	d403      	bmi.n	8011ac0 <__lo0bits+0x4e>
 8011ab8:	085b      	lsrs	r3, r3, #1
 8011aba:	f100 0001 	add.w	r0, r0, #1
 8011abe:	d003      	beq.n	8011ac8 <__lo0bits+0x56>
 8011ac0:	6013      	str	r3, [r2, #0]
 8011ac2:	4770      	bx	lr
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	4770      	bx	lr
 8011ac8:	2020      	movs	r0, #32
 8011aca:	4770      	bx	lr

08011acc <__i2b>:
 8011acc:	b510      	push	{r4, lr}
 8011ace:	460c      	mov	r4, r1
 8011ad0:	2101      	movs	r1, #1
 8011ad2:	f7ff ff07 	bl	80118e4 <_Balloc>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	b928      	cbnz	r0, 8011ae6 <__i2b+0x1a>
 8011ada:	4b05      	ldr	r3, [pc, #20]	@ (8011af0 <__i2b+0x24>)
 8011adc:	4805      	ldr	r0, [pc, #20]	@ (8011af4 <__i2b+0x28>)
 8011ade:	f240 1145 	movw	r1, #325	@ 0x145
 8011ae2:	f000 fd9f 	bl	8012624 <__assert_func>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	6144      	str	r4, [r0, #20]
 8011aea:	6103      	str	r3, [r0, #16]
 8011aec:	bd10      	pop	{r4, pc}
 8011aee:	bf00      	nop
 8011af0:	0801a16e 	.word	0x0801a16e
 8011af4:	0801a17f 	.word	0x0801a17f

08011af8 <__multiply>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	4614      	mov	r4, r2
 8011afe:	690a      	ldr	r2, [r1, #16]
 8011b00:	6923      	ldr	r3, [r4, #16]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	bfa8      	it	ge
 8011b06:	4623      	movge	r3, r4
 8011b08:	460f      	mov	r7, r1
 8011b0a:	bfa4      	itt	ge
 8011b0c:	460c      	movge	r4, r1
 8011b0e:	461f      	movge	r7, r3
 8011b10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011b14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011b18:	68a3      	ldr	r3, [r4, #8]
 8011b1a:	6861      	ldr	r1, [r4, #4]
 8011b1c:	eb0a 0609 	add.w	r6, sl, r9
 8011b20:	42b3      	cmp	r3, r6
 8011b22:	b085      	sub	sp, #20
 8011b24:	bfb8      	it	lt
 8011b26:	3101      	addlt	r1, #1
 8011b28:	f7ff fedc 	bl	80118e4 <_Balloc>
 8011b2c:	b930      	cbnz	r0, 8011b3c <__multiply+0x44>
 8011b2e:	4602      	mov	r2, r0
 8011b30:	4b44      	ldr	r3, [pc, #272]	@ (8011c44 <__multiply+0x14c>)
 8011b32:	4845      	ldr	r0, [pc, #276]	@ (8011c48 <__multiply+0x150>)
 8011b34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011b38:	f000 fd74 	bl	8012624 <__assert_func>
 8011b3c:	f100 0514 	add.w	r5, r0, #20
 8011b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b44:	462b      	mov	r3, r5
 8011b46:	2200      	movs	r2, #0
 8011b48:	4543      	cmp	r3, r8
 8011b4a:	d321      	bcc.n	8011b90 <__multiply+0x98>
 8011b4c:	f107 0114 	add.w	r1, r7, #20
 8011b50:	f104 0214 	add.w	r2, r4, #20
 8011b54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011b58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011b5c:	9302      	str	r3, [sp, #8]
 8011b5e:	1b13      	subs	r3, r2, r4
 8011b60:	3b15      	subs	r3, #21
 8011b62:	f023 0303 	bic.w	r3, r3, #3
 8011b66:	3304      	adds	r3, #4
 8011b68:	f104 0715 	add.w	r7, r4, #21
 8011b6c:	42ba      	cmp	r2, r7
 8011b6e:	bf38      	it	cc
 8011b70:	2304      	movcc	r3, #4
 8011b72:	9301      	str	r3, [sp, #4]
 8011b74:	9b02      	ldr	r3, [sp, #8]
 8011b76:	9103      	str	r1, [sp, #12]
 8011b78:	428b      	cmp	r3, r1
 8011b7a:	d80c      	bhi.n	8011b96 <__multiply+0x9e>
 8011b7c:	2e00      	cmp	r6, #0
 8011b7e:	dd03      	ble.n	8011b88 <__multiply+0x90>
 8011b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d05b      	beq.n	8011c40 <__multiply+0x148>
 8011b88:	6106      	str	r6, [r0, #16]
 8011b8a:	b005      	add	sp, #20
 8011b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b90:	f843 2b04 	str.w	r2, [r3], #4
 8011b94:	e7d8      	b.n	8011b48 <__multiply+0x50>
 8011b96:	f8b1 a000 	ldrh.w	sl, [r1]
 8011b9a:	f1ba 0f00 	cmp.w	sl, #0
 8011b9e:	d024      	beq.n	8011bea <__multiply+0xf2>
 8011ba0:	f104 0e14 	add.w	lr, r4, #20
 8011ba4:	46a9      	mov	r9, r5
 8011ba6:	f04f 0c00 	mov.w	ip, #0
 8011baa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011bae:	f8d9 3000 	ldr.w	r3, [r9]
 8011bb2:	fa1f fb87 	uxth.w	fp, r7
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8011bbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011bc0:	f8d9 7000 	ldr.w	r7, [r9]
 8011bc4:	4463      	add	r3, ip
 8011bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011bca:	fb0a c70b 	mla	r7, sl, fp, ip
 8011bce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011bd8:	4572      	cmp	r2, lr
 8011bda:	f849 3b04 	str.w	r3, [r9], #4
 8011bde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011be2:	d8e2      	bhi.n	8011baa <__multiply+0xb2>
 8011be4:	9b01      	ldr	r3, [sp, #4]
 8011be6:	f845 c003 	str.w	ip, [r5, r3]
 8011bea:	9b03      	ldr	r3, [sp, #12]
 8011bec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011bf0:	3104      	adds	r1, #4
 8011bf2:	f1b9 0f00 	cmp.w	r9, #0
 8011bf6:	d021      	beq.n	8011c3c <__multiply+0x144>
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	f104 0c14 	add.w	ip, r4, #20
 8011bfe:	46ae      	mov	lr, r5
 8011c00:	f04f 0a00 	mov.w	sl, #0
 8011c04:	f8bc b000 	ldrh.w	fp, [ip]
 8011c08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011c0c:	fb09 770b 	mla	r7, r9, fp, r7
 8011c10:	4457      	add	r7, sl
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c18:	f84e 3b04 	str.w	r3, [lr], #4
 8011c1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c24:	f8be 3000 	ldrh.w	r3, [lr]
 8011c28:	fb09 330a 	mla	r3, r9, sl, r3
 8011c2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011c30:	4562      	cmp	r2, ip
 8011c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c36:	d8e5      	bhi.n	8011c04 <__multiply+0x10c>
 8011c38:	9f01      	ldr	r7, [sp, #4]
 8011c3a:	51eb      	str	r3, [r5, r7]
 8011c3c:	3504      	adds	r5, #4
 8011c3e:	e799      	b.n	8011b74 <__multiply+0x7c>
 8011c40:	3e01      	subs	r6, #1
 8011c42:	e79b      	b.n	8011b7c <__multiply+0x84>
 8011c44:	0801a16e 	.word	0x0801a16e
 8011c48:	0801a17f 	.word	0x0801a17f

08011c4c <__pow5mult>:
 8011c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c50:	4615      	mov	r5, r2
 8011c52:	f012 0203 	ands.w	r2, r2, #3
 8011c56:	4607      	mov	r7, r0
 8011c58:	460e      	mov	r6, r1
 8011c5a:	d007      	beq.n	8011c6c <__pow5mult+0x20>
 8011c5c:	4c25      	ldr	r4, [pc, #148]	@ (8011cf4 <__pow5mult+0xa8>)
 8011c5e:	3a01      	subs	r2, #1
 8011c60:	2300      	movs	r3, #0
 8011c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c66:	f7ff fe9f 	bl	80119a8 <__multadd>
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	10ad      	asrs	r5, r5, #2
 8011c6e:	d03d      	beq.n	8011cec <__pow5mult+0xa0>
 8011c70:	69fc      	ldr	r4, [r7, #28]
 8011c72:	b97c      	cbnz	r4, 8011c94 <__pow5mult+0x48>
 8011c74:	2010      	movs	r0, #16
 8011c76:	f7fd fecf 	bl	800fa18 <malloc>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	61f8      	str	r0, [r7, #28]
 8011c7e:	b928      	cbnz	r0, 8011c8c <__pow5mult+0x40>
 8011c80:	4b1d      	ldr	r3, [pc, #116]	@ (8011cf8 <__pow5mult+0xac>)
 8011c82:	481e      	ldr	r0, [pc, #120]	@ (8011cfc <__pow5mult+0xb0>)
 8011c84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011c88:	f000 fccc 	bl	8012624 <__assert_func>
 8011c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c90:	6004      	str	r4, [r0, #0]
 8011c92:	60c4      	str	r4, [r0, #12]
 8011c94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011c9c:	b94c      	cbnz	r4, 8011cb2 <__pow5mult+0x66>
 8011c9e:	f240 2171 	movw	r1, #625	@ 0x271
 8011ca2:	4638      	mov	r0, r7
 8011ca4:	f7ff ff12 	bl	8011acc <__i2b>
 8011ca8:	2300      	movs	r3, #0
 8011caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cae:	4604      	mov	r4, r0
 8011cb0:	6003      	str	r3, [r0, #0]
 8011cb2:	f04f 0900 	mov.w	r9, #0
 8011cb6:	07eb      	lsls	r3, r5, #31
 8011cb8:	d50a      	bpl.n	8011cd0 <__pow5mult+0x84>
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4622      	mov	r2, r4
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	f7ff ff1a 	bl	8011af8 <__multiply>
 8011cc4:	4631      	mov	r1, r6
 8011cc6:	4680      	mov	r8, r0
 8011cc8:	4638      	mov	r0, r7
 8011cca:	f7ff fe4b 	bl	8011964 <_Bfree>
 8011cce:	4646      	mov	r6, r8
 8011cd0:	106d      	asrs	r5, r5, #1
 8011cd2:	d00b      	beq.n	8011cec <__pow5mult+0xa0>
 8011cd4:	6820      	ldr	r0, [r4, #0]
 8011cd6:	b938      	cbnz	r0, 8011ce8 <__pow5mult+0x9c>
 8011cd8:	4622      	mov	r2, r4
 8011cda:	4621      	mov	r1, r4
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f7ff ff0b 	bl	8011af8 <__multiply>
 8011ce2:	6020      	str	r0, [r4, #0]
 8011ce4:	f8c0 9000 	str.w	r9, [r0]
 8011ce8:	4604      	mov	r4, r0
 8011cea:	e7e4      	b.n	8011cb6 <__pow5mult+0x6a>
 8011cec:	4630      	mov	r0, r6
 8011cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf2:	bf00      	nop
 8011cf4:	0801a1d8 	.word	0x0801a1d8
 8011cf8:	0801a0ff 	.word	0x0801a0ff
 8011cfc:	0801a17f 	.word	0x0801a17f

08011d00 <__lshift>:
 8011d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d04:	460c      	mov	r4, r1
 8011d06:	6849      	ldr	r1, [r1, #4]
 8011d08:	6923      	ldr	r3, [r4, #16]
 8011d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d0e:	68a3      	ldr	r3, [r4, #8]
 8011d10:	4607      	mov	r7, r0
 8011d12:	4691      	mov	r9, r2
 8011d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d18:	f108 0601 	add.w	r6, r8, #1
 8011d1c:	42b3      	cmp	r3, r6
 8011d1e:	db0b      	blt.n	8011d38 <__lshift+0x38>
 8011d20:	4638      	mov	r0, r7
 8011d22:	f7ff fddf 	bl	80118e4 <_Balloc>
 8011d26:	4605      	mov	r5, r0
 8011d28:	b948      	cbnz	r0, 8011d3e <__lshift+0x3e>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	4b28      	ldr	r3, [pc, #160]	@ (8011dd0 <__lshift+0xd0>)
 8011d2e:	4829      	ldr	r0, [pc, #164]	@ (8011dd4 <__lshift+0xd4>)
 8011d30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011d34:	f000 fc76 	bl	8012624 <__assert_func>
 8011d38:	3101      	adds	r1, #1
 8011d3a:	005b      	lsls	r3, r3, #1
 8011d3c:	e7ee      	b.n	8011d1c <__lshift+0x1c>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	f100 0114 	add.w	r1, r0, #20
 8011d44:	f100 0210 	add.w	r2, r0, #16
 8011d48:	4618      	mov	r0, r3
 8011d4a:	4553      	cmp	r3, sl
 8011d4c:	db33      	blt.n	8011db6 <__lshift+0xb6>
 8011d4e:	6920      	ldr	r0, [r4, #16]
 8011d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d54:	f104 0314 	add.w	r3, r4, #20
 8011d58:	f019 091f 	ands.w	r9, r9, #31
 8011d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d64:	d02b      	beq.n	8011dbe <__lshift+0xbe>
 8011d66:	f1c9 0e20 	rsb	lr, r9, #32
 8011d6a:	468a      	mov	sl, r1
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	fa00 f009 	lsl.w	r0, r0, r9
 8011d74:	4310      	orrs	r0, r2
 8011d76:	f84a 0b04 	str.w	r0, [sl], #4
 8011d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d7e:	459c      	cmp	ip, r3
 8011d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8011d84:	d8f3      	bhi.n	8011d6e <__lshift+0x6e>
 8011d86:	ebac 0304 	sub.w	r3, ip, r4
 8011d8a:	3b15      	subs	r3, #21
 8011d8c:	f023 0303 	bic.w	r3, r3, #3
 8011d90:	3304      	adds	r3, #4
 8011d92:	f104 0015 	add.w	r0, r4, #21
 8011d96:	4584      	cmp	ip, r0
 8011d98:	bf38      	it	cc
 8011d9a:	2304      	movcc	r3, #4
 8011d9c:	50ca      	str	r2, [r1, r3]
 8011d9e:	b10a      	cbz	r2, 8011da4 <__lshift+0xa4>
 8011da0:	f108 0602 	add.w	r6, r8, #2
 8011da4:	3e01      	subs	r6, #1
 8011da6:	4638      	mov	r0, r7
 8011da8:	612e      	str	r6, [r5, #16]
 8011daa:	4621      	mov	r1, r4
 8011dac:	f7ff fdda 	bl	8011964 <_Bfree>
 8011db0:	4628      	mov	r0, r5
 8011db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8011dba:	3301      	adds	r3, #1
 8011dbc:	e7c5      	b.n	8011d4a <__lshift+0x4a>
 8011dbe:	3904      	subs	r1, #4
 8011dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8011dc8:	459c      	cmp	ip, r3
 8011dca:	d8f9      	bhi.n	8011dc0 <__lshift+0xc0>
 8011dcc:	e7ea      	b.n	8011da4 <__lshift+0xa4>
 8011dce:	bf00      	nop
 8011dd0:	0801a16e 	.word	0x0801a16e
 8011dd4:	0801a17f 	.word	0x0801a17f

08011dd8 <__mcmp>:
 8011dd8:	690a      	ldr	r2, [r1, #16]
 8011dda:	4603      	mov	r3, r0
 8011ddc:	6900      	ldr	r0, [r0, #16]
 8011dde:	1a80      	subs	r0, r0, r2
 8011de0:	b530      	push	{r4, r5, lr}
 8011de2:	d10e      	bne.n	8011e02 <__mcmp+0x2a>
 8011de4:	3314      	adds	r3, #20
 8011de6:	3114      	adds	r1, #20
 8011de8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011dec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011df8:	4295      	cmp	r5, r2
 8011dfa:	d003      	beq.n	8011e04 <__mcmp+0x2c>
 8011dfc:	d205      	bcs.n	8011e0a <__mcmp+0x32>
 8011dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011e02:	bd30      	pop	{r4, r5, pc}
 8011e04:	42a3      	cmp	r3, r4
 8011e06:	d3f3      	bcc.n	8011df0 <__mcmp+0x18>
 8011e08:	e7fb      	b.n	8011e02 <__mcmp+0x2a>
 8011e0a:	2001      	movs	r0, #1
 8011e0c:	e7f9      	b.n	8011e02 <__mcmp+0x2a>
	...

08011e10 <__mdiff>:
 8011e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	4689      	mov	r9, r1
 8011e16:	4606      	mov	r6, r0
 8011e18:	4611      	mov	r1, r2
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	4614      	mov	r4, r2
 8011e1e:	f7ff ffdb 	bl	8011dd8 <__mcmp>
 8011e22:	1e05      	subs	r5, r0, #0
 8011e24:	d112      	bne.n	8011e4c <__mdiff+0x3c>
 8011e26:	4629      	mov	r1, r5
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f7ff fd5b 	bl	80118e4 <_Balloc>
 8011e2e:	4602      	mov	r2, r0
 8011e30:	b928      	cbnz	r0, 8011e3e <__mdiff+0x2e>
 8011e32:	4b3f      	ldr	r3, [pc, #252]	@ (8011f30 <__mdiff+0x120>)
 8011e34:	f240 2137 	movw	r1, #567	@ 0x237
 8011e38:	483e      	ldr	r0, [pc, #248]	@ (8011f34 <__mdiff+0x124>)
 8011e3a:	f000 fbf3 	bl	8012624 <__assert_func>
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e44:	4610      	mov	r0, r2
 8011e46:	b003      	add	sp, #12
 8011e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4c:	bfbc      	itt	lt
 8011e4e:	464b      	movlt	r3, r9
 8011e50:	46a1      	movlt	r9, r4
 8011e52:	4630      	mov	r0, r6
 8011e54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011e58:	bfba      	itte	lt
 8011e5a:	461c      	movlt	r4, r3
 8011e5c:	2501      	movlt	r5, #1
 8011e5e:	2500      	movge	r5, #0
 8011e60:	f7ff fd40 	bl	80118e4 <_Balloc>
 8011e64:	4602      	mov	r2, r0
 8011e66:	b918      	cbnz	r0, 8011e70 <__mdiff+0x60>
 8011e68:	4b31      	ldr	r3, [pc, #196]	@ (8011f30 <__mdiff+0x120>)
 8011e6a:	f240 2145 	movw	r1, #581	@ 0x245
 8011e6e:	e7e3      	b.n	8011e38 <__mdiff+0x28>
 8011e70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011e74:	6926      	ldr	r6, [r4, #16]
 8011e76:	60c5      	str	r5, [r0, #12]
 8011e78:	f109 0310 	add.w	r3, r9, #16
 8011e7c:	f109 0514 	add.w	r5, r9, #20
 8011e80:	f104 0e14 	add.w	lr, r4, #20
 8011e84:	f100 0b14 	add.w	fp, r0, #20
 8011e88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011e8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	46d9      	mov	r9, fp
 8011e94:	f04f 0c00 	mov.w	ip, #0
 8011e98:	9b01      	ldr	r3, [sp, #4]
 8011e9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011e9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ea2:	9301      	str	r3, [sp, #4]
 8011ea4:	fa1f f38a 	uxth.w	r3, sl
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	b283      	uxth	r3, r0
 8011eac:	1acb      	subs	r3, r1, r3
 8011eae:	0c00      	lsrs	r0, r0, #16
 8011eb0:	4463      	add	r3, ip
 8011eb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011eb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011ec0:	4576      	cmp	r6, lr
 8011ec2:	f849 3b04 	str.w	r3, [r9], #4
 8011ec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011eca:	d8e5      	bhi.n	8011e98 <__mdiff+0x88>
 8011ecc:	1b33      	subs	r3, r6, r4
 8011ece:	3b15      	subs	r3, #21
 8011ed0:	f023 0303 	bic.w	r3, r3, #3
 8011ed4:	3415      	adds	r4, #21
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	42a6      	cmp	r6, r4
 8011eda:	bf38      	it	cc
 8011edc:	2304      	movcc	r3, #4
 8011ede:	441d      	add	r5, r3
 8011ee0:	445b      	add	r3, fp
 8011ee2:	461e      	mov	r6, r3
 8011ee4:	462c      	mov	r4, r5
 8011ee6:	4544      	cmp	r4, r8
 8011ee8:	d30e      	bcc.n	8011f08 <__mdiff+0xf8>
 8011eea:	f108 0103 	add.w	r1, r8, #3
 8011eee:	1b49      	subs	r1, r1, r5
 8011ef0:	f021 0103 	bic.w	r1, r1, #3
 8011ef4:	3d03      	subs	r5, #3
 8011ef6:	45a8      	cmp	r8, r5
 8011ef8:	bf38      	it	cc
 8011efa:	2100      	movcc	r1, #0
 8011efc:	440b      	add	r3, r1
 8011efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f02:	b191      	cbz	r1, 8011f2a <__mdiff+0x11a>
 8011f04:	6117      	str	r7, [r2, #16]
 8011f06:	e79d      	b.n	8011e44 <__mdiff+0x34>
 8011f08:	f854 1b04 	ldr.w	r1, [r4], #4
 8011f0c:	46e6      	mov	lr, ip
 8011f0e:	0c08      	lsrs	r0, r1, #16
 8011f10:	fa1c fc81 	uxtah	ip, ip, r1
 8011f14:	4471      	add	r1, lr
 8011f16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011f1a:	b289      	uxth	r1, r1
 8011f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011f20:	f846 1b04 	str.w	r1, [r6], #4
 8011f24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f28:	e7dd      	b.n	8011ee6 <__mdiff+0xd6>
 8011f2a:	3f01      	subs	r7, #1
 8011f2c:	e7e7      	b.n	8011efe <__mdiff+0xee>
 8011f2e:	bf00      	nop
 8011f30:	0801a16e 	.word	0x0801a16e
 8011f34:	0801a17f 	.word	0x0801a17f

08011f38 <__d2b>:
 8011f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f3c:	460f      	mov	r7, r1
 8011f3e:	2101      	movs	r1, #1
 8011f40:	ec59 8b10 	vmov	r8, r9, d0
 8011f44:	4616      	mov	r6, r2
 8011f46:	f7ff fccd 	bl	80118e4 <_Balloc>
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	b930      	cbnz	r0, 8011f5c <__d2b+0x24>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	4b23      	ldr	r3, [pc, #140]	@ (8011fe0 <__d2b+0xa8>)
 8011f52:	4824      	ldr	r0, [pc, #144]	@ (8011fe4 <__d2b+0xac>)
 8011f54:	f240 310f 	movw	r1, #783	@ 0x30f
 8011f58:	f000 fb64 	bl	8012624 <__assert_func>
 8011f5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f64:	b10d      	cbz	r5, 8011f6a <__d2b+0x32>
 8011f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011f6a:	9301      	str	r3, [sp, #4]
 8011f6c:	f1b8 0300 	subs.w	r3, r8, #0
 8011f70:	d023      	beq.n	8011fba <__d2b+0x82>
 8011f72:	4668      	mov	r0, sp
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	f7ff fd7c 	bl	8011a72 <__lo0bits>
 8011f7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011f7e:	b1d0      	cbz	r0, 8011fb6 <__d2b+0x7e>
 8011f80:	f1c0 0320 	rsb	r3, r0, #32
 8011f84:	fa02 f303 	lsl.w	r3, r2, r3
 8011f88:	430b      	orrs	r3, r1
 8011f8a:	40c2      	lsrs	r2, r0
 8011f8c:	6163      	str	r3, [r4, #20]
 8011f8e:	9201      	str	r2, [sp, #4]
 8011f90:	9b01      	ldr	r3, [sp, #4]
 8011f92:	61a3      	str	r3, [r4, #24]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	bf0c      	ite	eq
 8011f98:	2201      	moveq	r2, #1
 8011f9a:	2202      	movne	r2, #2
 8011f9c:	6122      	str	r2, [r4, #16]
 8011f9e:	b1a5      	cbz	r5, 8011fca <__d2b+0x92>
 8011fa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011fa4:	4405      	add	r5, r0
 8011fa6:	603d      	str	r5, [r7, #0]
 8011fa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011fac:	6030      	str	r0, [r6, #0]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	b003      	add	sp, #12
 8011fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	6161      	str	r1, [r4, #20]
 8011fb8:	e7ea      	b.n	8011f90 <__d2b+0x58>
 8011fba:	a801      	add	r0, sp, #4
 8011fbc:	f7ff fd59 	bl	8011a72 <__lo0bits>
 8011fc0:	9b01      	ldr	r3, [sp, #4]
 8011fc2:	6163      	str	r3, [r4, #20]
 8011fc4:	3020      	adds	r0, #32
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	e7e8      	b.n	8011f9c <__d2b+0x64>
 8011fca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011fd2:	6038      	str	r0, [r7, #0]
 8011fd4:	6918      	ldr	r0, [r3, #16]
 8011fd6:	f7ff fd2d 	bl	8011a34 <__hi0bits>
 8011fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011fde:	e7e5      	b.n	8011fac <__d2b+0x74>
 8011fe0:	0801a16e 	.word	0x0801a16e
 8011fe4:	0801a17f 	.word	0x0801a17f

08011fe8 <__ssputs_r>:
 8011fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fec:	688e      	ldr	r6, [r1, #8]
 8011fee:	461f      	mov	r7, r3
 8011ff0:	42be      	cmp	r6, r7
 8011ff2:	680b      	ldr	r3, [r1, #0]
 8011ff4:	4682      	mov	sl, r0
 8011ff6:	460c      	mov	r4, r1
 8011ff8:	4690      	mov	r8, r2
 8011ffa:	d82d      	bhi.n	8012058 <__ssputs_r+0x70>
 8011ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012000:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012004:	d026      	beq.n	8012054 <__ssputs_r+0x6c>
 8012006:	6965      	ldr	r5, [r4, #20]
 8012008:	6909      	ldr	r1, [r1, #16]
 801200a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801200e:	eba3 0901 	sub.w	r9, r3, r1
 8012012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012016:	1c7b      	adds	r3, r7, #1
 8012018:	444b      	add	r3, r9
 801201a:	106d      	asrs	r5, r5, #1
 801201c:	429d      	cmp	r5, r3
 801201e:	bf38      	it	cc
 8012020:	461d      	movcc	r5, r3
 8012022:	0553      	lsls	r3, r2, #21
 8012024:	d527      	bpl.n	8012076 <__ssputs_r+0x8e>
 8012026:	4629      	mov	r1, r5
 8012028:	f7fd fd28 	bl	800fa7c <_malloc_r>
 801202c:	4606      	mov	r6, r0
 801202e:	b360      	cbz	r0, 801208a <__ssputs_r+0xa2>
 8012030:	6921      	ldr	r1, [r4, #16]
 8012032:	464a      	mov	r2, r9
 8012034:	f7fe fdb1 	bl	8010b9a <memcpy>
 8012038:	89a3      	ldrh	r3, [r4, #12]
 801203a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801203e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012042:	81a3      	strh	r3, [r4, #12]
 8012044:	6126      	str	r6, [r4, #16]
 8012046:	6165      	str	r5, [r4, #20]
 8012048:	444e      	add	r6, r9
 801204a:	eba5 0509 	sub.w	r5, r5, r9
 801204e:	6026      	str	r6, [r4, #0]
 8012050:	60a5      	str	r5, [r4, #8]
 8012052:	463e      	mov	r6, r7
 8012054:	42be      	cmp	r6, r7
 8012056:	d900      	bls.n	801205a <__ssputs_r+0x72>
 8012058:	463e      	mov	r6, r7
 801205a:	6820      	ldr	r0, [r4, #0]
 801205c:	4632      	mov	r2, r6
 801205e:	4641      	mov	r1, r8
 8012060:	f7fe fcf2 	bl	8010a48 <memmove>
 8012064:	68a3      	ldr	r3, [r4, #8]
 8012066:	1b9b      	subs	r3, r3, r6
 8012068:	60a3      	str	r3, [r4, #8]
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	4433      	add	r3, r6
 801206e:	6023      	str	r3, [r4, #0]
 8012070:	2000      	movs	r0, #0
 8012072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012076:	462a      	mov	r2, r5
 8012078:	f000 fb04 	bl	8012684 <_realloc_r>
 801207c:	4606      	mov	r6, r0
 801207e:	2800      	cmp	r0, #0
 8012080:	d1e0      	bne.n	8012044 <__ssputs_r+0x5c>
 8012082:	6921      	ldr	r1, [r4, #16]
 8012084:	4650      	mov	r0, sl
 8012086:	f7ff fbe3 	bl	8011850 <_free_r>
 801208a:	230c      	movs	r3, #12
 801208c:	f8ca 3000 	str.w	r3, [sl]
 8012090:	89a3      	ldrh	r3, [r4, #12]
 8012092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012096:	81a3      	strh	r3, [r4, #12]
 8012098:	f04f 30ff 	mov.w	r0, #4294967295
 801209c:	e7e9      	b.n	8012072 <__ssputs_r+0x8a>
	...

080120a0 <_svfiprintf_r>:
 80120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a4:	4698      	mov	r8, r3
 80120a6:	898b      	ldrh	r3, [r1, #12]
 80120a8:	061b      	lsls	r3, r3, #24
 80120aa:	b09d      	sub	sp, #116	@ 0x74
 80120ac:	4607      	mov	r7, r0
 80120ae:	460d      	mov	r5, r1
 80120b0:	4614      	mov	r4, r2
 80120b2:	d510      	bpl.n	80120d6 <_svfiprintf_r+0x36>
 80120b4:	690b      	ldr	r3, [r1, #16]
 80120b6:	b973      	cbnz	r3, 80120d6 <_svfiprintf_r+0x36>
 80120b8:	2140      	movs	r1, #64	@ 0x40
 80120ba:	f7fd fcdf 	bl	800fa7c <_malloc_r>
 80120be:	6028      	str	r0, [r5, #0]
 80120c0:	6128      	str	r0, [r5, #16]
 80120c2:	b930      	cbnz	r0, 80120d2 <_svfiprintf_r+0x32>
 80120c4:	230c      	movs	r3, #12
 80120c6:	603b      	str	r3, [r7, #0]
 80120c8:	f04f 30ff 	mov.w	r0, #4294967295
 80120cc:	b01d      	add	sp, #116	@ 0x74
 80120ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d2:	2340      	movs	r3, #64	@ 0x40
 80120d4:	616b      	str	r3, [r5, #20]
 80120d6:	2300      	movs	r3, #0
 80120d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80120da:	2320      	movs	r3, #32
 80120dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80120e4:	2330      	movs	r3, #48	@ 0x30
 80120e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012284 <_svfiprintf_r+0x1e4>
 80120ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120ee:	f04f 0901 	mov.w	r9, #1
 80120f2:	4623      	mov	r3, r4
 80120f4:	469a      	mov	sl, r3
 80120f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120fa:	b10a      	cbz	r2, 8012100 <_svfiprintf_r+0x60>
 80120fc:	2a25      	cmp	r2, #37	@ 0x25
 80120fe:	d1f9      	bne.n	80120f4 <_svfiprintf_r+0x54>
 8012100:	ebba 0b04 	subs.w	fp, sl, r4
 8012104:	d00b      	beq.n	801211e <_svfiprintf_r+0x7e>
 8012106:	465b      	mov	r3, fp
 8012108:	4622      	mov	r2, r4
 801210a:	4629      	mov	r1, r5
 801210c:	4638      	mov	r0, r7
 801210e:	f7ff ff6b 	bl	8011fe8 <__ssputs_r>
 8012112:	3001      	adds	r0, #1
 8012114:	f000 80a7 	beq.w	8012266 <_svfiprintf_r+0x1c6>
 8012118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801211a:	445a      	add	r2, fp
 801211c:	9209      	str	r2, [sp, #36]	@ 0x24
 801211e:	f89a 3000 	ldrb.w	r3, [sl]
 8012122:	2b00      	cmp	r3, #0
 8012124:	f000 809f 	beq.w	8012266 <_svfiprintf_r+0x1c6>
 8012128:	2300      	movs	r3, #0
 801212a:	f04f 32ff 	mov.w	r2, #4294967295
 801212e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012132:	f10a 0a01 	add.w	sl, sl, #1
 8012136:	9304      	str	r3, [sp, #16]
 8012138:	9307      	str	r3, [sp, #28]
 801213a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801213e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012140:	4654      	mov	r4, sl
 8012142:	2205      	movs	r2, #5
 8012144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012148:	484e      	ldr	r0, [pc, #312]	@ (8012284 <_svfiprintf_r+0x1e4>)
 801214a:	f7ee f849 	bl	80001e0 <memchr>
 801214e:	9a04      	ldr	r2, [sp, #16]
 8012150:	b9d8      	cbnz	r0, 801218a <_svfiprintf_r+0xea>
 8012152:	06d0      	lsls	r0, r2, #27
 8012154:	bf44      	itt	mi
 8012156:	2320      	movmi	r3, #32
 8012158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801215c:	0711      	lsls	r1, r2, #28
 801215e:	bf44      	itt	mi
 8012160:	232b      	movmi	r3, #43	@ 0x2b
 8012162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012166:	f89a 3000 	ldrb.w	r3, [sl]
 801216a:	2b2a      	cmp	r3, #42	@ 0x2a
 801216c:	d015      	beq.n	801219a <_svfiprintf_r+0xfa>
 801216e:	9a07      	ldr	r2, [sp, #28]
 8012170:	4654      	mov	r4, sl
 8012172:	2000      	movs	r0, #0
 8012174:	f04f 0c0a 	mov.w	ip, #10
 8012178:	4621      	mov	r1, r4
 801217a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801217e:	3b30      	subs	r3, #48	@ 0x30
 8012180:	2b09      	cmp	r3, #9
 8012182:	d94b      	bls.n	801221c <_svfiprintf_r+0x17c>
 8012184:	b1b0      	cbz	r0, 80121b4 <_svfiprintf_r+0x114>
 8012186:	9207      	str	r2, [sp, #28]
 8012188:	e014      	b.n	80121b4 <_svfiprintf_r+0x114>
 801218a:	eba0 0308 	sub.w	r3, r0, r8
 801218e:	fa09 f303 	lsl.w	r3, r9, r3
 8012192:	4313      	orrs	r3, r2
 8012194:	9304      	str	r3, [sp, #16]
 8012196:	46a2      	mov	sl, r4
 8012198:	e7d2      	b.n	8012140 <_svfiprintf_r+0xa0>
 801219a:	9b03      	ldr	r3, [sp, #12]
 801219c:	1d19      	adds	r1, r3, #4
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	9103      	str	r1, [sp, #12]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	bfbb      	ittet	lt
 80121a6:	425b      	neglt	r3, r3
 80121a8:	f042 0202 	orrlt.w	r2, r2, #2
 80121ac:	9307      	strge	r3, [sp, #28]
 80121ae:	9307      	strlt	r3, [sp, #28]
 80121b0:	bfb8      	it	lt
 80121b2:	9204      	strlt	r2, [sp, #16]
 80121b4:	7823      	ldrb	r3, [r4, #0]
 80121b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80121b8:	d10a      	bne.n	80121d0 <_svfiprintf_r+0x130>
 80121ba:	7863      	ldrb	r3, [r4, #1]
 80121bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80121be:	d132      	bne.n	8012226 <_svfiprintf_r+0x186>
 80121c0:	9b03      	ldr	r3, [sp, #12]
 80121c2:	1d1a      	adds	r2, r3, #4
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	9203      	str	r2, [sp, #12]
 80121c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121cc:	3402      	adds	r4, #2
 80121ce:	9305      	str	r3, [sp, #20]
 80121d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012294 <_svfiprintf_r+0x1f4>
 80121d4:	7821      	ldrb	r1, [r4, #0]
 80121d6:	2203      	movs	r2, #3
 80121d8:	4650      	mov	r0, sl
 80121da:	f7ee f801 	bl	80001e0 <memchr>
 80121de:	b138      	cbz	r0, 80121f0 <_svfiprintf_r+0x150>
 80121e0:	9b04      	ldr	r3, [sp, #16]
 80121e2:	eba0 000a 	sub.w	r0, r0, sl
 80121e6:	2240      	movs	r2, #64	@ 0x40
 80121e8:	4082      	lsls	r2, r0
 80121ea:	4313      	orrs	r3, r2
 80121ec:	3401      	adds	r4, #1
 80121ee:	9304      	str	r3, [sp, #16]
 80121f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f4:	4824      	ldr	r0, [pc, #144]	@ (8012288 <_svfiprintf_r+0x1e8>)
 80121f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80121fa:	2206      	movs	r2, #6
 80121fc:	f7ed fff0 	bl	80001e0 <memchr>
 8012200:	2800      	cmp	r0, #0
 8012202:	d036      	beq.n	8012272 <_svfiprintf_r+0x1d2>
 8012204:	4b21      	ldr	r3, [pc, #132]	@ (801228c <_svfiprintf_r+0x1ec>)
 8012206:	bb1b      	cbnz	r3, 8012250 <_svfiprintf_r+0x1b0>
 8012208:	9b03      	ldr	r3, [sp, #12]
 801220a:	3307      	adds	r3, #7
 801220c:	f023 0307 	bic.w	r3, r3, #7
 8012210:	3308      	adds	r3, #8
 8012212:	9303      	str	r3, [sp, #12]
 8012214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012216:	4433      	add	r3, r6
 8012218:	9309      	str	r3, [sp, #36]	@ 0x24
 801221a:	e76a      	b.n	80120f2 <_svfiprintf_r+0x52>
 801221c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012220:	460c      	mov	r4, r1
 8012222:	2001      	movs	r0, #1
 8012224:	e7a8      	b.n	8012178 <_svfiprintf_r+0xd8>
 8012226:	2300      	movs	r3, #0
 8012228:	3401      	adds	r4, #1
 801222a:	9305      	str	r3, [sp, #20]
 801222c:	4619      	mov	r1, r3
 801222e:	f04f 0c0a 	mov.w	ip, #10
 8012232:	4620      	mov	r0, r4
 8012234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012238:	3a30      	subs	r2, #48	@ 0x30
 801223a:	2a09      	cmp	r2, #9
 801223c:	d903      	bls.n	8012246 <_svfiprintf_r+0x1a6>
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0c6      	beq.n	80121d0 <_svfiprintf_r+0x130>
 8012242:	9105      	str	r1, [sp, #20]
 8012244:	e7c4      	b.n	80121d0 <_svfiprintf_r+0x130>
 8012246:	fb0c 2101 	mla	r1, ip, r1, r2
 801224a:	4604      	mov	r4, r0
 801224c:	2301      	movs	r3, #1
 801224e:	e7f0      	b.n	8012232 <_svfiprintf_r+0x192>
 8012250:	ab03      	add	r3, sp, #12
 8012252:	9300      	str	r3, [sp, #0]
 8012254:	462a      	mov	r2, r5
 8012256:	4b0e      	ldr	r3, [pc, #56]	@ (8012290 <_svfiprintf_r+0x1f0>)
 8012258:	a904      	add	r1, sp, #16
 801225a:	4638      	mov	r0, r7
 801225c:	f7fd fd3a 	bl	800fcd4 <_printf_float>
 8012260:	1c42      	adds	r2, r0, #1
 8012262:	4606      	mov	r6, r0
 8012264:	d1d6      	bne.n	8012214 <_svfiprintf_r+0x174>
 8012266:	89ab      	ldrh	r3, [r5, #12]
 8012268:	065b      	lsls	r3, r3, #25
 801226a:	f53f af2d 	bmi.w	80120c8 <_svfiprintf_r+0x28>
 801226e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012270:	e72c      	b.n	80120cc <_svfiprintf_r+0x2c>
 8012272:	ab03      	add	r3, sp, #12
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	462a      	mov	r2, r5
 8012278:	4b05      	ldr	r3, [pc, #20]	@ (8012290 <_svfiprintf_r+0x1f0>)
 801227a:	a904      	add	r1, sp, #16
 801227c:	4638      	mov	r0, r7
 801227e:	f7fd ffc1 	bl	8010204 <_printf_i>
 8012282:	e7ed      	b.n	8012260 <_svfiprintf_r+0x1c0>
 8012284:	0801a2d8 	.word	0x0801a2d8
 8012288:	0801a2e2 	.word	0x0801a2e2
 801228c:	0800fcd5 	.word	0x0800fcd5
 8012290:	08011fe9 	.word	0x08011fe9
 8012294:	0801a2de 	.word	0x0801a2de

08012298 <__sfputc_r>:
 8012298:	6893      	ldr	r3, [r2, #8]
 801229a:	3b01      	subs	r3, #1
 801229c:	2b00      	cmp	r3, #0
 801229e:	b410      	push	{r4}
 80122a0:	6093      	str	r3, [r2, #8]
 80122a2:	da08      	bge.n	80122b6 <__sfputc_r+0x1e>
 80122a4:	6994      	ldr	r4, [r2, #24]
 80122a6:	42a3      	cmp	r3, r4
 80122a8:	db01      	blt.n	80122ae <__sfputc_r+0x16>
 80122aa:	290a      	cmp	r1, #10
 80122ac:	d103      	bne.n	80122b6 <__sfputc_r+0x1e>
 80122ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122b2:	f7fe bb35 	b.w	8010920 <__swbuf_r>
 80122b6:	6813      	ldr	r3, [r2, #0]
 80122b8:	1c58      	adds	r0, r3, #1
 80122ba:	6010      	str	r0, [r2, #0]
 80122bc:	7019      	strb	r1, [r3, #0]
 80122be:	4608      	mov	r0, r1
 80122c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <__sfputs_r>:
 80122c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c8:	4606      	mov	r6, r0
 80122ca:	460f      	mov	r7, r1
 80122cc:	4614      	mov	r4, r2
 80122ce:	18d5      	adds	r5, r2, r3
 80122d0:	42ac      	cmp	r4, r5
 80122d2:	d101      	bne.n	80122d8 <__sfputs_r+0x12>
 80122d4:	2000      	movs	r0, #0
 80122d6:	e007      	b.n	80122e8 <__sfputs_r+0x22>
 80122d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122dc:	463a      	mov	r2, r7
 80122de:	4630      	mov	r0, r6
 80122e0:	f7ff ffda 	bl	8012298 <__sfputc_r>
 80122e4:	1c43      	adds	r3, r0, #1
 80122e6:	d1f3      	bne.n	80122d0 <__sfputs_r+0xa>
 80122e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080122ec <_vfiprintf_r>:
 80122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f0:	460d      	mov	r5, r1
 80122f2:	b09d      	sub	sp, #116	@ 0x74
 80122f4:	4614      	mov	r4, r2
 80122f6:	4698      	mov	r8, r3
 80122f8:	4606      	mov	r6, r0
 80122fa:	b118      	cbz	r0, 8012304 <_vfiprintf_r+0x18>
 80122fc:	6a03      	ldr	r3, [r0, #32]
 80122fe:	b90b      	cbnz	r3, 8012304 <_vfiprintf_r+0x18>
 8012300:	f7fe f9ec 	bl	80106dc <__sinit>
 8012304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012306:	07d9      	lsls	r1, r3, #31
 8012308:	d405      	bmi.n	8012316 <_vfiprintf_r+0x2a>
 801230a:	89ab      	ldrh	r3, [r5, #12]
 801230c:	059a      	lsls	r2, r3, #22
 801230e:	d402      	bmi.n	8012316 <_vfiprintf_r+0x2a>
 8012310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012312:	f7fe fc40 	bl	8010b96 <__retarget_lock_acquire_recursive>
 8012316:	89ab      	ldrh	r3, [r5, #12]
 8012318:	071b      	lsls	r3, r3, #28
 801231a:	d501      	bpl.n	8012320 <_vfiprintf_r+0x34>
 801231c:	692b      	ldr	r3, [r5, #16]
 801231e:	b99b      	cbnz	r3, 8012348 <_vfiprintf_r+0x5c>
 8012320:	4629      	mov	r1, r5
 8012322:	4630      	mov	r0, r6
 8012324:	f7fe fb3a 	bl	801099c <__swsetup_r>
 8012328:	b170      	cbz	r0, 8012348 <_vfiprintf_r+0x5c>
 801232a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801232c:	07dc      	lsls	r4, r3, #31
 801232e:	d504      	bpl.n	801233a <_vfiprintf_r+0x4e>
 8012330:	f04f 30ff 	mov.w	r0, #4294967295
 8012334:	b01d      	add	sp, #116	@ 0x74
 8012336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801233a:	89ab      	ldrh	r3, [r5, #12]
 801233c:	0598      	lsls	r0, r3, #22
 801233e:	d4f7      	bmi.n	8012330 <_vfiprintf_r+0x44>
 8012340:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012342:	f7fe fc29 	bl	8010b98 <__retarget_lock_release_recursive>
 8012346:	e7f3      	b.n	8012330 <_vfiprintf_r+0x44>
 8012348:	2300      	movs	r3, #0
 801234a:	9309      	str	r3, [sp, #36]	@ 0x24
 801234c:	2320      	movs	r3, #32
 801234e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012352:	f8cd 800c 	str.w	r8, [sp, #12]
 8012356:	2330      	movs	r3, #48	@ 0x30
 8012358:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012508 <_vfiprintf_r+0x21c>
 801235c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012360:	f04f 0901 	mov.w	r9, #1
 8012364:	4623      	mov	r3, r4
 8012366:	469a      	mov	sl, r3
 8012368:	f813 2b01 	ldrb.w	r2, [r3], #1
 801236c:	b10a      	cbz	r2, 8012372 <_vfiprintf_r+0x86>
 801236e:	2a25      	cmp	r2, #37	@ 0x25
 8012370:	d1f9      	bne.n	8012366 <_vfiprintf_r+0x7a>
 8012372:	ebba 0b04 	subs.w	fp, sl, r4
 8012376:	d00b      	beq.n	8012390 <_vfiprintf_r+0xa4>
 8012378:	465b      	mov	r3, fp
 801237a:	4622      	mov	r2, r4
 801237c:	4629      	mov	r1, r5
 801237e:	4630      	mov	r0, r6
 8012380:	f7ff ffa1 	bl	80122c6 <__sfputs_r>
 8012384:	3001      	adds	r0, #1
 8012386:	f000 80a7 	beq.w	80124d8 <_vfiprintf_r+0x1ec>
 801238a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801238c:	445a      	add	r2, fp
 801238e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012390:	f89a 3000 	ldrb.w	r3, [sl]
 8012394:	2b00      	cmp	r3, #0
 8012396:	f000 809f 	beq.w	80124d8 <_vfiprintf_r+0x1ec>
 801239a:	2300      	movs	r3, #0
 801239c:	f04f 32ff 	mov.w	r2, #4294967295
 80123a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123a4:	f10a 0a01 	add.w	sl, sl, #1
 80123a8:	9304      	str	r3, [sp, #16]
 80123aa:	9307      	str	r3, [sp, #28]
 80123ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80123b2:	4654      	mov	r4, sl
 80123b4:	2205      	movs	r2, #5
 80123b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ba:	4853      	ldr	r0, [pc, #332]	@ (8012508 <_vfiprintf_r+0x21c>)
 80123bc:	f7ed ff10 	bl	80001e0 <memchr>
 80123c0:	9a04      	ldr	r2, [sp, #16]
 80123c2:	b9d8      	cbnz	r0, 80123fc <_vfiprintf_r+0x110>
 80123c4:	06d1      	lsls	r1, r2, #27
 80123c6:	bf44      	itt	mi
 80123c8:	2320      	movmi	r3, #32
 80123ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123ce:	0713      	lsls	r3, r2, #28
 80123d0:	bf44      	itt	mi
 80123d2:	232b      	movmi	r3, #43	@ 0x2b
 80123d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123d8:	f89a 3000 	ldrb.w	r3, [sl]
 80123dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80123de:	d015      	beq.n	801240c <_vfiprintf_r+0x120>
 80123e0:	9a07      	ldr	r2, [sp, #28]
 80123e2:	4654      	mov	r4, sl
 80123e4:	2000      	movs	r0, #0
 80123e6:	f04f 0c0a 	mov.w	ip, #10
 80123ea:	4621      	mov	r1, r4
 80123ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123f0:	3b30      	subs	r3, #48	@ 0x30
 80123f2:	2b09      	cmp	r3, #9
 80123f4:	d94b      	bls.n	801248e <_vfiprintf_r+0x1a2>
 80123f6:	b1b0      	cbz	r0, 8012426 <_vfiprintf_r+0x13a>
 80123f8:	9207      	str	r2, [sp, #28]
 80123fa:	e014      	b.n	8012426 <_vfiprintf_r+0x13a>
 80123fc:	eba0 0308 	sub.w	r3, r0, r8
 8012400:	fa09 f303 	lsl.w	r3, r9, r3
 8012404:	4313      	orrs	r3, r2
 8012406:	9304      	str	r3, [sp, #16]
 8012408:	46a2      	mov	sl, r4
 801240a:	e7d2      	b.n	80123b2 <_vfiprintf_r+0xc6>
 801240c:	9b03      	ldr	r3, [sp, #12]
 801240e:	1d19      	adds	r1, r3, #4
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	9103      	str	r1, [sp, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	bfbb      	ittet	lt
 8012418:	425b      	neglt	r3, r3
 801241a:	f042 0202 	orrlt.w	r2, r2, #2
 801241e:	9307      	strge	r3, [sp, #28]
 8012420:	9307      	strlt	r3, [sp, #28]
 8012422:	bfb8      	it	lt
 8012424:	9204      	strlt	r2, [sp, #16]
 8012426:	7823      	ldrb	r3, [r4, #0]
 8012428:	2b2e      	cmp	r3, #46	@ 0x2e
 801242a:	d10a      	bne.n	8012442 <_vfiprintf_r+0x156>
 801242c:	7863      	ldrb	r3, [r4, #1]
 801242e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012430:	d132      	bne.n	8012498 <_vfiprintf_r+0x1ac>
 8012432:	9b03      	ldr	r3, [sp, #12]
 8012434:	1d1a      	adds	r2, r3, #4
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	9203      	str	r2, [sp, #12]
 801243a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801243e:	3402      	adds	r4, #2
 8012440:	9305      	str	r3, [sp, #20]
 8012442:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012518 <_vfiprintf_r+0x22c>
 8012446:	7821      	ldrb	r1, [r4, #0]
 8012448:	2203      	movs	r2, #3
 801244a:	4650      	mov	r0, sl
 801244c:	f7ed fec8 	bl	80001e0 <memchr>
 8012450:	b138      	cbz	r0, 8012462 <_vfiprintf_r+0x176>
 8012452:	9b04      	ldr	r3, [sp, #16]
 8012454:	eba0 000a 	sub.w	r0, r0, sl
 8012458:	2240      	movs	r2, #64	@ 0x40
 801245a:	4082      	lsls	r2, r0
 801245c:	4313      	orrs	r3, r2
 801245e:	3401      	adds	r4, #1
 8012460:	9304      	str	r3, [sp, #16]
 8012462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012466:	4829      	ldr	r0, [pc, #164]	@ (801250c <_vfiprintf_r+0x220>)
 8012468:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801246c:	2206      	movs	r2, #6
 801246e:	f7ed feb7 	bl	80001e0 <memchr>
 8012472:	2800      	cmp	r0, #0
 8012474:	d03f      	beq.n	80124f6 <_vfiprintf_r+0x20a>
 8012476:	4b26      	ldr	r3, [pc, #152]	@ (8012510 <_vfiprintf_r+0x224>)
 8012478:	bb1b      	cbnz	r3, 80124c2 <_vfiprintf_r+0x1d6>
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	3307      	adds	r3, #7
 801247e:	f023 0307 	bic.w	r3, r3, #7
 8012482:	3308      	adds	r3, #8
 8012484:	9303      	str	r3, [sp, #12]
 8012486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012488:	443b      	add	r3, r7
 801248a:	9309      	str	r3, [sp, #36]	@ 0x24
 801248c:	e76a      	b.n	8012364 <_vfiprintf_r+0x78>
 801248e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012492:	460c      	mov	r4, r1
 8012494:	2001      	movs	r0, #1
 8012496:	e7a8      	b.n	80123ea <_vfiprintf_r+0xfe>
 8012498:	2300      	movs	r3, #0
 801249a:	3401      	adds	r4, #1
 801249c:	9305      	str	r3, [sp, #20]
 801249e:	4619      	mov	r1, r3
 80124a0:	f04f 0c0a 	mov.w	ip, #10
 80124a4:	4620      	mov	r0, r4
 80124a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124aa:	3a30      	subs	r2, #48	@ 0x30
 80124ac:	2a09      	cmp	r2, #9
 80124ae:	d903      	bls.n	80124b8 <_vfiprintf_r+0x1cc>
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d0c6      	beq.n	8012442 <_vfiprintf_r+0x156>
 80124b4:	9105      	str	r1, [sp, #20]
 80124b6:	e7c4      	b.n	8012442 <_vfiprintf_r+0x156>
 80124b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80124bc:	4604      	mov	r4, r0
 80124be:	2301      	movs	r3, #1
 80124c0:	e7f0      	b.n	80124a4 <_vfiprintf_r+0x1b8>
 80124c2:	ab03      	add	r3, sp, #12
 80124c4:	9300      	str	r3, [sp, #0]
 80124c6:	462a      	mov	r2, r5
 80124c8:	4b12      	ldr	r3, [pc, #72]	@ (8012514 <_vfiprintf_r+0x228>)
 80124ca:	a904      	add	r1, sp, #16
 80124cc:	4630      	mov	r0, r6
 80124ce:	f7fd fc01 	bl	800fcd4 <_printf_float>
 80124d2:	4607      	mov	r7, r0
 80124d4:	1c78      	adds	r0, r7, #1
 80124d6:	d1d6      	bne.n	8012486 <_vfiprintf_r+0x19a>
 80124d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124da:	07d9      	lsls	r1, r3, #31
 80124dc:	d405      	bmi.n	80124ea <_vfiprintf_r+0x1fe>
 80124de:	89ab      	ldrh	r3, [r5, #12]
 80124e0:	059a      	lsls	r2, r3, #22
 80124e2:	d402      	bmi.n	80124ea <_vfiprintf_r+0x1fe>
 80124e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124e6:	f7fe fb57 	bl	8010b98 <__retarget_lock_release_recursive>
 80124ea:	89ab      	ldrh	r3, [r5, #12]
 80124ec:	065b      	lsls	r3, r3, #25
 80124ee:	f53f af1f 	bmi.w	8012330 <_vfiprintf_r+0x44>
 80124f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124f4:	e71e      	b.n	8012334 <_vfiprintf_r+0x48>
 80124f6:	ab03      	add	r3, sp, #12
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	462a      	mov	r2, r5
 80124fc:	4b05      	ldr	r3, [pc, #20]	@ (8012514 <_vfiprintf_r+0x228>)
 80124fe:	a904      	add	r1, sp, #16
 8012500:	4630      	mov	r0, r6
 8012502:	f7fd fe7f 	bl	8010204 <_printf_i>
 8012506:	e7e4      	b.n	80124d2 <_vfiprintf_r+0x1e6>
 8012508:	0801a2d8 	.word	0x0801a2d8
 801250c:	0801a2e2 	.word	0x0801a2e2
 8012510:	0800fcd5 	.word	0x0800fcd5
 8012514:	080122c7 	.word	0x080122c7
 8012518:	0801a2de 	.word	0x0801a2de

0801251c <__swhatbuf_r>:
 801251c:	b570      	push	{r4, r5, r6, lr}
 801251e:	460c      	mov	r4, r1
 8012520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012524:	2900      	cmp	r1, #0
 8012526:	b096      	sub	sp, #88	@ 0x58
 8012528:	4615      	mov	r5, r2
 801252a:	461e      	mov	r6, r3
 801252c:	da0d      	bge.n	801254a <__swhatbuf_r+0x2e>
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012534:	f04f 0100 	mov.w	r1, #0
 8012538:	bf14      	ite	ne
 801253a:	2340      	movne	r3, #64	@ 0x40
 801253c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012540:	2000      	movs	r0, #0
 8012542:	6031      	str	r1, [r6, #0]
 8012544:	602b      	str	r3, [r5, #0]
 8012546:	b016      	add	sp, #88	@ 0x58
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	466a      	mov	r2, sp
 801254c:	f000 f848 	bl	80125e0 <_fstat_r>
 8012550:	2800      	cmp	r0, #0
 8012552:	dbec      	blt.n	801252e <__swhatbuf_r+0x12>
 8012554:	9901      	ldr	r1, [sp, #4]
 8012556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801255a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801255e:	4259      	negs	r1, r3
 8012560:	4159      	adcs	r1, r3
 8012562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012566:	e7eb      	b.n	8012540 <__swhatbuf_r+0x24>

08012568 <__smakebuf_r>:
 8012568:	898b      	ldrh	r3, [r1, #12]
 801256a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801256c:	079d      	lsls	r5, r3, #30
 801256e:	4606      	mov	r6, r0
 8012570:	460c      	mov	r4, r1
 8012572:	d507      	bpl.n	8012584 <__smakebuf_r+0x1c>
 8012574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	6123      	str	r3, [r4, #16]
 801257c:	2301      	movs	r3, #1
 801257e:	6163      	str	r3, [r4, #20]
 8012580:	b003      	add	sp, #12
 8012582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012584:	ab01      	add	r3, sp, #4
 8012586:	466a      	mov	r2, sp
 8012588:	f7ff ffc8 	bl	801251c <__swhatbuf_r>
 801258c:	9f00      	ldr	r7, [sp, #0]
 801258e:	4605      	mov	r5, r0
 8012590:	4639      	mov	r1, r7
 8012592:	4630      	mov	r0, r6
 8012594:	f7fd fa72 	bl	800fa7c <_malloc_r>
 8012598:	b948      	cbnz	r0, 80125ae <__smakebuf_r+0x46>
 801259a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801259e:	059a      	lsls	r2, r3, #22
 80125a0:	d4ee      	bmi.n	8012580 <__smakebuf_r+0x18>
 80125a2:	f023 0303 	bic.w	r3, r3, #3
 80125a6:	f043 0302 	orr.w	r3, r3, #2
 80125aa:	81a3      	strh	r3, [r4, #12]
 80125ac:	e7e2      	b.n	8012574 <__smakebuf_r+0xc>
 80125ae:	89a3      	ldrh	r3, [r4, #12]
 80125b0:	6020      	str	r0, [r4, #0]
 80125b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125b6:	81a3      	strh	r3, [r4, #12]
 80125b8:	9b01      	ldr	r3, [sp, #4]
 80125ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80125be:	b15b      	cbz	r3, 80125d8 <__smakebuf_r+0x70>
 80125c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125c4:	4630      	mov	r0, r6
 80125c6:	f000 f81d 	bl	8012604 <_isatty_r>
 80125ca:	b128      	cbz	r0, 80125d8 <__smakebuf_r+0x70>
 80125cc:	89a3      	ldrh	r3, [r4, #12]
 80125ce:	f023 0303 	bic.w	r3, r3, #3
 80125d2:	f043 0301 	orr.w	r3, r3, #1
 80125d6:	81a3      	strh	r3, [r4, #12]
 80125d8:	89a3      	ldrh	r3, [r4, #12]
 80125da:	431d      	orrs	r5, r3
 80125dc:	81a5      	strh	r5, [r4, #12]
 80125de:	e7cf      	b.n	8012580 <__smakebuf_r+0x18>

080125e0 <_fstat_r>:
 80125e0:	b538      	push	{r3, r4, r5, lr}
 80125e2:	4d07      	ldr	r5, [pc, #28]	@ (8012600 <_fstat_r+0x20>)
 80125e4:	2300      	movs	r3, #0
 80125e6:	4604      	mov	r4, r0
 80125e8:	4608      	mov	r0, r1
 80125ea:	4611      	mov	r1, r2
 80125ec:	602b      	str	r3, [r5, #0]
 80125ee:	f7f0 fbf7 	bl	8002de0 <_fstat>
 80125f2:	1c43      	adds	r3, r0, #1
 80125f4:	d102      	bne.n	80125fc <_fstat_r+0x1c>
 80125f6:	682b      	ldr	r3, [r5, #0]
 80125f8:	b103      	cbz	r3, 80125fc <_fstat_r+0x1c>
 80125fa:	6023      	str	r3, [r4, #0]
 80125fc:	bd38      	pop	{r3, r4, r5, pc}
 80125fe:	bf00      	nop
 8012600:	20000608 	.word	0x20000608

08012604 <_isatty_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d06      	ldr	r5, [pc, #24]	@ (8012620 <_isatty_r+0x1c>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	602b      	str	r3, [r5, #0]
 8012610:	f7f0 fbf6 	bl	8002e00 <_isatty>
 8012614:	1c43      	adds	r3, r0, #1
 8012616:	d102      	bne.n	801261e <_isatty_r+0x1a>
 8012618:	682b      	ldr	r3, [r5, #0]
 801261a:	b103      	cbz	r3, 801261e <_isatty_r+0x1a>
 801261c:	6023      	str	r3, [r4, #0]
 801261e:	bd38      	pop	{r3, r4, r5, pc}
 8012620:	20000608 	.word	0x20000608

08012624 <__assert_func>:
 8012624:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012626:	4614      	mov	r4, r2
 8012628:	461a      	mov	r2, r3
 801262a:	4b09      	ldr	r3, [pc, #36]	@ (8012650 <__assert_func+0x2c>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	4605      	mov	r5, r0
 8012630:	68d8      	ldr	r0, [r3, #12]
 8012632:	b954      	cbnz	r4, 801264a <__assert_func+0x26>
 8012634:	4b07      	ldr	r3, [pc, #28]	@ (8012654 <__assert_func+0x30>)
 8012636:	461c      	mov	r4, r3
 8012638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801263c:	9100      	str	r1, [sp, #0]
 801263e:	462b      	mov	r3, r5
 8012640:	4905      	ldr	r1, [pc, #20]	@ (8012658 <__assert_func+0x34>)
 8012642:	f000 f85b 	bl	80126fc <fiprintf>
 8012646:	f000 f86b 	bl	8012720 <abort>
 801264a:	4b04      	ldr	r3, [pc, #16]	@ (801265c <__assert_func+0x38>)
 801264c:	e7f4      	b.n	8012638 <__assert_func+0x14>
 801264e:	bf00      	nop
 8012650:	200001b8 	.word	0x200001b8
 8012654:	0801a32e 	.word	0x0801a32e
 8012658:	0801a300 	.word	0x0801a300
 801265c:	0801a2f3 	.word	0x0801a2f3

08012660 <__ascii_mbtowc>:
 8012660:	b082      	sub	sp, #8
 8012662:	b901      	cbnz	r1, 8012666 <__ascii_mbtowc+0x6>
 8012664:	a901      	add	r1, sp, #4
 8012666:	b142      	cbz	r2, 801267a <__ascii_mbtowc+0x1a>
 8012668:	b14b      	cbz	r3, 801267e <__ascii_mbtowc+0x1e>
 801266a:	7813      	ldrb	r3, [r2, #0]
 801266c:	600b      	str	r3, [r1, #0]
 801266e:	7812      	ldrb	r2, [r2, #0]
 8012670:	1e10      	subs	r0, r2, #0
 8012672:	bf18      	it	ne
 8012674:	2001      	movne	r0, #1
 8012676:	b002      	add	sp, #8
 8012678:	4770      	bx	lr
 801267a:	4610      	mov	r0, r2
 801267c:	e7fb      	b.n	8012676 <__ascii_mbtowc+0x16>
 801267e:	f06f 0001 	mvn.w	r0, #1
 8012682:	e7f8      	b.n	8012676 <__ascii_mbtowc+0x16>

08012684 <_realloc_r>:
 8012684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012688:	4680      	mov	r8, r0
 801268a:	4615      	mov	r5, r2
 801268c:	460c      	mov	r4, r1
 801268e:	b921      	cbnz	r1, 801269a <_realloc_r+0x16>
 8012690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012694:	4611      	mov	r1, r2
 8012696:	f7fd b9f1 	b.w	800fa7c <_malloc_r>
 801269a:	b92a      	cbnz	r2, 80126a8 <_realloc_r+0x24>
 801269c:	f7ff f8d8 	bl	8011850 <_free_r>
 80126a0:	2400      	movs	r4, #0
 80126a2:	4620      	mov	r0, r4
 80126a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126a8:	f000 f841 	bl	801272e <_malloc_usable_size_r>
 80126ac:	4285      	cmp	r5, r0
 80126ae:	4606      	mov	r6, r0
 80126b0:	d802      	bhi.n	80126b8 <_realloc_r+0x34>
 80126b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80126b6:	d8f4      	bhi.n	80126a2 <_realloc_r+0x1e>
 80126b8:	4629      	mov	r1, r5
 80126ba:	4640      	mov	r0, r8
 80126bc:	f7fd f9de 	bl	800fa7c <_malloc_r>
 80126c0:	4607      	mov	r7, r0
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d0ec      	beq.n	80126a0 <_realloc_r+0x1c>
 80126c6:	42b5      	cmp	r5, r6
 80126c8:	462a      	mov	r2, r5
 80126ca:	4621      	mov	r1, r4
 80126cc:	bf28      	it	cs
 80126ce:	4632      	movcs	r2, r6
 80126d0:	f7fe fa63 	bl	8010b9a <memcpy>
 80126d4:	4621      	mov	r1, r4
 80126d6:	4640      	mov	r0, r8
 80126d8:	f7ff f8ba 	bl	8011850 <_free_r>
 80126dc:	463c      	mov	r4, r7
 80126de:	e7e0      	b.n	80126a2 <_realloc_r+0x1e>

080126e0 <__ascii_wctomb>:
 80126e0:	4603      	mov	r3, r0
 80126e2:	4608      	mov	r0, r1
 80126e4:	b141      	cbz	r1, 80126f8 <__ascii_wctomb+0x18>
 80126e6:	2aff      	cmp	r2, #255	@ 0xff
 80126e8:	d904      	bls.n	80126f4 <__ascii_wctomb+0x14>
 80126ea:	228a      	movs	r2, #138	@ 0x8a
 80126ec:	601a      	str	r2, [r3, #0]
 80126ee:	f04f 30ff 	mov.w	r0, #4294967295
 80126f2:	4770      	bx	lr
 80126f4:	700a      	strb	r2, [r1, #0]
 80126f6:	2001      	movs	r0, #1
 80126f8:	4770      	bx	lr
	...

080126fc <fiprintf>:
 80126fc:	b40e      	push	{r1, r2, r3}
 80126fe:	b503      	push	{r0, r1, lr}
 8012700:	4601      	mov	r1, r0
 8012702:	ab03      	add	r3, sp, #12
 8012704:	4805      	ldr	r0, [pc, #20]	@ (801271c <fiprintf+0x20>)
 8012706:	f853 2b04 	ldr.w	r2, [r3], #4
 801270a:	6800      	ldr	r0, [r0, #0]
 801270c:	9301      	str	r3, [sp, #4]
 801270e:	f7ff fded 	bl	80122ec <_vfiprintf_r>
 8012712:	b002      	add	sp, #8
 8012714:	f85d eb04 	ldr.w	lr, [sp], #4
 8012718:	b003      	add	sp, #12
 801271a:	4770      	bx	lr
 801271c:	200001b8 	.word	0x200001b8

08012720 <abort>:
 8012720:	b508      	push	{r3, lr}
 8012722:	2006      	movs	r0, #6
 8012724:	f000 f834 	bl	8012790 <raise>
 8012728:	2001      	movs	r0, #1
 801272a:	f7f0 fb09 	bl	8002d40 <_exit>

0801272e <_malloc_usable_size_r>:
 801272e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012732:	1f18      	subs	r0, r3, #4
 8012734:	2b00      	cmp	r3, #0
 8012736:	bfbc      	itt	lt
 8012738:	580b      	ldrlt	r3, [r1, r0]
 801273a:	18c0      	addlt	r0, r0, r3
 801273c:	4770      	bx	lr

0801273e <_raise_r>:
 801273e:	291f      	cmp	r1, #31
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4605      	mov	r5, r0
 8012744:	460c      	mov	r4, r1
 8012746:	d904      	bls.n	8012752 <_raise_r+0x14>
 8012748:	2316      	movs	r3, #22
 801274a:	6003      	str	r3, [r0, #0]
 801274c:	f04f 30ff 	mov.w	r0, #4294967295
 8012750:	bd38      	pop	{r3, r4, r5, pc}
 8012752:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012754:	b112      	cbz	r2, 801275c <_raise_r+0x1e>
 8012756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801275a:	b94b      	cbnz	r3, 8012770 <_raise_r+0x32>
 801275c:	4628      	mov	r0, r5
 801275e:	f000 f831 	bl	80127c4 <_getpid_r>
 8012762:	4622      	mov	r2, r4
 8012764:	4601      	mov	r1, r0
 8012766:	4628      	mov	r0, r5
 8012768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801276c:	f000 b818 	b.w	80127a0 <_kill_r>
 8012770:	2b01      	cmp	r3, #1
 8012772:	d00a      	beq.n	801278a <_raise_r+0x4c>
 8012774:	1c59      	adds	r1, r3, #1
 8012776:	d103      	bne.n	8012780 <_raise_r+0x42>
 8012778:	2316      	movs	r3, #22
 801277a:	6003      	str	r3, [r0, #0]
 801277c:	2001      	movs	r0, #1
 801277e:	e7e7      	b.n	8012750 <_raise_r+0x12>
 8012780:	2100      	movs	r1, #0
 8012782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012786:	4620      	mov	r0, r4
 8012788:	4798      	blx	r3
 801278a:	2000      	movs	r0, #0
 801278c:	e7e0      	b.n	8012750 <_raise_r+0x12>
	...

08012790 <raise>:
 8012790:	4b02      	ldr	r3, [pc, #8]	@ (801279c <raise+0xc>)
 8012792:	4601      	mov	r1, r0
 8012794:	6818      	ldr	r0, [r3, #0]
 8012796:	f7ff bfd2 	b.w	801273e <_raise_r>
 801279a:	bf00      	nop
 801279c:	200001b8 	.word	0x200001b8

080127a0 <_kill_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d07      	ldr	r5, [pc, #28]	@ (80127c0 <_kill_r+0x20>)
 80127a4:	2300      	movs	r3, #0
 80127a6:	4604      	mov	r4, r0
 80127a8:	4608      	mov	r0, r1
 80127aa:	4611      	mov	r1, r2
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	f7f0 fab7 	bl	8002d20 <_kill>
 80127b2:	1c43      	adds	r3, r0, #1
 80127b4:	d102      	bne.n	80127bc <_kill_r+0x1c>
 80127b6:	682b      	ldr	r3, [r5, #0]
 80127b8:	b103      	cbz	r3, 80127bc <_kill_r+0x1c>
 80127ba:	6023      	str	r3, [r4, #0]
 80127bc:	bd38      	pop	{r3, r4, r5, pc}
 80127be:	bf00      	nop
 80127c0:	20000608 	.word	0x20000608

080127c4 <_getpid_r>:
 80127c4:	f7f0 baa4 	b.w	8002d10 <_getpid>

080127c8 <sqrt>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	ed2d 8b02 	vpush	{d8}
 80127ce:	ec55 4b10 	vmov	r4, r5, d0
 80127d2:	f000 fb01 	bl	8012dd8 <__ieee754_sqrt>
 80127d6:	4622      	mov	r2, r4
 80127d8:	462b      	mov	r3, r5
 80127da:	4620      	mov	r0, r4
 80127dc:	4629      	mov	r1, r5
 80127de:	eeb0 8a40 	vmov.f32	s16, s0
 80127e2:	eef0 8a60 	vmov.f32	s17, s1
 80127e6:	f7ee f9a9 	bl	8000b3c <__aeabi_dcmpun>
 80127ea:	b990      	cbnz	r0, 8012812 <sqrt+0x4a>
 80127ec:	2200      	movs	r2, #0
 80127ee:	2300      	movs	r3, #0
 80127f0:	4620      	mov	r0, r4
 80127f2:	4629      	mov	r1, r5
 80127f4:	f7ee f97a 	bl	8000aec <__aeabi_dcmplt>
 80127f8:	b158      	cbz	r0, 8012812 <sqrt+0x4a>
 80127fa:	f7fe f9a1 	bl	8010b40 <__errno>
 80127fe:	2321      	movs	r3, #33	@ 0x21
 8012800:	6003      	str	r3, [r0, #0]
 8012802:	2200      	movs	r2, #0
 8012804:	2300      	movs	r3, #0
 8012806:	4610      	mov	r0, r2
 8012808:	4619      	mov	r1, r3
 801280a:	f7ee f827 	bl	800085c <__aeabi_ddiv>
 801280e:	ec41 0b18 	vmov	d8, r0, r1
 8012812:	eeb0 0a48 	vmov.f32	s0, s16
 8012816:	eef0 0a68 	vmov.f32	s1, s17
 801281a:	ecbd 8b02 	vpop	{d8}
 801281e:	bd38      	pop	{r3, r4, r5, pc}

08012820 <expf>:
 8012820:	b508      	push	{r3, lr}
 8012822:	ed2d 8b02 	vpush	{d8}
 8012826:	eef0 8a40 	vmov.f32	s17, s0
 801282a:	f000 fd01 	bl	8013230 <__ieee754_expf>
 801282e:	eeb0 8a40 	vmov.f32	s16, s0
 8012832:	eeb0 0a68 	vmov.f32	s0, s17
 8012836:	f000 fa15 	bl	8012c64 <finitef>
 801283a:	b160      	cbz	r0, 8012856 <expf+0x36>
 801283c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801287c <expf+0x5c>
 8012840:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012848:	dd0a      	ble.n	8012860 <expf+0x40>
 801284a:	f7fe f979 	bl	8010b40 <__errno>
 801284e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8012880 <expf+0x60>
 8012852:	2322      	movs	r3, #34	@ 0x22
 8012854:	6003      	str	r3, [r0, #0]
 8012856:	eeb0 0a48 	vmov.f32	s0, s16
 801285a:	ecbd 8b02 	vpop	{d8}
 801285e:	bd08      	pop	{r3, pc}
 8012860:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012884 <expf+0x64>
 8012864:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801286c:	d5f3      	bpl.n	8012856 <expf+0x36>
 801286e:	f7fe f967 	bl	8010b40 <__errno>
 8012872:	2322      	movs	r3, #34	@ 0x22
 8012874:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8012888 <expf+0x68>
 8012878:	6003      	str	r3, [r0, #0]
 801287a:	e7ec      	b.n	8012856 <expf+0x36>
 801287c:	42b17217 	.word	0x42b17217
 8012880:	7f800000 	.word	0x7f800000
 8012884:	c2cff1b5 	.word	0xc2cff1b5
 8012888:	00000000 	.word	0x00000000

0801288c <log10f>:
 801288c:	b508      	push	{r3, lr}
 801288e:	ed2d 8b02 	vpush	{d8}
 8012892:	eeb0 8a40 	vmov.f32	s16, s0
 8012896:	f000 fd99 	bl	80133cc <__ieee754_log10f>
 801289a:	eeb4 8a48 	vcmp.f32	s16, s16
 801289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a2:	d60f      	bvs.n	80128c4 <log10f+0x38>
 80128a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80128a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ac:	d80a      	bhi.n	80128c4 <log10f+0x38>
 80128ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	d108      	bne.n	80128ca <log10f+0x3e>
 80128b8:	f7fe f942 	bl	8010b40 <__errno>
 80128bc:	2322      	movs	r3, #34	@ 0x22
 80128be:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80128e0 <log10f+0x54>
 80128c2:	6003      	str	r3, [r0, #0]
 80128c4:	ecbd 8b02 	vpop	{d8}
 80128c8:	bd08      	pop	{r3, pc}
 80128ca:	f7fe f939 	bl	8010b40 <__errno>
 80128ce:	ecbd 8b02 	vpop	{d8}
 80128d2:	2321      	movs	r3, #33	@ 0x21
 80128d4:	6003      	str	r3, [r0, #0]
 80128d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80128da:	4802      	ldr	r0, [pc, #8]	@ (80128e4 <log10f+0x58>)
 80128dc:	f000 b9cc 	b.w	8012c78 <nanf>
 80128e0:	ff800000 	.word	0xff800000
 80128e4:	0801a32e 	.word	0x0801a32e

080128e8 <powf>:
 80128e8:	b508      	push	{r3, lr}
 80128ea:	ed2d 8b04 	vpush	{d8-d9}
 80128ee:	eeb0 8a60 	vmov.f32	s16, s1
 80128f2:	eeb0 9a40 	vmov.f32	s18, s0
 80128f6:	f000 fdc1 	bl	801347c <__ieee754_powf>
 80128fa:	eeb4 8a48 	vcmp.f32	s16, s16
 80128fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012902:	eef0 8a40 	vmov.f32	s17, s0
 8012906:	d63e      	bvs.n	8012986 <powf+0x9e>
 8012908:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012910:	d112      	bne.n	8012938 <powf+0x50>
 8012912:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291a:	d039      	beq.n	8012990 <powf+0xa8>
 801291c:	eeb0 0a48 	vmov.f32	s0, s16
 8012920:	f000 f9a0 	bl	8012c64 <finitef>
 8012924:	b378      	cbz	r0, 8012986 <powf+0x9e>
 8012926:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292e:	d52a      	bpl.n	8012986 <powf+0x9e>
 8012930:	f7fe f906 	bl	8010b40 <__errno>
 8012934:	2322      	movs	r3, #34	@ 0x22
 8012936:	e014      	b.n	8012962 <powf+0x7a>
 8012938:	f000 f994 	bl	8012c64 <finitef>
 801293c:	b998      	cbnz	r0, 8012966 <powf+0x7e>
 801293e:	eeb0 0a49 	vmov.f32	s0, s18
 8012942:	f000 f98f 	bl	8012c64 <finitef>
 8012946:	b170      	cbz	r0, 8012966 <powf+0x7e>
 8012948:	eeb0 0a48 	vmov.f32	s0, s16
 801294c:	f000 f98a 	bl	8012c64 <finitef>
 8012950:	b148      	cbz	r0, 8012966 <powf+0x7e>
 8012952:	eef4 8a68 	vcmp.f32	s17, s17
 8012956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295a:	d7e9      	bvc.n	8012930 <powf+0x48>
 801295c:	f7fe f8f0 	bl	8010b40 <__errno>
 8012960:	2321      	movs	r3, #33	@ 0x21
 8012962:	6003      	str	r3, [r0, #0]
 8012964:	e00f      	b.n	8012986 <powf+0x9e>
 8012966:	eef5 8a40 	vcmp.f32	s17, #0.0
 801296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296e:	d10a      	bne.n	8012986 <powf+0x9e>
 8012970:	eeb0 0a49 	vmov.f32	s0, s18
 8012974:	f000 f976 	bl	8012c64 <finitef>
 8012978:	b128      	cbz	r0, 8012986 <powf+0x9e>
 801297a:	eeb0 0a48 	vmov.f32	s0, s16
 801297e:	f000 f971 	bl	8012c64 <finitef>
 8012982:	2800      	cmp	r0, #0
 8012984:	d1d4      	bne.n	8012930 <powf+0x48>
 8012986:	eeb0 0a68 	vmov.f32	s0, s17
 801298a:	ecbd 8b04 	vpop	{d8-d9}
 801298e:	bd08      	pop	{r3, pc}
 8012990:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8012994:	e7f7      	b.n	8012986 <powf+0x9e>
	...

08012998 <atanf>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	ee10 5a10 	vmov	r5, s0
 801299e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80129a2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80129a6:	eef0 7a40 	vmov.f32	s15, s0
 80129aa:	d310      	bcc.n	80129ce <atanf+0x36>
 80129ac:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80129b0:	d904      	bls.n	80129bc <atanf+0x24>
 80129b2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80129b6:	eeb0 0a67 	vmov.f32	s0, s15
 80129ba:	bd38      	pop	{r3, r4, r5, pc}
 80129bc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012af4 <atanf+0x15c>
 80129c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012af8 <atanf+0x160>
 80129c4:	2d00      	cmp	r5, #0
 80129c6:	bfc8      	it	gt
 80129c8:	eef0 7a47 	vmovgt.f32	s15, s14
 80129cc:	e7f3      	b.n	80129b6 <atanf+0x1e>
 80129ce:	4b4b      	ldr	r3, [pc, #300]	@ (8012afc <atanf+0x164>)
 80129d0:	429c      	cmp	r4, r3
 80129d2:	d810      	bhi.n	80129f6 <atanf+0x5e>
 80129d4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80129d8:	d20a      	bcs.n	80129f0 <atanf+0x58>
 80129da:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012b00 <atanf+0x168>
 80129de:	ee30 7a07 	vadd.f32	s14, s0, s14
 80129e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80129e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	dce2      	bgt.n	80129b6 <atanf+0x1e>
 80129f0:	f04f 33ff 	mov.w	r3, #4294967295
 80129f4:	e013      	b.n	8012a1e <atanf+0x86>
 80129f6:	f000 f8e7 	bl	8012bc8 <fabsf>
 80129fa:	4b42      	ldr	r3, [pc, #264]	@ (8012b04 <atanf+0x16c>)
 80129fc:	429c      	cmp	r4, r3
 80129fe:	d84f      	bhi.n	8012aa0 <atanf+0x108>
 8012a00:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012a04:	429c      	cmp	r4, r3
 8012a06:	d841      	bhi.n	8012a8c <atanf+0xf4>
 8012a08:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012a0c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012a10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012a14:	2300      	movs	r3, #0
 8012a16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012a1e:	1c5a      	adds	r2, r3, #1
 8012a20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012a24:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012b08 <atanf+0x170>
 8012a28:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012b0c <atanf+0x174>
 8012a2c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012b10 <atanf+0x178>
 8012a30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012a34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012a38:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012b14 <atanf+0x17c>
 8012a3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012a40:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012b18 <atanf+0x180>
 8012a44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012a48:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012b1c <atanf+0x184>
 8012a4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012a50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012b20 <atanf+0x188>
 8012a54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012a58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012b24 <atanf+0x18c>
 8012a5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012a60:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012b28 <atanf+0x190>
 8012a64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012a68:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012b2c <atanf+0x194>
 8012a6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012a70:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012b30 <atanf+0x198>
 8012a74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012a78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012a7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012a80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012a84:	d121      	bne.n	8012aca <atanf+0x132>
 8012a86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a8a:	e794      	b.n	80129b6 <atanf+0x1e>
 8012a8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012a90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a98:	2301      	movs	r3, #1
 8012a9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012a9e:	e7be      	b.n	8012a1e <atanf+0x86>
 8012aa0:	4b24      	ldr	r3, [pc, #144]	@ (8012b34 <atanf+0x19c>)
 8012aa2:	429c      	cmp	r4, r3
 8012aa4:	d80b      	bhi.n	8012abe <atanf+0x126>
 8012aa6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012aae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012ab2:	2302      	movs	r3, #2
 8012ab4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012ab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012abc:	e7af      	b.n	8012a1e <atanf+0x86>
 8012abe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012ac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	e7a9      	b.n	8012a1e <atanf+0x86>
 8012aca:	4a1b      	ldr	r2, [pc, #108]	@ (8012b38 <atanf+0x1a0>)
 8012acc:	491b      	ldr	r1, [pc, #108]	@ (8012b3c <atanf+0x1a4>)
 8012ace:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012ad2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012ad6:	edd3 6a00 	vldr	s13, [r3]
 8012ada:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ae4:	edd2 7a00 	vldr	s15, [r2]
 8012ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012aec:	bfb8      	it	lt
 8012aee:	eef1 7a67 	vneglt.f32	s15, s15
 8012af2:	e760      	b.n	80129b6 <atanf+0x1e>
 8012af4:	bfc90fdb 	.word	0xbfc90fdb
 8012af8:	3fc90fdb 	.word	0x3fc90fdb
 8012afc:	3edfffff 	.word	0x3edfffff
 8012b00:	7149f2ca 	.word	0x7149f2ca
 8012b04:	3f97ffff 	.word	0x3f97ffff
 8012b08:	3c8569d7 	.word	0x3c8569d7
 8012b0c:	3d4bda59 	.word	0x3d4bda59
 8012b10:	bd6ef16b 	.word	0xbd6ef16b
 8012b14:	3d886b35 	.word	0x3d886b35
 8012b18:	3dba2e6e 	.word	0x3dba2e6e
 8012b1c:	3e124925 	.word	0x3e124925
 8012b20:	3eaaaaab 	.word	0x3eaaaaab
 8012b24:	bd15a221 	.word	0xbd15a221
 8012b28:	bd9d8795 	.word	0xbd9d8795
 8012b2c:	bde38e38 	.word	0xbde38e38
 8012b30:	be4ccccd 	.word	0xbe4ccccd
 8012b34:	401bffff 	.word	0x401bffff
 8012b38:	0801a440 	.word	0x0801a440
 8012b3c:	0801a430 	.word	0x0801a430

08012b40 <cosf>:
 8012b40:	ee10 3a10 	vmov	r3, s0
 8012b44:	b507      	push	{r0, r1, r2, lr}
 8012b46:	4a1e      	ldr	r2, [pc, #120]	@ (8012bc0 <cosf+0x80>)
 8012b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d806      	bhi.n	8012b5e <cosf+0x1e>
 8012b50:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012bc4 <cosf+0x84>
 8012b54:	b003      	add	sp, #12
 8012b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b5a:	f000 bac9 	b.w	80130f0 <__kernel_cosf>
 8012b5e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012b62:	d304      	bcc.n	8012b6e <cosf+0x2e>
 8012b64:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012b68:	b003      	add	sp, #12
 8012b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b6e:	4668      	mov	r0, sp
 8012b70:	f000 ff54 	bl	8013a1c <__ieee754_rem_pio2f>
 8012b74:	f000 0003 	and.w	r0, r0, #3
 8012b78:	2801      	cmp	r0, #1
 8012b7a:	d009      	beq.n	8012b90 <cosf+0x50>
 8012b7c:	2802      	cmp	r0, #2
 8012b7e:	d010      	beq.n	8012ba2 <cosf+0x62>
 8012b80:	b9b0      	cbnz	r0, 8012bb0 <cosf+0x70>
 8012b82:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b86:	ed9d 0a00 	vldr	s0, [sp]
 8012b8a:	f000 fab1 	bl	80130f0 <__kernel_cosf>
 8012b8e:	e7eb      	b.n	8012b68 <cosf+0x28>
 8012b90:	eddd 0a01 	vldr	s1, [sp, #4]
 8012b94:	ed9d 0a00 	vldr	s0, [sp]
 8012b98:	f000 fb02 	bl	80131a0 <__kernel_sinf>
 8012b9c:	eeb1 0a40 	vneg.f32	s0, s0
 8012ba0:	e7e2      	b.n	8012b68 <cosf+0x28>
 8012ba2:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ba6:	ed9d 0a00 	vldr	s0, [sp]
 8012baa:	f000 faa1 	bl	80130f0 <__kernel_cosf>
 8012bae:	e7f5      	b.n	8012b9c <cosf+0x5c>
 8012bb0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012bb4:	ed9d 0a00 	vldr	s0, [sp]
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f000 faf1 	bl	80131a0 <__kernel_sinf>
 8012bbe:	e7d3      	b.n	8012b68 <cosf+0x28>
 8012bc0:	3f490fd8 	.word	0x3f490fd8
 8012bc4:	00000000 	.word	0x00000000

08012bc8 <fabsf>:
 8012bc8:	ee10 3a10 	vmov	r3, s0
 8012bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012bd0:	ee00 3a10 	vmov	s0, r3
 8012bd4:	4770      	bx	lr
	...

08012bd8 <sinf>:
 8012bd8:	ee10 3a10 	vmov	r3, s0
 8012bdc:	b507      	push	{r0, r1, r2, lr}
 8012bde:	4a1f      	ldr	r2, [pc, #124]	@ (8012c5c <sinf+0x84>)
 8012be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012be4:	4293      	cmp	r3, r2
 8012be6:	d807      	bhi.n	8012bf8 <sinf+0x20>
 8012be8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012c60 <sinf+0x88>
 8012bec:	2000      	movs	r0, #0
 8012bee:	b003      	add	sp, #12
 8012bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bf4:	f000 bad4 	b.w	80131a0 <__kernel_sinf>
 8012bf8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012bfc:	d304      	bcc.n	8012c08 <sinf+0x30>
 8012bfe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012c02:	b003      	add	sp, #12
 8012c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c08:	4668      	mov	r0, sp
 8012c0a:	f000 ff07 	bl	8013a1c <__ieee754_rem_pio2f>
 8012c0e:	f000 0003 	and.w	r0, r0, #3
 8012c12:	2801      	cmp	r0, #1
 8012c14:	d00a      	beq.n	8012c2c <sinf+0x54>
 8012c16:	2802      	cmp	r0, #2
 8012c18:	d00f      	beq.n	8012c3a <sinf+0x62>
 8012c1a:	b9c0      	cbnz	r0, 8012c4e <sinf+0x76>
 8012c1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c20:	ed9d 0a00 	vldr	s0, [sp]
 8012c24:	2001      	movs	r0, #1
 8012c26:	f000 fabb 	bl	80131a0 <__kernel_sinf>
 8012c2a:	e7ea      	b.n	8012c02 <sinf+0x2a>
 8012c2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c30:	ed9d 0a00 	vldr	s0, [sp]
 8012c34:	f000 fa5c 	bl	80130f0 <__kernel_cosf>
 8012c38:	e7e3      	b.n	8012c02 <sinf+0x2a>
 8012c3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c3e:	ed9d 0a00 	vldr	s0, [sp]
 8012c42:	2001      	movs	r0, #1
 8012c44:	f000 faac 	bl	80131a0 <__kernel_sinf>
 8012c48:	eeb1 0a40 	vneg.f32	s0, s0
 8012c4c:	e7d9      	b.n	8012c02 <sinf+0x2a>
 8012c4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c52:	ed9d 0a00 	vldr	s0, [sp]
 8012c56:	f000 fa4b 	bl	80130f0 <__kernel_cosf>
 8012c5a:	e7f5      	b.n	8012c48 <sinf+0x70>
 8012c5c:	3f490fd8 	.word	0x3f490fd8
 8012c60:	00000000 	.word	0x00000000

08012c64 <finitef>:
 8012c64:	ee10 3a10 	vmov	r3, s0
 8012c68:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8012c6c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012c70:	bfac      	ite	ge
 8012c72:	2000      	movge	r0, #0
 8012c74:	2001      	movlt	r0, #1
 8012c76:	4770      	bx	lr

08012c78 <nanf>:
 8012c78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012c80 <nanf+0x8>
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop
 8012c80:	7fc00000 	.word	0x7fc00000

08012c84 <fmaxf>:
 8012c84:	b508      	push	{r3, lr}
 8012c86:	ed2d 8b02 	vpush	{d8}
 8012c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8012c8e:	eef0 8a60 	vmov.f32	s17, s1
 8012c92:	f000 f831 	bl	8012cf8 <__fpclassifyf>
 8012c96:	b930      	cbnz	r0, 8012ca6 <fmaxf+0x22>
 8012c98:	eeb0 8a68 	vmov.f32	s16, s17
 8012c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012ca0:	ecbd 8b02 	vpop	{d8}
 8012ca4:	bd08      	pop	{r3, pc}
 8012ca6:	eeb0 0a68 	vmov.f32	s0, s17
 8012caa:	f000 f825 	bl	8012cf8 <__fpclassifyf>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d0f4      	beq.n	8012c9c <fmaxf+0x18>
 8012cb2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cba:	dded      	ble.n	8012c98 <fmaxf+0x14>
 8012cbc:	e7ee      	b.n	8012c9c <fmaxf+0x18>

08012cbe <fminf>:
 8012cbe:	b508      	push	{r3, lr}
 8012cc0:	ed2d 8b02 	vpush	{d8}
 8012cc4:	eeb0 8a40 	vmov.f32	s16, s0
 8012cc8:	eef0 8a60 	vmov.f32	s17, s1
 8012ccc:	f000 f814 	bl	8012cf8 <__fpclassifyf>
 8012cd0:	b930      	cbnz	r0, 8012ce0 <fminf+0x22>
 8012cd2:	eeb0 8a68 	vmov.f32	s16, s17
 8012cd6:	eeb0 0a48 	vmov.f32	s0, s16
 8012cda:	ecbd 8b02 	vpop	{d8}
 8012cde:	bd08      	pop	{r3, pc}
 8012ce0:	eeb0 0a68 	vmov.f32	s0, s17
 8012ce4:	f000 f808 	bl	8012cf8 <__fpclassifyf>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d0f4      	beq.n	8012cd6 <fminf+0x18>
 8012cec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf4:	d5ed      	bpl.n	8012cd2 <fminf+0x14>
 8012cf6:	e7ee      	b.n	8012cd6 <fminf+0x18>

08012cf8 <__fpclassifyf>:
 8012cf8:	ee10 3a10 	vmov	r3, s0
 8012cfc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012d00:	d00d      	beq.n	8012d1e <__fpclassifyf+0x26>
 8012d02:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012d06:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012d0a:	d30a      	bcc.n	8012d22 <__fpclassifyf+0x2a>
 8012d0c:	4b07      	ldr	r3, [pc, #28]	@ (8012d2c <__fpclassifyf+0x34>)
 8012d0e:	1e42      	subs	r2, r0, #1
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d908      	bls.n	8012d26 <__fpclassifyf+0x2e>
 8012d14:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012d18:	4258      	negs	r0, r3
 8012d1a:	4158      	adcs	r0, r3
 8012d1c:	4770      	bx	lr
 8012d1e:	2002      	movs	r0, #2
 8012d20:	4770      	bx	lr
 8012d22:	2004      	movs	r0, #4
 8012d24:	4770      	bx	lr
 8012d26:	2003      	movs	r0, #3
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop
 8012d2c:	007ffffe 	.word	0x007ffffe

08012d30 <cabsf>:
 8012d30:	b508      	push	{r3, lr}
 8012d32:	ed2d 8b04 	vpush	{d8-d9}
 8012d36:	eeb0 9a40 	vmov.f32	s18, s0
 8012d3a:	eef0 8a60 	vmov.f32	s17, s1
 8012d3e:	f000 f815 	bl	8012d6c <crealf>
 8012d42:	eef0 0a68 	vmov.f32	s1, s17
 8012d46:	eeb0 8a40 	vmov.f32	s16, s0
 8012d4a:	eeb0 0a49 	vmov.f32	s0, s18
 8012d4e:	f000 f80a 	bl	8012d66 <cimagf>
 8012d52:	eef0 0a40 	vmov.f32	s1, s0
 8012d56:	eeb0 0a48 	vmov.f32	s0, s16
 8012d5a:	ecbd 8b04 	vpop	{d8-d9}
 8012d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012d62:	f000 bf8b 	b.w	8013c7c <hypotf>

08012d66 <cimagf>:
 8012d66:	eeb0 0a60 	vmov.f32	s0, s1
 8012d6a:	4770      	bx	lr

08012d6c <crealf>:
 8012d6c:	4770      	bx	lr
	...

08012d70 <cexpf>:
 8012d70:	b508      	push	{r3, lr}
 8012d72:	ed2d 8b04 	vpush	{d8-d9}
 8012d76:	eeb0 9a40 	vmov.f32	s18, s0
 8012d7a:	eef0 8a60 	vmov.f32	s17, s1
 8012d7e:	f7ff fff5 	bl	8012d6c <crealf>
 8012d82:	eef0 0a68 	vmov.f32	s1, s17
 8012d86:	eeb0 8a40 	vmov.f32	s16, s0
 8012d8a:	eeb0 0a49 	vmov.f32	s0, s18
 8012d8e:	f7ff ffea 	bl	8012d66 <cimagf>
 8012d92:	eeb0 9a40 	vmov.f32	s18, s0
 8012d96:	eeb0 0a48 	vmov.f32	s0, s16
 8012d9a:	f7ff fd41 	bl	8012820 <expf>
 8012d9e:	eef0 8a40 	vmov.f32	s17, s0
 8012da2:	eeb0 0a49 	vmov.f32	s0, s18
 8012da6:	f7ff ff17 	bl	8012bd8 <sinf>
 8012daa:	ee20 8a28 	vmul.f32	s16, s0, s17
 8012dae:	eeb0 0a49 	vmov.f32	s0, s18
 8012db2:	f7ff fec5 	bl	8012b40 <cosf>
 8012db6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8012dd4 <cexpf+0x64>
 8012dba:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012dbe:	eeb0 7a40 	vmov.f32	s14, s0
 8012dc2:	eee7 7a28 	vfma.f32	s15, s14, s17
 8012dc6:	eef0 0a48 	vmov.f32	s1, s16
 8012dca:	ecbd 8b04 	vpop	{d8-d9}
 8012dce:	eeb0 0a67 	vmov.f32	s0, s15
 8012dd2:	bd08      	pop	{r3, pc}
 8012dd4:	00000000 	.word	0x00000000

08012dd8 <__ieee754_sqrt>:
 8012dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	4a68      	ldr	r2, [pc, #416]	@ (8012f80 <__ieee754_sqrt+0x1a8>)
 8012dde:	ec55 4b10 	vmov	r4, r5, d0
 8012de2:	43aa      	bics	r2, r5
 8012de4:	462b      	mov	r3, r5
 8012de6:	4621      	mov	r1, r4
 8012de8:	d110      	bne.n	8012e0c <__ieee754_sqrt+0x34>
 8012dea:	4622      	mov	r2, r4
 8012dec:	4620      	mov	r0, r4
 8012dee:	4629      	mov	r1, r5
 8012df0:	f7ed fc0a 	bl	8000608 <__aeabi_dmul>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	4620      	mov	r0, r4
 8012dfa:	4629      	mov	r1, r5
 8012dfc:	f7ed fa4e 	bl	800029c <__adddf3>
 8012e00:	4604      	mov	r4, r0
 8012e02:	460d      	mov	r5, r1
 8012e04:	ec45 4b10 	vmov	d0, r4, r5
 8012e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	2d00      	cmp	r5, #0
 8012e0e:	dc0e      	bgt.n	8012e2e <__ieee754_sqrt+0x56>
 8012e10:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8012e14:	4322      	orrs	r2, r4
 8012e16:	d0f5      	beq.n	8012e04 <__ieee754_sqrt+0x2c>
 8012e18:	b19d      	cbz	r5, 8012e42 <__ieee754_sqrt+0x6a>
 8012e1a:	4622      	mov	r2, r4
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	4629      	mov	r1, r5
 8012e20:	f7ed fa3a 	bl	8000298 <__aeabi_dsub>
 8012e24:	4602      	mov	r2, r0
 8012e26:	460b      	mov	r3, r1
 8012e28:	f7ed fd18 	bl	800085c <__aeabi_ddiv>
 8012e2c:	e7e8      	b.n	8012e00 <__ieee754_sqrt+0x28>
 8012e2e:	152a      	asrs	r2, r5, #20
 8012e30:	d115      	bne.n	8012e5e <__ieee754_sqrt+0x86>
 8012e32:	2000      	movs	r0, #0
 8012e34:	e009      	b.n	8012e4a <__ieee754_sqrt+0x72>
 8012e36:	0acb      	lsrs	r3, r1, #11
 8012e38:	3a15      	subs	r2, #21
 8012e3a:	0549      	lsls	r1, r1, #21
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d0fa      	beq.n	8012e36 <__ieee754_sqrt+0x5e>
 8012e40:	e7f7      	b.n	8012e32 <__ieee754_sqrt+0x5a>
 8012e42:	462a      	mov	r2, r5
 8012e44:	e7fa      	b.n	8012e3c <__ieee754_sqrt+0x64>
 8012e46:	005b      	lsls	r3, r3, #1
 8012e48:	3001      	adds	r0, #1
 8012e4a:	02dc      	lsls	r4, r3, #11
 8012e4c:	d5fb      	bpl.n	8012e46 <__ieee754_sqrt+0x6e>
 8012e4e:	1e44      	subs	r4, r0, #1
 8012e50:	1b12      	subs	r2, r2, r4
 8012e52:	f1c0 0420 	rsb	r4, r0, #32
 8012e56:	fa21 f404 	lsr.w	r4, r1, r4
 8012e5a:	4323      	orrs	r3, r4
 8012e5c:	4081      	lsls	r1, r0
 8012e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e62:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8012e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e6a:	07d2      	lsls	r2, r2, #31
 8012e6c:	bf5c      	itt	pl
 8012e6e:	005b      	lslpl	r3, r3, #1
 8012e70:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8012e74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012e78:	bf58      	it	pl
 8012e7a:	0049      	lslpl	r1, r1, #1
 8012e7c:	2600      	movs	r6, #0
 8012e7e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8012e82:	106d      	asrs	r5, r5, #1
 8012e84:	0049      	lsls	r1, r1, #1
 8012e86:	2016      	movs	r0, #22
 8012e88:	4632      	mov	r2, r6
 8012e8a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8012e8e:	1917      	adds	r7, r2, r4
 8012e90:	429f      	cmp	r7, r3
 8012e92:	bfde      	ittt	le
 8012e94:	193a      	addle	r2, r7, r4
 8012e96:	1bdb      	suble	r3, r3, r7
 8012e98:	1936      	addle	r6, r6, r4
 8012e9a:	0fcf      	lsrs	r7, r1, #31
 8012e9c:	3801      	subs	r0, #1
 8012e9e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8012ea2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ea6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012eaa:	d1f0      	bne.n	8012e8e <__ieee754_sqrt+0xb6>
 8012eac:	4604      	mov	r4, r0
 8012eae:	2720      	movs	r7, #32
 8012eb0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	eb00 0e0c 	add.w	lr, r0, ip
 8012eba:	db02      	blt.n	8012ec2 <__ieee754_sqrt+0xea>
 8012ebc:	d113      	bne.n	8012ee6 <__ieee754_sqrt+0x10e>
 8012ebe:	458e      	cmp	lr, r1
 8012ec0:	d811      	bhi.n	8012ee6 <__ieee754_sqrt+0x10e>
 8012ec2:	f1be 0f00 	cmp.w	lr, #0
 8012ec6:	eb0e 000c 	add.w	r0, lr, ip
 8012eca:	da42      	bge.n	8012f52 <__ieee754_sqrt+0x17a>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	db40      	blt.n	8012f52 <__ieee754_sqrt+0x17a>
 8012ed0:	f102 0801 	add.w	r8, r2, #1
 8012ed4:	1a9b      	subs	r3, r3, r2
 8012ed6:	458e      	cmp	lr, r1
 8012ed8:	bf88      	it	hi
 8012eda:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012ede:	eba1 010e 	sub.w	r1, r1, lr
 8012ee2:	4464      	add	r4, ip
 8012ee4:	4642      	mov	r2, r8
 8012ee6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012eea:	3f01      	subs	r7, #1
 8012eec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012ef0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ef4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012ef8:	d1dc      	bne.n	8012eb4 <__ieee754_sqrt+0xdc>
 8012efa:	4319      	orrs	r1, r3
 8012efc:	d01b      	beq.n	8012f36 <__ieee754_sqrt+0x15e>
 8012efe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8012f84 <__ieee754_sqrt+0x1ac>
 8012f02:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8012f88 <__ieee754_sqrt+0x1b0>
 8012f06:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f0a:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f0e:	f7ed f9c3 	bl	8000298 <__aeabi_dsub>
 8012f12:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f16:	4602      	mov	r2, r0
 8012f18:	460b      	mov	r3, r1
 8012f1a:	4640      	mov	r0, r8
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	f7ed fdef 	bl	8000b00 <__aeabi_dcmple>
 8012f22:	b140      	cbz	r0, 8012f36 <__ieee754_sqrt+0x15e>
 8012f24:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012f28:	e9da 0100 	ldrd	r0, r1, [sl]
 8012f2c:	e9db 2300 	ldrd	r2, r3, [fp]
 8012f30:	d111      	bne.n	8012f56 <__ieee754_sqrt+0x17e>
 8012f32:	3601      	adds	r6, #1
 8012f34:	463c      	mov	r4, r7
 8012f36:	1072      	asrs	r2, r6, #1
 8012f38:	0863      	lsrs	r3, r4, #1
 8012f3a:	07f1      	lsls	r1, r6, #31
 8012f3c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8012f40:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8012f44:	bf48      	it	mi
 8012f46:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8012f4a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8012f4e:	4618      	mov	r0, r3
 8012f50:	e756      	b.n	8012e00 <__ieee754_sqrt+0x28>
 8012f52:	4690      	mov	r8, r2
 8012f54:	e7be      	b.n	8012ed4 <__ieee754_sqrt+0xfc>
 8012f56:	f7ed f9a1 	bl	800029c <__adddf3>
 8012f5a:	e9da 8900 	ldrd	r8, r9, [sl]
 8012f5e:	4602      	mov	r2, r0
 8012f60:	460b      	mov	r3, r1
 8012f62:	4640      	mov	r0, r8
 8012f64:	4649      	mov	r1, r9
 8012f66:	f7ed fdc1 	bl	8000aec <__aeabi_dcmplt>
 8012f6a:	b120      	cbz	r0, 8012f76 <__ieee754_sqrt+0x19e>
 8012f6c:	1ca0      	adds	r0, r4, #2
 8012f6e:	bf08      	it	eq
 8012f70:	3601      	addeq	r6, #1
 8012f72:	3402      	adds	r4, #2
 8012f74:	e7df      	b.n	8012f36 <__ieee754_sqrt+0x15e>
 8012f76:	1c63      	adds	r3, r4, #1
 8012f78:	f023 0401 	bic.w	r4, r3, #1
 8012f7c:	e7db      	b.n	8012f36 <__ieee754_sqrt+0x15e>
 8012f7e:	bf00      	nop
 8012f80:	7ff00000 	.word	0x7ff00000
 8012f84:	20000380 	.word	0x20000380
 8012f88:	20000378 	.word	0x20000378

08012f8c <__ieee754_sqrtf>:
 8012f8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012f90:	4770      	bx	lr
	...

08012f94 <round>:
 8012f94:	ec51 0b10 	vmov	r0, r1, d0
 8012f98:	b570      	push	{r4, r5, r6, lr}
 8012f9a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012f9e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8012fa2:	2a13      	cmp	r2, #19
 8012fa4:	460b      	mov	r3, r1
 8012fa6:	4605      	mov	r5, r0
 8012fa8:	dc1b      	bgt.n	8012fe2 <round+0x4e>
 8012faa:	2a00      	cmp	r2, #0
 8012fac:	da0b      	bge.n	8012fc6 <round+0x32>
 8012fae:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012fb2:	3201      	adds	r2, #1
 8012fb4:	bf04      	itt	eq
 8012fb6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8012fba:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	4610      	mov	r0, r2
 8012fc4:	e015      	b.n	8012ff2 <round+0x5e>
 8012fc6:	4c15      	ldr	r4, [pc, #84]	@ (801301c <round+0x88>)
 8012fc8:	4114      	asrs	r4, r2
 8012fca:	ea04 0601 	and.w	r6, r4, r1
 8012fce:	4306      	orrs	r6, r0
 8012fd0:	d00f      	beq.n	8012ff2 <round+0x5e>
 8012fd2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8012fd6:	fa41 f202 	asr.w	r2, r1, r2
 8012fda:	4413      	add	r3, r2
 8012fdc:	ea23 0304 	bic.w	r3, r3, r4
 8012fe0:	e7ed      	b.n	8012fbe <round+0x2a>
 8012fe2:	2a33      	cmp	r2, #51	@ 0x33
 8012fe4:	dd08      	ble.n	8012ff8 <round+0x64>
 8012fe6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8012fea:	d102      	bne.n	8012ff2 <round+0x5e>
 8012fec:	4602      	mov	r2, r0
 8012fee:	f7ed f955 	bl	800029c <__adddf3>
 8012ff2:	ec41 0b10 	vmov	d0, r0, r1
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}
 8012ff8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8012ffc:	f04f 34ff 	mov.w	r4, #4294967295
 8013000:	40f4      	lsrs	r4, r6
 8013002:	4204      	tst	r4, r0
 8013004:	d0f5      	beq.n	8012ff2 <round+0x5e>
 8013006:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801300a:	2201      	movs	r2, #1
 801300c:	408a      	lsls	r2, r1
 801300e:	1952      	adds	r2, r2, r5
 8013010:	bf28      	it	cs
 8013012:	3301      	addcs	r3, #1
 8013014:	ea22 0204 	bic.w	r2, r2, r4
 8013018:	e7d2      	b.n	8012fc0 <round+0x2c>
 801301a:	bf00      	nop
 801301c:	000fffff 	.word	0x000fffff

08013020 <floorf>:
 8013020:	ee10 3a10 	vmov	r3, s0
 8013024:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013028:	3a7f      	subs	r2, #127	@ 0x7f
 801302a:	2a16      	cmp	r2, #22
 801302c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013030:	dc2b      	bgt.n	801308a <floorf+0x6a>
 8013032:	2a00      	cmp	r2, #0
 8013034:	da12      	bge.n	801305c <floorf+0x3c>
 8013036:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801309c <floorf+0x7c>
 801303a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801303e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013046:	dd06      	ble.n	8013056 <floorf+0x36>
 8013048:	2b00      	cmp	r3, #0
 801304a:	da24      	bge.n	8013096 <floorf+0x76>
 801304c:	2900      	cmp	r1, #0
 801304e:	4b14      	ldr	r3, [pc, #80]	@ (80130a0 <floorf+0x80>)
 8013050:	bf08      	it	eq
 8013052:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013056:	ee00 3a10 	vmov	s0, r3
 801305a:	4770      	bx	lr
 801305c:	4911      	ldr	r1, [pc, #68]	@ (80130a4 <floorf+0x84>)
 801305e:	4111      	asrs	r1, r2
 8013060:	420b      	tst	r3, r1
 8013062:	d0fa      	beq.n	801305a <floorf+0x3a>
 8013064:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801309c <floorf+0x7c>
 8013068:	ee30 0a27 	vadd.f32	s0, s0, s15
 801306c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013074:	ddef      	ble.n	8013056 <floorf+0x36>
 8013076:	2b00      	cmp	r3, #0
 8013078:	bfbe      	ittt	lt
 801307a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801307e:	fa40 f202 	asrlt.w	r2, r0, r2
 8013082:	189b      	addlt	r3, r3, r2
 8013084:	ea23 0301 	bic.w	r3, r3, r1
 8013088:	e7e5      	b.n	8013056 <floorf+0x36>
 801308a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801308e:	d3e4      	bcc.n	801305a <floorf+0x3a>
 8013090:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013094:	4770      	bx	lr
 8013096:	2300      	movs	r3, #0
 8013098:	e7dd      	b.n	8013056 <floorf+0x36>
 801309a:	bf00      	nop
 801309c:	7149f2ca 	.word	0x7149f2ca
 80130a0:	bf800000 	.word	0xbf800000
 80130a4:	007fffff 	.word	0x007fffff

080130a8 <roundf>:
 80130a8:	ee10 0a10 	vmov	r0, s0
 80130ac:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80130b0:	3a7f      	subs	r2, #127	@ 0x7f
 80130b2:	2a16      	cmp	r2, #22
 80130b4:	dc15      	bgt.n	80130e2 <roundf+0x3a>
 80130b6:	2a00      	cmp	r2, #0
 80130b8:	da08      	bge.n	80130cc <roundf+0x24>
 80130ba:	3201      	adds	r2, #1
 80130bc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80130c0:	d101      	bne.n	80130c6 <roundf+0x1e>
 80130c2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80130c6:	ee00 3a10 	vmov	s0, r3
 80130ca:	4770      	bx	lr
 80130cc:	4907      	ldr	r1, [pc, #28]	@ (80130ec <roundf+0x44>)
 80130ce:	4111      	asrs	r1, r2
 80130d0:	4201      	tst	r1, r0
 80130d2:	d0fa      	beq.n	80130ca <roundf+0x22>
 80130d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80130d8:	4113      	asrs	r3, r2
 80130da:	4403      	add	r3, r0
 80130dc:	ea23 0301 	bic.w	r3, r3, r1
 80130e0:	e7f1      	b.n	80130c6 <roundf+0x1e>
 80130e2:	2a80      	cmp	r2, #128	@ 0x80
 80130e4:	d1f1      	bne.n	80130ca <roundf+0x22>
 80130e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80130ea:	4770      	bx	lr
 80130ec:	007fffff 	.word	0x007fffff

080130f0 <__kernel_cosf>:
 80130f0:	ee10 3a10 	vmov	r3, s0
 80130f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80130fc:	eef0 6a40 	vmov.f32	s13, s0
 8013100:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013104:	d204      	bcs.n	8013110 <__kernel_cosf+0x20>
 8013106:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801310a:	ee17 2a90 	vmov	r2, s15
 801310e:	b342      	cbz	r2, 8013162 <__kernel_cosf+0x72>
 8013110:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013114:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013180 <__kernel_cosf+0x90>
 8013118:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013184 <__kernel_cosf+0x94>
 801311c:	4a1a      	ldr	r2, [pc, #104]	@ (8013188 <__kernel_cosf+0x98>)
 801311e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013122:	4293      	cmp	r3, r2
 8013124:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801318c <__kernel_cosf+0x9c>
 8013128:	eee6 7a07 	vfma.f32	s15, s12, s14
 801312c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013190 <__kernel_cosf+0xa0>
 8013130:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013134:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013194 <__kernel_cosf+0xa4>
 8013138:	eee6 7a07 	vfma.f32	s15, s12, s14
 801313c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013198 <__kernel_cosf+0xa8>
 8013140:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013144:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013148:	ee26 6a07 	vmul.f32	s12, s12, s14
 801314c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013150:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013158:	d804      	bhi.n	8013164 <__kernel_cosf+0x74>
 801315a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801315e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013162:	4770      	bx	lr
 8013164:	4a0d      	ldr	r2, [pc, #52]	@ (801319c <__kernel_cosf+0xac>)
 8013166:	4293      	cmp	r3, r2
 8013168:	bf9a      	itte	ls
 801316a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801316e:	ee07 3a10 	vmovls	s14, r3
 8013172:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013176:	ee30 0a47 	vsub.f32	s0, s0, s14
 801317a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801317e:	e7ec      	b.n	801315a <__kernel_cosf+0x6a>
 8013180:	ad47d74e 	.word	0xad47d74e
 8013184:	310f74f6 	.word	0x310f74f6
 8013188:	3e999999 	.word	0x3e999999
 801318c:	b493f27c 	.word	0xb493f27c
 8013190:	37d00d01 	.word	0x37d00d01
 8013194:	bab60b61 	.word	0xbab60b61
 8013198:	3d2aaaab 	.word	0x3d2aaaab
 801319c:	3f480000 	.word	0x3f480000

080131a0 <__kernel_sinf>:
 80131a0:	ee10 3a10 	vmov	r3, s0
 80131a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80131a8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80131ac:	d204      	bcs.n	80131b8 <__kernel_sinf+0x18>
 80131ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80131b2:	ee17 3a90 	vmov	r3, s15
 80131b6:	b35b      	cbz	r3, 8013210 <__kernel_sinf+0x70>
 80131b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80131bc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013214 <__kernel_sinf+0x74>
 80131c0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013218 <__kernel_sinf+0x78>
 80131c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80131c8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801321c <__kernel_sinf+0x7c>
 80131cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131d0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013220 <__kernel_sinf+0x80>
 80131d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80131d8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013224 <__kernel_sinf+0x84>
 80131dc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80131e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131e4:	b930      	cbnz	r0, 80131f4 <__kernel_sinf+0x54>
 80131e6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013228 <__kernel_sinf+0x88>
 80131ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 80131ee:	eea6 0a26 	vfma.f32	s0, s12, s13
 80131f2:	4770      	bx	lr
 80131f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80131f8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80131fc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013200:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013204:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801322c <__kernel_sinf+0x8c>
 8013208:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801320c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013210:	4770      	bx	lr
 8013212:	bf00      	nop
 8013214:	2f2ec9d3 	.word	0x2f2ec9d3
 8013218:	b2d72f34 	.word	0xb2d72f34
 801321c:	3638ef1b 	.word	0x3638ef1b
 8013220:	b9500d01 	.word	0xb9500d01
 8013224:	3c088889 	.word	0x3c088889
 8013228:	be2aaaab 	.word	0xbe2aaaab
 801322c:	3e2aaaab 	.word	0x3e2aaaab

08013230 <__ieee754_expf>:
 8013230:	ee10 2a10 	vmov	r2, s0
 8013234:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8013238:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801323c:	d902      	bls.n	8013244 <__ieee754_expf+0x14>
 801323e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013242:	4770      	bx	lr
 8013244:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8013248:	d106      	bne.n	8013258 <__ieee754_expf+0x28>
 801324a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8013384 <__ieee754_expf+0x154>
 801324e:	2900      	cmp	r1, #0
 8013250:	bf18      	it	ne
 8013252:	eeb0 0a67 	vmovne.f32	s0, s15
 8013256:	4770      	bx	lr
 8013258:	484b      	ldr	r0, [pc, #300]	@ (8013388 <__ieee754_expf+0x158>)
 801325a:	4282      	cmp	r2, r0
 801325c:	dd02      	ble.n	8013264 <__ieee754_expf+0x34>
 801325e:	2000      	movs	r0, #0
 8013260:	f000 bdb8 	b.w	8013dd4 <__math_oflowf>
 8013264:	2a00      	cmp	r2, #0
 8013266:	da05      	bge.n	8013274 <__ieee754_expf+0x44>
 8013268:	4a48      	ldr	r2, [pc, #288]	@ (801338c <__ieee754_expf+0x15c>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d902      	bls.n	8013274 <__ieee754_expf+0x44>
 801326e:	2000      	movs	r0, #0
 8013270:	f000 bdaa 	b.w	8013dc8 <__math_uflowf>
 8013274:	4a46      	ldr	r2, [pc, #280]	@ (8013390 <__ieee754_expf+0x160>)
 8013276:	4293      	cmp	r3, r2
 8013278:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801327c:	d952      	bls.n	8013324 <__ieee754_expf+0xf4>
 801327e:	4a45      	ldr	r2, [pc, #276]	@ (8013394 <__ieee754_expf+0x164>)
 8013280:	4293      	cmp	r3, r2
 8013282:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8013286:	d834      	bhi.n	80132f2 <__ieee754_expf+0xc2>
 8013288:	4b43      	ldr	r3, [pc, #268]	@ (8013398 <__ieee754_expf+0x168>)
 801328a:	4413      	add	r3, r2
 801328c:	ed93 7a00 	vldr	s14, [r3]
 8013290:	4b42      	ldr	r3, [pc, #264]	@ (801339c <__ieee754_expf+0x16c>)
 8013292:	4413      	add	r3, r2
 8013294:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013298:	f1c1 0201 	rsb	r2, r1, #1
 801329c:	edd3 7a00 	vldr	s15, [r3]
 80132a0:	1a52      	subs	r2, r2, r1
 80132a2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80132a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80132aa:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80133a0 <__ieee754_expf+0x170>
 80132ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80133a4 <__ieee754_expf+0x174>
 80132b2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80132b6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80133a8 <__ieee754_expf+0x178>
 80132ba:	eea6 5a86 	vfma.f32	s10, s13, s12
 80132be:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80133ac <__ieee754_expf+0x17c>
 80132c2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80132c6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80133b0 <__ieee754_expf+0x180>
 80132ca:	eea6 5a86 	vfma.f32	s10, s13, s12
 80132ce:	eef0 6a40 	vmov.f32	s13, s0
 80132d2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80132d6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80132da:	ee20 5a26 	vmul.f32	s10, s0, s13
 80132de:	bb92      	cbnz	r2, 8013346 <__ieee754_expf+0x116>
 80132e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80132e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80132e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80132ec:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80132f0:	4770      	bx	lr
 80132f2:	4b30      	ldr	r3, [pc, #192]	@ (80133b4 <__ieee754_expf+0x184>)
 80132f4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80133b8 <__ieee754_expf+0x188>
 80132f8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80133bc <__ieee754_expf+0x18c>
 80132fc:	4413      	add	r3, r2
 80132fe:	edd3 7a00 	vldr	s15, [r3]
 8013302:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013306:	eeb0 7a40 	vmov.f32	s14, s0
 801330a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801330e:	ee17 2a90 	vmov	r2, s15
 8013312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013316:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801331a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80133c0 <__ieee754_expf+0x190>
 801331e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013322:	e7be      	b.n	80132a2 <__ieee754_expf+0x72>
 8013324:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8013328:	d20b      	bcs.n	8013342 <__ieee754_expf+0x112>
 801332a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80133c4 <__ieee754_expf+0x194>
 801332e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013332:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333a:	dd02      	ble.n	8013342 <__ieee754_expf+0x112>
 801333c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8013340:	4770      	bx	lr
 8013342:	2200      	movs	r2, #0
 8013344:	e7af      	b.n	80132a6 <__ieee754_expf+0x76>
 8013346:	ee36 6a66 	vsub.f32	s12, s12, s13
 801334a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801334e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8013352:	bfb8      	it	lt
 8013354:	3264      	addlt	r2, #100	@ 0x64
 8013356:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801335a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801335e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013362:	ee17 3a90 	vmov	r3, s15
 8013366:	bfab      	itete	ge
 8013368:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801336c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8013370:	ee00 3a10 	vmovge	s0, r3
 8013374:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80133c8 <__ieee754_expf+0x198>
 8013378:	bfbc      	itt	lt
 801337a:	ee00 3a10 	vmovlt	s0, r3
 801337e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013382:	4770      	bx	lr
 8013384:	00000000 	.word	0x00000000
 8013388:	42b17217 	.word	0x42b17217
 801338c:	42cff1b5 	.word	0x42cff1b5
 8013390:	3eb17218 	.word	0x3eb17218
 8013394:	3f851591 	.word	0x3f851591
 8013398:	0801a458 	.word	0x0801a458
 801339c:	0801a450 	.word	0x0801a450
 80133a0:	3331bb4c 	.word	0x3331bb4c
 80133a4:	b5ddea0e 	.word	0xb5ddea0e
 80133a8:	388ab355 	.word	0x388ab355
 80133ac:	bb360b61 	.word	0xbb360b61
 80133b0:	3e2aaaab 	.word	0x3e2aaaab
 80133b4:	0801a460 	.word	0x0801a460
 80133b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80133bc:	3f317180 	.word	0x3f317180
 80133c0:	3717f7d1 	.word	0x3717f7d1
 80133c4:	7149f2ca 	.word	0x7149f2ca
 80133c8:	0d800000 	.word	0x0d800000

080133cc <__ieee754_log10f>:
 80133cc:	b508      	push	{r3, lr}
 80133ce:	ee10 3a10 	vmov	r3, s0
 80133d2:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80133d6:	ed2d 8b02 	vpush	{d8}
 80133da:	d108      	bne.n	80133ee <__ieee754_log10f+0x22>
 80133dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8013464 <__ieee754_log10f+0x98>
 80133e0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8013468 <__ieee754_log10f+0x9c>
 80133e4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80133e8:	ecbd 8b02 	vpop	{d8}
 80133ec:	bd08      	pop	{r3, pc}
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	461a      	mov	r2, r3
 80133f2:	da02      	bge.n	80133fa <__ieee754_log10f+0x2e>
 80133f4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80133f8:	e7f2      	b.n	80133e0 <__ieee754_log10f+0x14>
 80133fa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80133fe:	db02      	blt.n	8013406 <__ieee754_log10f+0x3a>
 8013400:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013404:	e7f0      	b.n	80133e8 <__ieee754_log10f+0x1c>
 8013406:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801340a:	bfbf      	itttt	lt
 801340c:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 801346c <__ieee754_log10f+0xa0>
 8013410:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013414:	f06f 0118 	mvnlt.w	r1, #24
 8013418:	ee17 2a90 	vmovlt	r2, s15
 801341c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8013420:	bfa8      	it	ge
 8013422:	2100      	movge	r1, #0
 8013424:	3b7f      	subs	r3, #127	@ 0x7f
 8013426:	440b      	add	r3, r1
 8013428:	0fd9      	lsrs	r1, r3, #31
 801342a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801342e:	ee07 3a90 	vmov	s15, r3
 8013432:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013436:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 801343a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801343e:	ee00 3a10 	vmov	s0, r3
 8013442:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013446:	f000 ffcd 	bl	80143e4 <__ieee754_logf>
 801344a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013470 <__ieee754_log10f+0xa4>
 801344e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013452:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8013474 <__ieee754_log10f+0xa8>
 8013456:	eea8 0a27 	vfma.f32	s0, s16, s15
 801345a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8013478 <__ieee754_log10f+0xac>
 801345e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8013462:	e7c1      	b.n	80133e8 <__ieee754_log10f+0x1c>
 8013464:	cc000000 	.word	0xcc000000
 8013468:	00000000 	.word	0x00000000
 801346c:	4c000000 	.word	0x4c000000
 8013470:	3ede5bd9 	.word	0x3ede5bd9
 8013474:	355427db 	.word	0x355427db
 8013478:	3e9a2080 	.word	0x3e9a2080

0801347c <__ieee754_powf>:
 801347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013480:	ee10 4a90 	vmov	r4, s1
 8013484:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8013488:	ed2d 8b02 	vpush	{d8}
 801348c:	ee10 6a10 	vmov	r6, s0
 8013490:	eeb0 8a40 	vmov.f32	s16, s0
 8013494:	eef0 8a60 	vmov.f32	s17, s1
 8013498:	d10c      	bne.n	80134b4 <__ieee754_powf+0x38>
 801349a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801349e:	0076      	lsls	r6, r6, #1
 80134a0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80134a4:	f240 829c 	bls.w	80139e0 <__ieee754_powf+0x564>
 80134a8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80134ac:	ecbd 8b02 	vpop	{d8}
 80134b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80134b8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80134bc:	d802      	bhi.n	80134c4 <__ieee754_powf+0x48>
 80134be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80134c2:	d908      	bls.n	80134d6 <__ieee754_powf+0x5a>
 80134c4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80134c8:	d1ee      	bne.n	80134a8 <__ieee754_powf+0x2c>
 80134ca:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80134ce:	0064      	lsls	r4, r4, #1
 80134d0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80134d4:	e7e6      	b.n	80134a4 <__ieee754_powf+0x28>
 80134d6:	2e00      	cmp	r6, #0
 80134d8:	da1e      	bge.n	8013518 <__ieee754_powf+0x9c>
 80134da:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80134de:	d22b      	bcs.n	8013538 <__ieee754_powf+0xbc>
 80134e0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80134e4:	d332      	bcc.n	801354c <__ieee754_powf+0xd0>
 80134e6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80134ea:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80134ee:	fa49 f503 	asr.w	r5, r9, r3
 80134f2:	fa05 f303 	lsl.w	r3, r5, r3
 80134f6:	454b      	cmp	r3, r9
 80134f8:	d126      	bne.n	8013548 <__ieee754_powf+0xcc>
 80134fa:	f005 0501 	and.w	r5, r5, #1
 80134fe:	f1c5 0502 	rsb	r5, r5, #2
 8013502:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8013506:	d122      	bne.n	801354e <__ieee754_powf+0xd2>
 8013508:	2c00      	cmp	r4, #0
 801350a:	f280 826f 	bge.w	80139ec <__ieee754_powf+0x570>
 801350e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013512:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013516:	e7c9      	b.n	80134ac <__ieee754_powf+0x30>
 8013518:	2500      	movs	r5, #0
 801351a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801351e:	d1f0      	bne.n	8013502 <__ieee754_powf+0x86>
 8013520:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8013524:	f000 825c 	beq.w	80139e0 <__ieee754_powf+0x564>
 8013528:	d908      	bls.n	801353c <__ieee754_powf+0xc0>
 801352a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801388c <__ieee754_powf+0x410>
 801352e:	2c00      	cmp	r4, #0
 8013530:	bfa8      	it	ge
 8013532:	eeb0 0a68 	vmovge.f32	s0, s17
 8013536:	e7b9      	b.n	80134ac <__ieee754_powf+0x30>
 8013538:	2502      	movs	r5, #2
 801353a:	e7ee      	b.n	801351a <__ieee754_powf+0x9e>
 801353c:	2c00      	cmp	r4, #0
 801353e:	f280 8252 	bge.w	80139e6 <__ieee754_powf+0x56a>
 8013542:	eeb1 0a68 	vneg.f32	s0, s17
 8013546:	e7b1      	b.n	80134ac <__ieee754_powf+0x30>
 8013548:	2500      	movs	r5, #0
 801354a:	e7da      	b.n	8013502 <__ieee754_powf+0x86>
 801354c:	2500      	movs	r5, #0
 801354e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013552:	d102      	bne.n	801355a <__ieee754_powf+0xde>
 8013554:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013558:	e7a8      	b.n	80134ac <__ieee754_powf+0x30>
 801355a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801355e:	d109      	bne.n	8013574 <__ieee754_powf+0xf8>
 8013560:	2e00      	cmp	r6, #0
 8013562:	db07      	blt.n	8013574 <__ieee754_powf+0xf8>
 8013564:	eeb0 0a48 	vmov.f32	s0, s16
 8013568:	ecbd 8b02 	vpop	{d8}
 801356c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013570:	f7ff bd0c 	b.w	8012f8c <__ieee754_sqrtf>
 8013574:	eeb0 0a48 	vmov.f32	s0, s16
 8013578:	f7ff fb26 	bl	8012bc8 <fabsf>
 801357c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8013580:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8013584:	4647      	mov	r7, r8
 8013586:	d002      	beq.n	801358e <__ieee754_powf+0x112>
 8013588:	f1b8 0f00 	cmp.w	r8, #0
 801358c:	d117      	bne.n	80135be <__ieee754_powf+0x142>
 801358e:	2c00      	cmp	r4, #0
 8013590:	bfbc      	itt	lt
 8013592:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8013596:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801359a:	2e00      	cmp	r6, #0
 801359c:	da86      	bge.n	80134ac <__ieee754_powf+0x30>
 801359e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80135a2:	ea58 0805 	orrs.w	r8, r8, r5
 80135a6:	d104      	bne.n	80135b2 <__ieee754_powf+0x136>
 80135a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80135ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80135b0:	e77c      	b.n	80134ac <__ieee754_powf+0x30>
 80135b2:	2d01      	cmp	r5, #1
 80135b4:	f47f af7a 	bne.w	80134ac <__ieee754_powf+0x30>
 80135b8:	eeb1 0a40 	vneg.f32	s0, s0
 80135bc:	e776      	b.n	80134ac <__ieee754_powf+0x30>
 80135be:	0ff0      	lsrs	r0, r6, #31
 80135c0:	3801      	subs	r0, #1
 80135c2:	ea55 0300 	orrs.w	r3, r5, r0
 80135c6:	d104      	bne.n	80135d2 <__ieee754_powf+0x156>
 80135c8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80135cc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80135d0:	e76c      	b.n	80134ac <__ieee754_powf+0x30>
 80135d2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80135d6:	d973      	bls.n	80136c0 <__ieee754_powf+0x244>
 80135d8:	4bad      	ldr	r3, [pc, #692]	@ (8013890 <__ieee754_powf+0x414>)
 80135da:	4598      	cmp	r8, r3
 80135dc:	d808      	bhi.n	80135f0 <__ieee754_powf+0x174>
 80135de:	2c00      	cmp	r4, #0
 80135e0:	da0b      	bge.n	80135fa <__ieee754_powf+0x17e>
 80135e2:	2000      	movs	r0, #0
 80135e4:	ecbd 8b02 	vpop	{d8}
 80135e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135ec:	f000 bbf2 	b.w	8013dd4 <__math_oflowf>
 80135f0:	4ba8      	ldr	r3, [pc, #672]	@ (8013894 <__ieee754_powf+0x418>)
 80135f2:	4598      	cmp	r8, r3
 80135f4:	d908      	bls.n	8013608 <__ieee754_powf+0x18c>
 80135f6:	2c00      	cmp	r4, #0
 80135f8:	dcf3      	bgt.n	80135e2 <__ieee754_powf+0x166>
 80135fa:	2000      	movs	r0, #0
 80135fc:	ecbd 8b02 	vpop	{d8}
 8013600:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013604:	f000 bbe0 	b.w	8013dc8 <__math_uflowf>
 8013608:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801360c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013610:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8013898 <__ieee754_powf+0x41c>
 8013614:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8013618:	eee0 6a67 	vfms.f32	s13, s0, s15
 801361c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013620:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013624:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013628:	ee27 7a27 	vmul.f32	s14, s14, s15
 801362c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801389c <__ieee754_powf+0x420>
 8013630:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013634:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80138a0 <__ieee754_powf+0x424>
 8013638:	eee0 7a07 	vfma.f32	s15, s0, s14
 801363c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80138a4 <__ieee754_powf+0x428>
 8013640:	eef0 6a67 	vmov.f32	s13, s15
 8013644:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013648:	ee16 3a90 	vmov	r3, s13
 801364c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8013650:	f023 030f 	bic.w	r3, r3, #15
 8013654:	ee06 3a90 	vmov	s13, r3
 8013658:	eee0 6a47 	vfms.f32	s13, s0, s14
 801365c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013660:	3d01      	subs	r5, #1
 8013662:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8013666:	4305      	orrs	r5, r0
 8013668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801366c:	f024 040f 	bic.w	r4, r4, #15
 8013670:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8013674:	bf18      	it	ne
 8013676:	eeb0 8a47 	vmovne.f32	s16, s14
 801367a:	ee07 4a10 	vmov	s14, r4
 801367e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013682:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013686:	ee07 3a90 	vmov	s15, r3
 801368a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801368e:	ee07 4a10 	vmov	s14, r4
 8013692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013696:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801369a:	ee17 1a10 	vmov	r1, s14
 801369e:	2900      	cmp	r1, #0
 80136a0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80136a4:	f340 80dd 	ble.w	8013862 <__ieee754_powf+0x3e6>
 80136a8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80136ac:	f240 80ca 	bls.w	8013844 <__ieee754_powf+0x3c8>
 80136b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b8:	bf4c      	ite	mi
 80136ba:	2001      	movmi	r0, #1
 80136bc:	2000      	movpl	r0, #0
 80136be:	e791      	b.n	80135e4 <__ieee754_powf+0x168>
 80136c0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80136c4:	bf01      	itttt	eq
 80136c6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80138a8 <__ieee754_powf+0x42c>
 80136ca:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80136ce:	f06f 0317 	mvneq.w	r3, #23
 80136d2:	ee17 7a90 	vmoveq	r7, s15
 80136d6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80136da:	bf18      	it	ne
 80136dc:	2300      	movne	r3, #0
 80136de:	3a7f      	subs	r2, #127	@ 0x7f
 80136e0:	441a      	add	r2, r3
 80136e2:	4b72      	ldr	r3, [pc, #456]	@ (80138ac <__ieee754_powf+0x430>)
 80136e4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80136e8:	429f      	cmp	r7, r3
 80136ea:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80136ee:	dd06      	ble.n	80136fe <__ieee754_powf+0x282>
 80136f0:	4b6f      	ldr	r3, [pc, #444]	@ (80138b0 <__ieee754_powf+0x434>)
 80136f2:	429f      	cmp	r7, r3
 80136f4:	f340 80a4 	ble.w	8013840 <__ieee754_powf+0x3c4>
 80136f8:	3201      	adds	r2, #1
 80136fa:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80136fe:	2600      	movs	r6, #0
 8013700:	4b6c      	ldr	r3, [pc, #432]	@ (80138b4 <__ieee754_powf+0x438>)
 8013702:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8013706:	ee07 1a10 	vmov	s14, r1
 801370a:	edd3 5a00 	vldr	s11, [r3]
 801370e:	4b6a      	ldr	r3, [pc, #424]	@ (80138b8 <__ieee754_powf+0x43c>)
 8013710:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013718:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801371c:	1049      	asrs	r1, r1, #1
 801371e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8013722:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8013726:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801372a:	ee37 6a65 	vsub.f32	s12, s14, s11
 801372e:	ee07 1a90 	vmov	s15, r1
 8013732:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013736:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801373a:	ee15 7a10 	vmov	r7, s10
 801373e:	401f      	ands	r7, r3
 8013740:	ee06 7a90 	vmov	s13, r7
 8013744:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013748:	ee37 7a65 	vsub.f32	s14, s14, s11
 801374c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013750:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013754:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80138bc <__ieee754_powf+0x440>
 8013758:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80138c0 <__ieee754_powf+0x444>
 801375c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013760:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80138c4 <__ieee754_powf+0x448>
 8013764:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013768:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8013898 <__ieee754_powf+0x41c>
 801376c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013770:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80138c8 <__ieee754_powf+0x44c>
 8013774:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013778:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80138cc <__ieee754_powf+0x450>
 801377c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013780:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013784:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013788:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801378c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013790:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8013794:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013798:	eef0 5a67 	vmov.f32	s11, s15
 801379c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80137a0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80137a4:	ee15 1a90 	vmov	r1, s11
 80137a8:	4019      	ands	r1, r3
 80137aa:	ee05 1a90 	vmov	s11, r1
 80137ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80137b2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80137b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 80137be:	eee6 7a25 	vfma.f32	s15, s12, s11
 80137c2:	eeb0 6a67 	vmov.f32	s12, s15
 80137c6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80137ca:	ee16 1a10 	vmov	r1, s12
 80137ce:	4019      	ands	r1, r3
 80137d0:	ee06 1a10 	vmov	s12, r1
 80137d4:	eeb0 7a46 	vmov.f32	s14, s12
 80137d8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80137dc:	493c      	ldr	r1, [pc, #240]	@ (80138d0 <__ieee754_powf+0x454>)
 80137de:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80137e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137e6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80138d4 <__ieee754_powf+0x458>
 80137ea:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80138d8 <__ieee754_powf+0x45c>
 80137ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137f2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80138dc <__ieee754_powf+0x460>
 80137f6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137fa:	ed91 7a00 	vldr	s14, [r1]
 80137fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013802:	ee07 2a10 	vmov	s14, r2
 8013806:	eef0 6a67 	vmov.f32	s13, s15
 801380a:	4a35      	ldr	r2, [pc, #212]	@ (80138e0 <__ieee754_powf+0x464>)
 801380c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013810:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8013814:	ed92 5a00 	vldr	s10, [r2]
 8013818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801381c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013820:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013824:	ee16 2a90 	vmov	r2, s13
 8013828:	4013      	ands	r3, r2
 801382a:	ee06 3a90 	vmov	s13, r3
 801382e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013832:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013836:	eea6 7a65 	vfms.f32	s14, s12, s11
 801383a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801383e:	e70f      	b.n	8013660 <__ieee754_powf+0x1e4>
 8013840:	2601      	movs	r6, #1
 8013842:	e75d      	b.n	8013700 <__ieee754_powf+0x284>
 8013844:	d152      	bne.n	80138ec <__ieee754_powf+0x470>
 8013846:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80138e4 <__ieee754_powf+0x468>
 801384a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801384e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013852:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385a:	f73f af29 	bgt.w	80136b0 <__ieee754_powf+0x234>
 801385e:	2386      	movs	r3, #134	@ 0x86
 8013860:	e048      	b.n	80138f4 <__ieee754_powf+0x478>
 8013862:	4a21      	ldr	r2, [pc, #132]	@ (80138e8 <__ieee754_powf+0x46c>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d907      	bls.n	8013878 <__ieee754_powf+0x3fc>
 8013868:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013870:	bf4c      	ite	mi
 8013872:	2001      	movmi	r0, #1
 8013874:	2000      	movpl	r0, #0
 8013876:	e6c1      	b.n	80135fc <__ieee754_powf+0x180>
 8013878:	d138      	bne.n	80138ec <__ieee754_powf+0x470>
 801387a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801387e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013886:	dbea      	blt.n	801385e <__ieee754_powf+0x3e2>
 8013888:	e7ee      	b.n	8013868 <__ieee754_powf+0x3ec>
 801388a:	bf00      	nop
 801388c:	00000000 	.word	0x00000000
 8013890:	3f7ffff3 	.word	0x3f7ffff3
 8013894:	3f800007 	.word	0x3f800007
 8013898:	3eaaaaab 	.word	0x3eaaaaab
 801389c:	3fb8aa3b 	.word	0x3fb8aa3b
 80138a0:	36eca570 	.word	0x36eca570
 80138a4:	3fb8aa00 	.word	0x3fb8aa00
 80138a8:	4b800000 	.word	0x4b800000
 80138ac:	001cc471 	.word	0x001cc471
 80138b0:	005db3d6 	.word	0x005db3d6
 80138b4:	0801a478 	.word	0x0801a478
 80138b8:	fffff000 	.word	0xfffff000
 80138bc:	3e6c3255 	.word	0x3e6c3255
 80138c0:	3e53f142 	.word	0x3e53f142
 80138c4:	3e8ba305 	.word	0x3e8ba305
 80138c8:	3edb6db7 	.word	0x3edb6db7
 80138cc:	3f19999a 	.word	0x3f19999a
 80138d0:	0801a468 	.word	0x0801a468
 80138d4:	3f76384f 	.word	0x3f76384f
 80138d8:	3f763800 	.word	0x3f763800
 80138dc:	369dc3a0 	.word	0x369dc3a0
 80138e0:	0801a470 	.word	0x0801a470
 80138e4:	3338aa3c 	.word	0x3338aa3c
 80138e8:	43160000 	.word	0x43160000
 80138ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80138f0:	d971      	bls.n	80139d6 <__ieee754_powf+0x55a>
 80138f2:	15db      	asrs	r3, r3, #23
 80138f4:	3b7e      	subs	r3, #126	@ 0x7e
 80138f6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80138fa:	4118      	asrs	r0, r3
 80138fc:	4408      	add	r0, r1
 80138fe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013902:	4a3c      	ldr	r2, [pc, #240]	@ (80139f4 <__ieee754_powf+0x578>)
 8013904:	3b7f      	subs	r3, #127	@ 0x7f
 8013906:	411a      	asrs	r2, r3
 8013908:	4002      	ands	r2, r0
 801390a:	ee07 2a10 	vmov	s14, r2
 801390e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8013912:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8013916:	f1c3 0317 	rsb	r3, r3, #23
 801391a:	4118      	asrs	r0, r3
 801391c:	2900      	cmp	r1, #0
 801391e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013922:	bfb8      	it	lt
 8013924:	4240      	neglt	r0, r0
 8013926:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801392a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80139f8 <__ieee754_powf+0x57c>
 801392e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80139fc <__ieee754_powf+0x580>
 8013932:	ee17 3a10 	vmov	r3, s14
 8013936:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801393a:	f023 030f 	bic.w	r3, r3, #15
 801393e:	ee07 3a10 	vmov	s14, r3
 8013942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013946:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801394a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801394e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8013a00 <__ieee754_powf+0x584>
 8013952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013956:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801395a:	eef0 6a67 	vmov.f32	s13, s15
 801395e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013962:	eef0 5a66 	vmov.f32	s11, s13
 8013966:	eee7 5a46 	vfms.f32	s11, s14, s12
 801396a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801396e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013972:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8013a04 <__ieee754_powf+0x588>
 8013976:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8013a08 <__ieee754_powf+0x58c>
 801397a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801397e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8013a0c <__ieee754_powf+0x590>
 8013982:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013986:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8013a10 <__ieee754_powf+0x594>
 801398a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801398e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8013a14 <__ieee754_powf+0x598>
 8013992:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013996:	eeb0 6a66 	vmov.f32	s12, s13
 801399a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801399e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80139a2:	ee66 5a86 	vmul.f32	s11, s13, s12
 80139a6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80139aa:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80139ae:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80139b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80139ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139be:	ee10 3a10 	vmov	r3, s0
 80139c2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80139c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80139ca:	da06      	bge.n	80139da <__ieee754_powf+0x55e>
 80139cc:	f000 f97c 	bl	8013cc8 <scalbnf>
 80139d0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139d4:	e56a      	b.n	80134ac <__ieee754_powf+0x30>
 80139d6:	2000      	movs	r0, #0
 80139d8:	e7a5      	b.n	8013926 <__ieee754_powf+0x4aa>
 80139da:	ee00 3a10 	vmov	s0, r3
 80139de:	e7f7      	b.n	80139d0 <__ieee754_powf+0x554>
 80139e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80139e4:	e562      	b.n	80134ac <__ieee754_powf+0x30>
 80139e6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8013a18 <__ieee754_powf+0x59c>
 80139ea:	e55f      	b.n	80134ac <__ieee754_powf+0x30>
 80139ec:	eeb0 0a48 	vmov.f32	s0, s16
 80139f0:	e55c      	b.n	80134ac <__ieee754_powf+0x30>
 80139f2:	bf00      	nop
 80139f4:	ff800000 	.word	0xff800000
 80139f8:	3f317218 	.word	0x3f317218
 80139fc:	3f317200 	.word	0x3f317200
 8013a00:	35bfbe8c 	.word	0x35bfbe8c
 8013a04:	b5ddea0e 	.word	0xb5ddea0e
 8013a08:	3331bb4c 	.word	0x3331bb4c
 8013a0c:	388ab355 	.word	0x388ab355
 8013a10:	bb360b61 	.word	0xbb360b61
 8013a14:	3e2aaaab 	.word	0x3e2aaaab
 8013a18:	00000000 	.word	0x00000000

08013a1c <__ieee754_rem_pio2f>:
 8013a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a1e:	ee10 6a10 	vmov	r6, s0
 8013a22:	4b88      	ldr	r3, [pc, #544]	@ (8013c44 <__ieee754_rem_pio2f+0x228>)
 8013a24:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013a28:	429d      	cmp	r5, r3
 8013a2a:	b087      	sub	sp, #28
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	d805      	bhi.n	8013a3c <__ieee754_rem_pio2f+0x20>
 8013a30:	2300      	movs	r3, #0
 8013a32:	ed80 0a00 	vstr	s0, [r0]
 8013a36:	6043      	str	r3, [r0, #4]
 8013a38:	2000      	movs	r0, #0
 8013a3a:	e022      	b.n	8013a82 <__ieee754_rem_pio2f+0x66>
 8013a3c:	4b82      	ldr	r3, [pc, #520]	@ (8013c48 <__ieee754_rem_pio2f+0x22c>)
 8013a3e:	429d      	cmp	r5, r3
 8013a40:	d83a      	bhi.n	8013ab8 <__ieee754_rem_pio2f+0x9c>
 8013a42:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013a46:	2e00      	cmp	r6, #0
 8013a48:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013c4c <__ieee754_rem_pio2f+0x230>
 8013a4c:	4a80      	ldr	r2, [pc, #512]	@ (8013c50 <__ieee754_rem_pio2f+0x234>)
 8013a4e:	f023 030f 	bic.w	r3, r3, #15
 8013a52:	dd18      	ble.n	8013a86 <__ieee754_rem_pio2f+0x6a>
 8013a54:	4293      	cmp	r3, r2
 8013a56:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013a5a:	bf09      	itett	eq
 8013a5c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013c54 <__ieee754_rem_pio2f+0x238>
 8013a60:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013c58 <__ieee754_rem_pio2f+0x23c>
 8013a64:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013c5c <__ieee754_rem_pio2f+0x240>
 8013a68:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013a6c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a74:	ed80 7a00 	vstr	s14, [r0]
 8013a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a7c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013a80:	2001      	movs	r0, #1
 8013a82:	b007      	add	sp, #28
 8013a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a86:	4293      	cmp	r3, r2
 8013a88:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013a8c:	bf09      	itett	eq
 8013a8e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013c54 <__ieee754_rem_pio2f+0x238>
 8013a92:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013c58 <__ieee754_rem_pio2f+0x23c>
 8013a96:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013c5c <__ieee754_rem_pio2f+0x240>
 8013a9a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013a9e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013aa6:	ed80 7a00 	vstr	s14, [r0]
 8013aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013aae:	edc0 7a01 	vstr	s15, [r0, #4]
 8013ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab6:	e7e4      	b.n	8013a82 <__ieee754_rem_pio2f+0x66>
 8013ab8:	4b69      	ldr	r3, [pc, #420]	@ (8013c60 <__ieee754_rem_pio2f+0x244>)
 8013aba:	429d      	cmp	r5, r3
 8013abc:	d873      	bhi.n	8013ba6 <__ieee754_rem_pio2f+0x18a>
 8013abe:	f7ff f883 	bl	8012bc8 <fabsf>
 8013ac2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013c64 <__ieee754_rem_pio2f+0x248>
 8013ac6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013aca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ad6:	ee17 0a90 	vmov	r0, s15
 8013ada:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013c4c <__ieee754_rem_pio2f+0x230>
 8013ade:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013ae2:	281f      	cmp	r0, #31
 8013ae4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013c58 <__ieee754_rem_pio2f+0x23c>
 8013ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013aec:	eeb1 6a47 	vneg.f32	s12, s14
 8013af0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013af4:	ee16 1a90 	vmov	r1, s13
 8013af8:	dc09      	bgt.n	8013b0e <__ieee754_rem_pio2f+0xf2>
 8013afa:	4a5b      	ldr	r2, [pc, #364]	@ (8013c68 <__ieee754_rem_pio2f+0x24c>)
 8013afc:	1e47      	subs	r7, r0, #1
 8013afe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013b02:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d107      	bne.n	8013b1e <__ieee754_rem_pio2f+0x102>
 8013b0e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013b12:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013b16:	2a08      	cmp	r2, #8
 8013b18:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013b1c:	dc14      	bgt.n	8013b48 <__ieee754_rem_pio2f+0x12c>
 8013b1e:	6021      	str	r1, [r4, #0]
 8013b20:	ed94 7a00 	vldr	s14, [r4]
 8013b24:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013b28:	2e00      	cmp	r6, #0
 8013b2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013b2e:	ed84 0a01 	vstr	s0, [r4, #4]
 8013b32:	daa6      	bge.n	8013a82 <__ieee754_rem_pio2f+0x66>
 8013b34:	eeb1 7a47 	vneg.f32	s14, s14
 8013b38:	eeb1 0a40 	vneg.f32	s0, s0
 8013b3c:	ed84 7a00 	vstr	s14, [r4]
 8013b40:	ed84 0a01 	vstr	s0, [r4, #4]
 8013b44:	4240      	negs	r0, r0
 8013b46:	e79c      	b.n	8013a82 <__ieee754_rem_pio2f+0x66>
 8013b48:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013c54 <__ieee754_rem_pio2f+0x238>
 8013b4c:	eef0 6a40 	vmov.f32	s13, s0
 8013b50:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013b54:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013b58:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013b5c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013c5c <__ieee754_rem_pio2f+0x240>
 8013b60:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013b64:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013b68:	ee15 2a90 	vmov	r2, s11
 8013b6c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013b70:	1a5b      	subs	r3, r3, r1
 8013b72:	2b19      	cmp	r3, #25
 8013b74:	dc04      	bgt.n	8013b80 <__ieee754_rem_pio2f+0x164>
 8013b76:	edc4 5a00 	vstr	s11, [r4]
 8013b7a:	eeb0 0a66 	vmov.f32	s0, s13
 8013b7e:	e7cf      	b.n	8013b20 <__ieee754_rem_pio2f+0x104>
 8013b80:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013c6c <__ieee754_rem_pio2f+0x250>
 8013b84:	eeb0 0a66 	vmov.f32	s0, s13
 8013b88:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013b8c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013b90:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013c70 <__ieee754_rem_pio2f+0x254>
 8013b94:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013b98:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013b9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013ba0:	ed84 7a00 	vstr	s14, [r4]
 8013ba4:	e7bc      	b.n	8013b20 <__ieee754_rem_pio2f+0x104>
 8013ba6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013baa:	d306      	bcc.n	8013bba <__ieee754_rem_pio2f+0x19e>
 8013bac:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013bb0:	edc0 7a01 	vstr	s15, [r0, #4]
 8013bb4:	edc0 7a00 	vstr	s15, [r0]
 8013bb8:	e73e      	b.n	8013a38 <__ieee754_rem_pio2f+0x1c>
 8013bba:	15ea      	asrs	r2, r5, #23
 8013bbc:	3a86      	subs	r2, #134	@ 0x86
 8013bbe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013bc2:	ee07 3a90 	vmov	s15, r3
 8013bc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013bca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013c74 <__ieee754_rem_pio2f+0x258>
 8013bce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bd6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013bda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013be2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013be6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bea:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013bee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfa:	edcd 7a05 	vstr	s15, [sp, #20]
 8013bfe:	d11e      	bne.n	8013c3e <__ieee754_rem_pio2f+0x222>
 8013c00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c08:	bf0c      	ite	eq
 8013c0a:	2301      	moveq	r3, #1
 8013c0c:	2302      	movne	r3, #2
 8013c0e:	491a      	ldr	r1, [pc, #104]	@ (8013c78 <__ieee754_rem_pio2f+0x25c>)
 8013c10:	9101      	str	r1, [sp, #4]
 8013c12:	2102      	movs	r1, #2
 8013c14:	9100      	str	r1, [sp, #0]
 8013c16:	a803      	add	r0, sp, #12
 8013c18:	4621      	mov	r1, r4
 8013c1a:	f000 f8e1 	bl	8013de0 <__kernel_rem_pio2f>
 8013c1e:	2e00      	cmp	r6, #0
 8013c20:	f6bf af2f 	bge.w	8013a82 <__ieee754_rem_pio2f+0x66>
 8013c24:	edd4 7a00 	vldr	s15, [r4]
 8013c28:	eef1 7a67 	vneg.f32	s15, s15
 8013c2c:	edc4 7a00 	vstr	s15, [r4]
 8013c30:	edd4 7a01 	vldr	s15, [r4, #4]
 8013c34:	eef1 7a67 	vneg.f32	s15, s15
 8013c38:	edc4 7a01 	vstr	s15, [r4, #4]
 8013c3c:	e782      	b.n	8013b44 <__ieee754_rem_pio2f+0x128>
 8013c3e:	2303      	movs	r3, #3
 8013c40:	e7e5      	b.n	8013c0e <__ieee754_rem_pio2f+0x1f2>
 8013c42:	bf00      	nop
 8013c44:	3f490fd8 	.word	0x3f490fd8
 8013c48:	4016cbe3 	.word	0x4016cbe3
 8013c4c:	3fc90f80 	.word	0x3fc90f80
 8013c50:	3fc90fd0 	.word	0x3fc90fd0
 8013c54:	37354400 	.word	0x37354400
 8013c58:	37354443 	.word	0x37354443
 8013c5c:	2e85a308 	.word	0x2e85a308
 8013c60:	43490f80 	.word	0x43490f80
 8013c64:	3f22f984 	.word	0x3f22f984
 8013c68:	0801a480 	.word	0x0801a480
 8013c6c:	2e85a300 	.word	0x2e85a300
 8013c70:	248d3132 	.word	0x248d3132
 8013c74:	43800000 	.word	0x43800000
 8013c78:	0801a500 	.word	0x0801a500

08013c7c <hypotf>:
 8013c7c:	b508      	push	{r3, lr}
 8013c7e:	ed2d 8b04 	vpush	{d8-d9}
 8013c82:	eeb0 9a40 	vmov.f32	s18, s0
 8013c86:	eef0 8a60 	vmov.f32	s17, s1
 8013c8a:	f000 fb1b 	bl	80142c4 <__ieee754_hypotf>
 8013c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8013c92:	f7fe ffe7 	bl	8012c64 <finitef>
 8013c96:	b978      	cbnz	r0, 8013cb8 <hypotf+0x3c>
 8013c98:	eeb0 0a49 	vmov.f32	s0, s18
 8013c9c:	f7fe ffe2 	bl	8012c64 <finitef>
 8013ca0:	b150      	cbz	r0, 8013cb8 <hypotf+0x3c>
 8013ca2:	eeb0 0a68 	vmov.f32	s0, s17
 8013ca6:	f7fe ffdd 	bl	8012c64 <finitef>
 8013caa:	b128      	cbz	r0, 8013cb8 <hypotf+0x3c>
 8013cac:	f7fc ff48 	bl	8010b40 <__errno>
 8013cb0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8013cc4 <hypotf+0x48>
 8013cb4:	2322      	movs	r3, #34	@ 0x22
 8013cb6:	6003      	str	r3, [r0, #0]
 8013cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8013cbc:	ecbd 8b04 	vpop	{d8-d9}
 8013cc0:	bd08      	pop	{r3, pc}
 8013cc2:	bf00      	nop
 8013cc4:	7f800000 	.word	0x7f800000

08013cc8 <scalbnf>:
 8013cc8:	ee10 3a10 	vmov	r3, s0
 8013ccc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013cd0:	d02b      	beq.n	8013d2a <scalbnf+0x62>
 8013cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013cd6:	d302      	bcc.n	8013cde <scalbnf+0x16>
 8013cd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013cdc:	4770      	bx	lr
 8013cde:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013ce2:	d123      	bne.n	8013d2c <scalbnf+0x64>
 8013ce4:	4b24      	ldr	r3, [pc, #144]	@ (8013d78 <scalbnf+0xb0>)
 8013ce6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013d7c <scalbnf+0xb4>
 8013cea:	4298      	cmp	r0, r3
 8013cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013cf0:	db17      	blt.n	8013d22 <scalbnf+0x5a>
 8013cf2:	ee10 3a10 	vmov	r3, s0
 8013cf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013cfa:	3a19      	subs	r2, #25
 8013cfc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013d00:	4288      	cmp	r0, r1
 8013d02:	dd15      	ble.n	8013d30 <scalbnf+0x68>
 8013d04:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013d80 <scalbnf+0xb8>
 8013d08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013d84 <scalbnf+0xbc>
 8013d0c:	ee10 3a10 	vmov	r3, s0
 8013d10:	eeb0 7a67 	vmov.f32	s14, s15
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	bfb8      	it	lt
 8013d18:	eef0 7a66 	vmovlt.f32	s15, s13
 8013d1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013d20:	4770      	bx	lr
 8013d22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013d88 <scalbnf+0xc0>
 8013d26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d2a:	4770      	bx	lr
 8013d2c:	0dd2      	lsrs	r2, r2, #23
 8013d2e:	e7e5      	b.n	8013cfc <scalbnf+0x34>
 8013d30:	4410      	add	r0, r2
 8013d32:	28fe      	cmp	r0, #254	@ 0xfe
 8013d34:	dce6      	bgt.n	8013d04 <scalbnf+0x3c>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	dd06      	ble.n	8013d48 <scalbnf+0x80>
 8013d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d42:	ee00 3a10 	vmov	s0, r3
 8013d46:	4770      	bx	lr
 8013d48:	f110 0f16 	cmn.w	r0, #22
 8013d4c:	da09      	bge.n	8013d62 <scalbnf+0x9a>
 8013d4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013d88 <scalbnf+0xc0>
 8013d52:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013d8c <scalbnf+0xc4>
 8013d56:	ee10 3a10 	vmov	r3, s0
 8013d5a:	eeb0 7a67 	vmov.f32	s14, s15
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	e7d9      	b.n	8013d16 <scalbnf+0x4e>
 8013d62:	3019      	adds	r0, #25
 8013d64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013d68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013d6c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013d90 <scalbnf+0xc8>
 8013d70:	ee07 3a90 	vmov	s15, r3
 8013d74:	e7d7      	b.n	8013d26 <scalbnf+0x5e>
 8013d76:	bf00      	nop
 8013d78:	ffff3cb0 	.word	0xffff3cb0
 8013d7c:	4c000000 	.word	0x4c000000
 8013d80:	7149f2ca 	.word	0x7149f2ca
 8013d84:	f149f2ca 	.word	0xf149f2ca
 8013d88:	0da24260 	.word	0x0da24260
 8013d8c:	8da24260 	.word	0x8da24260
 8013d90:	33000000 	.word	0x33000000

08013d94 <with_errnof>:
 8013d94:	b510      	push	{r4, lr}
 8013d96:	ed2d 8b02 	vpush	{d8}
 8013d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8013d9e:	4604      	mov	r4, r0
 8013da0:	f7fc fece 	bl	8010b40 <__errno>
 8013da4:	eeb0 0a48 	vmov.f32	s0, s16
 8013da8:	ecbd 8b02 	vpop	{d8}
 8013dac:	6004      	str	r4, [r0, #0]
 8013dae:	bd10      	pop	{r4, pc}

08013db0 <xflowf>:
 8013db0:	b130      	cbz	r0, 8013dc0 <xflowf+0x10>
 8013db2:	eef1 7a40 	vneg.f32	s15, s0
 8013db6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013dba:	2022      	movs	r0, #34	@ 0x22
 8013dbc:	f7ff bfea 	b.w	8013d94 <with_errnof>
 8013dc0:	eef0 7a40 	vmov.f32	s15, s0
 8013dc4:	e7f7      	b.n	8013db6 <xflowf+0x6>
	...

08013dc8 <__math_uflowf>:
 8013dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013dd0 <__math_uflowf+0x8>
 8013dcc:	f7ff bff0 	b.w	8013db0 <xflowf>
 8013dd0:	10000000 	.word	0x10000000

08013dd4 <__math_oflowf>:
 8013dd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013ddc <__math_oflowf+0x8>
 8013dd8:	f7ff bfea 	b.w	8013db0 <xflowf>
 8013ddc:	70000000 	.word	0x70000000

08013de0 <__kernel_rem_pio2f>:
 8013de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	ed2d 8b04 	vpush	{d8-d9}
 8013de8:	b0d9      	sub	sp, #356	@ 0x164
 8013dea:	4690      	mov	r8, r2
 8013dec:	9001      	str	r0, [sp, #4]
 8013dee:	4ab9      	ldr	r2, [pc, #740]	@ (80140d4 <__kernel_rem_pio2f+0x2f4>)
 8013df0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013df2:	f118 0f04 	cmn.w	r8, #4
 8013df6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	f103 3bff 	add.w	fp, r3, #4294967295
 8013e00:	db27      	blt.n	8013e52 <__kernel_rem_pio2f+0x72>
 8013e02:	f1b8 0203 	subs.w	r2, r8, #3
 8013e06:	bf48      	it	mi
 8013e08:	f108 0204 	addmi.w	r2, r8, #4
 8013e0c:	10d2      	asrs	r2, r2, #3
 8013e0e:	1c55      	adds	r5, r2, #1
 8013e10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013e12:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 8013e16:	00e8      	lsls	r0, r5, #3
 8013e18:	eba2 060b 	sub.w	r6, r2, fp
 8013e1c:	9002      	str	r0, [sp, #8]
 8013e1e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013e22:	eb0a 0c0b 	add.w	ip, sl, fp
 8013e26:	ac1c      	add	r4, sp, #112	@ 0x70
 8013e28:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	4560      	cmp	r0, ip
 8013e30:	dd11      	ble.n	8013e56 <__kernel_rem_pio2f+0x76>
 8013e32:	a91c      	add	r1, sp, #112	@ 0x70
 8013e34:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013e38:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013e3c:	f04f 0c00 	mov.w	ip, #0
 8013e40:	45d4      	cmp	ip, sl
 8013e42:	dc27      	bgt.n	8013e94 <__kernel_rem_pio2f+0xb4>
 8013e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013e48:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 8013e4c:	4606      	mov	r6, r0
 8013e4e:	2400      	movs	r4, #0
 8013e50:	e016      	b.n	8013e80 <__kernel_rem_pio2f+0xa0>
 8013e52:	2200      	movs	r2, #0
 8013e54:	e7db      	b.n	8013e0e <__kernel_rem_pio2f+0x2e>
 8013e56:	42c6      	cmn	r6, r0
 8013e58:	bf5d      	ittte	pl
 8013e5a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013e5e:	ee07 1a90 	vmovpl	s15, r1
 8013e62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013e66:	eef0 7a47 	vmovmi.f32	s15, s14
 8013e6a:	ece4 7a01 	vstmia	r4!, {s15}
 8013e6e:	3001      	adds	r0, #1
 8013e70:	e7dd      	b.n	8013e2e <__kernel_rem_pio2f+0x4e>
 8013e72:	ecfe 6a01 	vldmia	lr!, {s13}
 8013e76:	ed96 7a00 	vldr	s14, [r6]
 8013e7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013e7e:	3401      	adds	r4, #1
 8013e80:	455c      	cmp	r4, fp
 8013e82:	f1a6 0604 	sub.w	r6, r6, #4
 8013e86:	ddf4      	ble.n	8013e72 <__kernel_rem_pio2f+0x92>
 8013e88:	ece9 7a01 	vstmia	r9!, {s15}
 8013e8c:	f10c 0c01 	add.w	ip, ip, #1
 8013e90:	3004      	adds	r0, #4
 8013e92:	e7d5      	b.n	8013e40 <__kernel_rem_pio2f+0x60>
 8013e94:	a908      	add	r1, sp, #32
 8013e96:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e9a:	9104      	str	r1, [sp, #16]
 8013e9c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013e9e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80140e0 <__kernel_rem_pio2f+0x300>
 8013ea2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80140dc <__kernel_rem_pio2f+0x2fc>
 8013ea6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013eaa:	9203      	str	r2, [sp, #12]
 8013eac:	4654      	mov	r4, sl
 8013eae:	00a2      	lsls	r2, r4, #2
 8013eb0:	9205      	str	r2, [sp, #20]
 8013eb2:	aa58      	add	r2, sp, #352	@ 0x160
 8013eb4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013eb8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013ebc:	a944      	add	r1, sp, #272	@ 0x110
 8013ebe:	aa08      	add	r2, sp, #32
 8013ec0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013ec4:	4694      	mov	ip, r2
 8013ec6:	4626      	mov	r6, r4
 8013ec8:	2e00      	cmp	r6, #0
 8013eca:	f1a0 0004 	sub.w	r0, r0, #4
 8013ece:	dc4c      	bgt.n	8013f6a <__kernel_rem_pio2f+0x18a>
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013ed6:	f7ff fef7 	bl	8013cc8 <scalbnf>
 8013eda:	eeb0 8a40 	vmov.f32	s16, s0
 8013ede:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013ee2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013ee6:	f7ff f89b 	bl	8013020 <floorf>
 8013eea:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013eee:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013ef2:	2d00      	cmp	r5, #0
 8013ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ef8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013efc:	ee17 9a90 	vmov	r9, s15
 8013f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f04:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013f08:	dd41      	ble.n	8013f8e <__kernel_rem_pio2f+0x1ae>
 8013f0a:	f104 3cff 	add.w	ip, r4, #4294967295
 8013f0e:	a908      	add	r1, sp, #32
 8013f10:	f1c5 0e08 	rsb	lr, r5, #8
 8013f14:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013f18:	fa46 f00e 	asr.w	r0, r6, lr
 8013f1c:	4481      	add	r9, r0
 8013f1e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013f22:	1a36      	subs	r6, r6, r0
 8013f24:	f1c5 0007 	rsb	r0, r5, #7
 8013f28:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013f2c:	4106      	asrs	r6, r0
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	dd3c      	ble.n	8013fac <__kernel_rem_pio2f+0x1cc>
 8013f32:	f04f 0e00 	mov.w	lr, #0
 8013f36:	f109 0901 	add.w	r9, r9, #1
 8013f3a:	4670      	mov	r0, lr
 8013f3c:	4574      	cmp	r4, lr
 8013f3e:	dc68      	bgt.n	8014012 <__kernel_rem_pio2f+0x232>
 8013f40:	2d00      	cmp	r5, #0
 8013f42:	dd03      	ble.n	8013f4c <__kernel_rem_pio2f+0x16c>
 8013f44:	2d01      	cmp	r5, #1
 8013f46:	d074      	beq.n	8014032 <__kernel_rem_pio2f+0x252>
 8013f48:	2d02      	cmp	r5, #2
 8013f4a:	d07d      	beq.n	8014048 <__kernel_rem_pio2f+0x268>
 8013f4c:	2e02      	cmp	r6, #2
 8013f4e:	d12d      	bne.n	8013fac <__kernel_rem_pio2f+0x1cc>
 8013f50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013f54:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013f58:	b340      	cbz	r0, 8013fac <__kernel_rem_pio2f+0x1cc>
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	9306      	str	r3, [sp, #24]
 8013f5e:	f7ff feb3 	bl	8013cc8 <scalbnf>
 8013f62:	9b06      	ldr	r3, [sp, #24]
 8013f64:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013f68:	e020      	b.n	8013fac <__kernel_rem_pio2f+0x1cc>
 8013f6a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013f6e:	3e01      	subs	r6, #1
 8013f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f78:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013f7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f80:	ecac 0a01 	vstmia	ip!, {s0}
 8013f84:	ed90 0a00 	vldr	s0, [r0]
 8013f88:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013f8c:	e79c      	b.n	8013ec8 <__kernel_rem_pio2f+0xe8>
 8013f8e:	d105      	bne.n	8013f9c <__kernel_rem_pio2f+0x1bc>
 8013f90:	1e60      	subs	r0, r4, #1
 8013f92:	a908      	add	r1, sp, #32
 8013f94:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013f98:	11f6      	asrs	r6, r6, #7
 8013f9a:	e7c8      	b.n	8013f2e <__kernel_rem_pio2f+0x14e>
 8013f9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013fa0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa8:	da31      	bge.n	801400e <__kernel_rem_pio2f+0x22e>
 8013faa:	2600      	movs	r6, #0
 8013fac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb4:	f040 8098 	bne.w	80140e8 <__kernel_rem_pio2f+0x308>
 8013fb8:	1e60      	subs	r0, r4, #1
 8013fba:	2200      	movs	r2, #0
 8013fbc:	4550      	cmp	r0, sl
 8013fbe:	da4b      	bge.n	8014058 <__kernel_rem_pio2f+0x278>
 8013fc0:	2a00      	cmp	r2, #0
 8013fc2:	d065      	beq.n	8014090 <__kernel_rem_pio2f+0x2b0>
 8013fc4:	3c01      	subs	r4, #1
 8013fc6:	ab08      	add	r3, sp, #32
 8013fc8:	3d08      	subs	r5, #8
 8013fca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d0f8      	beq.n	8013fc4 <__kernel_rem_pio2f+0x1e4>
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013fd8:	f7ff fe76 	bl	8013cc8 <scalbnf>
 8013fdc:	1c63      	adds	r3, r4, #1
 8013fde:	aa44      	add	r2, sp, #272	@ 0x110
 8013fe0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80140e0 <__kernel_rem_pio2f+0x300>
 8013fe4:	0099      	lsls	r1, r3, #2
 8013fe6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013fea:	4623      	mov	r3, r4
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f280 80a9 	bge.w	8014144 <__kernel_rem_pio2f+0x364>
 8013ff2:	4623      	mov	r3, r4
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f2c0 80c7 	blt.w	8014188 <__kernel_rem_pio2f+0x3a8>
 8013ffa:	aa44      	add	r2, sp, #272	@ 0x110
 8013ffc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014000:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80140d8 <__kernel_rem_pio2f+0x2f8>
 8014004:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 8014008:	2000      	movs	r0, #0
 801400a:	1ae2      	subs	r2, r4, r3
 801400c:	e0b1      	b.n	8014172 <__kernel_rem_pio2f+0x392>
 801400e:	2602      	movs	r6, #2
 8014010:	e78f      	b.n	8013f32 <__kernel_rem_pio2f+0x152>
 8014012:	f852 1b04 	ldr.w	r1, [r2], #4
 8014016:	b948      	cbnz	r0, 801402c <__kernel_rem_pio2f+0x24c>
 8014018:	b121      	cbz	r1, 8014024 <__kernel_rem_pio2f+0x244>
 801401a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801401e:	f842 1c04 	str.w	r1, [r2, #-4]
 8014022:	2101      	movs	r1, #1
 8014024:	f10e 0e01 	add.w	lr, lr, #1
 8014028:	4608      	mov	r0, r1
 801402a:	e787      	b.n	8013f3c <__kernel_rem_pio2f+0x15c>
 801402c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014030:	e7f5      	b.n	801401e <__kernel_rem_pio2f+0x23e>
 8014032:	f104 3cff 	add.w	ip, r4, #4294967295
 8014036:	aa08      	add	r2, sp, #32
 8014038:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801403c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014040:	a908      	add	r1, sp, #32
 8014042:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014046:	e781      	b.n	8013f4c <__kernel_rem_pio2f+0x16c>
 8014048:	f104 3cff 	add.w	ip, r4, #4294967295
 801404c:	aa08      	add	r2, sp, #32
 801404e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014052:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014056:	e7f3      	b.n	8014040 <__kernel_rem_pio2f+0x260>
 8014058:	a908      	add	r1, sp, #32
 801405a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801405e:	3801      	subs	r0, #1
 8014060:	430a      	orrs	r2, r1
 8014062:	e7ab      	b.n	8013fbc <__kernel_rem_pio2f+0x1dc>
 8014064:	3201      	adds	r2, #1
 8014066:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801406a:	2e00      	cmp	r6, #0
 801406c:	d0fa      	beq.n	8014064 <__kernel_rem_pio2f+0x284>
 801406e:	9905      	ldr	r1, [sp, #20]
 8014070:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014074:	eb0d 0001 	add.w	r0, sp, r1
 8014078:	18e6      	adds	r6, r4, r3
 801407a:	a91c      	add	r1, sp, #112	@ 0x70
 801407c:	f104 0c01 	add.w	ip, r4, #1
 8014080:	384c      	subs	r0, #76	@ 0x4c
 8014082:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014086:	4422      	add	r2, r4
 8014088:	4562      	cmp	r2, ip
 801408a:	da04      	bge.n	8014096 <__kernel_rem_pio2f+0x2b6>
 801408c:	4614      	mov	r4, r2
 801408e:	e70e      	b.n	8013eae <__kernel_rem_pio2f+0xce>
 8014090:	9804      	ldr	r0, [sp, #16]
 8014092:	2201      	movs	r2, #1
 8014094:	e7e7      	b.n	8014066 <__kernel_rem_pio2f+0x286>
 8014096:	9903      	ldr	r1, [sp, #12]
 8014098:	f8dd e004 	ldr.w	lr, [sp, #4]
 801409c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80140a0:	9105      	str	r1, [sp, #20]
 80140a2:	ee07 1a90 	vmov	s15, r1
 80140a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140aa:	2400      	movs	r4, #0
 80140ac:	ece6 7a01 	vstmia	r6!, {s15}
 80140b0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 80140b4:	46b1      	mov	r9, r6
 80140b6:	455c      	cmp	r4, fp
 80140b8:	dd04      	ble.n	80140c4 <__kernel_rem_pio2f+0x2e4>
 80140ba:	ece0 7a01 	vstmia	r0!, {s15}
 80140be:	f10c 0c01 	add.w	ip, ip, #1
 80140c2:	e7e1      	b.n	8014088 <__kernel_rem_pio2f+0x2a8>
 80140c4:	ecfe 6a01 	vldmia	lr!, {s13}
 80140c8:	ed39 7a01 	vldmdb	r9!, {s14}
 80140cc:	3401      	adds	r4, #1
 80140ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140d2:	e7f0      	b.n	80140b6 <__kernel_rem_pio2f+0x2d6>
 80140d4:	0801a844 	.word	0x0801a844
 80140d8:	0801a818 	.word	0x0801a818
 80140dc:	43800000 	.word	0x43800000
 80140e0:	3b800000 	.word	0x3b800000
 80140e4:	00000000 	.word	0x00000000
 80140e8:	9b02      	ldr	r3, [sp, #8]
 80140ea:	eeb0 0a48 	vmov.f32	s0, s16
 80140ee:	eba3 0008 	sub.w	r0, r3, r8
 80140f2:	f7ff fde9 	bl	8013cc8 <scalbnf>
 80140f6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80140dc <__kernel_rem_pio2f+0x2fc>
 80140fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80140fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014102:	db19      	blt.n	8014138 <__kernel_rem_pio2f+0x358>
 8014104:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80140e0 <__kernel_rem_pio2f+0x300>
 8014108:	ee60 7a27 	vmul.f32	s15, s0, s15
 801410c:	aa08      	add	r2, sp, #32
 801410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014112:	3508      	adds	r5, #8
 8014114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014118:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801411c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014120:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014124:	ee10 3a10 	vmov	r3, s0
 8014128:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801412c:	ee17 3a90 	vmov	r3, s15
 8014130:	3401      	adds	r4, #1
 8014132:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014136:	e74c      	b.n	8013fd2 <__kernel_rem_pio2f+0x1f2>
 8014138:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801413c:	aa08      	add	r2, sp, #32
 801413e:	ee10 3a10 	vmov	r3, s0
 8014142:	e7f6      	b.n	8014132 <__kernel_rem_pio2f+0x352>
 8014144:	a808      	add	r0, sp, #32
 8014146:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801414a:	9001      	str	r0, [sp, #4]
 801414c:	ee07 0a90 	vmov	s15, r0
 8014150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014154:	3b01      	subs	r3, #1
 8014156:	ee67 7a80 	vmul.f32	s15, s15, s0
 801415a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801415e:	ed62 7a01 	vstmdb	r2!, {s15}
 8014162:	e743      	b.n	8013fec <__kernel_rem_pio2f+0x20c>
 8014164:	ecfc 6a01 	vldmia	ip!, {s13}
 8014168:	ecb5 7a01 	vldmia	r5!, {s14}
 801416c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014170:	3001      	adds	r0, #1
 8014172:	4550      	cmp	r0, sl
 8014174:	dc01      	bgt.n	801417a <__kernel_rem_pio2f+0x39a>
 8014176:	4282      	cmp	r2, r0
 8014178:	daf4      	bge.n	8014164 <__kernel_rem_pio2f+0x384>
 801417a:	a858      	add	r0, sp, #352	@ 0x160
 801417c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014180:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014184:	3b01      	subs	r3, #1
 8014186:	e735      	b.n	8013ff4 <__kernel_rem_pio2f+0x214>
 8014188:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801418a:	2b02      	cmp	r3, #2
 801418c:	dc09      	bgt.n	80141a2 <__kernel_rem_pio2f+0x3c2>
 801418e:	2b00      	cmp	r3, #0
 8014190:	dc2b      	bgt.n	80141ea <__kernel_rem_pio2f+0x40a>
 8014192:	d044      	beq.n	801421e <__kernel_rem_pio2f+0x43e>
 8014194:	f009 0007 	and.w	r0, r9, #7
 8014198:	b059      	add	sp, #356	@ 0x164
 801419a:	ecbd 8b04 	vpop	{d8-d9}
 801419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d1f5      	bne.n	8014194 <__kernel_rem_pio2f+0x3b4>
 80141a8:	aa30      	add	r2, sp, #192	@ 0xc0
 80141aa:	1f0b      	subs	r3, r1, #4
 80141ac:	4413      	add	r3, r2
 80141ae:	461a      	mov	r2, r3
 80141b0:	4620      	mov	r0, r4
 80141b2:	2800      	cmp	r0, #0
 80141b4:	f1a2 0204 	sub.w	r2, r2, #4
 80141b8:	dc52      	bgt.n	8014260 <__kernel_rem_pio2f+0x480>
 80141ba:	4622      	mov	r2, r4
 80141bc:	2a01      	cmp	r2, #1
 80141be:	f1a3 0304 	sub.w	r3, r3, #4
 80141c2:	dc5d      	bgt.n	8014280 <__kernel_rem_pio2f+0x4a0>
 80141c4:	ab30      	add	r3, sp, #192	@ 0xc0
 80141c6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 80141ca:	440b      	add	r3, r1
 80141cc:	2c01      	cmp	r4, #1
 80141ce:	dc67      	bgt.n	80142a0 <__kernel_rem_pio2f+0x4c0>
 80141d0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80141d4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80141d8:	2e00      	cmp	r6, #0
 80141da:	d167      	bne.n	80142ac <__kernel_rem_pio2f+0x4cc>
 80141dc:	edc7 6a00 	vstr	s13, [r7]
 80141e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80141e4:	edc7 7a02 	vstr	s15, [r7, #8]
 80141e8:	e7d4      	b.n	8014194 <__kernel_rem_pio2f+0x3b4>
 80141ea:	ab30      	add	r3, sp, #192	@ 0xc0
 80141ec:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 80141f0:	440b      	add	r3, r1
 80141f2:	4622      	mov	r2, r4
 80141f4:	2a00      	cmp	r2, #0
 80141f6:	da24      	bge.n	8014242 <__kernel_rem_pio2f+0x462>
 80141f8:	b34e      	cbz	r6, 801424e <__kernel_rem_pio2f+0x46e>
 80141fa:	eef1 7a47 	vneg.f32	s15, s14
 80141fe:	edc7 7a00 	vstr	s15, [r7]
 8014202:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014206:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801420a:	aa31      	add	r2, sp, #196	@ 0xc4
 801420c:	2301      	movs	r3, #1
 801420e:	429c      	cmp	r4, r3
 8014210:	da20      	bge.n	8014254 <__kernel_rem_pio2f+0x474>
 8014212:	b10e      	cbz	r6, 8014218 <__kernel_rem_pio2f+0x438>
 8014214:	eef1 7a67 	vneg.f32	s15, s15
 8014218:	edc7 7a01 	vstr	s15, [r7, #4]
 801421c:	e7ba      	b.n	8014194 <__kernel_rem_pio2f+0x3b4>
 801421e:	ab30      	add	r3, sp, #192	@ 0xc0
 8014220:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80140e4 <__kernel_rem_pio2f+0x304>
 8014224:	440b      	add	r3, r1
 8014226:	2c00      	cmp	r4, #0
 8014228:	da05      	bge.n	8014236 <__kernel_rem_pio2f+0x456>
 801422a:	b10e      	cbz	r6, 8014230 <__kernel_rem_pio2f+0x450>
 801422c:	eef1 7a67 	vneg.f32	s15, s15
 8014230:	edc7 7a00 	vstr	s15, [r7]
 8014234:	e7ae      	b.n	8014194 <__kernel_rem_pio2f+0x3b4>
 8014236:	ed33 7a01 	vldmdb	r3!, {s14}
 801423a:	3c01      	subs	r4, #1
 801423c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014240:	e7f1      	b.n	8014226 <__kernel_rem_pio2f+0x446>
 8014242:	ed73 7a01 	vldmdb	r3!, {s15}
 8014246:	3a01      	subs	r2, #1
 8014248:	ee37 7a27 	vadd.f32	s14, s14, s15
 801424c:	e7d2      	b.n	80141f4 <__kernel_rem_pio2f+0x414>
 801424e:	eef0 7a47 	vmov.f32	s15, s14
 8014252:	e7d4      	b.n	80141fe <__kernel_rem_pio2f+0x41e>
 8014254:	ecb2 7a01 	vldmia	r2!, {s14}
 8014258:	3301      	adds	r3, #1
 801425a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801425e:	e7d6      	b.n	801420e <__kernel_rem_pio2f+0x42e>
 8014260:	edd2 7a00 	vldr	s15, [r2]
 8014264:	edd2 6a01 	vldr	s13, [r2, #4]
 8014268:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801426c:	3801      	subs	r0, #1
 801426e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014272:	ed82 7a00 	vstr	s14, [r2]
 8014276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801427a:	edc2 7a01 	vstr	s15, [r2, #4]
 801427e:	e798      	b.n	80141b2 <__kernel_rem_pio2f+0x3d2>
 8014280:	edd3 7a00 	vldr	s15, [r3]
 8014284:	edd3 6a01 	vldr	s13, [r3, #4]
 8014288:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801428c:	3a01      	subs	r2, #1
 801428e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014292:	ed83 7a00 	vstr	s14, [r3]
 8014296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801429a:	edc3 7a01 	vstr	s15, [r3, #4]
 801429e:	e78d      	b.n	80141bc <__kernel_rem_pio2f+0x3dc>
 80142a0:	ed33 7a01 	vldmdb	r3!, {s14}
 80142a4:	3c01      	subs	r4, #1
 80142a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142aa:	e78f      	b.n	80141cc <__kernel_rem_pio2f+0x3ec>
 80142ac:	eef1 6a66 	vneg.f32	s13, s13
 80142b0:	eeb1 7a47 	vneg.f32	s14, s14
 80142b4:	edc7 6a00 	vstr	s13, [r7]
 80142b8:	ed87 7a01 	vstr	s14, [r7, #4]
 80142bc:	eef1 7a67 	vneg.f32	s15, s15
 80142c0:	e790      	b.n	80141e4 <__kernel_rem_pio2f+0x404>
 80142c2:	bf00      	nop

080142c4 <__ieee754_hypotf>:
 80142c4:	ee10 3a10 	vmov	r3, s0
 80142c8:	ee10 2a90 	vmov	r2, s1
 80142cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80142d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80142d4:	4293      	cmp	r3, r2
 80142d6:	bfbe      	ittt	lt
 80142d8:	4619      	movlt	r1, r3
 80142da:	4613      	movlt	r3, r2
 80142dc:	460a      	movlt	r2, r1
 80142de:	1a99      	subs	r1, r3, r2
 80142e0:	f1b1 6f70 	cmp.w	r1, #251658240	@ 0xf000000
 80142e4:	b510      	push	{r4, lr}
 80142e6:	ee00 3a10 	vmov	s0, r3
 80142ea:	ee06 2a90 	vmov	s13, r2
 80142ee:	dd02      	ble.n	80142f6 <__ieee754_hypotf+0x32>
 80142f0:	ee30 0a26 	vadd.f32	s0, s0, s13
 80142f4:	bd10      	pop	{r4, pc}
 80142f6:	f1b3 4fb1 	cmp.w	r3, #1484783616	@ 0x58800000
 80142fa:	dd48      	ble.n	801438e <__ieee754_hypotf+0xca>
 80142fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014300:	db0c      	blt.n	801431c <__ieee754_hypotf+0x58>
 8014302:	bf14      	ite	ne
 8014304:	ee30 0a26 	vaddne.f32	s0, s0, s13
 8014308:	ed9f 0a33 	vldreq	s0, [pc, #204]	@ 80143d8 <__ieee754_hypotf+0x114>
 801430c:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80143d8 <__ieee754_hypotf+0x114>
 8014310:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014314:	bf08      	it	eq
 8014316:	eeb0 0a67 	vmoveq.f32	s0, s15
 801431a:	e7eb      	b.n	80142f4 <__ieee754_hypotf+0x30>
 801431c:	f103 435e 	add.w	r3, r3, #3724541952	@ 0xde000000
 8014320:	f102 425e 	add.w	r2, r2, #3724541952	@ 0xde000000
 8014324:	ee00 3a10 	vmov	s0, r3
 8014328:	ee06 2a90 	vmov	s13, r2
 801432c:	2444      	movs	r4, #68	@ 0x44
 801432e:	f1b2 5f1a 	cmp.w	r2, #645922816	@ 0x26800000
 8014332:	da0b      	bge.n	801434c <__ieee754_hypotf+0x88>
 8014334:	2a00      	cmp	r2, #0
 8014336:	d0dd      	beq.n	80142f4 <__ieee754_hypotf+0x30>
 8014338:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 801433c:	da29      	bge.n	8014392 <__ieee754_hypotf+0xce>
 801433e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80143dc <__ieee754_hypotf+0x118>
 8014342:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014346:	ee20 0a27 	vmul.f32	s0, s0, s15
 801434a:	3c7e      	subs	r4, #126	@ 0x7e
 801434c:	ee30 6a66 	vsub.f32	s12, s0, s13
 8014350:	4923      	ldr	r1, [pc, #140]	@ (80143e0 <__ieee754_hypotf+0x11c>)
 8014352:	eef4 6ac6 	vcmpe.f32	s13, s12
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	d524      	bpl.n	80143a6 <__ieee754_hypotf+0xe2>
 801435c:	400b      	ands	r3, r1
 801435e:	ee07 3a90 	vmov	s15, r3
 8014362:	ee30 7a27 	vadd.f32	s14, s0, s15
 8014366:	ee30 0a67 	vsub.f32	s0, s0, s15
 801436a:	ee27 0a00 	vmul.f32	s0, s14, s0
 801436e:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8014372:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8014376:	f7fe fe09 	bl	8012f8c <__ieee754_sqrtf>
 801437a:	2c00      	cmp	r4, #0
 801437c:	d0ba      	beq.n	80142f4 <__ieee754_hypotf+0x30>
 801437e:	05e4      	lsls	r4, r4, #23
 8014380:	f104 547e 	add.w	r4, r4, #1065353216	@ 0x3f800000
 8014384:	ee07 4a90 	vmov	s15, r4
 8014388:	ee20 0a27 	vmul.f32	s0, s0, s15
 801438c:	e7b2      	b.n	80142f4 <__ieee754_hypotf+0x30>
 801438e:	2400      	movs	r4, #0
 8014390:	e7cd      	b.n	801432e <__ieee754_hypotf+0x6a>
 8014392:	f103 5308 	add.w	r3, r3, #570425344	@ 0x22000000
 8014396:	f102 5208 	add.w	r2, r2, #570425344	@ 0x22000000
 801439a:	ee00 3a10 	vmov	s0, r3
 801439e:	ee06 2a90 	vmov	s13, r2
 80143a2:	3c44      	subs	r4, #68	@ 0x44
 80143a4:	e7d2      	b.n	801434c <__ieee754_hypotf+0x88>
 80143a6:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 80143aa:	400b      	ands	r3, r1
 80143ac:	ee07 3a90 	vmov	s15, r3
 80143b0:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 80143b4:	eeb0 5a67 	vmov.f32	s10, s15
 80143b8:	ee90 5a24 	vfnms.f32	s10, s0, s9
 80143bc:	400a      	ands	r2, r1
 80143be:	ee07 2a10 	vmov	s14, r2
 80143c2:	ee26 0a85 	vmul.f32	s0, s13, s10
 80143c6:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80143ca:	eea5 0aa7 	vfma.f32	s0, s11, s15
 80143ce:	eea6 0a06 	vfma.f32	s0, s12, s12
 80143d2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80143d6:	e7ce      	b.n	8014376 <__ieee754_hypotf+0xb2>
 80143d8:	7f800000 	.word	0x7f800000
 80143dc:	7e800000 	.word	0x7e800000
 80143e0:	fffff000 	.word	0xfffff000

080143e4 <__ieee754_logf>:
 80143e4:	ee10 3a10 	vmov	r3, s0
 80143e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80143ec:	d106      	bne.n	80143fc <__ieee754_logf+0x18>
 80143ee:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8014588 <__ieee754_logf+0x1a4>
 80143f2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801458c <__ieee754_logf+0x1a8>
 80143f6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80143fa:	4770      	bx	lr
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	461a      	mov	r2, r3
 8014400:	da02      	bge.n	8014408 <__ieee754_logf+0x24>
 8014402:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014406:	e7f4      	b.n	80143f2 <__ieee754_logf+0xe>
 8014408:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801440c:	db02      	blt.n	8014414 <__ieee754_logf+0x30>
 801440e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014412:	4770      	bx	lr
 8014414:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014418:	bfb8      	it	lt
 801441a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8014590 <__ieee754_logf+0x1ac>
 801441e:	485d      	ldr	r0, [pc, #372]	@ (8014594 <__ieee754_logf+0x1b0>)
 8014420:	bfbe      	ittt	lt
 8014422:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8014426:	f06f 0118 	mvnlt.w	r1, #24
 801442a:	ee17 2a90 	vmovlt	r2, s15
 801442e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8014432:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8014436:	4410      	add	r0, r2
 8014438:	bfa8      	it	ge
 801443a:	2100      	movge	r1, #0
 801443c:	3b7f      	subs	r3, #127	@ 0x7f
 801443e:	440b      	add	r3, r1
 8014440:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8014444:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8014448:	4311      	orrs	r1, r2
 801444a:	ee00 1a10 	vmov	s0, r1
 801444e:	4952      	ldr	r1, [pc, #328]	@ (8014598 <__ieee754_logf+0x1b4>)
 8014450:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8014454:	f102 000f 	add.w	r0, r2, #15
 8014458:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801445c:	4001      	ands	r1, r0
 801445e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014462:	bb89      	cbnz	r1, 80144c8 <__ieee754_logf+0xe4>
 8014464:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446c:	d10f      	bne.n	801448e <__ieee754_logf+0xaa>
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 8087 	beq.w	8014582 <__ieee754_logf+0x19e>
 8014474:	ee07 3a90 	vmov	s15, r3
 8014478:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801459c <__ieee754_logf+0x1b8>
 801447c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80145a0 <__ieee754_logf+0x1bc>
 8014480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014484:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014488:	eea7 0a87 	vfma.f32	s0, s15, s14
 801448c:	4770      	bx	lr
 801448e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80145a4 <__ieee754_logf+0x1c0>
 8014492:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014496:	eee0 7a66 	vfms.f32	s15, s0, s13
 801449a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801449e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144a2:	b913      	cbnz	r3, 80144aa <__ieee754_logf+0xc6>
 80144a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80144a8:	4770      	bx	lr
 80144aa:	ee07 3a90 	vmov	s15, r3
 80144ae:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801459c <__ieee754_logf+0x1b8>
 80144b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144b6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80144ba:	ee37 0a40 	vsub.f32	s0, s14, s0
 80144be:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80145a0 <__ieee754_logf+0x1bc>
 80144c2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80144c6:	4770      	bx	lr
 80144c8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80144cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80144d0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80145a8 <__ieee754_logf+0x1c4>
 80144d4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80145ac <__ieee754_logf+0x1c8>
 80144d8:	4935      	ldr	r1, [pc, #212]	@ (80145b0 <__ieee754_logf+0x1cc>)
 80144da:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80144de:	4411      	add	r1, r2
 80144e0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80144e4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80144e8:	430a      	orrs	r2, r1
 80144ea:	2a00      	cmp	r2, #0
 80144ec:	ee07 3a90 	vmov	s15, r3
 80144f0:	ee26 5a06 	vmul.f32	s10, s12, s12
 80144f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80144f8:	ee25 7a05 	vmul.f32	s14, s10, s10
 80144fc:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80145b4 <__ieee754_logf+0x1d0>
 8014500:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014504:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80145b8 <__ieee754_logf+0x1d4>
 8014508:	eee7 5a87 	vfma.f32	s11, s15, s14
 801450c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80145bc <__ieee754_logf+0x1d8>
 8014510:	eee7 7a24 	vfma.f32	s15, s14, s9
 8014514:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80145c0 <__ieee754_logf+0x1dc>
 8014518:	eee7 4a87 	vfma.f32	s9, s15, s14
 801451c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80145c4 <__ieee754_logf+0x1e0>
 8014520:	eee4 7a87 	vfma.f32	s15, s9, s14
 8014524:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014528:	eee5 7a87 	vfma.f32	s15, s11, s14
 801452c:	dd1a      	ble.n	8014564 <__ieee754_logf+0x180>
 801452e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8014532:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014536:	ee27 7a00 	vmul.f32	s14, s14, s0
 801453a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801453e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014542:	b913      	cbnz	r3, 801454a <__ieee754_logf+0x166>
 8014544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014548:	e7ac      	b.n	80144a4 <__ieee754_logf+0xc0>
 801454a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801459c <__ieee754_logf+0x1b8>
 801454e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014556:	ee37 0a40 	vsub.f32	s0, s14, s0
 801455a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80145a0 <__ieee754_logf+0x1bc>
 801455e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8014562:	4770      	bx	lr
 8014564:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014568:	ee67 7a86 	vmul.f32	s15, s15, s12
 801456c:	b913      	cbnz	r3, 8014574 <__ieee754_logf+0x190>
 801456e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014572:	4770      	bx	lr
 8014574:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801459c <__ieee754_logf+0x1b8>
 8014578:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801457c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014580:	e7eb      	b.n	801455a <__ieee754_logf+0x176>
 8014582:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801458c <__ieee754_logf+0x1a8>
 8014586:	4770      	bx	lr
 8014588:	cc000000 	.word	0xcc000000
 801458c:	00000000 	.word	0x00000000
 8014590:	4c000000 	.word	0x4c000000
 8014594:	004afb20 	.word	0x004afb20
 8014598:	007ffff0 	.word	0x007ffff0
 801459c:	3717f7d1 	.word	0x3717f7d1
 80145a0:	3f317180 	.word	0x3f317180
 80145a4:	3eaaaaab 	.word	0x3eaaaaab
 80145a8:	3e1cd04f 	.word	0x3e1cd04f
 80145ac:	3e178897 	.word	0x3e178897
 80145b0:	ffcf5c30 	.word	0xffcf5c30
 80145b4:	3e638e29 	.word	0x3e638e29
 80145b8:	3ecccccd 	.word	0x3ecccccd
 80145bc:	3e3a3325 	.word	0x3e3a3325
 80145c0:	3e924925 	.word	0x3e924925
 80145c4:	3f2aaaab 	.word	0x3f2aaaab

080145c8 <_init>:
 80145c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ca:	bf00      	nop
 80145cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ce:	bc08      	pop	{r3}
 80145d0:	469e      	mov	lr, r3
 80145d2:	4770      	bx	lr

080145d4 <_fini>:
 80145d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d6:	bf00      	nop
 80145d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145da:	bc08      	pop	{r3}
 80145dc:	469e      	mov	lr, r3
 80145de:	4770      	bx	lr
